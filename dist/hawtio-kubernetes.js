/// <reference path="../libs/hawtio-forge/defs.d.ts"/>
/// <reference path="../libs/hawtio-forms/defs.d.ts"/>
/// <reference path="../libs/hawtio-ui/defs.d.ts"/>
/// <reference path="../libs/hawtio-utilities/defs.d.ts"/>
/// <reference path="../libs/hawtio-wiki/defs.d.ts"/>

var Kubernetes;
(function (Kubernetes) {
    var consts = (function () {
        function consts() {
        }
        Object.defineProperty(consts.prototype, "NAMESPACE_STORAGE_KEY", {
            get: function () {
                return "k8sSelectedNamespace";
            },
            enumerable: true,
            configurable: true
        });
        return consts;
    })();
    Kubernetes.consts = consts;
    Kubernetes.Constants = new consts();
    var WatchTypes = (function () {
        function WatchTypes() {
        }
        Object.defineProperty(WatchTypes, "NAMESPACES", {
            get: function () {
                return "namespaces";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WatchTypes, "ENDPOINTS", {
            get: function () {
                return "endpoints";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WatchTypes, "PODS", {
            get: function () {
                return "pods";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WatchTypes, "REPLICATION_CONTROLLERS", {
            get: function () {
                return "replicationcontrollers";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WatchTypes, "SERVICES", {
            get: function () {
                return "services";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WatchTypes, "TEMPLATES", {
            get: function () {
                return "templates";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WatchTypes, "ROUTES", {
            get: function () {
                return "routes";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WatchTypes, "BUILD_CONFIGS", {
            get: function () {
                return "buildconfigs";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WatchTypes, "BUILDS", {
            get: function () {
                return "builds";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WatchTypes, "DEPLOYMENT_CONFIGS", {
            get: function () {
                return "deploymentconfigs";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WatchTypes, "IMAGE_STREAMS", {
            get: function () {
                return "imagestreams";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WatchTypes, "POLICIES", {
            get: function () {
                return "policies";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WatchTypes, "POLICY_BINDINGS", {
            get: function () {
                return "policybindings";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WatchTypes, "ROLE_BINDINGS", {
            get: function () {
                return "rolebindings";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WatchTypes, "ROLES", {
            get: function () {
                return "roles";
            },
            enumerable: true,
            configurable: true
        });
        return WatchTypes;
    })();
    Kubernetes.WatchTypes = WatchTypes;
    var NamespacedTypes = (function () {
        function NamespacedTypes() {
        }
        Object.defineProperty(NamespacedTypes, "k8sTypes", {
            get: function () {
                return [
                    WatchTypes.ENDPOINTS,
                    WatchTypes.PODS,
                    WatchTypes.REPLICATION_CONTROLLERS,
                    WatchTypes.SERVICES
                ];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NamespacedTypes, "osTypes", {
            get: function () {
                return [
                    WatchTypes.TEMPLATES,
                    WatchTypes.BUILD_CONFIGS,
                    WatchTypes.ROUTES,
                    WatchTypes.BUILDS,
                    WatchTypes.BUILD_CONFIGS,
                    WatchTypes.DEPLOYMENT_CONFIGS,
                    WatchTypes.IMAGE_STREAMS,
                    WatchTypes.POLICIES,
                    WatchTypes.POLICY_BINDINGS,
                ];
            },
            enumerable: true,
            configurable: true
        });
        return NamespacedTypes;
    })();
    Kubernetes.NamespacedTypes = NamespacedTypes;
    var WatchActions = (function () {
        function WatchActions() {
        }
        Object.defineProperty(WatchActions, "ANY", {
            get: function () {
                return "*";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WatchActions, "ADDED", {
            get: function () {
                return "ADDED";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WatchActions, "MODIFIED", {
            get: function () {
                return "MODIFIED";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WatchActions, "DELETED", {
            get: function () {
                return "DELETED";
            },
            enumerable: true,
            configurable: true
        });
        return WatchActions;
    })();
    Kubernetes.WatchActions = WatchActions;
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesInterfaces.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.context = '/kubernetes';
    Kubernetes.hash = '#' + Kubernetes.context;
    Kubernetes.defaultRoute = Kubernetes.hash + '/apps';
    Kubernetes.pluginName = 'Kubernetes';
    Kubernetes.pluginPath = 'plugins/kubernetes/';
    Kubernetes.templatePath = Kubernetes.pluginPath + 'html/';
    Kubernetes.log = Logger.get(Kubernetes.pluginName);
    Kubernetes.keepPollingModel = true;
    Kubernetes.defaultIconUrl = Core.url("/img/kubernetes.svg");
    Kubernetes.hostIconUrl = Core.url("/img/host.svg");
    // this gets set as a pre-bootstrap task
    Kubernetes.osConfig = undefined;
    Kubernetes.masterUrl = "";
    Kubernetes.defaultApiVersion = "v1";
    Kubernetes.defaultOSApiVersion = "v1";
    Kubernetes.labelFilterTextSeparator = ",";
    Kubernetes.defaultNamespace = "default";
    Kubernetes.appSuffix = ".app";
    // kubernetes service names
    Kubernetes.kibanaServiceName = "kibana";
    Kubernetes.fabric8ForgeServiceName = "fabric8-forge";
    Kubernetes.gogsServiceName = "gogs";
    function kubernetesNamespacePath() {
        var ns = currentKubernetesNamespace();
        if (ns) {
            return "/namespaces/" + ns;
        }
        else {
            return "";
        }
    }
    Kubernetes.kubernetesNamespacePath = kubernetesNamespacePath;
    function apiPrefix() {
        var prefix = Core.pathGet(Kubernetes.osConfig, ['api', 'k8s', 'prefix']);
        if (!prefix) {
            prefix = 'api';
        }
        return Core.trimLeading(prefix, '/');
    }
    Kubernetes.apiPrefix = apiPrefix;
    function osApiPrefix() {
        var prefix = Core.pathGet(Kubernetes.osConfig, ['api', 'openshift', 'prefix']);
        if (!prefix) {
            prefix = 'oapi';
        }
        return Core.trimLeading(prefix, '/');
    }
    Kubernetes.osApiPrefix = osApiPrefix;
    function masterApiUrl() {
        return Kubernetes.masterUrl || "";
    }
    Kubernetes.masterApiUrl = masterApiUrl;
    function kubernetesApiPrefix() {
        return UrlHelpers.join(apiPrefix(), Kubernetes.defaultApiVersion);
    }
    Kubernetes.kubernetesApiPrefix = kubernetesApiPrefix;
    function openshiftApiPrefix() {
        return UrlHelpers.join(osApiPrefix(), Kubernetes.defaultOSApiVersion);
    }
    Kubernetes.openshiftApiPrefix = openshiftApiPrefix;
    function prefixForType(type) {
        if (type === Kubernetes.WatchTypes.NAMESPACES) {
            return kubernetesApiPrefix();
        }
        if (_.any(Kubernetes.NamespacedTypes.k8sTypes, function (t) { return t === type; })) {
            return kubernetesApiPrefix();
        }
        if (_.any(Kubernetes.NamespacedTypes.osTypes, function (t) { return t === type; })) {
            return openshiftApiPrefix();
        }
        return null;
    }
    Kubernetes.prefixForType = prefixForType;
    function kubernetesApiUrl() {
        return UrlHelpers.join(masterApiUrl(), kubernetesApiPrefix());
    }
    Kubernetes.kubernetesApiUrl = kubernetesApiUrl;
    function openshiftApiUrl() {
        return UrlHelpers.join(masterApiUrl(), openshiftApiPrefix());
    }
    Kubernetes.openshiftApiUrl = openshiftApiUrl;
    function updateOrCreateObject(object, KubernetesModel, success, error) {
        var kind = getKind(object);
        if (kind === "List") {
            Kubernetes.log.debug("Object is a list, deploying all objects");
            _.forEach(object.items, function (obj) {
                Kubernetes.log.debug("Deploying: ", obj);
                updateOrCreateObject(obj, KubernetesModel, success, error);
            });
            return;
        }
        if (!kind) {
            Kubernetes.log.debug("Object: ", object, " has no object type");
            return;
        }
        kind = kind.toLowerCase().pluralize();
        var resource = KubernetesModel[kind + 'Resource'];
        if (!resource) {
            Kubernetes.log.debug("Unable to find resource for kind: ", kind);
            return;
        }
        var name = getName(object);
        if (!name) {
            Kubernetes.log.debug("Object has no name: ", object);
            return;
        }
        var isUpdate = _.any(KubernetesModel[kind], function (n) { return n === name; });
        var action = isUpdate ? "Modified" : "Added";
        var successInternal = function (data) {
            Kubernetes.log.debug(action, data);
            if (!isUpdate) {
                KubernetesModel[kind].push(data);
            }
            if (success) {
                success(data);
            }
        };
        var errorInternal = function (err) {
            Kubernetes.log.debug("Failed to add/modify object: ", object, " error: ", err);
            if (error) {
                error(err);
            }
        };
        if (isUpdate) {
            Kubernetes.log.debug("Object already exists, updating...");
            resource.save({ id: name }, object, successInternal, errorInternal);
        }
        else {
            Kubernetes.log.debug("Object doesn't exist, creating...");
            resource.create({}, object, successInternal, errorInternal);
        }
    }
    Kubernetes.updateOrCreateObject = updateOrCreateObject;
    function createResource(thing, urlTemplate, $resource, KubernetesModel) {
        var prefix = prefixForType(thing);
        if (!prefix) {
            Kubernetes.log.debug("Invalid type given: ", thing);
            return null;
        }
        var params = {
            namespace: currentKubernetesNamespace
        };
        if (thing === "namespaces") {
            params = {};
        }
        var url = UrlHelpers.join(masterApiUrl(), prefix, urlTemplate);
        Kubernetes.log.debug("Url for ", thing, ": ", url);
        var resource = $resource(url, null, {
            query: { method: 'GET', isArray: false, params: params },
            create: { method: 'POST', params: params },
            save: { method: 'PUT', params: params },
            delete: { method: 'DELETE', params: _.extend({
                id: '@id'
            }, params) }
        });
        return resource;
    }
    Kubernetes.createResource = createResource;
    function imageRepositoriesRestURL() {
        return UrlHelpers.join(openshiftApiUrl(), kubernetesNamespacePath(), "/imagestreams");
    }
    Kubernetes.imageRepositoriesRestURL = imageRepositoriesRestURL;
    function deploymentConfigsRestURL() {
        return UrlHelpers.join(openshiftApiUrl(), kubernetesNamespacePath(), "/deploymentconfigs");
    }
    Kubernetes.deploymentConfigsRestURL = deploymentConfigsRestURL;
    function buildsLogsRestURL() {
        return UrlHelpers.join(openshiftApiUrl(), kubernetesNamespacePath(), "/proxy/buildlogs");
    }
    Kubernetes.buildsLogsRestURL = buildsLogsRestURL;
    function buildsRestURL() {
        return UrlHelpers.join(openshiftApiUrl(), kubernetesNamespacePath(), "/builds");
    }
    Kubernetes.buildsRestURL = buildsRestURL;
    function buildConfigHooksRestURL() {
        return UrlHelpers.join(openshiftApiUrl(), kubernetesNamespacePath(), "/buildconfighooks");
    }
    Kubernetes.buildConfigHooksRestURL = buildConfigHooksRestURL;
    function buildConfigsRestURL() {
        return UrlHelpers.join(openshiftApiUrl(), kubernetesNamespacePath(), "/buildconfigs");
    }
    Kubernetes.buildConfigsRestURL = buildConfigsRestURL;
    function routesRestURL() {
        return UrlHelpers.join(openshiftApiUrl(), kubernetesNamespacePath(), "/routes");
    }
    Kubernetes.routesRestURL = routesRestURL;
    function templatesRestURL() {
        return UrlHelpers.join(openshiftApiUrl(), kubernetesNamespacePath(), "/templates");
    }
    Kubernetes.templatesRestURL = templatesRestURL;
    function getNamespace(entity) {
        var answer = Core.pathGet(entity, ["metadata", "namespace"]);
        return answer ? answer : Kubernetes.defaultNamespace;
    }
    Kubernetes.getNamespace = getNamespace;
    function getLabels(entity) {
        var answer = Core.pathGet(entity, ["metadata", "labels"]);
        return answer ? answer : {};
    }
    Kubernetes.getLabels = getLabels;
    function getName(entity) {
        return Core.pathGet(entity, ["metadata", "name"]) || Core.pathGet(entity, "name") || Core.pathGet(entity, "id");
    }
    Kubernetes.getName = getName;
    function getKind(entity) {
        return Core.pathGet(entity, ["metadata", "kind"]) || Core.pathGet(entity, "kind");
    }
    Kubernetes.getKind = getKind;
    function getSelector(entity) {
        return Core.pathGet(entity, ["spec", "selector"]);
    }
    Kubernetes.getSelector = getSelector;
    function getHost(pod) {
        return Core.pathGet(pod, ["spec", "host"]);
    }
    Kubernetes.getHost = getHost;
    function getStatus(pod) {
        return Core.pathGet(pod, ["status", "phase"]);
    }
    Kubernetes.getStatus = getStatus;
    function getPorts(service) {
        return Core.pathGet(service, ["spec", "ports"]);
    }
    Kubernetes.getPorts = getPorts;
    function getCreationTimestamp(entity) {
        return Core.pathGet(entity, ["metadata", "creationTimestamp"]);
    }
    Kubernetes.getCreationTimestamp = getCreationTimestamp;
    ;
    //var fabricDomain = Fabric.jmxDomain;
    var fabricDomain = "io.fabric8";
    Kubernetes.mbean = fabricDomain + ":type=Kubernetes";
    Kubernetes.managerMBean = fabricDomain + ":type=KubernetesManager";
    Kubernetes.appViewMBean = fabricDomain + ":type=AppView";
    function isKubernetes(workspace) {
        // return workspace.treeContainsDomainAndProperties(fabricDomain, {type: "Kubernetes"});
        return true;
    }
    Kubernetes.isKubernetes = isKubernetes;
    function isKubernetesTemplateManager(workspace) {
        // return workspace.treeContainsDomainAndProperties(fabricDomain, {type: "KubernetesTemplateManager"});
        return true;
    }
    Kubernetes.isKubernetesTemplateManager = isKubernetesTemplateManager;
    function isAppView(workspace) {
        // return workspace.treeContainsDomainAndProperties(fabricDomain, {type: "AppView"});
        return true;
    }
    Kubernetes.isAppView = isAppView;
    function setJson($scope, id, collection) {
        $scope.id = id;
        if (!$scope.fetched) {
            return;
        }
        if (!id) {
            $scope.json = '';
            return;
        }
        if (!collection) {
            return;
        }
        var item = collection.find(function (item) {
            return getName(item) === id;
        });
        if (item) {
            $scope.json = angular.toJson(item, true);
            $scope.item = item;
        }
        else {
            $scope.id = undefined;
            $scope.json = '';
            $scope.item = undefined;
        }
    }
    Kubernetes.setJson = setJson;
    /**
     * Returns the labels text string using the <code>key1=value1,key2=value2,....</code> format
     */
    function labelsToString(labels, seperatorText) {
        if (seperatorText === void 0) { seperatorText = Kubernetes.labelFilterTextSeparator; }
        var answer = "";
        angular.forEach(labels, function (value, key) {
            var separator = answer ? seperatorText : "";
            answer += separator + key + "=" + value;
        });
        return answer;
    }
    Kubernetes.labelsToString = labelsToString;
    function initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL) {
        var injector = HawtioCore.injector;
        function hasService(name) {
            if (injector) {
                var ServiceRegistry = injector.get("ServiceRegistry");
                if (ServiceRegistry) {
                    return ServiceRegistry.hasService(name);
                }
            }
            return false;
        }
        $scope.hasServiceKibana = function () { return hasService(Kubernetes.kibanaServiceName); };
        $scope.hasServiceGogs = function () { return hasService(Kubernetes.gogsServiceName); };
        $scope.hasServiceForge = function () { return hasService(Kubernetes.fabric8ForgeServiceName); };
        $scope.viewTemplates = function () {
            $location.path('/kubernetes/templates');
        };
        $scope.namespace = KubernetesState.selectedNamespace || Kubernetes.defaultNamespace;
        $scope.forgeEnabled = isForgeEnabled();
        $scope.codeMirrorOptions = {
            lineWrapping: true,
            lineNumbers: true,
            readOnly: 'nocursor',
            mode: { name: "javascript", json: true }
        };
        $scope.resizeDialog = {
            controller: null,
            newReplicas: 0,
            dialog: new UI.Dialog(),
            onOk: function () {
                var resizeDialog = $scope.resizeDialog;
                resizeDialog.dialog.close();
                resizeController($http, KubernetesApiURL, resizeDialog.controller, resizeDialog.newReplicas, function () {
                    Kubernetes.log.debug("updated number of replicas");
                });
            },
            open: function (controller) {
                var resizeDialog = $scope.resizeDialog;
                resizeDialog.controller = controller;
                resizeDialog.newReplicas = Core.pathGet(controller, ["status", "replicas"]);
                resizeDialog.dialog.open();
                $timeout(function () {
                    $('#replicas').focus();
                }, 50);
            },
            close: function () {
                $scope.resizeDialog.dialog.close();
            }
        };
        $scope.triggerBuild = function (buildConfig) {
            var url = buildConfig.$triggerUrl;
            console.log("triggering build at url: " + url);
            if (url) {
                //var data = {};
                var data = null;
                var config = {
                    headers: {
                        'Content-Type': "application/json"
                    }
                };
                var name = Core.pathGet(buildConfig, ["metadata", "name"]);
                Core.notification('info', "Triggering build " + name);
                $http.post(url, data, config).success(function (data, status, headers, config) {
                    console.log("trigger worked! got data " + angular.toJson(data, true));
                    // TODO should we show some link to the build
                    Core.notification('info', "Building " + name);
                }).error(function (data, status, headers, config) {
                    Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
                    Core.notification('error', "Failed to trigger build for " + name + ". Returned code: " + status + " " + data);
                });
            }
            ;
        };
        // update the URL if the filter is changed
        $scope.$watch("tableConfig.filterOptions.filterText", function (text) {
            $location.search("q", text);
        });
        $scope.$on("labelFilterUpdate", function ($event, text) {
            var filterOptions = ($scope.tableConfig || {}).filterOptions || {};
            var currentFilter = filterOptions.filterText;
            if (Core.isBlank(currentFilter)) {
                filterOptions.filterText = text;
            }
            else {
                var expressions = currentFilter.split(/\s+/);
                if (expressions.any(text)) {
                    // lets exclude this filter expression
                    expressions = expressions.remove(text);
                    filterOptions.filterText = expressions.join(" ");
                }
                else {
                    filterOptions.filterText = currentFilter + " " + text;
                }
            }
            $scope.id = undefined;
        });
    }
    Kubernetes.initShared = initShared;
    /**
     * Returns the service link URL for either the service name or the service object
     */
    function serviceLinkUrl(service) {
        if (angular.isObject(service)) {
            var portalIP = service.$host;
            // lets assume no custom port for now for external routes
            var port = null;
            var protocol = "http://";
            var spec = service.spec;
            if (spec) {
                if (!portalIP) {
                    portalIP = spec.portalIP;
                }
                var hasHttps = false;
                var hasHttp = false;
                angular.forEach(spec.ports, function (portSpec) {
                    var p = portSpec.port;
                    if (p) {
                        if (p === 443) {
                            hasHttps = true;
                        }
                        else if (p === 80) {
                            hasHttp = true;
                        }
                        if (!port) {
                            port = p;
                        }
                    }
                });
            }
            if (portalIP) {
                if (hasHttps) {
                    return "https://" + portalIP;
                }
                else if (hasHttp) {
                    return "http://" + portalIP;
                }
                else if (port) {
                    return protocol + portalIP + ":" + port + "/";
                }
                else {
                    return protocol + portalIP;
                }
            }
        }
        else if (service) {
            var serviceId = service.toString();
            if (serviceId) {
                var ServiceRegistry = getServiceRegistry();
                if (ServiceRegistry) {
                    return ServiceRegistry.serviceLink(serviceId) || "";
                }
            }
        }
        return "";
    }
    Kubernetes.serviceLinkUrl = serviceLinkUrl;
    /**
     * Given the list of pods lets iterate through them and find all pods matching the selector
     * and return counters based on the status of the pod
     */
    function createPodCounters(selector, pods, outputPods, podLinkQuery) {
        if (outputPods === void 0) { outputPods = []; }
        if (podLinkQuery === void 0) { podLinkQuery = null; }
        var filterFn;
        if (angular.isFunction(selector)) {
            filterFn = selector;
        }
        else {
            filterFn = function (pod) { return selectorMatches(selector, getLabels(pod)); };
        }
        var answer = {
            podsLink: "",
            valid: 0,
            waiting: 0,
            error: 0
        };
        if (selector) {
            if (!podLinkQuery) {
                podLinkQuery = Kubernetes.labelsToString(selector, " ");
            }
            answer.podsLink = Core.url("/kubernetes/pods?q=" + encodeURIComponent(podLinkQuery));
            angular.forEach(pods, function (pod) {
                if (filterFn(pod)) {
                    outputPods.push(pod);
                    var status = getStatus(pod);
                    if (status) {
                        var lower = status.toLowerCase();
                        if (lower.startsWith("run")) {
                            answer.valid += 1;
                        }
                        else if (lower.startsWith("wait") || lower.startsWith("pend")) {
                            answer.waiting += 1;
                        }
                        else if (lower.startsWith("term") || lower.startsWith("error") || lower.startsWith("fail")) {
                            answer.error += 1;
                        }
                    }
                    else {
                        answer.error += 1;
                    }
                }
            });
        }
        return answer;
    }
    Kubernetes.createPodCounters = createPodCounters;
    /**
     * Converts the given json into an array of items. If the json contains a nested set of items then that is sorted; so that services
     * are processed first; then turned into an array. Otherwise the json is put into an array so it can be processed polymorphically
     */
    function convertKubernetesJsonToItems(json) {
        var items = json.items;
        if (angular.isArray(items)) {
            // TODO we could check for List or Config types here and warn if not
            // sort the services first
            var answer = [];
            items.forEach(function (item) {
                if (item.kind === "Service") {
                    answer.push(item);
                }
            });
            items.forEach(function (item) {
                if (item.kind !== "Service") {
                    answer.push(item);
                }
            });
            return answer;
        }
        else {
            return [json];
        }
    }
    Kubernetes.convertKubernetesJsonToItems = convertKubernetesJsonToItems;
    function isV1beta1Or2() {
        return Kubernetes.defaultApiVersion === "v1beta1" || Kubernetes.defaultApiVersion === "v1beta2";
    }
    Kubernetes.isV1beta1Or2 = isV1beta1Or2;
    /**
     * Returns a link to the detail page for the given entity
     */
    function entityPageLink(entity) {
        if (entity) {
            var id = getName(entity);
            var kind = getKind(entity);
            if (kind && id) {
                var path = kind.substring(0, 1).toLowerCase() + kind.substring(1) + "s";
                var namespace = getNamespace(entity);
                if (namespace && !isIgnoreNamespaceKind(kind)) {
                    return UrlHelpers.join('/kubernetes/namespace', namespace, path, id);
                }
                else {
                    return UrlHelpers.join('/kubernetes', path, id);
                }
            }
        }
        return null;
    }
    Kubernetes.entityPageLink = entityPageLink;
    function resourceKindToUriPath(kind) {
        var kindPath = kind.toLowerCase() + "s";
        if (kindPath === "replicationControllers" && !isV1beta1Or2()) {
            kindPath = "replicationcontrollers";
        }
        return kindPath;
    }
    Kubernetes.resourceKindToUriPath = resourceKindToUriPath;
    function isIgnoreNamespaceKind(kind) {
        return kind === "Host" || kind === "Minion";
    }
    /**
     * Returns the root URL for the kind
     */
    function kubernetesUrlForKind(KubernetesApiURL, kind, namespace, path) {
        if (namespace === void 0) { namespace = null; }
        if (path === void 0) { path = null; }
        var pathSegment = "";
        if (path) {
            pathSegment = "/" + Core.trimLeading(path, "/");
        }
        var kindPath = resourceKindToUriPath(kind);
        var ignoreNamespace = isIgnoreNamespaceKind(kind);
        if (isV1beta1Or2() || ignoreNamespace) {
            var postfix = "";
            if (namespace && !ignoreNamespace) {
                postfix = "?namespace=" + namespace;
            }
            return UrlHelpers.join(KubernetesApiURL, kindPath, pathSegment, postfix);
        }
        else {
            return UrlHelpers.join(KubernetesApiURL, "/namespaces/", namespace, kindPath, pathSegment);
        }
    }
    Kubernetes.kubernetesUrlForKind = kubernetesUrlForKind;
    ;
    /**
     * Returns the base URL for the kind of kubernetes resource or null if it cannot be found
     */
    function kubernetesUrlForItemKind(KubernetesApiURL, json) {
        var kind = json.kind;
        if (kind) {
            return kubernetesUrlForKind(KubernetesApiURL, kind, json.namespace);
        }
        else {
            Kubernetes.log.warn("Ignoring missing kind " + kind + " for kubernetes json: " + angular.toJson(json));
            return null;
        }
    }
    Kubernetes.kubernetesUrlForItemKind = kubernetesUrlForItemKind;
    function kubernetesProxyUrlForService(KubernetesApiURL, service, path) {
        if (path === void 0) { path = null; }
        var pathSegment = "";
        if (path) {
            pathSegment = "/" + Core.trimLeading(path, "/");
        }
        else {
            pathSegment = "/";
        }
        var namespace = getNamespace(service);
        if (isV1beta1Or2()) {
            var postfix = "?namespace=" + namespace;
            return UrlHelpers.join(KubernetesApiURL, "/api/" + Kubernetes.defaultApiVersion + "/proxy" + kubernetesNamespacePath() + "/services/" + getName(service) + pathSegment + postfix);
        }
        else {
            return UrlHelpers.join(KubernetesApiURL, "/api/" + Kubernetes.defaultApiVersion + "/proxy/namespaces/" + namespace + "/services/" + getName(service) + pathSegment);
        }
    }
    Kubernetes.kubernetesProxyUrlForService = kubernetesProxyUrlForService;
    function buildConfigRestUrl(id) {
        return UrlHelpers.join(buildConfigsRestURL(), id);
    }
    Kubernetes.buildConfigRestUrl = buildConfigRestUrl;
    function deploymentConfigRestUrl(id) {
        return UrlHelpers.join(deploymentConfigsRestURL(), id);
    }
    Kubernetes.deploymentConfigRestUrl = deploymentConfigRestUrl;
    function imageRepositoryRestUrl(id) {
        return UrlHelpers.join(imageRepositoriesRestURL(), id);
    }
    Kubernetes.imageRepositoryRestUrl = imageRepositoryRestUrl;
    function buildRestUrl(id) {
        return UrlHelpers.join(buildsRestURL(), id);
    }
    Kubernetes.buildRestUrl = buildRestUrl;
    function buildLogsRestUrl(id) {
        return UrlHelpers.join(buildsLogsRestURL(), id);
    }
    Kubernetes.buildLogsRestUrl = buildLogsRestUrl;
    /**
     * Runs the given application JSON
     */
    function runApp($location, $scope, $http, KubernetesApiURL, json, name, onSuccessFn, namespace, onCompleteFn) {
        if (name === void 0) { name = "App"; }
        if (onSuccessFn === void 0) { onSuccessFn = null; }
        if (namespace === void 0) { namespace = null; }
        if (onCompleteFn === void 0) { onCompleteFn = null; }
        if (json) {
            if (angular.isString(json)) {
                json = angular.fromJson(json);
            }
            name = name || "App";
            var postfix = namespace ? " in namespace " + namespace : "";
            Core.notification('info', "Running " + name + postfix);
            var items = convertKubernetesJsonToItems(json);
            angular.forEach(items, function (item) {
                var url = kubernetesUrlForItemKind(KubernetesApiURL, item);
                if (url) {
                    $http.post(url, item).success(function (data, status, headers, config) {
                        Kubernetes.log.debug("Got status: " + status + " on url: " + url + " data: " + data + " after posting: " + angular.toJson(item));
                        if (angular.isFunction(onCompleteFn)) {
                            onCompleteFn();
                        }
                        Core.$apply($scope);
                    }).error(function (data, status, headers, config) {
                        var message = null;
                        if (angular.isObject(data)) {
                            message = data.message;
                            var reason = data.reason;
                            if (reason === "AlreadyExists") {
                                // lets ignore duplicates
                                Kubernetes.log.debug("entity already exists at " + url);
                                return;
                            }
                        }
                        if (!message) {
                            message = "Failed to POST to " + url + " got status: " + status;
                        }
                        Kubernetes.log.warn("Failed to save " + url + " status: " + status + " response: " + angular.toJson(data, true));
                        Core.notification('error', message);
                    });
                }
            });
        }
    }
    Kubernetes.runApp = runApp;
    /**
     * Returns true if the current status of the pod is running
     */
    function isRunning(podCurrentState) {
        var status = (podCurrentState || {}).phase;
        if (status) {
            var lower = status.toLowerCase();
            return lower.startsWith("run");
        }
        else {
            return false;
        }
    }
    Kubernetes.isRunning = isRunning;
    /**
     * Returns true if the labels object has all of the key/value pairs from the selector
     */
    function selectorMatches(selector, labels) {
        if (angular.isObject(labels)) {
            var answer = true;
            var count = 0;
            angular.forEach(selector, function (value, key) {
                count++;
                if (answer && labels[key] !== value) {
                    answer = false;
                }
            });
            return answer && count > 0;
        }
        else {
            return false;
        }
    }
    Kubernetes.selectorMatches = selectorMatches;
    /**
     * Returns the service registry
     */
    function getServiceRegistry() {
        var injector = HawtioCore.injector;
        return injector ? injector.get("ServiceRegistry") : null;
    }
    Kubernetes.getServiceRegistry = getServiceRegistry;
    /**
     * Returns a link to the kibana logs web application
     */
    function kibanaLogsLink(ServiceRegistry) {
        var link = ServiceRegistry.serviceLink(Kubernetes.kibanaServiceName);
        if (link) {
            if (!link.endsWith("/")) {
                link += "/";
            }
            return link + "#/dashboard/Fabric8";
        }
        else {
            return null;
        }
    }
    Kubernetes.kibanaLogsLink = kibanaLogsLink;
    function openLogsForPods(ServiceRegistry, $window, namespace, pods) {
        var link = kibanaLogsLink(ServiceRegistry);
        if (link) {
            var query = "";
            var count = 0;
            angular.forEach(pods, function (item) {
                var id = getName(item);
                if (id) {
                    var space = query ? " OR " : "";
                    count++;
                    query += space + '"' + id + '"';
                }
            });
            if (query) {
                if (count > 1) {
                    query = "(" + query + ")";
                }
                query = 'pod_namespace:"' + namespace + '" AND pod:' + query;
                link += "?_a=(query:(query_string:(query:'" + query + "')))";
                var newWindow = $window.open(link, "viewLogs");
            }
        }
    }
    Kubernetes.openLogsForPods = openLogsForPods;
    function resizeController($http, KubernetesApiURL, replicationController, newReplicas, onCompleteFn) {
        if (onCompleteFn === void 0) { onCompleteFn = null; }
        var id = getName(replicationController);
        var namespace = getNamespace(replicationController) || "";
        var url = kubernetesUrlForKind(KubernetesApiURL, "ReplicationController", namespace, id);
        $http.get(url).success(function (data, status, headers, config) {
            if (data) {
                var desiredState = data.spec;
                if (!desiredState) {
                    desiredState = {};
                    data.spec = desiredState;
                }
                desiredState.replicas = newReplicas;
                $http.put(url, data).success(function (data, status, headers, config) {
                    Kubernetes.log.debug("updated controller " + url);
                    if (angular.isFunction(onCompleteFn)) {
                        onCompleteFn();
                    }
                }).error(function (data, status, headers, config) {
                    Kubernetes.log.warn("Failed to save " + url + " " + data + " " + status);
                });
            }
        }).error(function (data, status, headers, config) {
            Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
        });
    }
    Kubernetes.resizeController = resizeController;
    function statusTextToCssClass(text) {
        if (text) {
            var lower = text.toLowerCase();
            if (lower.startsWith("run") || lower.startsWith("ok")) {
                return 'fa fa-play-circle green';
            }
            else if (lower.startsWith("wait") || lower.startsWith("pend")) {
                return 'fa fa-download';
            }
            else if (lower.startsWith("term") || lower.startsWith("error") || lower.startsWith("fail")) {
                return 'fa fa-off orange';
            }
            else if (lower.startsWith("succeeded")) {
                return 'fa fa-check-circle-o green';
            }
        }
        return 'fa fa-question red';
    }
    Kubernetes.statusTextToCssClass = statusTextToCssClass;
    function podStatus(pod) {
        return getStatus(pod);
    }
    Kubernetes.podStatus = podStatus;
    function createAppViewPodCounters(appView) {
        var array = [];
        var map = {};
        var pods = appView.pods;
        var lowestDate = null;
        angular.forEach(pods, function (pod) {
            var selector = getLabels(pod);
            var selectorText = Kubernetes.labelsToString(selector, " ");
            var answer = map[selector];
            if (!answer) {
                answer = {
                    labelText: selectorText,
                    podsLink: Core.url("/kubernetes/pods?q=" + encodeURIComponent(selectorText)),
                    valid: 0,
                    waiting: 0,
                    error: 0
                };
                map[selector] = answer;
                array.push(answer);
            }
            var status = (podStatus(pod) || "Error").toLowerCase();
            if (status.startsWith("run") || status.startsWith("ok")) {
                answer.valid += 1;
            }
            else if (status.startsWith("wait") || status.startsWith("pwnd")) {
                answer.waiting += 1;
            }
            else {
                answer.error += 1;
            }
            var creationTimestamp = getCreationTimestamp(pod);
            if (creationTimestamp) {
                var d = new Date(creationTimestamp);
                if (!lowestDate || d < lowestDate) {
                    lowestDate = d;
                }
            }
        });
        appView.$creationDate = lowestDate;
        return array;
    }
    Kubernetes.createAppViewPodCounters = createAppViewPodCounters;
    function createAppViewServiceViews(appView) {
        var array = [];
        var pods = appView.pods;
        angular.forEach(pods, function (pod) {
            var id = getName(pod);
            if (id) {
                var abbrev = id;
                var idx = id.indexOf("-");
                if (idx > 1) {
                    abbrev = id.substring(0, idx);
                }
                pod.idAbbrev = abbrev;
            }
            pod.statusClass = statusTextToCssClass(podStatus(pod));
        });
        var services = appView.services || [];
        var replicationControllers = appView.replicationControllers || [];
        var size = Math.max(services.length, replicationControllers.length, 1);
        var appName = appView.$info.name;
        for (var i = 0; i < size; i++) {
            var service = services[i];
            var replicationController = replicationControllers[i];
            var controllerId = getName(replicationController);
            var name = getName(service) || controllerId;
            var address = Core.pathGet(service, ["spec", "portalIP"]);
            if (!name && pods.length) {
                name = pods[0].idAbbrev;
            }
            if (!appView.$info.name) {
                appView.$info.name = name;
            }
            if (!appView.id && pods.length) {
                appView.id = getName(pods[0]);
            }
            if (i > 0) {
                appName = name;
            }
            var podCount = pods.length;
            var podCountText = podCount + " pod" + (podCount > 1 ? "s" : "");
            var view = {
                appName: appName || name,
                name: name,
                createdDate: appView.$creationDate,
                podCount: podCount,
                podCountText: podCountText,
                address: address,
                controllerId: controllerId,
                service: service,
                replicationController: replicationController,
                pods: pods
            };
            array.push(view);
        }
        return array;
    }
    Kubernetes.createAppViewServiceViews = createAppViewServiceViews;
    /**
     * converts a git path into an accessible URL for the browser
     */
    function gitPathToUrl(iconPath, branch) {
        if (branch === void 0) { branch = "master"; }
        return (HawtioCore.injector.get('AppLibraryURL') || '') + "/git/" + branch + iconPath;
    }
    Kubernetes.gitPathToUrl = gitPathToUrl;
    function enrichBuildConfig(buildConfig, sortedBuilds) {
        if (buildConfig) {
            var triggerUrl = null;
            var metadata = buildConfig.metadata || {};
            var name = metadata.name;
            buildConfig.$name = name;
            if (name) {
                angular.forEach([false, true], function (flag) {
                    angular.forEach(buildConfig.triggers, function (trigger) {
                        if (!triggerUrl) {
                            var type = trigger.type;
                            if (type === "generic" || flag) {
                                var generic = trigger[type];
                                if (type && generic) {
                                    var secret = generic.secret;
                                    if (secret) {
                                        triggerUrl = UrlHelpers.join(buildConfigHooksRestURL(), name, secret, type);
                                        buildConfig.$triggerUrl = triggerUrl;
                                    }
                                }
                            }
                        }
                    });
                });
                // lets find the latest build...
                if (sortedBuilds) {
                    buildConfig.$lastBuild = _.find(sortedBuilds, {
                        metadata: {
                            labels: {
                                buildconfig: name
                            }
                        }
                    });
                }
            }
            var $fabric8Views = {};
            function defaultPropertiesIfNotExist(name, object, autoCreate) {
                if (autoCreate === void 0) { autoCreate = false; }
                var view = $fabric8Views[name];
                if (autoCreate && !view) {
                    view = {};
                    $fabric8Views[name] = view;
                }
                if (view) {
                    angular.forEach(object, function (value, property) {
                        var current = view[property];
                        if (!current) {
                            view[property] = value;
                        }
                    });
                }
            }
            var labels = metadata.labels || {};
            var annotations = metadata.annotations || {};
            // lets default the repo and user
            buildConfig.$user = annotations["fabric8.jenkins/user"] || labels["user"];
            buildConfig.$repo = annotations["fabric8.jenkins/repo"] || labels["repo"];
            angular.forEach(annotations, function (value, key) {
                var parts = key.split('/', 2);
                if (parts.length > 1) {
                    var linkId = parts[0];
                    var property = parts[1];
                    if (linkId && property && linkId.startsWith("fabric8.link")) {
                        var link = $fabric8Views[linkId];
                        if (!link) {
                            link = {
                                class: linkId
                            };
                            $fabric8Views[linkId] = link;
                        }
                        link[property] = value;
                    }
                }
            });
            if (buildConfig.$user && buildConfig.$repo) {
                // browse gogs repo view
                var gogsUrl = serviceLinkUrl(Kubernetes.gogsServiceName);
                if (gogsUrl) {
                    defaultPropertiesIfNotExist("fabric8.link.browseGogs.view", {
                        label: "Browse...",
                        url: UrlHelpers.join(gogsUrl, buildConfig.$user, buildConfig.$repo),
                        description: "Browse the source code of this repository",
                        iconClass: "fa fa-external-link"
                    }, true);
                }
                // run forge commands view
                defaultPropertiesIfNotExist("fabric8.link.forgeCommand.view", {
                    label: "Command...",
                    url: UrlHelpers.join("/forge/commands/user", buildConfig.$user, buildConfig.$repo),
                    description: "Perform an action on this project",
                    iconClass: "fa fa-play-circle"
                }, true);
            }
            // add some icons and descriptions
            defaultPropertiesIfNotExist("fabric8.link.jenkins.job", {
                iconClass: "fa fa-tasks",
                description: "View the Jenkins Job for this build"
            });
            defaultPropertiesIfNotExist("fabric8.link.jenkins.monitor", {
                iconClass: "fa fa-tachometer",
                description: "View the Jenkins Monitor dashboard for this project"
            });
            defaultPropertiesIfNotExist("fabric8.link.jenkins.pipeline", {
                iconClass: "fa fa-arrow-circle-o-right",
                description: "View the Jenkins Pipeline for this project"
            });
            buildConfig.$fabric8Views = $fabric8Views;
        }
    }
    Kubernetes.enrichBuildConfig = enrichBuildConfig;
    function enrichBuildConfigs(buildConfigs, sortedBuilds) {
        angular.forEach(buildConfigs, function (buildConfig) {
            enrichBuildConfig(buildConfig, sortedBuilds);
        });
        return buildConfigs;
    }
    Kubernetes.enrichBuildConfigs = enrichBuildConfigs;
    function enrichBuilds(builds) {
        angular.forEach(builds, function (build) {
            enrichBuild(build);
        });
        return _.sortBy(builds, "$creationDate").reverse();
    }
    Kubernetes.enrichBuilds = enrichBuilds;
    function enrichBuild(build) {
        if (build) {
            var metadata = build.metadata || {};
            var name = getName(build);
            var namespace = getNamespace(build);
            build.$name = name;
            build.$namespace = namespace;
            var nameArray = name.split("-");
            var nameArrayLength = nameArray.length;
            build.$shortName = (nameArrayLength > 4) ? nameArray.slice(0, nameArrayLength - 4).join("-") : name.substring(0, 30);
            var labels = getLabels(Kubernetes.route);
            var configId = labels.buildconfig;
            build.$configId = configId;
            if (configId) {
                build.$configLink = UrlHelpers.join("kubernetes/buildConfigs", configId);
            }
            var creationTimestamp = getCreationTimestamp(build);
            if (creationTimestamp) {
                var d = new Date(creationTimestamp);
                build.$creationDate = d;
            }
            if (name) {
                build.$viewLink = UrlHelpers.join("kubernetes/builds", name);
                build.$logsLink = UrlHelpers.join("kubernetes/buildLogs", name);
            }
            var podName = build.podName;
            if (podName && namespace) {
                var podNameArray = podName.split("-");
                var podNameArrayLength = podNameArray.length;
                build.$podShortName = (podNameArrayLength > 5) ? podNameArray[podNameArrayLength - 5] : podName.substring(0, 30);
                build.$podLink = UrlHelpers.join("kubernetes/namespace", namespace, "pods", podName);
            }
        }
        return build;
    }
    Kubernetes.enrichBuild = enrichBuild;
    function enrichDeploymentConfig(deploymentConfig) {
        if (deploymentConfig) {
            var triggerUrl = null;
            var name = Core.pathGet(deploymentConfig, ["metadata", "name"]);
            deploymentConfig.$name = name;
            var found = false;
            angular.forEach(deploymentConfig.triggers, function (trigger) {
                var type = trigger.type;
                if (!deploymentConfig.$imageChangeParams && type === "ImageChange") {
                    var imageChangeParams = trigger.imageChangeParams;
                    if (imageChangeParams) {
                        var containerNames = imageChangeParams.containerNames || [];
                        imageChangeParams.$containerNames = containerNames.join(" ");
                        deploymentConfig.$imageChangeParams = imageChangeParams;
                    }
                }
            });
        }
    }
    Kubernetes.enrichDeploymentConfig = enrichDeploymentConfig;
    function enrichDeploymentConfigs(deploymentConfigs) {
        angular.forEach(deploymentConfigs, function (deploymentConfig) {
            enrichDeploymentConfig(deploymentConfig);
        });
        return deploymentConfigs;
    }
    Kubernetes.enrichDeploymentConfigs = enrichDeploymentConfigs;
    function enrichImageRepository(imageRepository) {
        if (imageRepository) {
            var triggerUrl = null;
            var name = Core.pathGet(imageRepository, ["metadata", "name"]);
            imageRepository.$name = name;
        }
    }
    Kubernetes.enrichImageRepository = enrichImageRepository;
    function enrichImageRepositories(imageRepositories) {
        angular.forEach(imageRepositories, function (imageRepository) {
            enrichImageRepository(imageRepository);
        });
        return imageRepositories;
    }
    Kubernetes.enrichImageRepositories = enrichImageRepositories;
    var labelColors = {
        'version': 'background-blue',
        'name': 'background-light-green',
        'container': 'background-light-grey'
    };
    function containerLabelClass(labelType) {
        if (!(labelType in labelColors)) {
            return 'mouse-pointer';
        }
        else
            return labelColors[labelType] + ' mouse-pointer';
    }
    Kubernetes.containerLabelClass = containerLabelClass;
    /**
     * Returns true if the fabric8 forge plugin is enabled
     */
    function isForgeEnabled() {
        // TODO should return true if the service "fabric8-forge" is valid
        return true;
    }
    Kubernetes.isForgeEnabled = isForgeEnabled;
    /**
     * Returns the current kubernetes selected namespace or the default one
     */
    function currentKubernetesNamespace() {
        var injector = HawtioCore.injector;
        if (injector) {
            var KubernetesState = injector.get("KubernetesState") || {};
            return KubernetesState.selectedNamespace || Kubernetes.defaultNamespace;
        }
        return Kubernetes.defaultNamespace;
    }
    Kubernetes.currentKubernetesNamespace = currentKubernetesNamespace;
    /**
     * Configures the json schema
     */
    function configureSchema() {
        angular.forEach(Kubernetes.schema.definitions, function (definition, name) {
            var properties = definition.properties;
            if (properties) {
                var hideProperties = ["creationTimestamp", "kind", "apiVersion", "annotations", "additionalProperties", "namespace", "resourceVersion", "selfLink", "uid"];
                angular.forEach(hideProperties, function (propertyName) {
                    var property = properties[propertyName];
                    if (property) {
                        property["hidden"] = true;
                    }
                });
                angular.forEach(properties, function (property, propertyName) {
                    var ref = property["$ref"];
                    var type = property["type"];
                    if (ref && (!type || type === "object")) {
                        property["type"] = ref;
                    }
                    if (type === "array") {
                        var items = property["items"];
                        if (items) {
                            var ref = items["$ref"];
                            var type = items["type"];
                            if (ref && (!type || type === "object")) {
                                items["type"] = ref;
                            }
                        }
                    }
                });
            }
            Kubernetes.schema.definitions.os_build_WebHookTrigger.properties.secret.type = "password";
        });
    }
    Kubernetes.configureSchema = configureSchema;
    /**
     * Lets remove any enriched data to leave the original json intact
     */
    function toRawJson(item) {
        var o = angular.copy(item);
        angular.forEach(o, function (value, key) {
            if (key.startsWith("$") || key.startsWith("_")) {
                delete o[key];
            }
        });
        return JSON.stringify(o, null, 2); // spacing level = 2
    }
    Kubernetes.toRawJson = toRawJson;
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="../../kubernetes/ts/kubernetesHelpers.ts"/>
var Project;
(function (Project) {
    Project.context = '/project';
    Project.hash = '#' + Project.context;
    Project.pluginName = 'Project';
    Project.log = Logger.get(Project.pluginName);
    Project.pluginPath = 'plugins/project/';
    Project.templatePath = Project.pluginPath + 'html/';
    Project.gogsRestURL = "/kubernetes/api/" + Kubernetes.defaultApiVersion + "/proxy/services/gogs-http-service/api/v1";
    Project.gogsUserRepoRestURL = Project.gogsRestURL + "/user/repos";
})(Project || (Project = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="../../kubernetes/ts/kubernetesHelpers.ts"/>
/// <reference path="projectHelpers.ts"/>
var Project;
(function (Project) {
    Project._module = angular.module(Project.pluginName, [Kubernetes.pluginName]);
    Project.controller = PluginHelpers.createControllerFunction(Project._module, Project.pluginName);
    Project.route = PluginHelpers.createRoutingFunction(Project.templatePath);
    Project._module.config(['$routeProvider', function ($routeProvider) {
        $routeProvider.when(UrlHelpers.join(Project.context, '/create'), Project.route('projectCreate.html', false));
    }]);
    Project._module.factory('ForgeApiURL', ['jolokiaUrl', 'jolokia', '$q', '$rootScope', function (jolokiaUrl, jolokia, $q, $rootScope) {
        return Kubernetes.kubernetesApiUrl() + "/proxy" + Kubernetes.kubernetesNamespacePath() + "/services/fabric8-forge/api/forge";
    }]);
    hawtioPluginLoader.addModule(Project.pluginName);
})(Project || (Project = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="projectHelpers.ts"/>
/// <reference path="projectPlugin.ts"/>
var Project;
(function (Project) {
    Project.ProjectController = Project.controller("ProjectController", ["$scope", "KubernetesModel", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, $templateCache, $location, $routeParams, $http, $timeout, KubernetesApiURL) {
        $scope.model = KubernetesModel;
        $scope.entity = {
            name: ""
        };
        $scope.$on('$routeUpdate', function ($event) {
            updateData();
        });
        // TODO add actual login/pwd or OAuth
        var authorizationHeader = "Basic TODO";
        // TODO take this from the service host!
        $scope.create = function () {
            var url = Project.gogsUserRepoRestURL;
            console.log("Creating project " + angular.toJson($scope.entity, true));
            console.log("Posting to url: " + url);
            var data = $scope.entity;
            var config = {
                headers: {
                    'withCredentials': true,
                    'Authorization': authorizationHeader,
                    'Content-Type': "application/json"
                }
            };
            $http.post(url, data, config).success(function (data, status, headers, config) {
                console.log("project created! got data " + angular.toJson(data, true));
                createProject(data);
            }).error(function (data, status, headers, config) {
                Project.log.warn("Failed to load " + url + " " + data + " " + status);
                Core.notification('error', "Failed to create git repository " + name + ". Returned code: " + status + " " + data);
            });
        };
        updateData();
        function createProject(data) {
            var full_name = data.full_name;
            if (full_name) {
                var gitUrl = Core.url(Project.gogsRestURL + "/" + full_name + ".git");
                console.log("Creating a git repo for " + full_name + " at : " + gitUrl);
            }
            // TODO lets forward to the create project wizard...
        }
        function updateData() {
            $scope.builds = [];
            var url = Project.gogsUserRepoRestURL;
            var config = {
                headers: {
                    'withCredentials': true,
                    'Authorization': authorizationHeader
                }
            };
            delete $http.defaults.headers.common["Accept"];
            $http.get(url, config).success(function (data, status, headers, config) {
                if (data) {
                    console.log("got repos: " + angular.toJson(data, true));
                    $scope.builds = data;
                }
                $scope.fetched = true;
                Core.$apply($scope);
            }).error(function (data, status, headers, config) {
                $scope.fetched = true;
                Project.log.warn("Failed to load " + url + " " + data + " " + status);
            });
        }
    }]);
})(Project || (Project = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes._module = angular.module(Kubernetes.pluginName, ['hawtio-core', 'hawtio-ui', 'wiki', 'restmod', 'ui.codemirror']);
    Kubernetes.controller = PluginHelpers.createControllerFunction(Kubernetes._module, Kubernetes.pluginName);
    Kubernetes.route = PluginHelpers.createRoutingFunction(Kubernetes.templatePath);
    Kubernetes._module.config(['$routeProvider', function ($routeProvider) {
        $routeProvider.when(UrlHelpers.join(Kubernetes.context, '/pods'), Kubernetes.route('pods.html', false)).when(UrlHelpers.join(Kubernetes.context, '/namespace/:namespace/podCreate'), Kubernetes.route('podCreate.html', false)).when(UrlHelpers.join(Kubernetes.context, '/namespace/:namespace/podEdit/:id'), Kubernetes.route('podEdit.html', false)).when(UrlHelpers.join(Kubernetes.context, '/namespace/:namespace/pods'), Kubernetes.route('pods.html', false)).when(UrlHelpers.join(Kubernetes.context, '/namespace/:namespace/pods/:id'), Kubernetes.route('pod.html', false)).when(UrlHelpers.join(Kubernetes.context, 'replicationControllers'), Kubernetes.route('replicationControllers.html', false)).when(UrlHelpers.join(Kubernetes.context, '/namespace/:namespace/replicationControllers'), Kubernetes.route('replicationControllers.html', false)).when(UrlHelpers.join(Kubernetes.context, '/namespace/:namespace/replicationControllers/:id'), Kubernetes.route('replicationController.html', false)).when(UrlHelpers.join(Kubernetes.context, '/namespace/:namespace/replicationControllerCreate'), Kubernetes.route('replicationControllerCreate.html', false)).when(UrlHelpers.join(Kubernetes.context, '/namespace/:namespace/replicationControllerEdit/:id'), Kubernetes.route('replicationControllerEdit.html', false)).when(UrlHelpers.join(Kubernetes.context, 'services'), Kubernetes.route('services.html', false)).when(UrlHelpers.join(Kubernetes.context, '/namespace/:namespace/services'), Kubernetes.route('services.html', false)).when(UrlHelpers.join(Kubernetes.context, '/namespace/:namespace/services/:id'), Kubernetes.route('service.html', false)).when(UrlHelpers.join(Kubernetes.context, '/namespace/:namespace/serviceCreate'), Kubernetes.route('serviceCreate.html', false)).when(UrlHelpers.join(Kubernetes.context, '/namespace/:namespace/serviceEdit/:id'), Kubernetes.route('serviceEdit.html', false)).when(UrlHelpers.join(Kubernetes.context, 'apps'), Kubernetes.route('apps.html', false)).when(UrlHelpers.join(Kubernetes.context, 'apps/:namespace'), Kubernetes.route('apps.html', false)).when(UrlHelpers.join(Kubernetes.context, 'templates'), Kubernetes.route('templates.html', false)).when(UrlHelpers.join(Kubernetes.context, 'hosts'), Kubernetes.route('hosts.html', false)).when(UrlHelpers.join(Kubernetes.context, 'hosts/:id'), Kubernetes.route('host.html', true)).when(UrlHelpers.join(Kubernetes.context, 'builds'), Kubernetes.route('builds.html', false)).when(UrlHelpers.join(Kubernetes.context, 'builds/:id'), Kubernetes.route('build.html', true)).when(UrlHelpers.join(Kubernetes.context, 'buildLogs/:id'), Kubernetes.route('buildLogs.html', true)).when(UrlHelpers.join(Kubernetes.context, 'buildConfigs'), Kubernetes.route('buildConfigs.html', false)).when(UrlHelpers.join(Kubernetes.context, 'buildConfigs/:id'), Kubernetes.route('buildConfig.html', true)).when(UrlHelpers.join(Kubernetes.context, 'buildConfigEdit/:id'), Kubernetes.route('buildConfigEdit.html', true)).when(UrlHelpers.join(Kubernetes.context, 'buildConfigCreate'), Kubernetes.route('buildConfigCreate.html', true)).when(UrlHelpers.join(Kubernetes.context, 'deploymentConfigs'), Kubernetes.route('deploymentConfigs.html', false)).when(UrlHelpers.join(Kubernetes.context, 'deploymentConfigs/:id'), Kubernetes.route('deploymentConfig.html', true)).when(UrlHelpers.join(Kubernetes.context, 'imageRepositories'), Kubernetes.route('imageRepositories.html', false)).when(UrlHelpers.join(Kubernetes.context, 'pipelines'), Kubernetes.route('pipelines.html', false)).when(UrlHelpers.join(Kubernetes.context, 'overview'), Kubernetes.route('overview.html', true)).when(Kubernetes.context, { redirectTo: UrlHelpers.join(Kubernetes.context, 'apps') });
    }]);
    Kubernetes._module.factory('AppLibraryURL', ['$rootScope', function ($rootScope) {
        return UrlHelpers.join(Kubernetes.kubernetesApiUrl(), "/proxy", Kubernetes.kubernetesNamespacePath(), "/services/app-library");
    }]);
    Kubernetes._module.factory('WikiGitUrlPrefix', function () {
        return UrlHelpers.join(Kubernetes.kubernetesApiUrl(), "/proxy", Kubernetes.kubernetesNamespacePath(), "services/app-library");
    });
    Kubernetes._module.factory('wikiRepository', ["$location", "localStorage", function ($location, localStorage) {
        return false;
    }]);
    Kubernetes._module.factory('ConnectDialogService', ['$rootScope', function ($rootScope) {
        return {
            dialog: new UI.Dialog(),
            saveCredentials: false,
            userName: null,
            password: null,
            jolokiaUrl: null,
            containerName: null,
            view: null
        };
    }]);
    Kubernetes._module.filter('kubernetesPageLink', function () { return Kubernetes.entityPageLink; });
    Kubernetes._module.run(['viewRegistry', 'workspace', 'ServiceRegistry', 'HawtioNav', function (viewRegistry, workspace, ServiceRegistry, HawtioNav) {
        Kubernetes.log.debug("Running");
        viewRegistry['kubernetes'] = Kubernetes.templatePath + 'layoutKubernetes.html';
        var builder = HawtioNav.builder();
        var apps = builder.id('kube-apps').href(function () { return UrlHelpers.join(Kubernetes.context, 'apps'); }).title(function () { return 'Apps'; }).build();
        var services = builder.id('kube-services').href(function () { return UrlHelpers.join(Kubernetes.context, 'services'); }).title(function () { return 'Services'; }).build();
        var controllers = builder.id('kube-controllers').href(function () { return UrlHelpers.join(Kubernetes.context, 'replicationControllers'); }).title(function () { return 'Controllers'; }).build();
        var pods = builder.id('kube-pods').href(function () { return UrlHelpers.join(Kubernetes.context, 'pods'); }).title(function () { return 'Pods'; }).build();
        var hosts = builder.id('kube-hosts').href(function () { return UrlHelpers.join(Kubernetes.context, 'hosts'); }).title(function () { return 'Hosts'; }).build();
        var overview = builder.id('kube-overview').href(function () { return UrlHelpers.join(Kubernetes.context, 'overview'); }).title(function () { return 'Diagram'; }).build();
        var builds = builder.id('kube-builds').href(function () { return UrlHelpers.join(Kubernetes.context, 'builds'); }).title(function () { return 'Builds'; }).build();
        var buildConfigs = builder.id('kube-buildConfigs').href(function () { return UrlHelpers.join(Kubernetes.context, 'buildConfigs'); }).title(function () { return 'Build Configs'; }).build();
        var deploys = builder.id('kube-deploys').href(function () { return UrlHelpers.join(Kubernetes.context, 'deploymentConfigs'); }).title(function () { return 'Deploys'; }).build();
        var imageRepositories = builder.id('kube-imageRepositories').href(function () { return UrlHelpers.join(Kubernetes.context, 'imageRepositories'); }).title(function () { return 'Registries'; }).build();
        var pipelines = builder.id('kube-pipelines').href(function () { return UrlHelpers.join(Kubernetes.context, 'pipelines'); }).title(function () { return 'Pipelines'; }).build();
        var repos = builder.id('kube-repos').href(function () { return "/forge/repos"; }).isValid(function () { return ServiceRegistry.hasService(Kubernetes.fabric8ForgeServiceName) && ServiceRegistry.hasService(Kubernetes.gogsServiceName) && !Core.isRemoteConnection(); }).title(function () { return 'Repositories'; }).build();
        var mainTab = builder.id('kubernetes').rank(200).defaultPage({
            rank: 20,
            isValid: function (yes, no) {
                if (!Core.isRemoteConnection()) {
                    yes();
                }
                else {
                    no();
                }
            }
        }).href(function () { return Kubernetes.context; }).title(function () { return 'Kubernetes'; }).isValid(function () { return !Core.isRemoteConnection(); }).tabs(apps, services, controllers, pods, hosts, overview).build();
        HawtioNav.add(mainTab);
        var projectsTab = builder.id('openshift').rank(100).href(function () { return UrlHelpers.join(Kubernetes.context, 'buildConfigs') + '?sub-tab=kube-buildConfigs'; }).title(function () { return 'Projects'; }).isValid(function () { return !Core.isRemoteConnection(); }).tabs(repos, buildConfigs, builds, deploys, imageRepositories).build();
        HawtioNav.add(projectsTab);
    }]);
    hawtioPluginLoader.registerPreBootstrapTask(function (next) {
        $.getScript('osconsole/config.js').done(function (script, textStatus) {
            var config = Kubernetes.osConfig = window['OPENSHIFT_CONFIG'];
            Kubernetes.log.debug("Fetched openshift config: ", config);
            var master = undefined;
            if (config.api && config.api.k8s) {
                var masterUri = new URI().host(config.api.k8s.hostPort).path(config.api.k8s.prefix);
                if (config.api.k8s.proto) {
                    masterUri.protocol(config.api.k8s.proto);
                }
                master = masterUri.toString();
            }
            OSOAuthConfig = config['auth'];
            if (!OSOAuthConfig) {
                Kubernetes.masterUrl = master;
                next();
                return;
            }
            master = OSOAuthConfig.master_uri;
            if (!master) {
                var oauth_authorize_uri = OSOAuthConfig.oauth_authorize_uri;
                if (oauth_authorize_uri) {
                    var text = oauth_authorize_uri;
                    var idx = text.indexOf("://");
                    if (idx > 0) {
                        idx += 3;
                        idx = text.indexOf("/", idx);
                        if (idx > 0) {
                            master = text.substring(0, ++idx);
                        }
                    }
                }
            }
            if (master) {
                Kubernetes.masterUrl = master;
            }
        }).fail(function (response) {
            Kubernetes.log.debug("Error fetching OAUTH config: ", response);
        }).always(function () {
            next();
        });
    }, true);
    hawtioPluginLoader.addModule(Kubernetes.pluginName);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.Apps = Kubernetes.controller("Apps", ["$scope", "KubernetesModel", "KubernetesServices", "KubernetesReplicationControllers", "KubernetesPods", "KubernetesState", "KubernetesApiURL", "$templateCache", "$location", "$routeParams", "$http", "$dialog", "$timeout", "workspace", "jolokia", function ($scope, KubernetesModel, KubernetesServices, KubernetesReplicationControllers, KubernetesPods, KubernetesState, KubernetesApiURL, $templateCache, $location, $routeParams, $http, $dialog, $timeout, workspace, jolokia) {
        $scope.model = KubernetesModel;
        $scope.apps = [];
        $scope.allApps = [];
        $scope.kubernetes = KubernetesState;
        $scope.fetched = false;
        $scope.json = '';
        ControllerHelpers.bindModelToSearchParam($scope, $location, 'id', '_id', undefined);
        ControllerHelpers.bindModelToSearchParam($scope, $location, 'appSelectorShow', 'openApp', undefined);
        ControllerHelpers.bindModelToSearchParam($scope, $location, 'mode', 'mode', 'detail');
        var branch = $scope.branch || "master";
        var namespace = null;
        function appMatches(app) {
            var filterText = $scope.appSelector.filterText;
            if (filterText) {
                return Core.matchFilterIgnoreCase(app.groupId, filterText) || Core.matchFilterIgnoreCase(app.artifactId, filterText) || Core.matchFilterIgnoreCase(app.name, filterText) || Core.matchFilterIgnoreCase(app.description, filterText);
            }
            else {
                return true;
            }
        }
        function appRunning(app) {
            return $scope.model.apps.any(function (running) { return running.appPath === app.appPath; });
        }
        $scope.tableConfig = {
            data: 'model.apps',
            showSelectionCheckbox: true,
            enableRowClickSelection: false,
            multiSelect: true,
            selectedItems: [],
            filterOptions: {
                filterText: $location.search()["q"] || ''
            },
            columnDefs: [
                { field: 'icon', displayName: 'App', cellTemplate: $templateCache.get("appIconTemplate.html") },
                { field: 'services', displayName: 'Services', cellTemplate: $templateCache.get("appServicesTemplate.html") },
                { field: 'replicationControllers', displayName: 'Controllers', cellTemplate: $templateCache.get("appReplicationControllerTemplate.html") },
                { field: '$podsLink', displayName: 'Pods', cellTemplate: $templateCache.get("appPodCountsAndLinkTemplate.html") },
                { field: '$deployedText', displayName: 'Deployed', cellTemplate: $templateCache.get("appDeployedTemplate.html") }
            ]
        };
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.expandedPods = [];
        $scope.$on('do-resize', function ($event, controller) {
            $scope.resizeDialog.open(controller);
        });
        $scope.podExpanded = function (pod) {
            var id = Kubernetes.getName(pod);
            return id && ($scope.expandedPods || []).indexOf(id) >= 0;
        };
        $scope.expandPod = function (pod) {
            var id = Kubernetes.getName(pod);
            if (id) {
                $scope.expandedPods.push(id);
            }
        };
        $scope.collapsePod = function (pod) {
            var id = Kubernetes.getName(pod);
            if (id) {
                $scope.expandedPods = $scope.expandedPods.remove(function (v) { return id === v; });
            }
        };
        $scope.$on('$routeUpdate', function ($event) {
            Kubernetes.setJson($scope, $location.search()['_id'], $scope.model.apps);
        });
        function deleteApp(app, onCompleteFn) {
            function deleteServices(services, service, onCompletedFn) {
                if (!service || !services) {
                    return onCompletedFn();
                }
                var id = Kubernetes.getName(service);
                if (!id) {
                    Kubernetes.log.warn("No ID for service " + angular.toJson(service));
                }
                else {
                    KubernetesServices.delete({
                        id: id
                    }, undefined, function () {
                        Kubernetes.log.debug("Deleted service: ", id);
                        deleteServices(services, services.shift(), onCompletedFn);
                    }, function (error) {
                        Kubernetes.log.debug("Error deleting service: ", error);
                        deleteServices(services, services.shift(), onCompletedFn);
                    });
                }
            }
            function deleteReplicationControllers(replicationControllers, replicationController, onCompletedFn) {
                if (!replicationController || !replicationControllers) {
                    return onCompletedFn();
                }
                var id = Kubernetes.getName(replicationController);
                if (!id) {
                    Kubernetes.log.warn("No ID for replicationController " + angular.toJson(replicationController));
                }
                else {
                    KubernetesReplicationControllers.delete({
                        id: id
                    }, undefined, function () {
                        Kubernetes.log.debug("Deleted replicationController: ", id);
                        deleteReplicationControllers(replicationControllers, replicationControllers.shift(), onCompletedFn);
                    }, function (error) {
                        Kubernetes.log.debug("Error deleting replicationController: ", error);
                        deleteReplicationControllers(replicationControllers, replicationControllers.shift(), onCompletedFn);
                    });
                }
            }
            function deletePods(pods, pod, onCompletedFn) {
                if (!pod || !pods) {
                    return onCompletedFn();
                }
                var id = Kubernetes.getName(pod);
                if (!id) {
                    Kubernetes.log.warn("No ID for pod " + angular.toJson(pod));
                }
                else {
                    KubernetesPods.delete({
                        id: id
                    }, undefined, function () {
                        Kubernetes.log.debug("Deleted pod: ", id);
                        deletePods(pods, pods.shift(), onCompletedFn);
                    }, function (error) {
                        Kubernetes.log.debug("Error deleting pod: ", error);
                        deletePods(pods, pods.shift(), onCompletedFn);
                    });
                }
            }
            var services = [].concat(app.services);
            deleteServices(services, services.shift(), function () {
                var replicationControllers = [].concat(app.replicationControllers);
                deleteReplicationControllers(replicationControllers, replicationControllers.shift(), function () {
                    var pods = [].concat(app.pods);
                    deletePods(pods, pods.shift(), onCompleteFn);
                });
            });
        }
        $scope.deleteSingleApp = function (app) {
            $scope.deletePrompt([app]);
        };
        $scope.deletePrompt = function (selected) {
            if (angular.isString(selected)) {
                selected = [{
                    id: selected
                }];
            }
            UI.multiItemConfirmActionDialog({
                collection: selected,
                index: '$name',
                onClose: function (result) {
                    if (result) {
                        function deleteSelected(selected, next) {
                            if (next) {
                                var id = next.name;
                                Kubernetes.log.debug("deleting: ", id);
                                deleteApp(next, function () {
                                    Kubernetes.log.debug("deleted: ", id);
                                    deleteSelected(selected, selected.shift());
                                });
                            }
                        }
                        deleteSelected(selected, selected.shift());
                    }
                },
                title: 'Delete Apps?',
                action: 'The following Apps will be deleted:',
                okText: 'Delete',
                okClass: 'btn-danger',
                custom: "This operation is permanent once completed!",
                customClass: "alert alert-warning"
            }).open();
        };
        $scope.appSelector = {
            filterText: "",
            folders: [],
            selectedApps: [],
            isOpen: function (folder) {
                if ($scope.appSelector.filterText !== '' || folder.expanded) {
                    return "opened";
                }
                return "closed";
            },
            getSelectedClass: function (app) {
                if (app.abstract) {
                    return "abstract";
                }
                if (app.selected) {
                    return "selected";
                }
                return "";
            },
            showApp: function (app) {
                return appMatches(app) && !appRunning(app);
            },
            showFolder: function (folder) {
                return !$scope.appSelector.filterText || folder.apps.some(function (app) { return appMatches(app) && !appRunning(app); });
            },
            clearSelected: function () {
                angular.forEach($scope.model.appFolders, function (folder) {
                    angular.forEach(folder.apps, function (app) {
                        app.selected = false;
                    });
                });
                $scope.appSelector.selectedApps = [];
                Core.$apply($scope);
            },
            updateSelected: function () {
                // lets update the selected apps
                var selectedApps = [];
                angular.forEach($scope.model.appFolders, function (folder) {
                    var apps = folder.apps.filter(function (app) { return app.selected; });
                    if (apps) {
                        selectedApps = selectedApps.concat(apps);
                    }
                });
                $scope.appSelector.selectedApps = selectedApps.sortBy("name");
            },
            select: function (app, flag) {
                app.selected = flag;
                $scope.appSelector.updateSelected();
            },
            hasSelection: function () {
                return $scope.model.appFolders.any(function (folder) { return folder.apps.any(function (app) { return app.selected; }); });
            },
            runSelectedApps: function () {
                // lets run all the selected apps
                angular.forEach($scope.appSelector.selectedApps, function (app) {
                    var name = app.name;
                    var metadataPath = app.metadataPath;
                    if (metadataPath) {
                        // lets load the json/yaml
                        //var url = gitPathToUrl(Wiki.gitRelativeURL(branch, metadataPath));
                        var url = Kubernetes.gitPathToUrl(metadataPath, branch);
                        if (url) {
                            $http.get(url).success(function (data, status, headers, config) {
                                if (data) {
                                    // lets convert the json object structure into a string
                                    var json = angular.toJson(data);
                                    var fn = function () {
                                    };
                                    Kubernetes.runApp($location, $scope, $http, KubernetesApiURL, json, name, fn, namespace);
                                }
                            }).error(function (data, status, headers, config) {
                                $scope.summaryHtml = null;
                                Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
                            });
                        }
                    }
                });
                // lets go back to the apps view
                $scope.appSelector.clearSelected();
                $scope.appSelectorShow = false;
            }
        };
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.BuildController = Kubernetes.controller("BuildController", ["$scope", "KubernetesModel", "KubernetesState", "KubernetesSchema", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesState, KubernetesSchema, $templateCache, $location, $routeParams, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.id = $routeParams["id"];
        $scope.schema = KubernetesSchema;
        $scope.config = KubernetesSchema.definitions.os_build_Build;
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.$on('kubernetesModelUpdated', function () {
            updateData();
        });
        $scope.$on('$routeUpdate', function ($event) {
            updateData();
        });
        updateData();
        function updateData() {
            $scope.item = null;
            if ($scope.id) {
                var url = Kubernetes.buildRestUrl($scope.id);
                $http.get(url).success(function (data, status, headers, config) {
                    if (data) {
                        $scope.entity = Kubernetes.enrichBuild(data);
                    }
                    $scope.fetched = true;
                    Core.$apply($scope);
                }).error(function (data, status, headers, config) {
                    Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
                });
            }
            else {
                $scope.fetched = true;
                Core.$apply($scope);
            }
        }
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.BuildConfigController = Kubernetes.controller("BuildConfigController", ["$scope", "KubernetesModel", "KubernetesState", "KubernetesSchema", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesState, KubernetesSchema, $templateCache, $location, $routeParams, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.id = $routeParams["id"];
        $scope.schema = KubernetesSchema;
        $scope.config = KubernetesSchema.definitions.os_build_BuildConfig;
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.$on('kubernetesModelUpdated', function () {
            updateData();
        });
        $scope.$on('$routeUpdate', function ($event) {
            updateData();
        });
        updateData();
        function updateData() {
            $scope.item = null;
            if ($scope.id) {
                var url = Kubernetes.buildConfigRestUrl($scope.id);
                $http.get(url).success(function (data, status, headers, config) {
                    if (data) {
                        $scope.entity = data;
                        var sortedBuilds = null;
                        Kubernetes.enrichBuildConfig(data, sortedBuilds);
                    }
                    $scope.fetched = true;
                    Core.$apply($scope);
                }).error(function (data, status, headers, config) {
                    Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
                });
            }
            else {
                $scope.fetched = true;
                Core.$apply($scope);
            }
        }
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.BuildConfigEditController = Kubernetes.controller("BuildConfigEditController", ["$scope", "KubernetesModel", "KubernetesState", "KubernetesSchema", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesState, KubernetesSchema, $templateCache, $location, $routeParams, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.id = $routeParams["id"];
        $scope.schema = KubernetesSchema;
        $scope.config = KubernetesSchema.definitions.os_build_BuildConfig;
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.$on('kubernetesModelUpdated', function () {
            updateData();
        });
        $scope.$on('$routeUpdate', function ($event) {
            updateData();
        });
        updateData();
        function updateData() {
            $scope.item = null;
            if ($scope.id) {
                var url = Kubernetes.buildConfigRestUrl;
                $http.get(url).success(function (data, status, headers, config) {
                    if (data) {
                        $scope.entity = data;
                    }
                    $scope.fetched = true;
                    Core.$apply($scope);
                }).error(function (data, status, headers, config) {
                    Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
                });
            }
            else {
                $scope.fetched = true;
                // TODO default to the right registry URL...
                var defaultRegistry = "172.30.17.189:5000";
                $scope.entity = {
                    "apiVersion": "v1",
                    "kind": "BuildConfig",
                    "metadata": {
                        "name": "",
                        "labels": {
                            "name": ""
                        }
                    },
                    "parameters": {
                        "output": {
                            "imageTag": "",
                            "registry": defaultRegistry
                        },
                        "source": {
                            "git": {
                                "uri": ""
                            },
                            "type": "Git"
                        },
                        "strategy": {
                            "stiStrategy": {
                                "builderImage": "fabric8/base-sti"
                            },
                            "type": "STI"
                        }
                    },
                    "triggers": []
                };
                Core.$apply($scope);
            }
        }
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.BuildConfigsController = Kubernetes.controller("BuildConfigsController", ["$scope", "KubernetesModel", "KubernetesBuilds", "KubernetesState", "$dialog", "$window", "$templateCache", "$routeParams", "$location", "localStorage", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesBuilds, KubernetesState, $dialog, $window, $templateCache, $routeParams, $location, localStorage, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.KubernetesBuilds = KubernetesBuilds;
        $scope.$on('kubernetesModelUpdated', function () {
            Core.$apply($scope);
        });
        $scope.tableConfig = {
            data: 'buildConfigs',
            showSelectionCheckbox: true,
            enableRowClickSelection: false,
            multiSelect: true,
            selectedItems: [],
            filterOptions: {
                filterText: $location.search()["q"] || ''
            },
            columnDefs: [
                {
                    field: 'metadata.name',
                    displayName: 'Name',
                    cellTemplate: $templateCache.get("buildConfigLinkTemplate.html")
                },
                {
                    field: 'spec.source.git.uri',
                    displayName: 'Repository'
                },
                {
                    field: 'spec.strategy.stiStrategy.image',
                    displayName: 'Source Image'
                },
                {
                    field: 'spec.output.imageTag',
                    displayName: 'Output Image'
                },
                {
                    field: '$fabric8Views',
                    displayName: 'Views',
                    width: "***",
                    minWidth: 500,
                    cellTemplate: $templateCache.get("buildConfigViewsTemplate.html")
                }
            ]
        };
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.isLoggedIntoGogs = Forge.isLoggedIntoGogs;
        $scope.deletePrompt = function (selected) {
            UI.multiItemConfirmActionDialog({
                collection: selected,
                index: '$name',
                onClose: function (result) {
                    if (result) {
                        function deleteSelected(selected, next) {
                            if (next) {
                                deleteEntity(next, function () {
                                    deleteSelected(selected, selected.shift());
                                });
                            }
                            else {
                                updateData();
                            }
                        }
                        deleteSelected(selected, selected.shift());
                    }
                },
                title: 'Delete Build Configs?',
                action: 'The following Build Configs will be deleted:',
                okText: 'Delete',
                okClass: 'btn-danger',
                custom: "This operation is permanent once completed!",
                customClass: "alert alert-warning"
            }).open();
        };
        function deleteEntity(selection, nextCallback) {
            var name = (selection || {}).$name;
            if (name) {
                console.log("About to delete build config: " + name);
                var url = Kubernetes.buildConfigRestUrl(name);
                $http.delete(url).success(function (data, status, headers, config) {
                    nextCallback();
                }).error(function (data, status, headers, config) {
                    Kubernetes.log.warn("Failed to delete build config on " + url + " " + data + " " + status);
                });
            }
            else {
                console.log("warning: no name for selection: " + angular.toJson(selection));
            }
        }
        function updateData() {
            var url = Kubernetes.buildConfigsRestURL();
            $http.get(url).success(function (data, status, headers, config) {
                if (data) {
                    //console.log("got data " + angular.toJson(data, true));
                    var sortedBuilds = null;
                    $scope.buildConfigs = Kubernetes.enrichBuildConfigs(data.items, sortedBuilds);
                    $scope.fetched = true;
                    Core.$apply($scope);
                }
            }).error(function (data, status, headers, config) {
                Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
            });
        }
        updateData();
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.BuildLogsController = Kubernetes.controller("BuildLogsController", ["$scope", "KubernetesModel", "KubernetesState", "KubernetesSchema", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesState, KubernetesSchema, $templateCache, $location, $routeParams, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.id = $routeParams["id"];
        $scope.schema = KubernetesSchema;
        $scope.config = KubernetesSchema.definitions.os_build_Build;
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.$on('kubernetesModelUpdated', function () {
            updateData();
        });
        $scope.$on('$routeUpdate', function ($event) {
            updateData();
        });
        $scope.logsText = "Loading logs...";
        updateData();
        function updateData() {
            $scope.item = null;
            if ($scope.id) {
                var url = Kubernetes.buildRestUrl($scope.id);
                $http.get(url).success(function (data, status, headers, config) {
                    if (data) {
                        $scope.entity = Kubernetes.enrichBuild(data);
                    }
                    $scope.fetched = true;
                    Core.$apply($scope);
                }).error(function (data, status, headers, config) {
                    Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
                });
                url = Kubernetes.buildLogsRestUrl($scope.id);
                $http.get(url).success(function (data, status) {
                    $scope.logsText = data;
                    Core.$apply($scope);
                }).error(function (data, status) {
                    $scope.logsText = "Failed to load logs from: " + url + " " + data + " status: " + status;
                    Core.$apply($scope);
                }).catch(function (error) {
                    $scope.logsText = "Failed to load logs: " + angular.toJson(error, true);
                    Core.$apply($scope);
                });
            }
            else {
                $scope.fetched = true;
                Core.$apply($scope);
            }
        }
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.BuildsController = Kubernetes.controller("BuildsController", ["$scope", "KubernetesModel", "KubernetesBuilds", "KubernetesState", "$dialog", "$window", "$templateCache", "$routeParams", "$location", "localStorage", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesBuilds, KubernetesState, $dialog, $window, $templateCache, $routeParams, $location, localStorage, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.KubernetesBuilds = KubernetesBuilds;
        $scope.$on('kubernetesModelUpdated', function () {
            Core.$apply($scope);
        });
        $scope.tableConfig = {
            data: 'builds',
            showSelectionCheckbox: true,
            enableRowClickSelection: false,
            multiSelect: true,
            selectedItems: [],
            filterOptions: {
                filterText: $location.search()["q"] || ''
            },
            columnDefs: [
                {
                    field: 'metadata.name',
                    displayName: 'Name',
                    cellTemplate: $templateCache.get("buildLinkTemplate.html")
                },
                {
                    field: '$creationDate',
                    displayName: 'Time',
                    defaultSort: true,
                    cellTemplate: $templateCache.get("buildTimeTemplate.html")
                },
                {
                    field: 'status',
                    displayName: 'Status',
                    cellTemplate: $templateCache.get("buildStatusTemplate.html")
                },
                {
                    field: '$logsLink',
                    displayName: 'Logs',
                    cellTemplate: $templateCache.get("buildLogsTemplate.html")
                },
                {
                    field: '$podLink',
                    displayName: 'Build Pod',
                    cellTemplate: $templateCache.get("buildPodTemplate.html")
                },
                {
                    field: 'parameters.source.git.uri',
                    displayName: 'Repository',
                    cellTemplate: $templateCache.get("buildRepositoryTemplate.html")
                },
                {
                    field: 'parameters.strategy.type',
                    displayName: 'Strategy'
                },
                {
                    field: 'parameters.strategy.stiStrategy.image',
                    displayName: 'Source Image'
                },
                {
                    field: 'parameters.output.imageTag',
                    displayName: 'Output Image'
                }
            ]
        };
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.$keepPolling = function () { return Kubernetes.keepPollingModel; };
        $scope.fetch = PollHelpers.setupPolling($scope, function (next) {
            var url = Kubernetes.buildsRestURL();
            $http.get(url).success(function (data, status, headers, config) {
                if (data) {
                    //console.log("got data " + angular.toJson(data, true));
                    $scope.builds = Kubernetes.enrichBuilds(data.items);
                    $scope.fetched = true;
                }
                Core.$apply($scope);
                next();
            }).error(function (data, status, headers, config) {
                Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
                Core.$apply($scope);
                next();
            });
        });
        $scope.fetch();
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    // controller for connecting to a remote container via jolokia
    Kubernetes.ConnectController = Kubernetes.controller("ConnectController", [
        "$scope",
        "localStorage",
        "userDetails",
        "ConnectDialogService",
        "$browser",
        function ($scope, localStorage, userDetails, ConnectDialogService, $browser) {
            var base = document.querySelector('base');
            var baseHref = base && base.href || '';
            $scope.doConnect = function (entity) {
                var connectUrl = new URI(baseHref);
                var returnTo = new URI().toString();
                var title = entity.metadata.name || 'Untitled Container';
                var token = userDetails.token || '';
                connectUrl.hash(token).query({
                    jolokiaUrl: entity.$jolokiaUrl,
                    title: title,
                    returnTo: returnTo
                });
                Kubernetes.log.debug("Connect URI: ", connectUrl.toString());
                window.location.href = connectUrl.toString();
            };
        }
    ]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.DeploymentConfigController = Kubernetes.controller("DeploymentConfigController", ["$scope", "KubernetesModel", "KubernetesState", "KubernetesSchema", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesState, KubernetesSchema, $templateCache, $location, $routeParams, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.id = $routeParams["id"];
        $scope.schema = KubernetesSchema;
        $scope.config = KubernetesSchema.definitions.os_deploy_DeploymentConfig;
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.$on('kubernetesModelUpdated', function () {
            updateData();
        });
        $scope.$on('$routeUpdate', function ($event) {
            updateData();
        });
        updateData();
        function updateData() {
            $scope.item = null;
            if ($scope.id) {
                var url = Kubernetes.deploymentConfigRestUrl($scope.id);
                $http.get(url).success(function (data, status, headers, config) {
                    if (data) {
                        $scope.entity = data;
                        Kubernetes.enrichDeploymentConfig(data);
                    }
                    $scope.fetched = true;
                    Core.$apply($scope);
                }).error(function (data, status, headers, config) {
                    Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
                });
            }
            else {
                $scope.fetched = true;
                Core.$apply($scope);
            }
        }
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.DeploymentConfigsController = Kubernetes.controller("DeploymentConfigsController", ["$scope", "KubernetesModel", "KubernetesBuilds", "KubernetesState", "$dialog", "$window", "$templateCache", "$routeParams", "$location", "localStorage", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesBuilds, KubernetesState, $dialog, $window, $templateCache, $routeParams, $location, localStorage, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.KubernetesBuilds = KubernetesBuilds;
        $scope.$on('kubernetesModelUpdated', function () {
            Core.$apply($scope);
        });
        $scope.labelClass = Kubernetes.containerLabelClass;
        $scope.tableConfig = {
            data: 'deploymentConfigs',
            showSelectionCheckbox: true,
            enableRowClickSelection: false,
            multiSelect: true,
            selectedItems: [],
            filterOptions: {
                filterText: $location.search()["q"] || ''
            },
            columnDefs: [
                {
                    field: 'metadata.name',
                    displayName: 'Name',
                    cellTemplate: $templateCache.get("deploymentConfigLinkTemplate.html")
                },
                {
                    field: 'metadata.namespace',
                    displayName: 'Namespace'
                },
                {
                    field: '$imageChangeParams.automatic',
                    displayName: 'Automatic'
                },
                {
                    field: '$imageChangeParams.$containerNames',
                    displayName: 'Container Names'
                },
                {
                    field: '$imageChangeParams.from.name',
                    displayName: 'From image'
                },
                {
                    field: '$imageChangeParams.tag',
                    displayName: 'Tag'
                },
                {
                    field: 'template.controllerTemplate.podTemplate.tags',
                    displayName: 'Labels',
                    cellTemplate: $templateCache.get("deploymentConfigLabelTemplate.html")
                }
            ]
        };
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.deletePrompt = function (selected) {
            UI.multiItemConfirmActionDialog({
                collection: selected,
                index: '$name',
                onClose: function (result) {
                    if (result) {
                        function deleteSelected(selected, next) {
                            if (next) {
                                deleteEntity(next, function () {
                                    deleteSelected(selected, selected.shift());
                                });
                            }
                            else {
                                updateData();
                            }
                        }
                        deleteSelected(selected, selected.shift());
                    }
                },
                title: 'Delete Deployment?',
                action: 'The following Deployments will be deleted:',
                okText: 'Delete',
                okClass: 'btn-danger',
                custom: "This operation is permanent once completed!",
                customClass: "alert alert-warning"
            }).open();
        };
        function deleteEntity(selection, nextCallback) {
            var name = (selection || {}).$name;
            if (name) {
                console.log("About to delete deployment config: " + name);
                var url = Kubernetes.deploymentConfigRestUrl(name);
                $http.delete(url).success(function (data, status, headers, config) {
                    nextCallback();
                }).error(function (data, status, headers, config) {
                    Kubernetes.log.warn("Failed to delete deployment config on " + url + " " + data + " " + status);
                });
            }
            else {
                console.log("warning: no name for selection: " + angular.toJson(selection));
            }
        }
        function updateData() {
            var url = Kubernetes.deploymentConfigsRestURL();
            $http.get(url).success(function (data, status, headers, config) {
                if (data) {
                    //console.log("got data " + angular.toJson(data, true));
                    $scope.deploymentConfigs = Kubernetes.enrichDeploymentConfigs(data.items);
                    $scope.fetched = true;
                    Core.$apply($scope);
                }
            }).error(function (data, status, headers, config) {
                Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
            });
        }
        updateData();
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    function byId(thing) {
        return thing.id;
    }
    function createKey(namespace, id) {
        return (namespace || "") + "-" + id;
    }
    function populateKey(item) {
        var result = item;
        result['_key'] = createKey(Kubernetes.getNamespace(item), Kubernetes.getName(item));
        return result;
    }
    function populateKeys(items) {
        var result = [];
        angular.forEach(items, function (item) {
            result.push(populateKey(item));
        });
        return result;
    }
    function selectPods(pods, namespace, labels) {
        return pods.filter(function (pod) {
            return Kubernetes.getNamespace(pod) === namespace && Kubernetes.selectorMatches(labels, Kubernetes.getLabels(pod));
        });
    }
    /**
     * The object which keeps track of all the pods, replication controllers, services and their associations
     */
    var KubernetesModelService = (function () {
        function KubernetesModelService() {
            this.kubernetes = null;
            this.apps = [];
            this.services = [];
            this.replicationcontrollers = [];
            this.pods = [];
            this.hosts = [];
            //public namespaces = [];
            this.routes = [];
            this.templates = [];
            this.redraw = false;
            this.resourceVersions = {};
            // various views on the data
            this.podsByHost = {};
            this.servicesByKey = {};
            this.replicationControllersByKey = {};
            this.podsByKey = {};
            this.appInfos = [];
            this.appViews = [];
            this.appFolders = [];
            this.fetched = false;
            this.isOpenShift = false;
            this.fetch = function () {
            };
        }
        Object.defineProperty(KubernetesModelService.prototype, "replicationControllers", {
            get: function () {
                return this.replicationcontrollers;
            },
            set: function (replicationControllers) {
                this.replicationcontrollers = replicationControllers;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KubernetesModelService.prototype, "namespaces", {
            get: function () {
                return this.kubernetes.namespaces;
            },
            enumerable: true,
            configurable: true
        });
        KubernetesModelService.prototype.$keepPolling = function () {
            return Kubernetes.keepPollingModel;
        };
        KubernetesModelService.prototype.orRedraw = function (flag) {
            this.redraw = this.redraw || flag;
        };
        KubernetesModelService.prototype.getService = function (namespace, id) {
            return this.servicesByKey[createKey(namespace, id)];
        };
        KubernetesModelService.prototype.getReplicationController = function (namespace, id) {
            return this.replicationControllersByKey[createKey(namespace, id)];
        };
        KubernetesModelService.prototype.getPod = function (namespace, id) {
            return this.podsByKey[createKey(namespace, id)];
        };
        KubernetesModelService.prototype.podsForNamespace = function (namespace) {
            if (namespace === void 0) { namespace = this.currentNamespace(); }
            return _.filter(this.pods, { namespace: namespace });
        };
        /**
         * Returns the current selected namespace or the default namespace
         */
        KubernetesModelService.prototype.currentNamespace = function () {
            var answer = null;
            if (this.kubernetes) {
                answer = this.kubernetes.selectedNamespace;
            }
            return answer || Kubernetes.defaultNamespace;
        };
        KubernetesModelService.prototype.updateIconUrlAndAppInfo = function (entity, nameField) {
            var answer = null;
            var id = Kubernetes.getName(entity);
            if (id && nameField) {
                (this.templates || []).forEach(function (template) {
                    var metadata = template.metadata;
                    if (metadata) {
                        var annotations = metadata.annotations || {};
                        var iconUrl = annotations["fabric8." + id + "/iconUrl"] || annotations["fabric8/iconUrl"];
                        if (iconUrl) {
                            (template.objects || []).forEach(function (item) {
                                var entityName = Kubernetes.getName(item);
                                if (id === entityName) {
                                    entity.$iconUrl = iconUrl;
                                }
                            });
                        }
                    }
                });
                (this.appInfos || []).forEach(function (appInfo) {
                    var iconPath = appInfo.iconPath;
                    if (iconPath && !answer && iconPath !== "null") {
                        var iconUrl = Kubernetes.gitPathToUrl(iconPath);
                        var ids = Core.pathGet(appInfo, ["names", nameField]);
                        angular.forEach(ids, function (appId) {
                            if (appId === id) {
                                entity.$iconUrl = iconUrl;
                                entity.appPath = appInfo.appPath;
                                entity.$info = appInfo;
                            }
                        });
                    }
                });
            }
            if (!entity.$iconUrl) {
                entity.$iconUrl = Kubernetes.defaultIconUrl;
            }
        };
        KubernetesModelService.prototype.maybeInit = function () {
            var _this = this;
            this.fetched = true;
            if (this.services && this.replicationControllers && this.pods) {
                this.servicesByKey = {};
                this.podsByKey = {};
                this.replicationControllersByKey = {};
                this.pods.forEach(function (pod) {
                    if (!pod.kind)
                        pod.kind = "Pod";
                    _this.podsByKey[pod._key] = pod;
                    var host = Kubernetes.getHost(pod);
                    pod.$labelsText = Kubernetes.labelsToString(Kubernetes.getLabels(pod));
                    if (host) {
                        pod.$labelsText += Kubernetes.labelFilterTextSeparator + "host=" + host;
                    }
                    pod.$iconUrl = Kubernetes.defaultIconUrl;
                    _this.discoverPodConnections(pod);
                    pod.$containerPorts = [];
                    angular.forEach(Core.pathGet(pod, ["spec", "containers"]), function (container) {
                        var image = container.image;
                        if (image) {
                            var idx = image.lastIndexOf(":");
                            if (idx > 0) {
                                image = image.substring(0, idx);
                            }
                            var paths = image.split("/", 3);
                            if (paths.length) {
                                var answer = null;
                                if (paths.length == 3) {
                                    answer = paths[1] + "/" + paths[2];
                                }
                                else if (paths.length == 2) {
                                    answer = paths[0] + "/" + paths[1];
                                }
                                else {
                                    answer = paths[0] + "/" + paths[1];
                                }
                                container.$imageLink = UrlHelpers.join("https://registry.hub.docker.com/u/", answer);
                            }
                        }
                        angular.forEach(container.ports, function (port) {
                            var containerPort = port.containerPort;
                            if (containerPort) {
                                pod.$containerPorts.push(containerPort);
                            }
                        });
                    });
                });
                this.services.forEach(function (service) {
                    if (!service.kind)
                        service.kind = "Service";
                    _this.servicesByKey[service._key] = service;
                    var selector = Kubernetes.getSelector(service);
                    service.$pods = [];
                    if (!service.$podCounters) {
                        service.$podCounters = {};
                    }
                    _.assign(service.$podCounters, selector ? Kubernetes.createPodCounters(selector, _this.pods, service.$pods) : {});
                    var selectedPods = service.$pods;
                    service.connectTo = selectedPods.map(function (pod) {
                        return pod._key;
                    }).join(',');
                    service.$labelsText = Kubernetes.labelsToString(Kubernetes.getLabels(service));
                    _this.updateIconUrlAndAppInfo(service, "serviceNames");
                    var spec = service.spec;
                    if (spec) {
                        var ports = _.map(spec.ports, "port");
                        service.$ports = ports;
                        service.$portsText = ports.join(", ");
                    }
                    var iconUrl = service.$iconUrl;
                    if (iconUrl && selectedPods) {
                        selectedPods.forEach(function (pod) {
                            pod.$iconUrl = iconUrl;
                        });
                    }
                    service.$serviceUrl = Kubernetes.serviceLinkUrl(service);
                });
                this.replicationControllers.forEach(function (replicationController) {
                    if (!replicationController.kind)
                        replicationController.kind = "ReplicationController";
                    _this.replicationControllersByKey[replicationController._key] = replicationController;
                    var selector = Kubernetes.getSelector(replicationController);
                    replicationController.$pods = [];
                    replicationController.$podCounters = selector ? Kubernetes.createPodCounters(selector, _this.pods, replicationController.$pods) : null;
                    var selectedPods = replicationController.$pods;
                    replicationController.connectTo = selectedPods.map(function (pod) {
                        return pod._key;
                    }).join(',');
                    replicationController.$labelsText = Kubernetes.labelsToString(Kubernetes.getLabels(replicationController));
                    _this.updateIconUrlAndAppInfo(replicationController, "replicationControllerNames");
                    var iconUrl = replicationController.$iconUrl;
                    if (iconUrl && selectedPods) {
                        selectedPods.forEach(function (pod) {
                            pod.$iconUrl = iconUrl;
                        });
                    }
                });
                // services may not map to an icon but their pods may do via the RC
                // so lets default it...
                this.services.forEach(function (service) {
                    var iconUrl = service.$iconUrl;
                    var selectedPods = service.$pods;
                    if (selectedPods) {
                        if (!iconUrl || iconUrl === Kubernetes.defaultIconUrl) {
                            iconUrl = null;
                            selectedPods.forEach(function (pod) {
                                if (!iconUrl) {
                                    iconUrl = pod.$iconUrl;
                                    if (iconUrl) {
                                        service.$iconUrl = iconUrl;
                                    }
                                }
                            });
                        }
                    }
                });
                this.updateApps();
                //updateNamespaces(this.kubernetes, this.pods, this.replicationControllers, this.services);
                var podsByHost = {};
                this.pods.forEach(function (pod) {
                    var host = Kubernetes.getHost(pod);
                    var podsForHost = podsByHost[host];
                    if (!podsForHost) {
                        podsForHost = [];
                        podsByHost[host] = podsForHost;
                    }
                    podsForHost.push(pod);
                });
                this.podsByHost = podsByHost;
                var tmpHosts = [];
                for (var hostKey in podsByHost) {
                    var hostPods = [];
                    var podCounters = Kubernetes.createPodCounters(function (pod) { return Kubernetes.getHost(pod) === hostKey; }, this.pods, hostPods, "host=" + hostKey);
                    var hostIP = null;
                    if (hostPods.length) {
                        var pod = hostPods[0];
                        var currentState = pod.status;
                        if (currentState) {
                            hostIP = currentState.hostIP;
                        }
                    }
                    var hostDetails = {
                        name: hostKey,
                        id: hostKey,
                        elementId: hostKey.replace(/\./g, '_'),
                        hostIP: hostIP,
                        pods: hostPods,
                        kind: "Host",
                        $podCounters: podCounters,
                        $iconUrl: Kubernetes.hostIconUrl
                    };
                    tmpHosts.push(hostDetails);
                }
                this.hosts = tmpHosts;
            }
        };
        KubernetesModelService.prototype.updateApps = function () {
            var _this = this;
            try {
                // lets create the app views by trying to join controllers / services / pods that are related
                var appViews = [];
                this.replicationControllers.forEach(function (replicationController) {
                    var name = Kubernetes.getName(replicationController);
                    var $iconUrl = replicationController.$iconUrl;
                    appViews.push({
                        appPath: "/dummyPath/" + name,
                        $name: name,
                        $info: {
                            $iconUrl: $iconUrl
                        },
                        $iconUrl: $iconUrl,
                        replicationControllers: [replicationController],
                        pods: replicationController.$pods || [],
                        services: []
                    });
                });
                this.services.forEach(function (service) {
                    // now lets see if we can find an app with an RC of the same selector
                    var matchesApp = null;
                    appViews.forEach(function (appView) {
                        appView.replicationControllers.forEach(function (replicationController) {
                            var repSelector = Kubernetes.getSelector(replicationController);
                            if (repSelector && Kubernetes.selectorMatches(repSelector, Kubernetes.getSelector(service)) && Kubernetes.getNamespace(service) == Kubernetes.getNamespace(replicationController)) {
                                matchesApp = appView;
                            }
                        });
                    });
                    if (matchesApp) {
                        matchesApp.services.push(service);
                    }
                    else {
                        var name = Kubernetes.getName(service);
                        var $iconUrl = service.$iconUrl;
                        appViews.push({
                            appPath: "/dummyPath/" + name,
                            $name: name,
                            $info: {
                                $iconUrl: $iconUrl
                            },
                            $iconUrl: $iconUrl,
                            replicationControllers: [],
                            pods: service.$pods || [],
                            services: [service]
                        });
                    }
                });
                angular.forEach(this.routes, function (route) {
                    var metadata = route.metadata || {};
                    var spec = route.spec || {};
                    var serviceName = Core.pathGet(spec, ["to", "name"]);
                    var host = spec.host;
                    var namespace = Kubernetes.getNamespace(route);
                    if (serviceName && host) {
                        var service = _this.getService(namespace, serviceName);
                        if (service) {
                            service.$host = host;
                            // TODO we could use some annotations / metadata to deduce what URL we should use to open this
                            // service in the console. For now just assume its http:
                            if (host) {
                                var hostUrl = host;
                                if (hostUrl.indexOf("://") < 0) {
                                    hostUrl = "http://" + host;
                                }
                                service.$connectUrl = UrlHelpers.join(hostUrl, "/");
                            }
                        }
                        else {
                            Kubernetes.log.debug("Could not find service " + serviceName + " namespace " + namespace + " for route: " + metadata.name);
                        }
                    }
                });
                appViews = populateKeys(appViews).sortBy(function (appView) { return appView._key; });
                ArrayHelpers.sync(this.appViews, appViews, '$name');
                if (this.appInfos && this.appViews) {
                    var folderMap = {};
                    var folders = [];
                    var appMap = {};
                    angular.forEach(this.appInfos, function (appInfo) {
                        if (!appInfo.$iconUrl && appInfo.iconPath && appInfo.iconPath !== "null") {
                            appInfo.$iconUrl = Kubernetes.gitPathToUrl(appInfo.iconPath);
                        }
                        var appPath = appInfo.appPath;
                        if (appPath) {
                            appMap[appPath] = appInfo;
                            var idx = appPath.lastIndexOf("/");
                            var folderPath = "";
                            if (idx >= 0) {
                                folderPath = appPath.substring(0, idx);
                            }
                            folderPath = Core.trimLeading(folderPath, "/");
                            var folder = folderMap[folderPath];
                            if (!folder) {
                                folder = {
                                    path: folderPath,
                                    expanded: true,
                                    apps: []
                                };
                                folders.push(folder);
                                folderMap[folderPath] = folder;
                            }
                            folder.apps.push(appInfo);
                        }
                    });
                    this.appFolders = folders.sortBy("path");
                    var apps = [];
                    var defaultInfo = {
                        $iconUrl: Kubernetes.defaultIconUrl
                    };
                    angular.forEach(this.appViews, function (appView) {
                        try {
                            var appPath = appView.appPath;
                            /*
                             TODO
                             appView.$select = () => {
                             Kubernetes.setJson($scope, appView.id, $scope.model.apps);
                             };
                             */
                            var appInfo = angular.copy(defaultInfo);
                            if (appPath) {
                                appInfo = appMap[appPath] || appInfo;
                            }
                            if (!appView.$info) {
                                appView.$info = defaultInfo;
                                appView.$info = appInfo;
                            }
                            appView.id = appPath;
                            if (!appView.$name) {
                                appView.$name = appInfo.name || appView.$name;
                            }
                            if (!appView.$iconUrl) {
                                appView.$iconUrl = appInfo.$iconUrl;
                            }
                            apps.push(appView);
                            appView.$podCounters = Kubernetes.createAppViewPodCounters(appView);
                            appView.$serviceViews = Kubernetes.createAppViewServiceViews(appView);
                        }
                        catch (e) {
                            Kubernetes.log.warn("Failed to update appViews: " + e);
                        }
                    });
                    //this.apps = apps;
                    this.apps = this.appViews;
                }
            }
            catch (e) {
                Kubernetes.log.warn("Caught error: " + e);
            }
        };
        KubernetesModelService.prototype.discoverPodConnections = function (entity) {
            var info = Core.pathGet(entity, ["status", "info"]);
            var hostPort = null;
            var currentState = entity.status || {};
            var desiredState = entity.spec || {};
            var podId = Kubernetes.getName(entity);
            var host = currentState["hostIP"];
            var podIP = currentState["podIP"];
            var hasDocker = false;
            var foundContainerPort = null;
            if (desiredState) {
                var containers = desiredState.containers;
                angular.forEach(containers, function (container) {
                    if (!hostPort) {
                        var ports = container.ports;
                        angular.forEach(ports, function (port) {
                            if (!hostPort) {
                                var containerPort = port.containerPort;
                                var portName = port.name;
                                var containerHostPort = port.hostPort;
                                if (containerPort === 8778 || "jolokia" === portName) {
                                    if (containerPort) {
                                        if (podIP) {
                                            foundContainerPort = containerPort;
                                        }
                                        if (containerHostPort) {
                                            hostPort = containerHostPort;
                                        }
                                    }
                                }
                            }
                        });
                    }
                });
            }
            if (foundContainerPort && podId && Kubernetes.isRunning(currentState)) {
                entity.$jolokiaUrl = UrlHelpers.join(Kubernetes.masterApiUrl(), "/api/", Kubernetes.defaultApiVersion, "namespaces", entity.metadata.namespace, "/pods/", podId + ":" + foundContainerPort, "/proxy/jolokia/");
            }
        };
        return KubernetesModelService;
    })();
    Kubernetes.KubernetesModelService = KubernetesModelService;
    /**
     * Creates a model service which keeps track of all the pods, replication controllers and services along
     * with their associations and status
     */
    Kubernetes._module.factory('KubernetesModel', ['$rootScope', '$http', 'KubernetesApiURL', 'KubernetesState', 'WatcherService', '$location', '$resource', function ($rootScope, $http, AppLibraryURL, KubernetesState, watcher, $location, $resource) {
        var $scope = new KubernetesModelService();
        $scope.kubernetes = KubernetesState;
        // create all of our resource classes
        var typeNames = watcher.getTypes();
        _.forEach(typeNames, function (type) {
            var urlTemplate = '';
            switch (type) {
                case Kubernetes.WatchTypes.NAMESPACES:
                    urlTemplate = UrlHelpers.join('namespaces');
                    break;
                default:
                    urlTemplate = UrlHelpers.join('namespaces/:namespace', type, ':id');
            }
            $scope[type + 'Resource'] = Kubernetes.createResource(type, urlTemplate, $resource, $scope);
        });
        // register for all updates on objects
        watcher.registerListener(function (objects) {
            var types = watcher.getTypes();
            _.forEach(types, function (type) {
                switch (type) {
                    case Kubernetes.WatchTypes.SERVICES:
                        var items = populateKeys(objects[type]);
                        angular.forEach(items, function (item) {
                            item.proxyUrl = Kubernetes.kubernetesProxyUrlForService(Kubernetes.kubernetesApiUrl(), item);
                        });
                        $scope[type] = items;
                        break;
                    case Kubernetes.WatchTypes.TEMPLATES:
                    case Kubernetes.WatchTypes.ROUTES:
                    case Kubernetes.WatchTypes.BUILDS:
                    case Kubernetes.WatchTypes.BUILD_CONFIGS:
                    case Kubernetes.WatchTypes.IMAGE_STREAMS:
                        $scope.isOpenShift = true;
                    default:
                        $scope[type] = populateKeys(objects[type]);
                }
                Kubernetes.log.debug("Type: ", type, " object: ", $scope[type]);
            });
            $scope.maybeInit();
            $rootScope.$broadcast('kubernetesModelUpdated');
            Core.$apply($rootScope);
        });
        // set the selected namespace if set in the location bar
        // otherwise use whatever previously selected namespace is
        // available
        var search = $location.search();
        if ('namespace' in search) {
            watcher.setNamespace(search['namespace']);
        }
        function selectPods(pods, namespace, labels) {
            return pods.filter(function (pod) {
                return Kubernetes.getNamespace(pod) === namespace && Kubernetes.selectorMatches(labels, Kubernetes.getLabels(pod));
            });
        }
        return $scope;
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
/// <reference path="kubernetesModel.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.HostController = Kubernetes.controller("HostController", ["$scope", "KubernetesModel", "KubernetesState", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesState, $templateCache, $location, $routeParams, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.rawMode = false;
        $scope.rawModel = null;
        $scope.itemConfig = {
            properties: {}
        };
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.$on('kubernetesModelUpdated', function () {
            updateData();
        });
        $scope.$on('$routeUpdate', function ($event) {
            updateData();
        });
        $scope.flipRaw = function () {
            $scope.rawMode = !$scope.rawMode;
            Core.$apply($scope);
        };
        updateData();
        function updateData() {
            $scope.id = $routeParams["id"];
            $scope.item = null;
            if ($scope.id) {
                var url = UrlHelpers.join(KubernetesApiURL, "nodes", $scope.id);
                $http.get(url).success(function (data, status, headers, config) {
                    if (data) {
                        $scope.item = data;
                    }
                    if ($scope.item) {
                        $scope.rawModel = JSON.stringify($scope.item, null, 2); // spacing level = 2
                    }
                    Core.$apply($scope);
                }).error(function (data, status, headers, config) {
                    Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
                });
            }
            else {
                $scope.rawModel = null;
                Core.$apply($scope);
            }
        }
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
/// <reference path="kubernetesModel.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.HostsController = Kubernetes.controller("HostsController", ["$scope", "KubernetesModel", "KubernetesPods", "KubernetesState", "ServiceRegistry", "$dialog", "$window", "$templateCache", "$routeParams", "$location", "localStorage", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesPods, KubernetesState, ServiceRegistry, $dialog, $window, $templateCache, $routeParams, $location, localStorage, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.tableConfig = {
            data: 'model.hosts',
            showSelectionCheckbox: true,
            enableRowClickSelection: false,
            multiSelect: true,
            selectedItems: [],
            filterOptions: {
                filterText: $location.search()["q"] || ''
            },
            columnDefs: [
                {
                    field: 'id',
                    displayName: 'Name',
                    defaultSort: true,
                    cellTemplate: $templateCache.get("idTemplate.html")
                },
                {
                    field: 'hostIP',
                    displayName: 'IP'
                },
                { field: '$podsLink', displayName: 'Pods', cellTemplate: $templateCache.get("podCountsAndLinkTemplate.html") }
            ]
        };
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.ImageRepositoriesController = Kubernetes.controller("ImageRepositoriesController", ["$scope", "KubernetesModel", "KubernetesBuilds", "KubernetesState", "$dialog", "$window", "$templateCache", "$routeParams", "$location", "localStorage", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesBuilds, KubernetesState, $dialog, $window, $templateCache, $routeParams, $location, localStorage, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.KubernetesBuilds = KubernetesBuilds;
        $scope.$on('kubernetesModelUpdated', function () {
            Core.$apply($scope);
        });
        $scope.tableConfig = {
            data: 'imageRepositories',
            showSelectionCheckbox: true,
            enableRowClickSelection: false,
            multiSelect: true,
            selectedItems: [],
            filterOptions: {
                filterText: $location.search()["q"] || ''
            },
            columnDefs: [
                {
                    field: 'metadata.name',
                    displayName: 'Name'
                },
                {
                    field: 'metadata.namespace',
                    displayName: 'Namespace'
                },
                {
                    field: 'status.dockerImageRepository',
                    displayName: 'Docker Registry'
                },
                {
                    field: 'tags',
                    displayName: 'Tags',
                    cellTemplate: $templateCache.get('imageRegistryLabelTemplate.html')
                }
            ]
        };
        var labelColors = {
            'prod': 'background-blue',
            'valid': 'background-light-green',
            'test': 'background-light-grey'
        };
        $scope.labelClass = function (labelType) {
            if (!(labelType in labelColors)) {
                return 'mouse-pointer';
            }
            else
                return labelColors[labelType] + ' mouse-pointer';
        };
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.deletePrompt = function (selected) {
            UI.multiItemConfirmActionDialog({
                collection: selected,
                index: '$name',
                onClose: function (result) {
                    if (result) {
                        function deleteSelected(selected, next) {
                            if (next) {
                                deleteEntity(next, function () {
                                    deleteSelected(selected, selected.shift());
                                });
                            }
                            else {
                                updateData();
                            }
                        }
                        deleteSelected(selected, selected.shift());
                    }
                },
                title: 'Delete Image Repository?',
                action: 'The following Image Repositories will be deleted:',
                okText: 'Delete',
                okClass: 'btn-danger',
                custom: "This operation is permanent once completed!",
                customClass: "alert alert-warning"
            }).open();
        };
        function deleteEntity(selection, nextCallback) {
            var name = (selection || {}).$name;
            if (name) {
                console.log("About to delete image repository: " + name);
                var url = Kubernetes.imageRepositoryRestUrl(name);
                $http.delete(url).success(function (data, status, headers, config) {
                    nextCallback();
                }).error(function (data, status, headers, config) {
                    Kubernetes.log.warn("Failed to delete image repository on " + url + " " + data + " " + status);
                });
            }
            else {
                console.log("warning: no name for selection: " + angular.toJson(selection));
            }
        }
        function updateData() {
            var url = Kubernetes.imageRepositoriesRestURL();
            $http.get(url).success(function (data, status, headers, config) {
                if (data) {
                    //console.log("got data " + angular.toJson(data, true));
                    $scope.imageRepositories = Kubernetes.enrichImageRepositories(data.items);
                    $scope.fetched = true;
                    Core.$apply($scope);
                }
            }).error(function (data, status, headers, config) {
                Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
            });
        }
        updateData();
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.KubernetesJsonDirective = Kubernetes._module.directive("kubernetesJson", [function () {
        return {
            restrict: 'A',
            replace: true,
            templateUrl: Kubernetes.templatePath + 'kubernetesJsonDirective.html',
            scope: {
                config: '=kubernetesJson'
            },
            controller: ["$scope", "$location", "$http", "KubernetesApiURL", "marked", function ($scope, $location, $http, KubernetesApiURL, marked) {
                $scope.$watch('config', function (config) {
                    if (config) {
                        if (config.error) {
                            Kubernetes.log.debug("Error parsing kubernetes config: ", config.error);
                        }
                        else {
                            Kubernetes.log.debug("Got kubernetes configuration: ", config);
                        }
                    }
                    else {
                        Kubernetes.log.debug("Kubernetes config unset");
                    }
                });
                $scope.$on('Wiki.ViewPage.Children', function ($event, pageId, children) {
                    // log.debug("Got broadcast, pageId: ", pageId, " children: ", children);
                    $scope.appTitle = pageId;
                    if (children) {
                        var summaryFile = children.find(function (child) {
                            return child.name.toLowerCase() === "summary.md";
                        });
                        var summaryURL = null;
                        if (summaryFile) {
                            summaryURL = Wiki.gitRestURL(summaryFile.branch, summaryFile.path);
                            $http.get(summaryURL).success(function (data, status, headers, config) {
                                var summaryMarkdown = data;
                                if (summaryMarkdown) {
                                    $scope.summaryHtml = marked(summaryMarkdown);
                                }
                                else {
                                    $scope.summaryHtml = null;
                                }
                            }).error(function (data, status, headers, config) {
                                $scope.summaryHtml = null;
                                Kubernetes.log.warn("Failed to load " + summaryURL + " " + data + " " + status);
                            });
                        }
                        var iconFile = children.find(function (child) {
                            return child.name.toLowerCase().startsWith("icon");
                        });
                        if (iconFile) {
                            $scope.iconURL = Wiki.gitRestURL(iconFile.branch, iconFile.path);
                        }
                        var fabric8PropertiesFile = children.find(function (child) {
                            return child.name.toLowerCase() === "fabric8.properties";
                        });
                        var fabric8PropertiesURL = null;
                        if (fabric8PropertiesFile) {
                            fabric8PropertiesURL = Wiki.gitRestURL(fabric8PropertiesFile.branch, fabric8PropertiesFile.path);
                            $http.get(fabric8PropertiesURL).success(function (data, status, headers, config) {
                                var fabric8Properties = data;
                                if (fabric8Properties) {
                                    var nameRE = /(?:name)\s*=\s*(.+)[\n|$]/;
                                    var matches = fabric8Properties.match(nameRE);
                                    if (matches[1]) {
                                        $scope.displayName = matches[1].replace(/\\/g, '');
                                    }
                                }
                            }).error(function (data, status, headers, config) {
                                Kubernetes.log.warn("Failed to load " + fabric8PropertiesURL + " " + data + " " + status);
                            });
                        }
                    }
                });
                $scope.apply = function () {
                    var json = angular.toJson($scope.config);
                    var name = $scope.appTitle || "App";
                    Kubernetes.runApp($location, $scope, $http, KubernetesApiURL, json, name, function () {
                        // now lets navigate to the apps page so folks see things happen
                        $location.url("/kubernetes/apps");
                    });
                };
            }]
        };
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.schema = {
        "id": "http://fabric8.io/fabric8/v2/Schema#",
        "$schema": "http://json-schema.org/schema#",
        "definitions": {
            "kubernetes_AWSElasticBlockStoreVolumeSource": {
                "type": "object",
                "description": "",
                "properties": {
                    "fsType": {
                        "type": "string",
                        "description": "file system type to mount"
                    },
                    "partition": {
                        "type": "integer",
                        "description": "partition on the disk to mount (e.g."
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "read-only if true"
                    },
                    "volumeID": {
                        "type": "string",
                        "description": "unique id of the PD resource in AWS"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.AWSElasticBlockStoreVolumeSource"
            },
            "kubernetes_Capabilities": {
                "type": "object",
                "description": "",
                "properties": {
                    "add": {
                        "type": "array",
                        "description": "added capabilities",
                        "items": {
                            "type": "string",
                            "description": "added capabilities"
                        }
                    },
                    "drop": {
                        "type": "array",
                        "description": "droped capabilities",
                        "items": {
                            "type": "string",
                            "description": "droped capabilities"
                        }
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.Capabilities"
            },
            "kubernetes_Container": {
                "type": "object",
                "description": "",
                "properties": {
                    "args": {
                        "type": "array",
                        "description": "command array; the docker image's cmd is used if this is not provided; arguments to the entrypoint; cannot be updated",
                        "items": {
                            "type": "string",
                            "description": "command array; the docker image's cmd is used if this is not provided; arguments to the entrypoint; cannot be updated"
                        }
                    },
                    "command": {
                        "type": "array",
                        "description": "entrypoint array; not executed within a shell; the docker image's entrypoint is used if this is not provided; cannot be updated",
                        "items": {
                            "type": "string",
                            "description": "entrypoint array; not executed within a shell; the docker image's entrypoint is used if this is not provided; cannot be updated"
                        }
                    },
                    "env": {
                        "type": "array",
                        "description": "list of environment variables to set in the container; cannot be updated",
                        "items": {
                            "$ref": "#/definitions/kubernetes_EnvVar",
                            "javaType": "io.fabric8.kubernetes.api.model.EnvVar"
                        }
                    },
                    "image": {
                        "type": "string",
                        "description": "Docker image name"
                    },
                    "imagePullPolicy": {
                        "type": "string",
                        "description": "image pull policy; one of Always"
                    },
                    "lifecycle": {
                        "$ref": "#/definitions/kubernetes_Lifecycle",
                        "javaType": "io.fabric8.kubernetes.api.model.Lifecycle"
                    },
                    "livenessProbe": {
                        "$ref": "#/definitions/kubernetes_Probe",
                        "javaType": "io.fabric8.kubernetes.api.model.Probe"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the container; must be a DNS_LABEL and unique within the pod; cannot be updated",
                        "maxLength": 63,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    },
                    "ports": {
                        "type": "array",
                        "description": "list of ports to expose from the container; cannot be updated",
                        "items": {
                            "$ref": "#/definitions/kubernetes_ContainerPort",
                            "javaType": "io.fabric8.kubernetes.api.model.ContainerPort"
                        }
                    },
                    "readinessProbe": {
                        "$ref": "#/definitions/kubernetes_Probe",
                        "javaType": "io.fabric8.kubernetes.api.model.Probe"
                    },
                    "resources": {
                        "$ref": "#/definitions/kubernetes_ResourceRequirements",
                        "javaType": "io.fabric8.kubernetes.api.model.ResourceRequirements"
                    },
                    "securityContext": {
                        "$ref": "#/definitions/kubernetes_SecurityContext",
                        "javaType": "io.fabric8.kubernetes.api.model.SecurityContext"
                    },
                    "terminationMessagePath": {
                        "type": "string",
                        "description": "path at which the file to which the container's termination message will be written is mounted into the container's filesystem; message written is intended to be brief final status"
                    },
                    "volumeMounts": {
                        "type": "array",
                        "description": "pod volumes to mount into the container's filesyste; cannot be updated",
                        "items": {
                            "$ref": "#/definitions/kubernetes_VolumeMount",
                            "javaType": "io.fabric8.kubernetes.api.model.VolumeMount"
                        }
                    },
                    "workingDir": {
                        "type": "string",
                        "description": "container's working directory; defaults to image's default; cannot be updated"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.Container"
            },
            "kubernetes_ContainerPort": {
                "type": "object",
                "description": "",
                "properties": {
                    "containerPort": {
                        "type": "integer",
                        "description": "number of port to expose on the pod's IP address"
                    },
                    "hostIP": {
                        "type": "string",
                        "description": "host IP to bind the port to"
                    },
                    "hostPort": {
                        "type": "integer",
                        "description": "number of port to expose on the host; most containers do not need this"
                    },
                    "name": {
                        "type": "string",
                        "description": "name for the port that can be referred to by services; must be a DNS_LABEL and unique without the pod"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "protocol for port; must be UDP or TCP; TCP if unspecified"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.ContainerPort"
            },
            "kubernetes_ContainerState": {
                "type": "object",
                "description": "",
                "properties": {
                    "running": {
                        "$ref": "#/definitions/kubernetes_ContainerStateRunning",
                        "javaType": "io.fabric8.kubernetes.api.model.ContainerStateRunning"
                    },
                    "termination": {
                        "$ref": "#/definitions/kubernetes_ContainerStateTerminated",
                        "javaType": "io.fabric8.kubernetes.api.model.ContainerStateTerminated"
                    },
                    "waiting": {
                        "$ref": "#/definitions/kubernetes_ContainerStateWaiting",
                        "javaType": "io.fabric8.kubernetes.api.model.ContainerStateWaiting"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.ContainerState"
            },
            "kubernetes_ContainerStateRunning": {
                "type": "object",
                "description": "",
                "properties": {
                    "startedAt": {
                        "type": "string",
                        "description": "time at which the container was last (re-)started"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.ContainerStateRunning"
            },
            "kubernetes_ContainerStateTerminated": {
                "type": "object",
                "description": "",
                "properties": {
                    "containerID": {
                        "type": "string",
                        "description": "container's ID in the format 'docker://\u003ccontainer_id\u003e'"
                    },
                    "exitCode": {
                        "type": "integer",
                        "description": "exit status from the last termination of the container"
                    },
                    "finishedAt": {
                        "type": "string",
                        "description": "time at which the container last terminated"
                    },
                    "message": {
                        "type": "string",
                        "description": "message regarding the last termination of the container"
                    },
                    "reason": {
                        "type": "string",
                        "description": "(brief) reason from the last termination of the container"
                    },
                    "signal": {
                        "type": "integer",
                        "description": "signal from the last termination of the container"
                    },
                    "startedAt": {
                        "type": "string",
                        "description": "time at which previous execution of the container started"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.ContainerStateTerminated"
            },
            "kubernetes_ContainerStateWaiting": {
                "type": "object",
                "description": "",
                "properties": {
                    "reason": {
                        "type": "string",
                        "description": "(brief) reason the container is not yet running"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.ContainerStateWaiting"
            },
            "kubernetes_ContainerStatus": {
                "type": "object",
                "description": "",
                "properties": {
                    "containerID": {
                        "type": "string",
                        "description": "container's ID in the format 'docker://\u003ccontainer_id\u003e'"
                    },
                    "image": {
                        "type": "string",
                        "description": "image of the container"
                    },
                    "imageID": {
                        "type": "string",
                        "description": "ID of the container's image"
                    },
                    "lastState": {
                        "$ref": "#/definitions/kubernetes_ContainerState",
                        "javaType": "io.fabric8.kubernetes.api.model.ContainerState"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the container; must be a DNS_LABEL and unique within the pod; cannot be updated",
                        "maxLength": 63,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    },
                    "ready": {
                        "type": "boolean",
                        "description": "specifies whether the container has passed its readiness probe"
                    },
                    "restartCount": {
                        "type": "integer",
                        "description": "the number of times the container has been restarted"
                    },
                    "state": {
                        "$ref": "#/definitions/kubernetes_ContainerState",
                        "javaType": "io.fabric8.kubernetes.api.model.ContainerState"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.ContainerStatus"
            },
            "kubernetes_EmptyDirVolumeSource": {
                "type": "object",
                "description": "",
                "properties": {
                    "medium": {
                        "type": "string",
                        "description": "type of storage used to back the volume; must be an empty string (default) or Memory"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.EmptyDirVolumeSource"
            },
            "kubernetes_EndpointAddress": {
                "type": "object",
                "description": "",
                "properties": {
                    "ip": {
                        "type": "string",
                        "description": "IP address of the endpoint"
                    },
                    "targetRef": {
                        "$ref": "#/definitions/kubernetes_ObjectReference",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectReference"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.EndpointAddress"
            },
            "kubernetes_EndpointPort": {
                "type": "object",
                "description": "",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "name of this port",
                        "maxLength": 63,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    },
                    "port": {
                        "type": "integer",
                        "description": "port number of the endpoint"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "protocol for this port; must be UDP or TCP; TCP if unspecified"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.EndpointPort"
            },
            "kubernetes_EndpointSubset": {
                "type": "object",
                "description": "",
                "properties": {
                    "addresses": {
                        "type": "array",
                        "description": "IP addresses which offer the related ports",
                        "items": {
                            "$ref": "#/definitions/kubernetes_EndpointAddress",
                            "javaType": "io.fabric8.kubernetes.api.model.EndpointAddress"
                        }
                    },
                    "ports": {
                        "type": "array",
                        "description": "port numbers available on the related IP addresses",
                        "items": {
                            "$ref": "#/definitions/kubernetes_EndpointPort",
                            "javaType": "io.fabric8.kubernetes.api.model.EndpointPort"
                        }
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.EndpointSubset"
            },
            "kubernetes_Endpoints": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "Endpoints",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ObjectMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectMeta"
                    },
                    "subsets": {
                        "type": "array",
                        "description": "sets of addresses and ports that comprise a service",
                        "items": {
                            "$ref": "#/definitions/kubernetes_EndpointSubset",
                            "javaType": "io.fabric8.kubernetes.api.model.EndpointSubset"
                        }
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.Endpoints",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.HasMetadata"
                ]
            },
            "kubernetes_EndpointsList": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "items": {
                        "type": "array",
                        "description": "list of endpoints",
                        "items": {
                            "$ref": "#/definitions/kubernetes_Endpoints",
                            "javaType": "io.fabric8.kubernetes.api.model.Endpoints"
                        }
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "EndpointsList",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ListMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ListMeta"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.EndpointsList",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.KubernetesResource"
                ]
            },
            "kubernetes_EnvVar": {
                "type": "object",
                "description": "",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "name of the environment variable; must be a C_IDENTIFIER",
                        "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
                    },
                    "value": {
                        "type": "string",
                        "description": "value of the environment variable; defaults to empty string"
                    },
                    "valueFrom": {
                        "$ref": "#/definitions/kubernetes_EnvVarSource",
                        "javaType": "io.fabric8.kubernetes.api.model.EnvVarSource"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.EnvVar"
            },
            "kubernetes_EnvVarSource": {
                "type": "object",
                "description": "",
                "properties": {
                    "fieldRef": {
                        "$ref": "#/definitions/kubernetes_ObjectFieldSelector",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectFieldSelector"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.EnvVarSource"
            },
            "kubernetes_ExecAction": {
                "type": "object",
                "description": "",
                "properties": {
                    "command": {
                        "type": "array",
                        "description": "command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd",
                        "items": {
                            "type": "string",
                            "description": "command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd"
                        }
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.ExecAction"
            },
            "kubernetes_GCEPersistentDiskVolumeSource": {
                "type": "object",
                "description": "",
                "properties": {
                    "fsType": {
                        "type": "string",
                        "description": "file system type to mount"
                    },
                    "partition": {
                        "type": "integer",
                        "description": "partition on the disk to mount (e.g."
                    },
                    "pdName": {
                        "type": "string",
                        "description": "unique name of the PD resource in GCE"
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "read-only if true"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.GCEPersistentDiskVolumeSource"
            },
            "kubernetes_GitRepoVolumeSource": {
                "type": "object",
                "description": "",
                "properties": {
                    "repository": {
                        "type": "string",
                        "description": "repository URL"
                    },
                    "revision": {
                        "type": "string",
                        "description": "commit hash for the specified revision"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.GitRepoVolumeSource"
            },
            "kubernetes_GlusterfsVolumeSource": {
                "type": "object",
                "description": "",
                "properties": {
                    "endpoints": {
                        "type": "string",
                        "description": "gluster hosts endpoints name"
                    },
                    "path": {
                        "type": "string",
                        "description": "path to gluster volume"
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "glusterfs volume to be mounted with read-only permissions"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.GlusterfsVolumeSource"
            },
            "kubernetes_HTTPGetAction": {
                "type": "object",
                "description": "",
                "properties": {
                    "host": {
                        "type": "string",
                        "description": "hostname to connect to; defaults to pod IP"
                    },
                    "path": {
                        "type": "string",
                        "description": "path to access on the HTTP server"
                    },
                    "port": {
                        "$ref": "#/definitions/kubernetes_util_IntOrString",
                        "javaType": "io.fabric8.kubernetes.api.model.util.IntOrString"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.HTTPGetAction"
            },
            "kubernetes_Handler": {
                "type": "object",
                "description": "",
                "properties": {
                    "exec": {
                        "$ref": "#/definitions/kubernetes_ExecAction",
                        "javaType": "io.fabric8.kubernetes.api.model.ExecAction"
                    },
                    "httpGet": {
                        "$ref": "#/definitions/kubernetes_HTTPGetAction",
                        "javaType": "io.fabric8.kubernetes.api.model.HTTPGetAction"
                    },
                    "tcpSocket": {
                        "$ref": "#/definitions/kubernetes_TCPSocketAction",
                        "javaType": "io.fabric8.kubernetes.api.model.TCPSocketAction"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.Handler"
            },
            "kubernetes_HostPathVolumeSource": {
                "type": "object",
                "description": "",
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "path of the directory on the host"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.HostPathVolumeSource"
            },
            "kubernetes_ISCSIVolumeSource": {
                "type": "object",
                "description": "",
                "properties": {
                    "fsType": {
                        "type": "string",
                        "description": "file system type to mount"
                    },
                    "iqn": {
                        "type": "string",
                        "description": "iSCSI Qualified Name"
                    },
                    "lun": {
                        "type": "integer",
                        "description": "iscsi target lun number"
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "read-only if true"
                    },
                    "targetPortal": {
                        "type": "string",
                        "description": "iSCSI target portal"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.ISCSIVolumeSource"
            },
            "kubernetes_Lifecycle": {
                "type": "object",
                "description": "",
                "properties": {
                    "postStart": {
                        "$ref": "#/definitions/kubernetes_Handler",
                        "javaType": "io.fabric8.kubernetes.api.model.Handler"
                    },
                    "preStop": {
                        "$ref": "#/definitions/kubernetes_Handler",
                        "javaType": "io.fabric8.kubernetes.api.model.Handler"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.Lifecycle"
            },
            "kubernetes_List": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "items": {
                        "type": "array",
                        "description": "list of objects",
                        "items": {
                            "$ref": "#/definitions/kubernetes_runtime_RawExtension",
                            "javaType": "io.fabric8.kubernetes.api.model.HasMetadata"
                        }
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "List",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ListMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ListMeta"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.BaseKubernetesList",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.KubernetesResource"
                ]
            },
            "kubernetes_ListMeta": {
                "type": "object",
                "description": "",
                "properties": {
                    "resourceVersion": {
                        "type": "string",
                        "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system"
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "URL for the object; populated by the system"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.ListMeta"
            },
            "kubernetes_LoadBalancerIngress": {
                "type": "object",
                "description": "",
                "properties": {
                    "hostname": {
                        "type": "string",
                        "description": "hostname of ingress point"
                    },
                    "ip": {
                        "type": "string",
                        "description": "IP address of ingress point"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.LoadBalancerIngress"
            },
            "kubernetes_LoadBalancerStatus": {
                "type": "object",
                "description": "",
                "properties": {
                    "ingress": {
                        "type": "array",
                        "description": "load-balancer ingress points",
                        "items": {
                            "$ref": "#/definitions/kubernetes_LoadBalancerIngress",
                            "javaType": "io.fabric8.kubernetes.api.model.LoadBalancerIngress"
                        }
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.LoadBalancerStatus"
            },
            "kubernetes_LocalObjectReference": {
                "type": "object",
                "description": "",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "name of the referent"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.LocalObjectReference"
            },
            "kubernetes_NFSVolumeSource": {
                "type": "object",
                "description": "",
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "the path that is exported by the NFS server"
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "forces the NFS export to be mounted with read-only permissions"
                    },
                    "server": {
                        "type": "string",
                        "description": "the hostname or IP address of the NFS server"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.NFSVolumeSource"
            },
            "kubernetes_Namespace": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "Namespace",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ObjectMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectMeta"
                    },
                    "spec": {
                        "$ref": "#/definitions/kubernetes_NamespaceSpec",
                        "javaType": "io.fabric8.kubernetes.api.model.NamespaceSpec"
                    },
                    "status": {
                        "$ref": "#/definitions/kubernetes_NamespaceStatus",
                        "javaType": "io.fabric8.kubernetes.api.model.NamespaceStatus"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.Namespace",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.HasMetadata"
                ]
            },
            "kubernetes_NamespaceList": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "items": {
                        "type": "array",
                        "description": "items is the list of Namespace objects in the list",
                        "items": {
                            "$ref": "#/definitions/kubernetes_Namespace",
                            "javaType": "io.fabric8.kubernetes.api.model.Namespace"
                        }
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "NamespaceList",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ListMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ListMeta"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.NamespaceList",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.KubernetesResource"
                ]
            },
            "kubernetes_NamespaceSpec": {
                "type": "object",
                "description": "",
                "properties": {
                    "finalizers": {
                        "type": "array",
                        "description": "an opaque list of values that must be empty to permanently remove object from storage",
                        "items": {
                            "type": "string",
                            "description": "an opaque list of values that must be empty to permanently remove object from storage"
                        }
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.NamespaceSpec"
            },
            "kubernetes_NamespaceStatus": {
                "type": "object",
                "description": "",
                "properties": {
                    "phase": {
                        "type": "string",
                        "description": "phase is the current lifecycle phase of the namespace"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.NamespaceStatus"
            },
            "kubernetes_Node": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "Node",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ObjectMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectMeta"
                    },
                    "spec": {
                        "$ref": "#/definitions/kubernetes_NodeSpec",
                        "javaType": "io.fabric8.kubernetes.api.model.NodeSpec"
                    },
                    "status": {
                        "$ref": "#/definitions/kubernetes_NodeStatus",
                        "javaType": "io.fabric8.kubernetes.api.model.NodeStatus"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.Node",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.HasMetadata"
                ]
            },
            "kubernetes_NodeAddress": {
                "type": "object",
                "description": "",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "the node address"
                    },
                    "type": {
                        "type": "string",
                        "description": "node address type"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.NodeAddress"
            },
            "kubernetes_NodeCondition": {
                "type": "object",
                "description": "",
                "properties": {
                    "lastHeartbeatTime": {
                        "type": "string",
                        "description": "last time we got an update on a given condition"
                    },
                    "lastTransitionTime": {
                        "type": "string",
                        "description": "last time the condition transit from one status to another"
                    },
                    "message": {
                        "type": "string",
                        "description": "human readable message indicating details about last transition"
                    },
                    "reason": {
                        "type": "string",
                        "description": "(brief) reason for the condition's last transition"
                    },
                    "status": {
                        "type": "string",
                        "description": "status of the condition"
                    },
                    "type": {
                        "type": "string",
                        "description": "type of node condition"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.NodeCondition"
            },
            "kubernetes_NodeList": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "items": {
                        "type": "array",
                        "description": "list of nodes",
                        "items": {
                            "$ref": "#/definitions/kubernetes_Node",
                            "javaType": "io.fabric8.kubernetes.api.model.Node"
                        }
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "NodeList",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ListMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ListMeta"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.NodeList",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.KubernetesResource"
                ]
            },
            "kubernetes_NodeSpec": {
                "type": "object",
                "description": "",
                "properties": {
                    "externalID": {
                        "type": "string",
                        "description": "external ID assigned to the node by some machine database (e.g. a cloud provider). Defaults to node name when empty."
                    },
                    "podCIDR": {
                        "type": "string",
                        "description": "pod IP range assigned to the node"
                    },
                    "unschedulable": {
                        "type": "boolean",
                        "description": "disable pod scheduling on the node"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.NodeSpec"
            },
            "kubernetes_NodeStatus": {
                "type": "object",
                "description": "",
                "properties": {
                    "addresses": {
                        "type": "array",
                        "description": "list of addresses reachable to the node",
                        "items": {
                            "$ref": "#/definitions/kubernetes_NodeAddress",
                            "javaType": "io.fabric8.kubernetes.api.model.NodeAddress"
                        }
                    },
                    "capacity": {
                        "type": "object",
                        "description": "compute resource capacity of the node; http://docs.k8s.io/resources.md",
                        "additionalProperties": {
                            "$ref": "#/definitions/kubernetes_resource_Quantity",
                            "javaType": "io.fabric8.kubernetes.api.model.resource.Quantity"
                        },
                        "javaType": "java.util.Map\u003cString,io.fabric8.kubernetes.api.model.resource.Quantity\u003e"
                    },
                    "conditions": {
                        "type": "array",
                        "description": "list of node conditions observed",
                        "items": {
                            "$ref": "#/definitions/kubernetes_NodeCondition",
                            "javaType": "io.fabric8.kubernetes.api.model.NodeCondition"
                        }
                    },
                    "nodeInfo": {
                        "$ref": "#/definitions/kubernetes_NodeSystemInfo",
                        "javaType": "io.fabric8.kubernetes.api.model.NodeSystemInfo"
                    },
                    "phase": {
                        "type": "string",
                        "description": "most recently observed lifecycle phase of the node"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.NodeStatus"
            },
            "kubernetes_NodeSystemInfo": {
                "type": "object",
                "description": "",
                "properties": {
                    "bootID": {
                        "type": "string",
                        "description": "boot id is the boot-id reported by the node"
                    },
                    "containerRuntimeVersion": {
                        "type": "string",
                        "description": "Container runtime version reported by the node through runtime remote API (e.g. docker://1.5.0)"
                    },
                    "kernelVersion": {
                        "type": "string",
                        "description": "Kernel version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64)"
                    },
                    "kubeProxyVersion": {
                        "type": "string",
                        "description": "Kube-proxy version reported by the node"
                    },
                    "kubeletVersion": {
                        "type": "string",
                        "description": "Kubelet version reported by the node"
                    },
                    "machineID": {
                        "type": "string",
                        "description": "machine-id reported by the node"
                    },
                    "osImage": {
                        "type": "string",
                        "description": "OS image used reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy))"
                    },
                    "systemUUID": {
                        "type": "string",
                        "description": "system-uuid reported by the node"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.NodeSystemInfo"
            },
            "kubernetes_ObjectFieldSelector": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "version of the schema that fieldPath is written in terms of; defaults to v1"
                    },
                    "fieldPath": {
                        "type": "string",
                        "description": "path of the field to select in the specified API version"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.ObjectFieldSelector"
            },
            "kubernetes_ObjectMeta": {
                "type": "object",
                "description": "",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects",
                        "additionalProperties": {
                            "type": "string",
                            "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects"
                        },
                        "javaType": "java.util.Map\u003cString,String\u003e"
                    },
                    "creationTimestamp": {
                        "type": "string",
                        "description": "RFC 3339 date and time at which the object was created; populated by the system"
                    },
                    "deletionTimestamp": {
                        "type": "string",
                        "description": "RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested"
                    },
                    "generateName": {
                        "type": "string",
                        "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional"
                    },
                    "labels": {
                        "type": "object",
                        "description": "map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services",
                        "additionalProperties": {
                            "type": "string",
                            "description": "map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services"
                        },
                        "javaType": "java.util.Map\u003cString,String\u003e"
                    },
                    "name": {
                        "type": "string",
                        "description": "string that identifies an object. Must be unique within a namespace; cannot be updated",
                        "maxLength": 63,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "namespace of the object; must be a DNS_LABEL; cannot be updated",
                        "maxLength": 253,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                    },
                    "resourceVersion": {
                        "type": "string",
                        "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system"
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "URL for the object; populated by the system"
                    },
                    "uid": {
                        "type": "string",
                        "description": "unique UUID across space and time; populated by the system; read-only"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.ObjectMeta"
            },
            "kubernetes_ObjectReference": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "API version of the referent"
                    },
                    "fieldPath": {
                        "type": "string",
                        "description": "if referring to a piece of an object instead of an entire object"
                    },
                    "kind": {
                        "type": "string",
                        "description": "kind of the referent"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the referent"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "namespace of the referent"
                    },
                    "resourceVersion": {
                        "type": "string",
                        "description": "specific resourceVersion to which this reference is made"
                    },
                    "uid": {
                        "type": "string",
                        "description": "uid of the referent"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.ObjectReference"
            },
            "kubernetes_PersistentVolumeClaimVolumeSource": {
                "type": "object",
                "description": "",
                "properties": {
                    "claimName": {
                        "type": "string",
                        "description": "the name of the claim in the same namespace to be mounted as a volume"
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "mount volume as read-only when true; default false"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.PersistentVolumeClaimVolumeSource"
            },
            "kubernetes_Pod": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "Pod",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ObjectMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectMeta"
                    },
                    "spec": {
                        "$ref": "#/definitions/kubernetes_PodSpec",
                        "javaType": "io.fabric8.kubernetes.api.model.PodSpec"
                    },
                    "status": {
                        "$ref": "#/definitions/kubernetes_PodStatus",
                        "javaType": "io.fabric8.kubernetes.api.model.PodStatus"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.Pod",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.HasMetadata"
                ]
            },
            "kubernetes_PodCondition": {
                "type": "object",
                "description": "",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "status of the condition"
                    },
                    "type": {
                        "type": "string",
                        "description": "kind of the condition"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.PodCondition"
            },
            "kubernetes_PodList": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "items": {
                        "type": "array",
                        "description": "list of pods",
                        "items": {
                            "$ref": "#/definitions/kubernetes_Pod",
                            "javaType": "io.fabric8.kubernetes.api.model.Pod"
                        }
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "PodList",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ListMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ListMeta"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.PodList",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.KubernetesResource"
                ]
            },
            "kubernetes_PodSpec": {
                "type": "object",
                "description": "",
                "properties": {
                    "activeDeadlineSeconds": {
                        "type": "integer",
                        "description": "",
                        "javaType": "Long"
                    },
                    "containers": {
                        "type": "array",
                        "description": "list of containers belonging to the pod; cannot be updated; containers cannot currently be added or removed; there must be at least one container in a Pod",
                        "items": {
                            "$ref": "#/definitions/kubernetes_Container",
                            "javaType": "io.fabric8.kubernetes.api.model.Container"
                        }
                    },
                    "dnsPolicy": {
                        "type": "string",
                        "description": "DNS policy for containers within the pod; one of 'ClusterFirst' or 'Default'"
                    },
                    "host": {
                        "type": "string",
                        "description": "host requested for this pod"
                    },
                    "hostNetwork": {
                        "type": "boolean",
                        "description": "host networking requested for this pod"
                    },
                    "imagePullSecrets": {
                        "type": "array",
                        "description": "list of references to secrets in the same namespace available for pulling the container images",
                        "items": {
                            "$ref": "#/definitions/kubernetes_LocalObjectReference",
                            "javaType": "io.fabric8.kubernetes.api.model.LocalObjectReference"
                        }
                    },
                    "nodeSelector": {
                        "type": "object",
                        "description": "selector which must match a node's labels for the pod to be scheduled on that node",
                        "additionalProperties": {
                            "type": "string",
                            "description": "selector which must match a node's labels for the pod to be scheduled on that node"
                        },
                        "javaType": "java.util.Map\u003cString,String\u003e"
                    },
                    "restartPolicy": {
                        "type": "string",
                        "description": "restart policy for all containers within the pod; one of RestartPolicyAlways"
                    },
                    "serviceAccount": {
                        "type": "string",
                        "description": "name of the ServiceAccount to use to run this pod"
                    },
                    "terminationGracePeriodSeconds": {
                        "type": "integer",
                        "description": "optional duration in seconds the pod needs to terminate gracefully; may be decreased in delete request; value must be non-negative integer; the value zero indicates delete immediately; if this value is not set",
                        "javaType": "Long"
                    },
                    "volumes": {
                        "type": "array",
                        "description": "list of volumes that can be mounted by containers belonging to the pod",
                        "items": {
                            "$ref": "#/definitions/kubernetes_Volume",
                            "javaType": "io.fabric8.kubernetes.api.model.Volume"
                        }
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.PodSpec"
            },
            "kubernetes_PodStatus": {
                "type": "object",
                "description": "",
                "properties": {
                    "conditions": {
                        "type": "array",
                        "description": "current service state of pod",
                        "items": {
                            "$ref": "#/definitions/kubernetes_PodCondition",
                            "javaType": "io.fabric8.kubernetes.api.model.PodCondition"
                        }
                    },
                    "containerStatuses": {
                        "type": "array",
                        "description": "list of container statuses",
                        "items": {
                            "$ref": "#/definitions/kubernetes_ContainerStatus",
                            "javaType": "io.fabric8.kubernetes.api.model.ContainerStatus"
                        }
                    },
                    "hostIP": {
                        "type": "string",
                        "description": "IP address of the host to which the pod is assigned; empty if not yet scheduled"
                    },
                    "message": {
                        "type": "string",
                        "description": "human readable message indicating details about why the pod is in this condition"
                    },
                    "phase": {
                        "type": "string",
                        "description": "current condition of the pod."
                    },
                    "podIP": {
                        "type": "string",
                        "description": "IP address allocated to the pod; routable at least within the cluster; empty if not yet allocated"
                    },
                    "startTime": {
                        "type": "string",
                        "description": "RFC 3339 date and time at which the object was acknowledged by the Kubelet.  This is before the Kubelet pulled the container image(s) for the pod."
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.PodStatus"
            },
            "kubernetes_PodTemplateSpec": {
                "type": "object",
                "description": "",
                "properties": {
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ObjectMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectMeta"
                    },
                    "spec": {
                        "$ref": "#/definitions/kubernetes_PodSpec",
                        "javaType": "io.fabric8.kubernetes.api.model.PodSpec"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.PodTemplateSpec"
            },
            "kubernetes_Probe": {
                "type": "object",
                "description": "",
                "properties": {
                    "exec": {
                        "$ref": "#/definitions/kubernetes_ExecAction",
                        "javaType": "io.fabric8.kubernetes.api.model.ExecAction"
                    },
                    "httpGet": {
                        "$ref": "#/definitions/kubernetes_HTTPGetAction",
                        "javaType": "io.fabric8.kubernetes.api.model.HTTPGetAction"
                    },
                    "initialDelaySeconds": {
                        "type": "integer",
                        "description": "number of seconds after the container has started before liveness probes are initiated",
                        "javaType": "Long"
                    },
                    "tcpSocket": {
                        "$ref": "#/definitions/kubernetes_TCPSocketAction",
                        "javaType": "io.fabric8.kubernetes.api.model.TCPSocketAction"
                    },
                    "timeoutSeconds": {
                        "type": "integer",
                        "description": "number of seconds after which liveness probes timeout; defaults to 1 second",
                        "javaType": "Long"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.Probe"
            },
            "kubernetes_RBDVolumeSource": {
                "type": "object",
                "description": "",
                "properties": {
                    "fsType": {
                        "type": "string",
                        "description": "file system type to mount"
                    },
                    "image": {
                        "type": "string",
                        "description": "rados image name"
                    },
                    "keyring": {
                        "type": "string",
                        "description": "keyring is the path to key ring for rados user; default is /etc/ceph/keyring; optional"
                    },
                    "monitors": {
                        "type": "array",
                        "description": "a collection of Ceph monitors",
                        "items": {
                            "type": "string",
                            "description": "a collection of Ceph monitors"
                        }
                    },
                    "pool": {
                        "type": "string",
                        "description": "rados pool name; default is rbd; optional"
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "rbd volume to be mounted with read-only permissions"
                    },
                    "secretRef": {
                        "$ref": "#/definitions/kubernetes_LocalObjectReference",
                        "javaType": "io.fabric8.kubernetes.api.model.LocalObjectReference"
                    },
                    "user": {
                        "type": "string",
                        "description": "rados user name; default is admin; optional"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.RBDVolumeSource"
            },
            "kubernetes_ReplicationController": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "ReplicationController",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ObjectMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectMeta"
                    },
                    "spec": {
                        "$ref": "#/definitions/kubernetes_ReplicationControllerSpec",
                        "javaType": "io.fabric8.kubernetes.api.model.ReplicationControllerSpec"
                    },
                    "status": {
                        "$ref": "#/definitions/kubernetes_ReplicationControllerStatus",
                        "javaType": "io.fabric8.kubernetes.api.model.ReplicationControllerStatus"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.ReplicationController",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.HasMetadata"
                ]
            },
            "kubernetes_ReplicationControllerList": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "items": {
                        "type": "array",
                        "description": "list of replication controllers",
                        "items": {
                            "$ref": "#/definitions/kubernetes_ReplicationController",
                            "javaType": "io.fabric8.kubernetes.api.model.ReplicationController"
                        }
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "ReplicationControllerList",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ListMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ListMeta"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.ReplicationControllerList",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.KubernetesResource"
                ]
            },
            "kubernetes_ReplicationControllerSpec": {
                "type": "object",
                "description": "",
                "properties": {
                    "replicas": {
                        "type": "integer",
                        "description": "number of replicas desired; defaults to 1"
                    },
                    "selector": {
                        "type": "object",
                        "description": "label keys and values that must match in order to be controlled by this replication controller",
                        "additionalProperties": {
                            "type": "string",
                            "description": "label keys and values that must match in order to be controlled by this replication controller"
                        },
                        "javaType": "java.util.Map\u003cString,String\u003e"
                    },
                    "template": {
                        "$ref": "#/definitions/kubernetes_PodTemplateSpec",
                        "javaType": "io.fabric8.kubernetes.api.model.PodTemplateSpec"
                    },
                    "templateRef": {
                        "$ref": "#/definitions/kubernetes_ObjectReference",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectReference"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.ReplicationControllerSpec"
            },
            "kubernetes_ReplicationControllerStatus": {
                "type": "object",
                "description": "",
                "properties": {
                    "replicas": {
                        "type": "integer",
                        "description": "most recently oberved number of replicas"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.ReplicationControllerStatus"
            },
            "kubernetes_ResourceRequirements": {
                "type": "object",
                "description": "",
                "properties": {
                    "limits": {
                        "type": "object",
                        "description": "Maximum amount of compute resources allowed",
                        "additionalProperties": {
                            "$ref": "#/definitions/kubernetes_resource_Quantity",
                            "javaType": "io.fabric8.kubernetes.api.model.resource.Quantity"
                        },
                        "javaType": "java.util.Map\u003cString,io.fabric8.kubernetes.api.model.resource.Quantity\u003e"
                    },
                    "requests": {
                        "type": "object",
                        "description": "Minimum amount of resources requested; requests are honored only for persistent volumes as of now",
                        "additionalProperties": {
                            "$ref": "#/definitions/kubernetes_resource_Quantity",
                            "javaType": "io.fabric8.kubernetes.api.model.resource.Quantity"
                        },
                        "javaType": "java.util.Map\u003cString,io.fabric8.kubernetes.api.model.resource.Quantity\u003e"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.ResourceRequirements"
            },
            "kubernetes_SELinuxOptions": {
                "type": "object",
                "description": "",
                "properties": {
                    "level": {
                        "type": "string",
                        "description": "the level label to apply to the container"
                    },
                    "role": {
                        "type": "string",
                        "description": "the role label to apply to the container"
                    },
                    "type": {
                        "type": "string",
                        "description": "the type label to apply to the container"
                    },
                    "user": {
                        "type": "string",
                        "description": "the user label to apply to the container"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.SELinuxOptions"
            },
            "kubernetes_Secret": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "data": {
                        "type": "object",
                        "description": "data contains the secret data.  Each key must be a valid DNS_SUBDOMAIN or leading dot followed by valid DNS_SUBDOMAIN.  Each value must be a base64 encoded string as described in https://tools.ietf.org/html/rfc4648#section-4",
                        "additionalProperties": {
                            "type": "string",
                            "description": "data contains the secret data.  Each key must be a valid DNS_SUBDOMAIN or leading dot followed by valid DNS_SUBDOMAIN.  Each value must be a base64 encoded string as described in https://tools.ietf.org/html/rfc4648#section-4"
                        },
                        "javaType": "java.util.Map\u003cString,String\u003e"
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "Secret",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ObjectMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectMeta"
                    },
                    "type": {
                        "type": "string",
                        "description": "type facilitates programmatic handling of secret data"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.Secret",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.HasMetadata"
                ]
            },
            "kubernetes_SecretList": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "items": {
                        "type": "array",
                        "description": "items is a list of secret objects",
                        "items": {
                            "$ref": "#/definitions/kubernetes_Secret",
                            "javaType": "io.fabric8.kubernetes.api.model.Secret"
                        }
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "SecretList",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ListMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ListMeta"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.SecretList",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.KubernetesResource"
                ]
            },
            "kubernetes_SecretVolumeSource": {
                "type": "object",
                "description": "",
                "properties": {
                    "secretName": {
                        "type": "string",
                        "description": "secretName is the name of a secret in the pod's namespace"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.SecretVolumeSource"
            },
            "kubernetes_SecurityContext": {
                "type": "object",
                "description": "",
                "properties": {
                    "capabilities": {
                        "$ref": "#/definitions/kubernetes_Capabilities",
                        "javaType": "io.fabric8.kubernetes.api.model.Capabilities"
                    },
                    "privileged": {
                        "type": "boolean",
                        "description": "run the container in privileged mode"
                    },
                    "runAsUser": {
                        "type": "integer",
                        "description": "the user id that runs the first process in the container",
                        "javaType": "Long"
                    },
                    "seLinuxOptions": {
                        "$ref": "#/definitions/kubernetes_SELinuxOptions",
                        "javaType": "io.fabric8.kubernetes.api.model.SELinuxOptions"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.SecurityContext"
            },
            "kubernetes_Service": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "Service",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ObjectMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectMeta"
                    },
                    "spec": {
                        "$ref": "#/definitions/kubernetes_ServiceSpec",
                        "javaType": "io.fabric8.kubernetes.api.model.ServiceSpec"
                    },
                    "status": {
                        "$ref": "#/definitions/kubernetes_ServiceStatus",
                        "javaType": "io.fabric8.kubernetes.api.model.ServiceStatus"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.Service",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.HasMetadata"
                ]
            },
            "kubernetes_ServiceAccount": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "ServiceAccount",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ObjectMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectMeta"
                    },
                    "secrets": {
                        "type": "array",
                        "description": "list of secrets that can be used by pods running as this service account",
                        "items": {
                            "$ref": "#/definitions/kubernetes_ObjectReference",
                            "javaType": "io.fabric8.kubernetes.api.model.ObjectReference"
                        }
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.ServiceAccount",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.HasMetadata"
                ]
            },
            "kubernetes_ServiceAccountList": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "items": {
                        "type": "array",
                        "description": "list of ServiceAccounts",
                        "items": {
                            "$ref": "#/definitions/kubernetes_ServiceAccount",
                            "javaType": "io.fabric8.kubernetes.api.model.ServiceAccount"
                        }
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "ServiceAccountList",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ListMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ListMeta"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.ServiceAccountList",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.KubernetesResource"
                ]
            },
            "kubernetes_ServiceList": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "items": {
                        "type": "array",
                        "description": "list of services",
                        "items": {
                            "$ref": "#/definitions/kubernetes_Service",
                            "javaType": "io.fabric8.kubernetes.api.model.Service"
                        }
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "ServiceList",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ListMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ListMeta"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.ServiceList",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.KubernetesResource"
                ]
            },
            "kubernetes_ServicePort": {
                "type": "object",
                "description": "",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "the name of this port; optional if only one port is defined",
                        "maxLength": 63,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    },
                    "nodePort": {
                        "type": "integer",
                        "description": "the port on each node on which this service is exposed"
                    },
                    "port": {
                        "type": "integer",
                        "description": "the port number that is exposed"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "the protocol used by this port; must be UDP or TCP; TCP if unspecified"
                    },
                    "targetPort": {
                        "$ref": "#/definitions/kubernetes_util_IntOrString",
                        "javaType": "io.fabric8.kubernetes.api.model.util.IntOrString"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.ServicePort"
            },
            "kubernetes_ServiceSpec": {
                "type": "object",
                "description": "",
                "properties": {
                    "deprecatedPublicIPs": {
                        "type": "array",
                        "description": "deprecated. externally visible IPs (e.g. load balancers) that should be proxied to this service",
                        "items": {
                            "type": "string",
                            "description": "deprecated. externally visible IPs (e.g. load balancers) that should be proxied to this service"
                        }
                    },
                    "portalIP": {
                        "type": "string",
                        "description": ""
                    },
                    "ports": {
                        "type": "array",
                        "description": "ports exposed by the service",
                        "items": {
                            "$ref": "#/definitions/kubernetes_ServicePort",
                            "javaType": "io.fabric8.kubernetes.api.model.ServicePort"
                        }
                    },
                    "selector": {
                        "type": "object",
                        "description": "label keys and values that must match in order to receive traffic for this service; if empty",
                        "additionalProperties": {
                            "type": "string",
                            "description": "label keys and values that must match in order to receive traffic for this service; if empty"
                        },
                        "javaType": "java.util.Map\u003cString,String\u003e"
                    },
                    "sessionAffinity": {
                        "type": "string",
                        "description": "enable client IP based session affinity; must be ClientIP or None; defaults to None"
                    },
                    "type": {
                        "type": "string",
                        "description": "type of this service; must be ClusterIP"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.ServiceSpec"
            },
            "kubernetes_ServiceStatus": {
                "type": "object",
                "description": "",
                "properties": {
                    "loadBalancer": {
                        "$ref": "#/definitions/kubernetes_LoadBalancerStatus",
                        "javaType": "io.fabric8.kubernetes.api.model.LoadBalancerStatus"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.ServiceStatus"
            },
            "kubernetes_TCPSocketAction": {
                "type": "object",
                "description": "",
                "properties": {
                    "port": {
                        "$ref": "#/definitions/kubernetes_util_IntOrString",
                        "javaType": "io.fabric8.kubernetes.api.model.util.IntOrString"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.TCPSocketAction"
            },
            "kubernetes_TypeMeta": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "version of the schema the object should have"
                    },
                    "kind": {
                        "type": "string",
                        "description": "kind of object"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.TypeMeta"
            },
            "kubernetes_Volume": {
                "type": "object",
                "description": "",
                "properties": {
                    "awsElasticBlockStore": {
                        "$ref": "#/definitions/kubernetes_AWSElasticBlockStoreVolumeSource",
                        "javaType": "io.fabric8.kubernetes.api.model.AWSElasticBlockStoreVolumeSource"
                    },
                    "emptyDir": {
                        "$ref": "#/definitions/kubernetes_EmptyDirVolumeSource",
                        "javaType": "io.fabric8.kubernetes.api.model.EmptyDirVolumeSource"
                    },
                    "gcePersistentDisk": {
                        "$ref": "#/definitions/kubernetes_GCEPersistentDiskVolumeSource",
                        "javaType": "io.fabric8.kubernetes.api.model.GCEPersistentDiskVolumeSource"
                    },
                    "gitRepo": {
                        "$ref": "#/definitions/kubernetes_GitRepoVolumeSource",
                        "javaType": "io.fabric8.kubernetes.api.model.GitRepoVolumeSource"
                    },
                    "glusterfs": {
                        "$ref": "#/definitions/kubernetes_GlusterfsVolumeSource",
                        "javaType": "io.fabric8.kubernetes.api.model.GlusterfsVolumeSource"
                    },
                    "hostPath": {
                        "$ref": "#/definitions/kubernetes_HostPathVolumeSource",
                        "javaType": "io.fabric8.kubernetes.api.model.HostPathVolumeSource"
                    },
                    "iscsi": {
                        "$ref": "#/definitions/kubernetes_ISCSIVolumeSource",
                        "javaType": "io.fabric8.kubernetes.api.model.ISCSIVolumeSource"
                    },
                    "name": {
                        "type": "string",
                        "description": "volume name; must be a DNS_LABEL and unique within the pod",
                        "maxLength": 63,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    },
                    "nfs": {
                        "$ref": "#/definitions/kubernetes_NFSVolumeSource",
                        "javaType": "io.fabric8.kubernetes.api.model.NFSVolumeSource"
                    },
                    "persistentVolumeClaim": {
                        "$ref": "#/definitions/kubernetes_PersistentVolumeClaimVolumeSource",
                        "javaType": "io.fabric8.kubernetes.api.model.PersistentVolumeClaimVolumeSource"
                    },
                    "rbd": {
                        "$ref": "#/definitions/kubernetes_RBDVolumeSource",
                        "javaType": "io.fabric8.kubernetes.api.model.RBDVolumeSource"
                    },
                    "secret": {
                        "$ref": "#/definitions/kubernetes_SecretVolumeSource",
                        "javaType": "io.fabric8.kubernetes.api.model.SecretVolumeSource"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.Volume"
            },
            "kubernetes_VolumeMount": {
                "type": "object",
                "description": "",
                "properties": {
                    "mountPath": {
                        "type": "string",
                        "description": "path within the container at which the volume should be mounted"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the volume to mount"
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "mounted read-only if true"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.VolumeMount"
            },
            "kubernetes_VolumeSource": {
                "type": "object",
                "description": "",
                "properties": {
                    "awsElasticBlockStore": {
                        "$ref": "#/definitions/kubernetes_AWSElasticBlockStoreVolumeSource",
                        "javaType": "io.fabric8.kubernetes.api.model.AWSElasticBlockStoreVolumeSource"
                    },
                    "emptyDir": {
                        "$ref": "#/definitions/kubernetes_EmptyDirVolumeSource",
                        "javaType": "io.fabric8.kubernetes.api.model.EmptyDirVolumeSource"
                    },
                    "gcePersistentDisk": {
                        "$ref": "#/definitions/kubernetes_GCEPersistentDiskVolumeSource",
                        "javaType": "io.fabric8.kubernetes.api.model.GCEPersistentDiskVolumeSource"
                    },
                    "gitRepo": {
                        "$ref": "#/definitions/kubernetes_GitRepoVolumeSource",
                        "javaType": "io.fabric8.kubernetes.api.model.GitRepoVolumeSource"
                    },
                    "glusterfs": {
                        "$ref": "#/definitions/kubernetes_GlusterfsVolumeSource",
                        "javaType": "io.fabric8.kubernetes.api.model.GlusterfsVolumeSource"
                    },
                    "hostPath": {
                        "$ref": "#/definitions/kubernetes_HostPathVolumeSource",
                        "javaType": "io.fabric8.kubernetes.api.model.HostPathVolumeSource"
                    },
                    "iscsi": {
                        "$ref": "#/definitions/kubernetes_ISCSIVolumeSource",
                        "javaType": "io.fabric8.kubernetes.api.model.ISCSIVolumeSource"
                    },
                    "nfs": {
                        "$ref": "#/definitions/kubernetes_NFSVolumeSource",
                        "javaType": "io.fabric8.kubernetes.api.model.NFSVolumeSource"
                    },
                    "persistentVolumeClaim": {
                        "$ref": "#/definitions/kubernetes_PersistentVolumeClaimVolumeSource",
                        "javaType": "io.fabric8.kubernetes.api.model.PersistentVolumeClaimVolumeSource"
                    },
                    "rbd": {
                        "$ref": "#/definitions/kubernetes_RBDVolumeSource",
                        "javaType": "io.fabric8.kubernetes.api.model.RBDVolumeSource"
                    },
                    "secret": {
                        "$ref": "#/definitions/kubernetes_SecretVolumeSource",
                        "javaType": "io.fabric8.kubernetes.api.model.SecretVolumeSource"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.VolumeSource"
            },
            "kubernetes_base_ListMeta": {
                "type": "object",
                "description": "",
                "properties": {
                    "resourceVersion": {
                        "type": "string",
                        "description": ""
                    },
                    "selfLink": {
                        "type": "string",
                        "description": ""
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.ListMeta"
            },
            "kubernetes_base_Status": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "code": {
                        "type": "integer",
                        "description": ""
                    },
                    "details": {
                        "$ref": "#/definitions/kubernetes_base_StatusDetails",
                        "javaType": "io.fabric8.kubernetes.api.model.base.StatusDetails"
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "Status",
                        "required": true
                    },
                    "message": {
                        "type": "string",
                        "description": ""
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_base_ListMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.base.ListMeta"
                    },
                    "reason": {
                        "type": "string",
                        "description": ""
                    },
                    "status": {
                        "type": "string",
                        "description": ""
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.Status"
            },
            "kubernetes_base_StatusCause": {
                "type": "object",
                "description": "",
                "properties": {
                    "field": {
                        "type": "string",
                        "description": ""
                    },
                    "message": {
                        "type": "string",
                        "description": ""
                    },
                    "reason": {
                        "type": "string",
                        "description": ""
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.StatusCause"
            },
            "kubernetes_base_StatusDetails": {
                "type": "object",
                "description": "",
                "properties": {
                    "causes": {
                        "type": "array",
                        "description": "",
                        "items": {
                            "$ref": "#/definitions/kubernetes_base_StatusCause",
                            "javaType": "io.fabric8.kubernetes.api.model.base.StatusCause"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "kind": {
                        "type": "string",
                        "description": ""
                    },
                    "retryAfterSeconds": {
                        "type": "integer",
                        "description": ""
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.StatusDetails"
            },
            "kubernetes_base_TypeMeta": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": ""
                    },
                    "kind": {
                        "type": "string",
                        "description": ""
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.TypeMeta"
            },
            "kubernetes_config_AuthInfo": {
                "type": "object",
                "description": "",
                "properties": {
                    "client-certificate": {
                        "type": "string",
                        "description": ""
                    },
                    "client-certificate-data": {
                        "type": "string",
                        "description": ""
                    },
                    "client-key": {
                        "type": "string",
                        "description": ""
                    },
                    "client-key-data": {
                        "type": "string",
                        "description": ""
                    },
                    "extensions": {
                        "type": "array",
                        "description": "",
                        "items": {
                            "$ref": "#/definitions/kubernetes_config_NamedExtension",
                            "javaType": "io.fabric8.kubernetes.api.model.config.NamedExtension"
                        }
                    },
                    "password": {
                        "type": "string",
                        "description": ""
                    },
                    "token": {
                        "type": "string",
                        "description": ""
                    },
                    "username": {
                        "type": "string",
                        "description": ""
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.config.AuthInfo"
            },
            "kubernetes_config_Cluster": {
                "type": "object",
                "description": "",
                "properties": {
                    "api-version": {
                        "type": "string",
                        "description": ""
                    },
                    "certificate-authority": {
                        "type": "string",
                        "description": ""
                    },
                    "certificate-authority-data": {
                        "type": "string",
                        "description": ""
                    },
                    "extensions": {
                        "type": "array",
                        "description": "",
                        "items": {
                            "$ref": "#/definitions/kubernetes_config_NamedExtension",
                            "javaType": "io.fabric8.kubernetes.api.model.config.NamedExtension"
                        }
                    },
                    "insecure-skip-tls-verify": {
                        "type": "boolean",
                        "description": ""
                    },
                    "server": {
                        "type": "string",
                        "description": ""
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.config.Cluster"
            },
            "kubernetes_config_Config": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": ""
                    },
                    "clusters": {
                        "type": "array",
                        "description": "",
                        "items": {
                            "$ref": "#/definitions/kubernetes_config_NamedCluster",
                            "javaType": "io.fabric8.kubernetes.api.model.config.NamedCluster"
                        }
                    },
                    "contexts": {
                        "type": "array",
                        "description": "",
                        "items": {
                            "$ref": "#/definitions/kubernetes_config_NamedContext",
                            "javaType": "io.fabric8.kubernetes.api.model.config.NamedContext"
                        }
                    },
                    "current-context": {
                        "type": "string",
                        "description": ""
                    },
                    "extensions": {
                        "type": "array",
                        "description": "",
                        "items": {
                            "$ref": "#/definitions/kubernetes_config_NamedExtension",
                            "javaType": "io.fabric8.kubernetes.api.model.config.NamedExtension"
                        }
                    },
                    "kind": {
                        "type": "string",
                        "description": ""
                    },
                    "preferences": {
                        "$ref": "#/definitions/kubernetes_config_Preferences",
                        "javaType": "io.fabric8.kubernetes.api.model.config.Preferences"
                    },
                    "users": {
                        "type": "array",
                        "description": "",
                        "items": {
                            "$ref": "#/definitions/kubernetes_config_NamedAuthInfo",
                            "javaType": "io.fabric8.kubernetes.api.model.config.NamedAuthInfo"
                        }
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.config.Config"
            },
            "kubernetes_config_Context": {
                "type": "object",
                "description": "",
                "properties": {
                    "cluster": {
                        "type": "string",
                        "description": ""
                    },
                    "extensions": {
                        "type": "array",
                        "description": "",
                        "items": {
                            "$ref": "#/definitions/kubernetes_config_NamedExtension",
                            "javaType": "io.fabric8.kubernetes.api.model.config.NamedExtension"
                        }
                    },
                    "namespace": {
                        "type": "string",
                        "description": ""
                    },
                    "user": {
                        "type": "string",
                        "description": ""
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.config.Context"
            },
            "kubernetes_config_NamedAuthInfo": {
                "type": "object",
                "description": "",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "user": {
                        "$ref": "#/definitions/kubernetes_config_AuthInfo",
                        "javaType": "io.fabric8.kubernetes.api.model.config.AuthInfo"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.config.NamedAuthInfo"
            },
            "kubernetes_config_NamedCluster": {
                "type": "object",
                "description": "",
                "properties": {
                    "cluster": {
                        "$ref": "#/definitions/kubernetes_config_Cluster",
                        "javaType": "io.fabric8.kubernetes.api.model.config.Cluster"
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.config.NamedCluster"
            },
            "kubernetes_config_NamedContext": {
                "type": "object",
                "description": "",
                "properties": {
                    "context": {
                        "$ref": "#/definitions/kubernetes_config_Context",
                        "javaType": "io.fabric8.kubernetes.api.model.config.Context"
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.config.NamedContext"
            },
            "kubernetes_config_NamedExtension": {
                "type": "object",
                "description": "",
                "properties": {
                    "extension": {
                        "$ref": "#/definitions/kubernetes_runtime_RawExtension",
                        "javaType": "io.fabric8.kubernetes.api.model.HasMetadata"
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.config.NamedExtension"
            },
            "kubernetes_config_Preferences": {
                "type": "object",
                "description": "",
                "properties": {
                    "colors": {
                        "type": "boolean",
                        "description": ""
                    },
                    "extensions": {
                        "type": "array",
                        "description": "",
                        "items": {
                            "$ref": "#/definitions/kubernetes_config_NamedExtension",
                            "javaType": "io.fabric8.kubernetes.api.model.config.NamedExtension"
                        }
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.config.Preferences"
            },
            "kubernetes_errors_StatusError": {
                "type": "object",
                "description": "",
                "properties": {
                    "ErrStatus": {
                        "$ref": "#/definitions/kubernetes_base_Status",
                        "javaType": "io.fabric8.kubernetes.api.model.base.Status"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.errors.StatusError"
            },
            "kubernetes_resource_Quantity": {
                "type": "object",
                "description": "",
                "properties": {
                    "Amount": {
                        "$ref": "#/definitions/speter_inf_Dec",
                        "javaType": "io.fabric8.openshift.client.util.Dec"
                    },
                    "Format": {
                        "type": "string",
                        "description": ""
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.resource.Quantity"
            },
            "kubernetes_runtime_RawExtension": {
                "type": "object",
                "description": "",
                "properties": {
                    "RawJSON": {
                        "type": "string",
                        "description": ""
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.HasMetadata"
            },
            "kubernetes_util_IntOrString": {
                "type": "object",
                "description": "",
                "properties": {
                    "IntVal": {
                        "type": "integer",
                        "description": ""
                    },
                    "Kind": {
                        "type": "integer",
                        "description": ""
                    },
                    "StrVal": {
                        "type": "string",
                        "description": ""
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.util.IntOrString"
            },
            "kubernetes_watch_WatchEvent": {
                "type": "object",
                "description": "",
                "properties": {
                    "object": {
                        "$ref": "#/definitions/kubernetes_runtime_RawExtension",
                        "javaType": "io.fabric8.kubernetes.api.model.HasMetadata"
                    },
                    "type": {
                        "type": "string",
                        "description": "the type of watch event; may be ADDED"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.watch.WatchEvent"
            },
            "os_build_Build": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "Build",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ObjectMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectMeta"
                    },
                    "spec": {
                        "$ref": "#/definitions/os_build_BuildSpec",
                        "javaType": "io.fabric8.openshift.api.model.BuildSpec"
                    },
                    "status": {
                        "$ref": "#/definitions/os_build_BuildStatus",
                        "javaType": "io.fabric8.openshift.api.model.BuildStatus"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.Build",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.HasMetadata"
                ]
            },
            "os_build_BuildConfig": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "BuildConfig",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ObjectMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectMeta"
                    },
                    "spec": {
                        "$ref": "#/definitions/os_build_BuildConfigSpec",
                        "javaType": "io.fabric8.openshift.api.model.BuildConfigSpec"
                    },
                    "status": {
                        "$ref": "#/definitions/os_build_BuildConfigStatus",
                        "javaType": "io.fabric8.openshift.api.model.BuildConfigStatus"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.BuildConfig",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.HasMetadata"
                ]
            },
            "os_build_BuildConfigList": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "items": {
                        "type": "array",
                        "description": "list of build configs",
                        "items": {
                            "$ref": "#/definitions/os_build_BuildConfig",
                            "javaType": "io.fabric8.openshift.api.model.BuildConfig"
                        }
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "BuildConfigList",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ListMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ListMeta"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.BuildConfigList",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.KubernetesResource"
                ]
            },
            "os_build_BuildConfigSpec": {
                "type": "object",
                "description": "",
                "properties": {
                    "output": {
                        "$ref": "#/definitions/os_build_BuildOutput",
                        "javaType": "io.fabric8.openshift.api.model.BuildOutput"
                    },
                    "resources": {
                        "$ref": "#/definitions/kubernetes_ResourceRequirements",
                        "javaType": "io.fabric8.kubernetes.api.model.ResourceRequirements"
                    },
                    "revision": {
                        "$ref": "#/definitions/os_build_SourceRevision",
                        "javaType": "io.fabric8.openshift.api.model.SourceRevision"
                    },
                    "serviceAccount": {
                        "type": "string",
                        "description": "the name of the service account to use to run pods created by the build"
                    },
                    "source": {
                        "$ref": "#/definitions/os_build_BuildSource",
                        "javaType": "io.fabric8.openshift.api.model.BuildSource"
                    },
                    "strategy": {
                        "$ref": "#/definitions/os_build_BuildStrategy",
                        "javaType": "io.fabric8.openshift.api.model.BuildStrategy"
                    },
                    "triggers": {
                        "type": "array",
                        "description": "determines how new builds can be launched from a build config.  if no triggers are defined",
                        "items": {
                            "$ref": "#/definitions/os_build_BuildTriggerPolicy",
                            "javaType": "io.fabric8.openshift.api.model.BuildTriggerPolicy"
                        }
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.BuildConfigSpec"
            },
            "os_build_BuildConfigStatus": {
                "type": "object",
                "description": "",
                "properties": {
                    "lastVersion": {
                        "type": "integer",
                        "description": "used to inform about number of last triggered build"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.BuildConfigStatus"
            },
            "os_build_BuildList": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "items": {
                        "type": "array",
                        "description": "list of builds",
                        "items": {
                            "$ref": "#/definitions/os_build_Build",
                            "javaType": "io.fabric8.openshift.api.model.Build"
                        }
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "BuildList",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ListMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ListMeta"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.BuildList",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.KubernetesResource"
                ]
            },
            "os_build_BuildOutput": {
                "type": "object",
                "description": "",
                "properties": {
                    "pushSecret": {
                        "$ref": "#/definitions/kubernetes_LocalObjectReference",
                        "javaType": "io.fabric8.kubernetes.api.model.LocalObjectReference"
                    },
                    "to": {
                        "$ref": "#/definitions/kubernetes_ObjectReference",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectReference"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.BuildOutput"
            },
            "os_build_BuildRequest": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "BuildRequest",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ObjectMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectMeta"
                    },
                    "revision": {
                        "$ref": "#/definitions/os_build_SourceRevision",
                        "javaType": "io.fabric8.openshift.api.model.SourceRevision"
                    },
                    "triggeredByImage": {
                        "$ref": "#/definitions/kubernetes_ObjectReference",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectReference"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.BuildRequest",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.HasMetadata"
                ]
            },
            "os_build_BuildSource": {
                "type": "object",
                "description": "",
                "properties": {
                    "contextDir": {
                        "type": "string",
                        "description": "specifies sub-directory where the source code for the application exists"
                    },
                    "git": {
                        "$ref": "#/definitions/os_build_GitBuildSource",
                        "javaType": "io.fabric8.openshift.api.model.GitBuildSource"
                    },
                    "sourceSecret": {
                        "$ref": "#/definitions/kubernetes_LocalObjectReference",
                        "javaType": "io.fabric8.kubernetes.api.model.LocalObjectReference"
                    },
                    "type": {
                        "type": "string",
                        "description": "type of source control management system"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.BuildSource"
            },
            "os_build_BuildSpec": {
                "type": "object",
                "description": "",
                "properties": {
                    "output": {
                        "$ref": "#/definitions/os_build_BuildOutput",
                        "javaType": "io.fabric8.openshift.api.model.BuildOutput"
                    },
                    "resources": {
                        "$ref": "#/definitions/kubernetes_ResourceRequirements",
                        "javaType": "io.fabric8.kubernetes.api.model.ResourceRequirements"
                    },
                    "revision": {
                        "$ref": "#/definitions/os_build_SourceRevision",
                        "javaType": "io.fabric8.openshift.api.model.SourceRevision"
                    },
                    "serviceAccount": {
                        "type": "string",
                        "description": "the name of the service account to use to run pods created by the build"
                    },
                    "source": {
                        "$ref": "#/definitions/os_build_BuildSource",
                        "javaType": "io.fabric8.openshift.api.model.BuildSource"
                    },
                    "strategy": {
                        "$ref": "#/definitions/os_build_BuildStrategy",
                        "javaType": "io.fabric8.openshift.api.model.BuildStrategy"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.BuildSpec"
            },
            "os_build_BuildStatus": {
                "type": "object",
                "description": "",
                "properties": {
                    "cancelled": {
                        "type": "boolean",
                        "description": "describes if a canceling event was triggered for the build"
                    },
                    "completionTimestamp": {
                        "type": "string",
                        "description": "server time when the pod running this build stopped running"
                    },
                    "config": {
                        "$ref": "#/definitions/kubernetes_ObjectReference",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectReference"
                    },
                    "duration": {
                        "type": "integer",
                        "description": "amount of time the build has been running",
                        "javaType": "Long"
                    },
                    "message": {
                        "type": "string",
                        "description": "human-readable message indicating details about why the build has this status"
                    },
                    "phase": {
                        "type": "string",
                        "description": "observed point in the build lifecycle"
                    },
                    "startTimestamp": {
                        "type": "string",
                        "description": "server time when this build started running in a pod"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.BuildStatus"
            },
            "os_build_BuildStrategy": {
                "type": "object",
                "description": "",
                "properties": {
                    "customStrategy": {
                        "$ref": "#/definitions/os_build_CustomBuildStrategy",
                        "javaType": "io.fabric8.openshift.api.model.CustomBuildStrategy"
                    },
                    "dockerStrategy": {
                        "$ref": "#/definitions/os_build_DockerBuildStrategy",
                        "javaType": "io.fabric8.openshift.api.model.DockerBuildStrategy"
                    },
                    "sourceStrategy": {
                        "$ref": "#/definitions/os_build_SourceBuildStrategy",
                        "javaType": "io.fabric8.openshift.api.model.SourceBuildStrategy"
                    },
                    "type": {
                        "type": "string",
                        "description": "identifies the type of build strategy"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.BuildStrategy"
            },
            "os_build_BuildTriggerPolicy": {
                "type": "object",
                "description": "",
                "properties": {
                    "generic": {
                        "$ref": "#/definitions/os_build_WebHookTrigger",
                        "javaType": "io.fabric8.openshift.api.model.WebHookTrigger"
                    },
                    "github": {
                        "$ref": "#/definitions/os_build_WebHookTrigger",
                        "javaType": "io.fabric8.openshift.api.model.WebHookTrigger"
                    },
                    "imageChange": {
                        "$ref": "#/definitions/os_build_ImageChangeTrigger",
                        "javaType": "io.fabric8.openshift.api.model.ImageChangeTrigger"
                    },
                    "type": {
                        "type": "string",
                        "description": "type of build trigger"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.BuildTriggerPolicy"
            },
            "os_build_CustomBuildStrategy": {
                "type": "object",
                "description": "",
                "properties": {
                    "env": {
                        "type": "array",
                        "description": "additional environment variables you want to pass into a builder container",
                        "items": {
                            "$ref": "#/definitions/kubernetes_EnvVar",
                            "javaType": "io.fabric8.kubernetes.api.model.EnvVar"
                        }
                    },
                    "exposeDockerSocket": {
                        "type": "boolean",
                        "description": "allow running Docker commands (and build Docker images) from inside the container"
                    },
                    "from": {
                        "$ref": "#/definitions/kubernetes_ObjectReference",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectReference"
                    },
                    "pullSecret": {
                        "$ref": "#/definitions/kubernetes_LocalObjectReference",
                        "javaType": "io.fabric8.kubernetes.api.model.LocalObjectReference"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.CustomBuildStrategy"
            },
            "os_build_DockerBuildStrategy": {
                "type": "object",
                "description": "",
                "properties": {
                    "from": {
                        "$ref": "#/definitions/kubernetes_ObjectReference",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectReference"
                    },
                    "noCache": {
                        "type": "boolean",
                        "description": "if true"
                    },
                    "pullSecret": {
                        "$ref": "#/definitions/kubernetes_LocalObjectReference",
                        "javaType": "io.fabric8.kubernetes.api.model.LocalObjectReference"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.DockerBuildStrategy"
            },
            "os_build_GitBuildSource": {
                "type": "object",
                "description": "",
                "properties": {
                    "ref": {
                        "type": "string",
                        "description": "identifies the branch/tag/ref to build"
                    },
                    "uri": {
                        "type": "string",
                        "description": "points to the source that will be built"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.GitBuildSource"
            },
            "os_build_GitSourceRevision": {
                "type": "object",
                "description": "",
                "properties": {
                    "author": {
                        "$ref": "#/definitions/os_build_SourceControlUser",
                        "javaType": "io.fabric8.openshift.api.model.SourceControlUser"
                    },
                    "commit": {
                        "type": "string",
                        "description": "hash identifying a specific commit"
                    },
                    "committer": {
                        "$ref": "#/definitions/os_build_SourceControlUser",
                        "javaType": "io.fabric8.openshift.api.model.SourceControlUser"
                    },
                    "message": {
                        "type": "string",
                        "description": "description of a specific commit"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.GitSourceRevision"
            },
            "os_build_ImageChangeTrigger": {
                "type": "object",
                "description": "",
                "properties": {
                    "lastTriggeredImageID": {
                        "type": "string",
                        "description": "used internally to save last used image ID for build"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.ImageChangeTrigger"
            },
            "os_build_SourceBuildStrategy": {
                "type": "object",
                "description": "",
                "properties": {
                    "env": {
                        "type": "array",
                        "description": "additional environment variables you want to pass into a builder container",
                        "items": {
                            "$ref": "#/definitions/kubernetes_EnvVar",
                            "javaType": "io.fabric8.kubernetes.api.model.EnvVar"
                        }
                    },
                    "from": {
                        "$ref": "#/definitions/kubernetes_ObjectReference",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectReference"
                    },
                    "incremental": {
                        "type": "boolean",
                        "description": "forces the source build to do incremental builds if true"
                    },
                    "pullSecret": {
                        "$ref": "#/definitions/kubernetes_LocalObjectReference",
                        "javaType": "io.fabric8.kubernetes.api.model.LocalObjectReference"
                    },
                    "scripts": {
                        "type": "string",
                        "description": "location of the source scripts"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.SourceBuildStrategy"
            },
            "os_build_SourceControlUser": {
                "type": "object",
                "description": "",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "e-mail of the source control user"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the source control user"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.SourceControlUser"
            },
            "os_build_SourceRevision": {
                "type": "object",
                "description": "",
                "properties": {
                    "git": {
                        "$ref": "#/definitions/os_build_GitSourceRevision",
                        "javaType": "io.fabric8.openshift.api.model.GitSourceRevision"
                    },
                    "type": {
                        "type": "string",
                        "description": "type of the build source"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.SourceRevision"
            },
            "os_build_WebHookTrigger": {
                "type": "object",
                "description": "",
                "properties": {
                    "secret": {
                        "type": "string",
                        "description": "secret used to validate requests"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.WebHookTrigger"
            },
            "os_deploy_CustomDeploymentStrategyParams": {
                "type": "object",
                "description": "",
                "properties": {
                    "command": {
                        "type": "array",
                        "description": "optionally overrides the container command (default is specified by the image)",
                        "items": {
                            "type": "string",
                            "description": "optionally overrides the container command (default is specified by the image)"
                        }
                    },
                    "environment": {
                        "type": "array",
                        "description": "environment variables provided to the deployment process container",
                        "items": {
                            "$ref": "#/definitions/kubernetes_EnvVar",
                            "javaType": "io.fabric8.kubernetes.api.model.EnvVar"
                        }
                    },
                    "image": {
                        "type": "string",
                        "description": "a Docker image which can carry out a deployment"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.CustomDeploymentStrategyParams"
            },
            "os_deploy_DeploymentCause": {
                "type": "object",
                "description": "",
                "properties": {
                    "imageTrigger": {
                        "$ref": "#/definitions/os_deploy_DeploymentCauseImageTrigger",
                        "javaType": "io.fabric8.openshift.api.model.DeploymentCauseImageTrigger"
                    },
                    "type": {
                        "type": "string",
                        "description": "the type of trigger that resulted in a new deployment"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.DeploymentCause"
            },
            "os_deploy_DeploymentCauseImageTrigger": {
                "type": "object",
                "description": "",
                "properties": {
                    "from": {
                        "$ref": "#/definitions/kubernetes_ObjectReference",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectReference"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.DeploymentCauseImageTrigger"
            },
            "os_deploy_DeploymentConfig": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "DeploymentConfig",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ObjectMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectMeta"
                    },
                    "spec": {
                        "$ref": "#/definitions/os_deploy_DeploymentConfigSpec",
                        "javaType": "io.fabric8.openshift.api.model.DeploymentConfigSpec"
                    },
                    "status": {
                        "$ref": "#/definitions/os_deploy_DeploymentConfigStatus",
                        "javaType": "io.fabric8.openshift.api.model.DeploymentConfigStatus"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.DeploymentConfig",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.HasMetadata"
                ]
            },
            "os_deploy_DeploymentConfigList": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "items": {
                        "type": "array",
                        "description": "a list of deployment configs",
                        "items": {
                            "$ref": "#/definitions/os_deploy_DeploymentConfig",
                            "javaType": "io.fabric8.openshift.api.model.DeploymentConfig"
                        }
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "DeploymentConfigList",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ListMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ListMeta"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.DeploymentConfigList",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.KubernetesResource"
                ]
            },
            "os_deploy_DeploymentConfigSpec": {
                "type": "object",
                "description": "",
                "properties": {
                    "replicas": {
                        "type": "integer",
                        "description": "the desired number of replicas"
                    },
                    "selector": {
                        "type": "object",
                        "description": "a label query over pods that should match the replicas count",
                        "additionalProperties": {
                            "type": "string",
                            "description": "a label query over pods that should match the replicas count"
                        },
                        "javaType": "java.util.Map\u003cString,String\u003e"
                    },
                    "strategy": {
                        "$ref": "#/definitions/os_deploy_DeploymentStrategy",
                        "javaType": "io.fabric8.openshift.api.model.DeploymentStrategy"
                    },
                    "template": {
                        "$ref": "#/definitions/kubernetes_PodTemplateSpec",
                        "javaType": "io.fabric8.kubernetes.api.model.PodTemplateSpec"
                    },
                    "templateRef": {
                        "$ref": "#/definitions/kubernetes_ObjectReference",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectReference"
                    },
                    "triggers": {
                        "type": "array",
                        "description": "how new deployments are triggered",
                        "items": {
                            "$ref": "#/definitions/os_deploy_DeploymentTriggerPolicy",
                            "javaType": "io.fabric8.openshift.api.model.DeploymentTriggerPolicy"
                        }
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.DeploymentConfigSpec"
            },
            "os_deploy_DeploymentConfigStatus": {
                "type": "object",
                "description": "",
                "properties": {
                    "details": {
                        "$ref": "#/definitions/os_deploy_DeploymentDetails",
                        "javaType": "io.fabric8.openshift.api.model.DeploymentDetails"
                    },
                    "latestVersion": {
                        "type": "integer",
                        "description": "used to determine whether the current deployment is out of sync"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.DeploymentConfigStatus"
            },
            "os_deploy_DeploymentDetails": {
                "type": "object",
                "description": "",
                "properties": {
                    "causes": {
                        "type": "array",
                        "description": "extended data associated with all the causes for creating a new deployment",
                        "items": {
                            "$ref": "#/definitions/os_deploy_DeploymentCause",
                            "javaType": "io.fabric8.openshift.api.model.DeploymentCause"
                        }
                    },
                    "message": {
                        "type": "string",
                        "description": "a user specified change message"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.DeploymentDetails"
            },
            "os_deploy_DeploymentStrategy": {
                "type": "object",
                "description": "",
                "properties": {
                    "customParams": {
                        "$ref": "#/definitions/os_deploy_CustomDeploymentStrategyParams",
                        "javaType": "io.fabric8.openshift.api.model.CustomDeploymentStrategyParams"
                    },
                    "recreateParams": {
                        "$ref": "#/definitions/os_deploy_RecreateDeploymentStrategyParams",
                        "javaType": "io.fabric8.openshift.api.model.RecreateDeploymentStrategyParams"
                    },
                    "resources": {
                        "$ref": "#/definitions/kubernetes_ResourceRequirements",
                        "javaType": "io.fabric8.kubernetes.api.model.ResourceRequirements"
                    },
                    "rollingParams": {
                        "$ref": "#/definitions/os_deploy_RollingDeploymentStrategyParams",
                        "javaType": "io.fabric8.openshift.api.model.RollingDeploymentStrategyParams"
                    },
                    "type": {
                        "type": "string",
                        "description": "the name of a deployment strategy"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.DeploymentStrategy"
            },
            "os_deploy_DeploymentTriggerImageChangeParams": {
                "type": "object",
                "description": "",
                "properties": {
                    "automatic": {
                        "type": "boolean",
                        "description": "whether detection of a new tag value should trigger a deployment"
                    },
                    "containerNames": {
                        "type": "array",
                        "description": "restricts tag updates to a set of container names in the pod",
                        "items": {
                            "type": "string",
                            "description": "restricts tag updates to a set of container names in the pod"
                        }
                    },
                    "from": {
                        "$ref": "#/definitions/kubernetes_ObjectReference",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectReference"
                    },
                    "lastTriggeredImage": {
                        "type": "string",
                        "description": "the last image to be triggered"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.DeploymentTriggerImageChangeParams"
            },
            "os_deploy_DeploymentTriggerPolicy": {
                "type": "object",
                "description": "",
                "properties": {
                    "imageChangeParams": {
                        "$ref": "#/definitions/os_deploy_DeploymentTriggerImageChangeParams",
                        "javaType": "io.fabric8.openshift.api.model.DeploymentTriggerImageChangeParams"
                    },
                    "type": {
                        "type": "string",
                        "description": "the type of the trigger"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.DeploymentTriggerPolicy"
            },
            "os_deploy_ExecNewPodHook": {
                "type": "object",
                "description": "",
                "properties": {
                    "command": {
                        "type": "array",
                        "description": "the hook command and its arguments",
                        "items": {
                            "type": "string",
                            "description": "the hook command and its arguments"
                        }
                    },
                    "containerName": {
                        "type": "string",
                        "description": "the name of a container from the pod template whose image will be used for the hook container"
                    },
                    "env": {
                        "type": "array",
                        "description": "environment variables provided to the hook container",
                        "items": {
                            "$ref": "#/definitions/kubernetes_EnvVar",
                            "javaType": "io.fabric8.kubernetes.api.model.EnvVar"
                        }
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.ExecNewPodHook"
            },
            "os_deploy_LifecycleHook": {
                "type": "object",
                "description": "",
                "properties": {
                    "execNewPod": {
                        "$ref": "#/definitions/os_deploy_ExecNewPodHook",
                        "javaType": "io.fabric8.openshift.api.model.ExecNewPodHook"
                    },
                    "failurePolicy": {
                        "type": "string",
                        "description": "what action to take if the hook fails"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.LifecycleHook"
            },
            "os_deploy_RecreateDeploymentStrategyParams": {
                "type": "object",
                "description": "",
                "properties": {
                    "post": {
                        "$ref": "#/definitions/os_deploy_LifecycleHook",
                        "javaType": "io.fabric8.openshift.api.model.LifecycleHook"
                    },
                    "pre": {
                        "$ref": "#/definitions/os_deploy_LifecycleHook",
                        "javaType": "io.fabric8.openshift.api.model.LifecycleHook"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.RecreateDeploymentStrategyParams"
            },
            "os_deploy_RollingDeploymentStrategyParams": {
                "type": "object",
                "description": "",
                "properties": {
                    "intervalSeconds": {
                        "type": "integer",
                        "description": "the time to wait between polling deployment status after update",
                        "javaType": "Long"
                    },
                    "post": {
                        "$ref": "#/definitions/os_deploy_LifecycleHook",
                        "javaType": "io.fabric8.openshift.api.model.LifecycleHook"
                    },
                    "pre": {
                        "$ref": "#/definitions/os_deploy_LifecycleHook",
                        "javaType": "io.fabric8.openshift.api.model.LifecycleHook"
                    },
                    "timeoutSeconds": {
                        "type": "integer",
                        "description": "the time to wait for updates before giving up",
                        "javaType": "Long"
                    },
                    "updatePeriodSeconds": {
                        "type": "integer",
                        "description": "the time to wait between individual pod updates",
                        "javaType": "Long"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.RollingDeploymentStrategyParams"
            },
            "os_image_Image": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "dockerImageManifest": {
                        "type": "string",
                        "description": "raw JSON of the manifest"
                    },
                    "dockerImageMetadata": {
                        "$ref": "#/definitions/kubernetes_runtime_RawExtension",
                        "javaType": "io.fabric8.kubernetes.api.model.HasMetadata"
                    },
                    "dockerImageMetadataVersion": {
                        "type": "string",
                        "description": "conveys version of the object"
                    },
                    "dockerImageReference": {
                        "type": "string",
                        "description": "string that can be used to pull this image"
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "Image",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ObjectMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectMeta"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.Image",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.HasMetadata"
                ]
            },
            "os_image_ImageList": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "items": {
                        "type": "array",
                        "description": "list of image objects",
                        "items": {
                            "$ref": "#/definitions/os_image_Image",
                            "javaType": "io.fabric8.openshift.api.model.Image"
                        }
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "ImageList",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ListMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ListMeta"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.ImageList",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.KubernetesResource"
                ]
            },
            "os_image_ImageStream": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "ImageStream",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ObjectMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectMeta"
                    },
                    "spec": {
                        "$ref": "#/definitions/os_image_ImageStreamSpec",
                        "javaType": "io.fabric8.openshift.api.model.ImageStreamSpec"
                    },
                    "status": {
                        "$ref": "#/definitions/os_image_ImageStreamStatus",
                        "javaType": "io.fabric8.openshift.api.model.ImageStreamStatus"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.ImageStream",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.HasMetadata"
                ]
            },
            "os_image_ImageStreamList": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "items": {
                        "type": "array",
                        "description": "list of image stream objects",
                        "items": {
                            "$ref": "#/definitions/os_image_ImageStream",
                            "javaType": "io.fabric8.openshift.api.model.ImageStream"
                        }
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "ImageStreamList",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ListMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ListMeta"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.ImageStreamList",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.KubernetesResource"
                ]
            },
            "os_image_ImageStreamSpec": {
                "type": "object",
                "description": "",
                "properties": {
                    "dockerImageRepository": {
                        "type": "string",
                        "description": "optional field if specified this stream is backed by a Docker repository on this server"
                    },
                    "tags": {
                        "type": "array",
                        "description": "map arbitrary string values to specific image locators",
                        "items": {
                            "$ref": "#/definitions/os_image_NamedTagReference",
                            "javaType": "io.fabric8.openshift.api.model.NamedTagReference"
                        }
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.ImageStreamSpec"
            },
            "os_image_ImageStreamStatus": {
                "type": "object",
                "description": "",
                "properties": {
                    "dockerImageRepository": {
                        "type": "string",
                        "description": "represents the effective location this stream may be accessed at"
                    },
                    "tags": {
                        "type": "array",
                        "description": "historical record of images associated with each tag",
                        "items": {
                            "$ref": "#/definitions/os_image_NamedTagEventList",
                            "javaType": "io.fabric8.openshift.api.model.NamedTagEventList"
                        }
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.ImageStreamStatus"
            },
            "os_image_NamedTagEventList": {
                "type": "object",
                "description": "",
                "properties": {
                    "items": {
                        "type": "array",
                        "description": "list of tag events related to the tag",
                        "items": {
                            "$ref": "#/definitions/os_image_TagEvent",
                            "javaType": "io.fabric8.openshift.api.model.TagEvent"
                        }
                    },
                    "tag": {
                        "type": "string",
                        "description": "the tag"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.NamedTagEventList",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.KubernetesResource"
                ]
            },
            "os_image_NamedTagReference": {
                "type": "object",
                "description": "",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "description": "annotations associated with images using this tag",
                        "additionalProperties": {
                            "type": "string",
                            "description": "annotations associated with images using this tag"
                        },
                        "javaType": "java.util.Map\u003cString,String\u003e"
                    },
                    "from": {
                        "$ref": "#/definitions/kubernetes_ObjectReference",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectReference"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of tag"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.NamedTagReference"
            },
            "os_image_TagEvent": {
                "type": "object",
                "description": "",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "when the event was created"
                    },
                    "dockerImageReference": {
                        "type": "string",
                        "description": "the string that can be used to pull this image"
                    },
                    "image": {
                        "type": "string",
                        "description": "the image"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.TagEvent"
            },
            "os_oauth_OAuthAccessToken": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "authorizeToken": {
                        "type": "string",
                        "description": "contains the token that authorized this token"
                    },
                    "clientName": {
                        "type": "string",
                        "description": "references the client that created this token"
                    },
                    "expiresIn": {
                        "type": "integer",
                        "description": "is the seconds from creation time before this token expires",
                        "javaType": "Long"
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "OAuthAccessToken",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ObjectMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectMeta"
                    },
                    "redirectURI": {
                        "type": "string",
                        "description": "redirection URI associated with the token"
                    },
                    "refreshToken": {
                        "type": "string",
                        "description": "optional value by which this token can be renewed"
                    },
                    "scopes": {
                        "type": "array",
                        "description": "list of requested scopes",
                        "items": {
                            "type": "string",
                            "description": "list of requested scopes"
                        }
                    },
                    "userName": {
                        "type": "string",
                        "description": "user name associated with this token"
                    },
                    "userUID": {
                        "type": "string",
                        "description": "unique UID associated with this token"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.OAuthAccessToken",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.HasMetadata"
                ]
            },
            "os_oauth_OAuthAccessTokenList": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "items": {
                        "type": "array",
                        "description": "list of oauth access tokens",
                        "items": {
                            "$ref": "#/definitions/os_oauth_OAuthAccessToken",
                            "javaType": "io.fabric8.openshift.api.model.OAuthAccessToken"
                        }
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "OAuthAccessTokenList",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ListMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ListMeta"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.OAuthAccessTokenList",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.KubernetesResource"
                ]
            },
            "os_oauth_OAuthAuthorizeToken": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "clientName": {
                        "type": "string",
                        "description": "references the client that created this token"
                    },
                    "expiresIn": {
                        "type": "integer",
                        "description": "seconds from creation time before this token expires",
                        "javaType": "Long"
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "OAuthAuthorizeToken",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ObjectMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectMeta"
                    },
                    "redirectURI": {
                        "type": "string",
                        "description": "redirection URI associated with the token"
                    },
                    "scopes": {
                        "type": "array",
                        "description": "list of requested scopes",
                        "items": {
                            "type": "string",
                            "description": "list of requested scopes"
                        }
                    },
                    "state": {
                        "type": "string",
                        "description": "state data from request"
                    },
                    "userName": {
                        "type": "string",
                        "description": "user name associated with this token"
                    },
                    "userUID": {
                        "type": "string",
                        "description": "unique UID associated with this token.  userUID and userName must both match for this token to be valid"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.OAuthAuthorizeToken",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.HasMetadata"
                ]
            },
            "os_oauth_OAuthAuthorizeTokenList": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "items": {
                        "type": "array",
                        "description": "list of oauth authorization tokens",
                        "items": {
                            "$ref": "#/definitions/os_oauth_OAuthAuthorizeToken",
                            "javaType": "io.fabric8.openshift.api.model.OAuthAuthorizeToken"
                        }
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "OAuthAuthorizeTokenList",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ListMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ListMeta"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.OAuthAuthorizeTokenList",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.KubernetesResource"
                ]
            },
            "os_oauth_OAuthClient": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "OAuthClient",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ObjectMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectMeta"
                    },
                    "redirectURIs": {
                        "type": "array",
                        "description": "valid redirection URIs associated with a client",
                        "items": {
                            "type": "string",
                            "description": "valid redirection URIs associated with a client"
                        }
                    },
                    "respondWithChallenges": {
                        "type": "boolean",
                        "description": "indicates whether the client wants authentication needed responses made in the form of challenges instead of redirects"
                    },
                    "secret": {
                        "type": "string",
                        "description": "unique secret associated with a client"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.OAuthClient",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.HasMetadata"
                ]
            },
            "os_oauth_OAuthClientAuthorization": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "clientName": {
                        "type": "string",
                        "description": "references the client that created this authorization"
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "OAuthClientAuthorization",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ObjectMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectMeta"
                    },
                    "scopes": {
                        "type": "array",
                        "description": "list of granted scopes",
                        "items": {
                            "type": "string",
                            "description": "list of granted scopes"
                        }
                    },
                    "userName": {
                        "type": "string",
                        "description": "user name that authorized this client"
                    },
                    "userUID": {
                        "type": "string",
                        "description": "unique UID associated with this authorization. userUID and userName must both match for this authorization to be valid"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.OAuthClientAuthorization",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.HasMetadata"
                ]
            },
            "os_oauth_OAuthClientAuthorizationList": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "items": {
                        "type": "array",
                        "description": "list of oauth client authorizations",
                        "items": {
                            "$ref": "#/definitions/os_oauth_OAuthClientAuthorization",
                            "javaType": "io.fabric8.openshift.api.model.OAuthClientAuthorization"
                        }
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "OAuthClientAuthorizationList",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ListMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ListMeta"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.OAuthClientAuthorizationList",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.KubernetesResource"
                ]
            },
            "os_oauth_OAuthClientList": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "items": {
                        "type": "array",
                        "description": "list of oauth clients",
                        "items": {
                            "$ref": "#/definitions/os_oauth_OAuthClient",
                            "javaType": "io.fabric8.openshift.api.model.OAuthClient"
                        }
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "OAuthClientList",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ListMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ListMeta"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.OAuthClientList",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.KubernetesResource"
                ]
            },
            "os_route_Route": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "Route",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ObjectMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectMeta"
                    },
                    "spec": {
                        "$ref": "#/definitions/os_route_RouteSpec",
                        "javaType": "io.fabric8.openshift.api.model.RouteSpec"
                    },
                    "status": {
                        "$ref": "#/definitions/os_route_RouteStatus",
                        "javaType": "io.fabric8.openshift.api.model.RouteStatus"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.Route",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.HasMetadata"
                ]
            },
            "os_route_RouteList": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "items": {
                        "type": "array",
                        "description": "list of routes",
                        "items": {
                            "$ref": "#/definitions/os_route_Route",
                            "javaType": "io.fabric8.openshift.api.model.Route"
                        }
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "RouteList",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ListMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ListMeta"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.RouteList",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.KubernetesResource"
                ]
            },
            "os_route_RouteSpec": {
                "type": "object",
                "description": "",
                "properties": {
                    "host": {
                        "type": "string",
                        "description": "optional: alias/dns that points to the service"
                    },
                    "path": {
                        "type": "string",
                        "description": "optional: path that the router watches to route traffic to the service"
                    },
                    "tls": {
                        "$ref": "#/definitions/os_route_TLSConfig",
                        "javaType": "io.fabric8.openshift.api.model.TLSConfig"
                    },
                    "to": {
                        "$ref": "#/definitions/kubernetes_ObjectReference",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectReference"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.RouteSpec"
            },
            "os_route_RouteStatus": {
                "type": "object",
                "description": "",
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.RouteStatus"
            },
            "os_route_TLSConfig": {
                "type": "object",
                "description": "",
                "properties": {
                    "caCertificate": {
                        "type": "string",
                        "description": "provides the cert authority certificate contents"
                    },
                    "certificate": {
                        "type": "string",
                        "description": "provides certificate contents"
                    },
                    "destinationCACertificate": {
                        "type": "string",
                        "description": "provides the contents of the ca certificate of the final destination.  When using re-encrypt termination this file should be provided in order to have routers use it for health checks on the secure connection"
                    },
                    "key": {
                        "type": "string",
                        "description": "provides key file contents"
                    },
                    "termination": {
                        "type": "string",
                        "description": "indicates termination type.  if not set"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.TLSConfig"
            },
            "os_template_Parameter": {
                "type": "object",
                "description": "",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "optional: describes the parameter"
                    },
                    "from": {
                        "type": "string",
                        "description": "input value for the generator"
                    },
                    "generate": {
                        "type": "string",
                        "description": "optional: generate specifies the generator to be used to generate random string from an input value specified by the from field.  the result string is stored in the value field. if not specified"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the parameter"
                    },
                    "value": {
                        "type": "string",
                        "description": "optional: holds the parameter data.  if specified"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.template.Parameter"
            },
            "os_template_Template": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "Template",
                        "required": true
                    },
                    "labels": {
                        "type": "object",
                        "description": "optional: list of lables that are applied to every object during the template to config transformation",
                        "additionalProperties": {
                            "type": "string",
                            "description": "optional: list of lables that are applied to every object during the template to config transformation"
                        },
                        "javaType": "java.util.Map\u003cString,String\u003e"
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ObjectMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ObjectMeta"
                    },
                    "objects": {
                        "type": "array",
                        "description": "list of objects to include in the template",
                        "items": {
                            "$ref": "#/definitions/kubernetes_runtime_RawExtension",
                            "javaType": "io.fabric8.kubernetes.api.model.HasMetadata"
                        }
                    },
                    "parameters": {
                        "type": "array",
                        "description": "optional: list of parameters used during template to config transformation",
                        "items": {
                            "$ref": "#/definitions/os_template_Parameter",
                            "javaType": "io.fabric8.openshift.api.model.template.Parameter"
                        }
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.template.Template",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.HasMetadata"
                ]
            },
            "os_template_TemplateList": {
                "type": "object",
                "description": "",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "",
                        "default": "v1",
                        "required": true,
                        "enum": [
                            "v1"
                        ]
                    },
                    "items": {
                        "type": "array",
                        "description": "list of templates",
                        "items": {
                            "$ref": "#/definitions/os_template_Template",
                            "javaType": "io.fabric8.openshift.api.model.template.Template"
                        }
                    },
                    "kind": {
                        "type": "string",
                        "description": "",
                        "default": "TemplateList",
                        "required": true
                    },
                    "metadata": {
                        "$ref": "#/definitions/kubernetes_ListMeta",
                        "javaType": "io.fabric8.kubernetes.api.model.ListMeta"
                    }
                },
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.template.TemplateList",
                "javaInterfaces": [
                    "io.fabric8.kubernetes.api.model.KubernetesResource"
                ]
            },
            "speter_inf_Dec": {
                "type": "object",
                "description": "",
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.client.util.Dec"
            }
        },
        "type": "object",
        "properties": {
            "BaseKubernetesList": {
                "$ref": "#/definitions/kubernetes_List",
                "javaType": "io.fabric8.kubernetes.api.model.BaseKubernetesList"
            },
            "BuildConfigList": {
                "$ref": "#/definitions/os_build_BuildConfigList",
                "javaType": "io.fabric8.openshift.api.model.BuildConfigList"
            },
            "BuildList": {
                "$ref": "#/definitions/os_build_BuildList",
                "javaType": "io.fabric8.openshift.api.model.BuildList"
            },
            "BuildRequest": {
                "$ref": "#/definitions/os_build_BuildRequest",
                "javaType": "io.fabric8.openshift.api.model.BuildRequest"
            },
            "Config": {
                "$ref": "#/definitions/kubernetes_config_Config",
                "javaType": "io.fabric8.kubernetes.api.model.config.Config"
            },
            "ContainerStatus": {
                "$ref": "#/definitions/kubernetes_ContainerStatus",
                "javaType": "io.fabric8.kubernetes.api.model.ContainerStatus"
            },
            "DeploymentConfigList": {
                "$ref": "#/definitions/os_deploy_DeploymentConfigList",
                "javaType": "io.fabric8.openshift.api.model.DeploymentConfigList"
            },
            "Endpoints": {
                "$ref": "#/definitions/kubernetes_Endpoints",
                "javaType": "io.fabric8.kubernetes.api.model.Endpoints"
            },
            "EndpointsList": {
                "$ref": "#/definitions/kubernetes_EndpointsList",
                "javaType": "io.fabric8.kubernetes.api.model.EndpointsList"
            },
            "EnvVar": {
                "$ref": "#/definitions/kubernetes_EnvVar",
                "javaType": "io.fabric8.kubernetes.api.model.EnvVar"
            },
            "ImageList": {
                "$ref": "#/definitions/os_image_ImageList",
                "javaType": "io.fabric8.openshift.api.model.ImageList"
            },
            "ImageStreamList": {
                "$ref": "#/definitions/os_image_ImageStreamList",
                "javaType": "io.fabric8.openshift.api.model.ImageStreamList"
            },
            "Namespace": {
                "$ref": "#/definitions/kubernetes_Namespace",
                "javaType": "io.fabric8.kubernetes.api.model.Namespace"
            },
            "NamespaceList": {
                "$ref": "#/definitions/kubernetes_NamespaceList",
                "javaType": "io.fabric8.kubernetes.api.model.NamespaceList"
            },
            "Node": {
                "$ref": "#/definitions/kubernetes_Node",
                "javaType": "io.fabric8.kubernetes.api.model.Node"
            },
            "NodeList": {
                "$ref": "#/definitions/kubernetes_NodeList",
                "javaType": "io.fabric8.kubernetes.api.model.NodeList"
            },
            "OAuthAccessToken": {
                "$ref": "#/definitions/os_oauth_OAuthAccessToken",
                "javaType": "io.fabric8.openshift.api.model.OAuthAccessToken"
            },
            "OAuthAccessTokenList": {
                "$ref": "#/definitions/os_oauth_OAuthAccessTokenList",
                "javaType": "io.fabric8.openshift.api.model.OAuthAccessTokenList"
            },
            "OAuthAuthorizeToken": {
                "$ref": "#/definitions/os_oauth_OAuthAuthorizeToken",
                "javaType": "io.fabric8.openshift.api.model.OAuthAuthorizeToken"
            },
            "OAuthAuthorizeTokenList": {
                "$ref": "#/definitions/os_oauth_OAuthAuthorizeTokenList",
                "javaType": "io.fabric8.openshift.api.model.OAuthAuthorizeTokenList"
            },
            "OAuthClient": {
                "$ref": "#/definitions/os_oauth_OAuthClient",
                "javaType": "io.fabric8.openshift.api.model.OAuthClient"
            },
            "OAuthClientAuthorization": {
                "$ref": "#/definitions/os_oauth_OAuthClientAuthorization",
                "javaType": "io.fabric8.openshift.api.model.OAuthClientAuthorization"
            },
            "OAuthClientAuthorizationList": {
                "$ref": "#/definitions/os_oauth_OAuthClientAuthorizationList",
                "javaType": "io.fabric8.openshift.api.model.OAuthClientAuthorizationList"
            },
            "OAuthClientList": {
                "$ref": "#/definitions/os_oauth_OAuthClientList",
                "javaType": "io.fabric8.openshift.api.model.OAuthClientList"
            },
            "ObjectMeta": {
                "$ref": "#/definitions/kubernetes_ObjectMeta",
                "javaType": "io.fabric8.kubernetes.api.model.ObjectMeta"
            },
            "PodList": {
                "$ref": "#/definitions/kubernetes_PodList",
                "javaType": "io.fabric8.kubernetes.api.model.PodList"
            },
            "Quantity": {
                "$ref": "#/definitions/kubernetes_resource_Quantity",
                "javaType": "io.fabric8.kubernetes.api.model.resource.Quantity"
            },
            "ReplicationControllerList": {
                "$ref": "#/definitions/kubernetes_ReplicationControllerList",
                "javaType": "io.fabric8.kubernetes.api.model.ReplicationControllerList"
            },
            "RouteList": {
                "$ref": "#/definitions/os_route_RouteList",
                "javaType": "io.fabric8.openshift.api.model.RouteList"
            },
            "Secret": {
                "$ref": "#/definitions/kubernetes_Secret",
                "javaType": "io.fabric8.kubernetes.api.model.Secret"
            },
            "SecretList": {
                "$ref": "#/definitions/kubernetes_SecretList",
                "javaType": "io.fabric8.kubernetes.api.model.SecretList"
            },
            "ServiceAccount": {
                "$ref": "#/definitions/kubernetes_ServiceAccount",
                "javaType": "io.fabric8.kubernetes.api.model.ServiceAccount"
            },
            "ServiceAccountList": {
                "$ref": "#/definitions/kubernetes_ServiceAccountList",
                "javaType": "io.fabric8.kubernetes.api.model.ServiceAccountList"
            },
            "ServiceList": {
                "$ref": "#/definitions/kubernetes_ServiceList",
                "javaType": "io.fabric8.kubernetes.api.model.ServiceList"
            },
            "StatusError": {
                "$ref": "#/definitions/kubernetes_errors_StatusError",
                "javaType": "io.fabric8.kubernetes.api.model.errors.StatusError"
            },
            "TagEvent": {
                "$ref": "#/definitions/os_image_TagEvent",
                "javaType": "io.fabric8.openshift.api.model.TagEvent"
            },
            "Template": {
                "$ref": "#/definitions/os_template_Template",
                "javaType": "io.fabric8.openshift.api.model.template.Template"
            },
            "TemplateList": {
                "$ref": "#/definitions/os_template_TemplateList",
                "javaType": "io.fabric8.openshift.api.model.template.TemplateList"
            },
            "WatchEvent": {
                "$ref": "#/definitions/kubernetes_watch_WatchEvent",
                "javaType": "io.fabric8.kubernetes.api.watch.WatchEvent"
            }
        },
        "additionalProperties": true
    };
})(Kubernetes || (Kubernetes = {}));

/// <reference path="schema.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    var hiddenProperties = ['status', 'deletionTimestamp'];
    function withProperty(schema, name, action) {
        if (schema.properties[name]) {
            action(schema.properties[name]);
        }
    }
    function hideProperties(schema) {
        _.forEach(hiddenProperties, function (property) {
            withProperty(schema, property, function (property) {
                property.hidden = true;
            });
        });
    }
    Kubernetes._module.factory('KubernetesSchema', ['SchemaRegistry', function (schemas) {
        Kubernetes.configureSchema();
        schemas.addListener("k8s schema customizer", function (name, schema) {
            if (schema.properties) {
                if (schema.properties.name) {
                    schema.controls = ['name', '*'];
                }
                withProperty(schema, 'portalIP', function (property) {
                    property.label = "Portal IP";
                });
                withProperty(schema, 'publicIPs', function (property) {
                    property.label = "Public IPs";
                });
                withProperty(schema, 'Spec', function (property) {
                    property.label = 'false';
                });
                withProperty(schema, 'Metadata', function (property) {
                    property.label = 'false';
                });
                hideProperties(schema);
            }
            if (_.endsWith(name, "ServiceSpec")) {
                schema.controls = ["portalIP", "createExternalLoadBalancer", "sessionAffinity", "publicIPs", "ports", "selector", "*"];
                withProperty(schema, 'sessionAffinity', function (property) {
                    Kubernetes.log.debug("Schema: ", schema);
                    property.enum = ['None', 'ClientIP'];
                    property.default = 'None';
                });
            }
            if (_.endsWith(name, "Service")) {
                schema.controls = undefined;
                schema.tabs = {
                    'Basic Information': ['metadata'],
                    'Details': ['*']
                };
                Kubernetes.log.debug("Name: ", name, " Schema: ", schema);
            }
        });
        schemas.addSchema('kubernetes', Kubernetes.schema);
        // now lets iterate and add all the definitions too
        angular.forEach(Kubernetes.schema.definitions, function (definition, typeName) {
            //schemas.addSchema(typeName, definition);
            schemas.addSchema("#/definitions/" + typeName, definition);
        });
        return Kubernetes.schema;
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    // facade this to the watcher service
    var KubernetesStateImpl = (function () {
        function KubernetesStateImpl(watcher) {
            this.watcher = watcher;
        }
        Object.defineProperty(KubernetesStateImpl.prototype, "namespaces", {
            get: function () {
                return _.map(this.watcher.getObjects(Kubernetes.WatchTypes.NAMESPACES), function (namespace) {
                    return namespace.metadata.name;
                });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KubernetesStateImpl.prototype, "selectedNamespace", {
            get: function () {
                return this.watcher.getNamespace();
            },
            set: function (namespace) {
                this.watcher.setNamespace(namespace);
            },
            enumerable: true,
            configurable: true
        });
        return KubernetesStateImpl;
    })();
    Kubernetes._module.factory('KubernetesState', ['WatcherService', function (watcher) {
        return new KubernetesStateImpl(watcher);
    }]);
    // TODO this doesn't need to be a service really
    Kubernetes._module.factory('KubernetesApiURL', function () { return Kubernetes.kubernetesApiUrl(); });
    // TODO we'll get rid of this...
    Kubernetes._module.factory('KubernetesVersion', [function () {
        return {
            query: function () { return null; }
        };
    }]);
    // TODO let's move these into KubernetesModel so controllers don't have to inject them separately
    Kubernetes._module.factory('KubernetesPods', ['KubernetesModel', function (KubernetesModel) {
        return KubernetesModel['podsResource'];
    }]);
    Kubernetes._module.factory('KubernetesReplicationControllers', ['KubernetesModel', function (KubernetesModel) {
        return KubernetesModel['replicationcontrollersResource'];
    }]);
    Kubernetes._module.factory('KubernetesServices', ['KubernetesModel', function (KubernetesModel) {
        return KubernetesModel['servicesResource'];
    }]);
    Kubernetes._module.factory('KubernetesBuilds', ['restmod', function (restmod) {
        return restmod.model(Kubernetes.buildConfigsRestURL());
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
/// <reference path="kubernetesModel.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.FileDropController = Kubernetes.controller("FileDropController", ["$scope", "KubernetesModel", "FileUploader", '$http', function ($scope, model, FileUploader, $http) {
        var uploader = $scope.uploader = new FileUploader({
            autoUpload: false,
            removeAfterUpload: true,
            url: Kubernetes.kubernetesApiUrl()
        });
        $scope.uploader.onAfterAddingFile = function (file) {
            var reader = new FileReader();
            reader.onload = function () {
                if (reader.readyState === 2) {
                    Kubernetes.log.debug("File added: ", file);
                    var json = reader.result;
                    var obj = null;
                    try {
                        obj = angular.fromJson(json);
                    }
                    catch (err) {
                        Kubernetes.log.debug("Failed to read dropped file ", file._file.name, ": ", err);
                        return;
                    }
                    Kubernetes.log.debug("Dropped object: ", obj);
                    Kubernetes.updateOrCreateObject(obj, model);
                }
            };
            reader.readAsText(file._file);
        };
        $scope.uploader.onBeforeUploadItem = function (item) {
            Kubernetes.log.debug("Uploading: ", item);
            //Core.notification('info', 'Uploading ' + item);
        };
        $scope.uploader.onSuccessItem = function (item) {
            Kubernetes.log.debug("onSuccessItem: ", item);
        };
        $scope.uploader.onErrorItem = function (item, response, status) {
            Kubernetes.log.debug("Failed to apply, response: ", response, " status: ", status);
        };
    }]);
    Kubernetes.NamespaceController = Kubernetes.controller('NamespaceController', ['$scope', 'WatcherService', function ($scope, watcher) {
        $scope.namespaces = watcher.getObjects('namespaces');
        $scope.$watchCollection('namespaces', function (newValue, oldValue) {
            if (newValue !== oldValue) {
                $scope.namespace = watcher.getNamespace();
            }
        });
        $scope.$watch('namespace', function (newValue, oldValue) {
            if (newValue !== oldValue) {
                if (newValue !== oldValue) {
                    watcher.setNamespace(newValue);
                }
            }
        });
    }]);
    Kubernetes.TopLevel = Kubernetes.controller("TopLevel", ["$scope", "workspace", "KubernetesVersion", "KubernetesState", function ($scope, workspace, KubernetesVersion, KubernetesState) {
        $scope.version = undefined;
        $scope.showAppView = Kubernetes.isAppView(workspace);
        $scope.isActive = function (href) {
            return workspace.isLinkActive(href);
        };
        $scope.kubernetes = KubernetesState;
        KubernetesVersion.query(function (response) {
            $scope.version = response;
        });
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.NamespaceController = Kubernetes.controller("NamespaceController", ["$scope", "WatcherService", function ($scope, watcher) {
        $scope.watcher = watcher;
        $scope.namespaceObjects = watcher.getObjects('namespaces');
        $scope.namespace = watcher.getNamespace();
        $scope.namespaces = [];
        $scope.$watch('namespace', function (newValue, oldValue) {
            if (newValue !== oldValue) {
                watcher.setNamespace(newValue);
            }
        });
        $scope.$watch('watcher.getNamespace()', function (newValue, oldValue) {
            if (newValue !== oldValue) {
                $scope.namespace = newValue;
            }
        });
        $scope.$watchCollection('namespaceObjects', function (namespaceObjects) {
            $scope.namespaces = _.map(namespaceObjects, function (namespace) { return namespace.metadata.name; });
        });
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    var OverviewDirective = Kubernetes._module.directive("kubernetesOverview", ["$templateCache", "$compile", "$interpolate", "$timeout", "$window", "KubernetesState", 'KubernetesModel', function ($templateCache, $compile, $interpolate, $timeout, $window, KubernetesState, KubernetesModel) {
        return {
            restrict: 'E',
            replace: true,
            link: function (scope, element, attr) {
                scope.model = KubernetesModel;
                element.css({ visibility: 'hidden' });
                scope.getEntity = function (type, key) {
                    switch (type) {
                        case 'host':
                            return scope.model.podsByHost[key];
                        case 'pod':
                            return scope.model.podsByKey[key];
                        case 'replicationController':
                            return scope.model.replicationControllersByKey[key];
                        case 'service':
                            return scope.model.servicesByKey[key];
                        default:
                            return undefined;
                    }
                };
                scope.kubernetes = KubernetesState;
                scope.customizeDefaultOptions = function (options) {
                    options.Endpoint = ['Blank', {}];
                };
                scope.mouseEnter = function ($event) {
                    if (scope.jsPlumb) {
                        angular.element($event.currentTarget).addClass("hovered");
                        scope.jsPlumb.getEndpoints($event.currentTarget).forEach(function (endpoint) {
                            endpoint.connections.forEach(function (connection) {
                                if (!connection.isHover()) {
                                    connection.setHover(true);
                                    connection.endpoints.forEach(function (e) {
                                        scope.mouseEnter({
                                            currentTarget: e.element
                                        });
                                    });
                                }
                            });
                        });
                    }
                };
                scope.mouseLeave = function ($event) {
                    if (scope.jsPlumb) {
                        angular.element($event.currentTarget).removeClass("hovered");
                        scope.jsPlumb.getEndpoints($event.currentTarget).forEach(function (endpoint) {
                            endpoint.connections.forEach(function (connection) {
                                if (connection.isHover()) {
                                    connection.setHover(false);
                                    connection.endpoints.forEach(function (e) {
                                        scope.mouseLeave({
                                            currentTarget: e.element
                                        });
                                    });
                                }
                            });
                        });
                    }
                };
                /*
                scope.customizeEndpointOptions = (jsPlumb, node, options) => {
                  var type = node.el.attr('data-type');
                  // log.debug("endpoint type: ", type);
                  switch (type) {
                    case 'pod':
                      break;
                    case 'service':
                      break;
                    case 'replicationController':
                      break;
                  }
                };
                */
                scope.customizeConnectionOptions = function (jsPlumb, edge, params, options) {
                    var type = edge.source.el.attr('data-type');
                    options.connector = ["Bezier", { curviness: 50, stub: 25, alwaysRespectStubs: true }];
                    params.paintStyle = {
                        lineWidth: 2,
                        strokeStyle: '#5555cc'
                    };
                    switch (type) {
                        case 'pod':
                            break;
                        case 'service':
                            params.anchors = [
                                ["ContinuousRight", {}],
                                ["ContinuousLeft", {}]
                            ];
                            break;
                        case 'replicationController':
                            params.anchors = [
                                ["Perimeter", { shape: "Circle" }],
                                ["ContinuousRight", {}]
                            ];
                            break;
                    }
                    //log.debug("connection source type: ", type);
                    return options;
                };
                function interpolate(template, config) {
                    return $interpolate(template)(config);
                }
                function createElement(template, thingName, thing) {
                    var config = {};
                    config[thingName] = thing;
                    return interpolate(template, config);
                }
                function createElements(template, thingName, things) {
                    return things.map(function (thing) {
                        return createElement(template, thingName, thing);
                    });
                }
                function appendNewElements(parentEl, template, thingName, things) {
                    things.forEach(function (thing) {
                        var key = thing['_key'] || thing['elementId'] || thing['id'];
                        var existing = parentEl.find("#" + key);
                        if (!existing.length) {
                            parentEl.append($compile(createElement(template, thingName, thing))(scope));
                        }
                    });
                }
                function namespaceFilter(item) {
                    return Kubernetes.getNamespace(item) === scope.kubernetes.selectedNamespace;
                }
                function firstDraw() {
                    Kubernetes.log.debug("First draw");
                    element.empty();
                    var services = scope.model.services;
                    var replicationControllers = scope.model.replicationControllers;
                    var pods = scope.model.pods;
                    var hosts = scope.model.hosts;
                    // log.debug("hosts: ", scope.model.hosts);
                    var parentEl = angular.element($templateCache.get("overviewTemplate.html"));
                    var servicesEl = parentEl.find(".services");
                    var hostsEl = parentEl.find(".hosts");
                    var replicationControllersEl = parentEl.find(".replicationControllers");
                    servicesEl.append(createElements($templateCache.get("serviceTemplate.html"), 'service', services.filter(namespaceFilter)));
                    replicationControllersEl.append(createElements($templateCache.get("replicationControllerTemplate.html"), 'replicationController', replicationControllers.filter(namespaceFilter)));
                    hosts.forEach(function (host) {
                        var hostEl = angular.element(createElement($templateCache.get("overviewHostTemplate.html"), 'host', host));
                        var podContainer = angular.element(hostEl.find('.pod-container'));
                        podContainer.append(createElements($templateCache.get("podTemplate.html"), "pod", host.pods));
                        hostsEl.append(hostEl);
                    });
                    //parentEl.append(createElements($templateCache.get("podTemplate.html"), 'pod', pods));
                    element.append($compile(parentEl)(scope));
                    $timeout(function () {
                        element.css({ visibility: 'visible' });
                    }, 250);
                }
                function update() {
                    scope.$emit('jsplumbDoWhileSuspended', function () {
                        Kubernetes.log.debug("Update");
                        var services = scope.model.services;
                        var replicationControllers = scope.model.replicationControllers;
                        var pods = scope.model.pods;
                        var hosts = scope.model.hosts;
                        var parentEl = element.find('[hawtio-jsplumb]');
                        var children = parentEl.find('.jsplumb-node');
                        children.each(function (index, c) {
                            var child = angular.element(c);
                            var key = child.attr('id');
                            if (Core.isBlank(key)) {
                                return;
                            }
                            var type = child.attr('data-type');
                            switch (type) {
                                case 'host':
                                    Kubernetes.log.debug('key: ', key);
                                    if (key in scope.model.podsByHost) {
                                        return;
                                    }
                                    break;
                                case 'service':
                                    if (key in scope.model.servicesByKey && Kubernetes.getNamespace(scope.model.servicesByKey[key]) == scope.kubernetes.selectedNamespace) {
                                        var service = scope.model.servicesByKey[key];
                                        child.attr('connect-to', service.connectTo);
                                        return;
                                    }
                                    break;
                                case 'pod':
                                    /*
                                    if (hasId(pods, id)) {
                                      return;
                                    }
                                    */
                                    if (key in scope.model.podsByKey) {
                                        return;
                                    }
                                    break;
                                case 'replicationController':
                                    if (key in scope.model.replicationControllersByKey) {
                                        var replicationController = scope.model.replicationControllersByKey[key];
                                        child.attr('connect-to', replicationController.connectTo);
                                        return;
                                    }
                                    break;
                                default:
                                    Kubernetes.log.debug("Ignoring element with unknown type");
                                    return;
                            }
                            Kubernetes.log.debug("Removing: ", key);
                            child.remove();
                        });
                        var servicesEl = element.find(".services");
                        var replicationControllersEl = element.find(".replicationControllers");
                        var hostsEl = element.find(".hosts");
                        appendNewElements(servicesEl, $templateCache.get("serviceTemplate.html"), "service", services);
                        appendNewElements(replicationControllersEl, $templateCache.get("replicationControllerTemplate.html"), "replicationController", replicationControllers);
                        appendNewElements(hostsEl, $templateCache.get("overviewHostTemplate.html"), "host", hosts);
                        hosts.forEach(function (host) {
                            var hostEl = angular.element(hostsEl.find("#" + host.elementId));
                            var podContainer = angular.element(hostEl.find('.pod-container'));
                            appendNewElements(podContainer, $templateCache.get("podTemplate.html"), "pod", host.pods);
                        });
                    });
                }
                function refreshDrawing() {
                    Kubernetes.log.debug("Refreshing drawing");
                    if (element.children().length === 0) {
                        firstDraw();
                    }
                    else {
                        update();
                    }
                    Core.$apply(scope);
                }
                scope.$on('kubernetesModelUpdated', _.debounce(refreshDrawing, 500, { trailing: true }));
                setTimeout(refreshDrawing, 100);
            }
        };
    }]);
    var OverviewBoxController = Kubernetes.controller("OverviewBoxController", ["$scope", "$location", function ($scope, $location) {
        $scope.viewDetails = function (entity, path) {
            if (entity) {
                var namespace = Kubernetes.getNamespace(entity);
                var id = Kubernetes.getName(entity);
                $location.path(UrlHelpers.join('/kubernetes/namespace', namespace, path, id));
            }
            else {
                Kubernetes.log.warn("No entity for viewDetails!");
            }
        };
    }]);
    var scopeName = "OverviewController";
    var OverviewController = Kubernetes.controller(scopeName, ["$scope", "$location", "$http", "$timeout", "$routeParams", "KubernetesModel", "KubernetesState", "KubernetesApiURL", function ($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL) {
        $scope.name = scopeName;
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.PipelinesController = Kubernetes.controller("PipelinesController", ["$scope", "KubernetesModel", "KubernetesBuilds", "KubernetesState", "$dialog", "$window", "$templateCache", "$routeParams", "$location", "localStorage", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesBuilds, KubernetesState, $dialog, $window, $templateCache, $routeParams, $location, localStorage, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.KubernetesBuilds = KubernetesBuilds;
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        /**
         * Lets update the various data to join them together to a pipeline model
         */
        function updateData() {
            var pipelineSteps = {};
            if ($scope.buildConfigs && $scope.builds && $scope.deploymentConfigs) {
                Kubernetes.enrichBuildConfigs($scope.buildConfigs, $scope.builds);
                $scope.fetched = true;
                angular.forEach($scope.buildConfigs, function (buildConfig) {
                    var pipelineKey = createPipelineKey(buildConfig);
                    if (pipelineKey) {
                        pipelineSteps[pipelineKey] = {
                            buildConfig: buildConfig,
                            builds: [],
                            triggeredBy: null,
                            triggersSteps: [],
                            $class: 'pipeline-build'
                        };
                    }
                });
                angular.forEach($scope.builds, function (build) {
                    var pipelineKey = createPipelineKey(build);
                    if (pipelineKey) {
                        var pipeline = pipelineSteps[pipelineKey];
                        if (!pipeline) {
                            //console.log("warning no pipeline generated for buildConfig for key " + pipelineKey + " for build " + angular.toJson(build, true));
                            console.log("warning no pipeline generated for buildConfig for key " + pipelineKey + " for build " + build.$name);
                        }
                        else {
                            pipeline.builds.push(build);
                        }
                    }
                });
                // TODO now we need to look at the triggers to figure out which pipelineSteps triggers each pipelineStep
                // now lets create an array of all pipelines, starting from the first known step with a list of the steps
                var pipelines = [];
                angular.forEach(pipelineSteps, function (pipelineStep, key) {
                    if (!pipelineStep.triggeredBy) {
                        // we are a root step....
                        pipelines.push(pipelineStep);
                        // now lets add all the steps for this key...
                        pipelineStep.triggersSteps.push(pipelineStep);
                        angular.forEach(pipelineSteps, function (step) {
                            if (step.triggeredBy === key) {
                                pipelineStep.triggersSteps.push(step);
                            }
                        });
                    }
                });
                angular.forEach($scope.deploymentConfigs, function (deploymentConfig) {
                    if (!deploymentConfig.kind) {
                        deploymentConfig.kind = "DeploymentConfig";
                    }
                    angular.forEach(deploymentConfig.triggers, function (trigger) {
                        var type = trigger.type;
                        var imageChangeParams = trigger.imageChangeParams;
                        if (imageChangeParams && type === "ImageChange") {
                            var from = imageChangeParams.from;
                            if (from) {
                                var name = from.name;
                                if (from.kind === "ImageRepository") {
                                    var tag = imageChangeParams.tag || "latest";
                                    if (name) {
                                        // now lets find a pipeline step which fires from this
                                        angular.forEach(pipelineSteps, function (pipelineStep, key) {
                                            var to = Core.pathGet(pipelineStep, ["buildConfig", "parameters", "output", "to"]);
                                            if (to && (to.kind === "ImageRepository" || to.kind === "ImageStream")) {
                                                var toName = to.name;
                                                if (toName === name) {
                                                    var selector = Core.pathGet(deploymentConfig, ["template", "controllerTemplate", "selector"]);
                                                    var pods = [];
                                                    var $podCounters = selector ? Kubernetes.createPodCounters(selector, KubernetesModel.podsForNamespace(), pods) : null;
                                                    var deployPipelineStep = {
                                                        buildConfig: deploymentConfig,
                                                        $class: 'pipeline-deploy',
                                                        $podCounters: $podCounters,
                                                        $pods: pods
                                                    };
                                                    pipelineStep.triggersSteps.push(deployPipelineStep);
                                                }
                                            }
                                        });
                                    }
                                }
                            }
                        }
                    });
                });
                $scope.pipelines = pipelines;
            }
        }
        /**
         * Lets create a unique key for build / config we can use to do linking of builds / configs / triggers
         */
        function createPipelineKey(buildConfig) {
            return Core.pathGet(buildConfig, ["parameters", "source", "git", "uri"]);
        }
        $scope.$keepPolling = function () { return Kubernetes.keepPollingModel; };
        $scope.fetch = PollHelpers.setupPolling($scope, function (next) {
            var ready = 0;
            var numServices = 3;
            function maybeNext() {
                if (++ready >= numServices) {
                    next();
                }
            }
            var url = Kubernetes.buildsRestURL();
            $http.get(url).success(function (data, status, headers, config) {
                if (data) {
                    $scope.builds = Kubernetes.enrichBuilds(data.items);
                    updateData();
                }
                maybeNext();
            }).error(function (data, status, headers, config) {
                Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
                maybeNext();
            });
            url = Kubernetes.buildConfigsRestURL();
            $http.get(url).success(function (data, status, headers, config) {
                if (data) {
                    $scope.buildConfigs = data.items;
                    updateData();
                }
                maybeNext();
            }).error(function (data, status, headers, config) {
                Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
                maybeNext();
            });
            url = Kubernetes.deploymentConfigsRestURL();
            $http.get(url).success(function (data, status, headers, config) {
                if (data) {
                    $scope.deploymentConfigs = data.items;
                    updateData();
                }
                maybeNext();
            }).error(function (data, status, headers, config) {
                Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
                maybeNext();
            });
        });
        $scope.fetch();
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.PodController = Kubernetes.controller("PodController", ["$scope", "KubernetesModel", "KubernetesState", "ServiceRegistry", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "$window", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesState, ServiceRegistry, $templateCache, $location, $routeParams, $http, $timeout, $window, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.rawMode = false;
        $scope.rawModel = null;
        $scope.itemConfig = {
            properties: {
                'containers/image$': {
                    template: $templateCache.get('imageTemplate.html')
                },
                'status/phase': {
                    template: $templateCache.get('statusTemplate.html')
                },
                '\\/Env\\/': {
                    template: $templateCache.get('envItemTemplate.html')
                },
                '^\\/labels$': {
                    template: $templateCache.get('labelTemplate.html')
                },
                '\\/env\\/key$': {
                    hidden: true
                }
            }
        };
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.$on('kubernetesModelUpdated', function () {
            updateData();
        });
        $scope.$on('$routeUpdate', function ($event) {
            updateData();
        });
        $scope.$watch('model.pods', function (newValue, oldValue) {
            updateData();
        }, true);
        $scope.flipRaw = function () {
            $scope.rawMode = !$scope.rawMode;
            Core.$apply($scope);
        };
        $scope.openLogs = function () {
            var pods = [$scope.item];
            Kubernetes.openLogsForPods(ServiceRegistry, $window, KubernetesModel.currentNamespace(), pods);
        };
        updateData();
        function updateData() {
            $scope.id = $routeParams["id"];
            $scope.item = $scope.model.getPod(KubernetesState.selectedNamespace, $scope.id);
            if ($scope.item) {
                $scope.rawModel = Kubernetes.toRawJson($scope.item);
            }
            Core.$apply($scope);
        }
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.PodEditController = Kubernetes.controller("PodEditController", ["$scope", "KubernetesModel", "KubernetesState", "KubernetesSchema", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "KubernetesApiURL", "SchemaRegistry", function ($scope, KubernetesModel, KubernetesState, KubernetesSchema, $templateCache, $location, $routeParams, $http, $timeout, KubernetesApiURL, schemas) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.id = $routeParams["id"];
        $scope.schema = KubernetesSchema;
        $scope.config = schemas.cloneSchema("io.fabric8.kubernetes.api.model.Pod");
        //$scope.config = KubernetesSchema.definitions.kubernetes_v1beta2_Pod;
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.$on('$routeUpdate', function ($event) {
            updateData();
        });
        updateData();
        function updateData() {
            if ($scope.id) {
                $scope.entity = $scope.model.getPod(KubernetesState.selectedNamespace, $scope.id);
                Core.$apply($scope);
                $scope.fetched = true;
            }
            else {
                $scope.fetched = true;
            }
        }
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.EnvItem = Kubernetes.controller("EnvItem", ["$scope", function ($scope) {
        var parts = $scope.data.split('=');
        $scope.key = parts.shift();
        $scope.value = parts.join('=');
    }]);
    // main controller for the page
    Kubernetes.Pods = Kubernetes.controller("Pods", ["$scope", "KubernetesModel", "KubernetesPods", "KubernetesState", "ServiceRegistry", "$dialog", "$window", "$templateCache", "$routeParams", "$location", "localStorage", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesPods, KubernetesState, ServiceRegistry, $dialog, $window, $templateCache, $routeParams, $location, localStorage, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.$on('kubernetesModelUpdated', function () {
            Core.$apply($scope);
        });
        $scope.itemSchema = Forms.createFormConfiguration();
        $scope.tableConfig = {
            data: 'model.pods',
            showSelectionCheckbox: true,
            enableRowClickSelection: false,
            multiSelect: true,
            selectedItems: [],
            filterOptions: {
                filterText: $location.search()["q"] || ''
            },
            columnDefs: [
                {
                    field: 'id',
                    displayName: 'ID',
                    defaultSort: true,
                    cellTemplate: $templateCache.get("idTemplate.html")
                },
                {
                    field: 'status.phase',
                    displayName: 'Status',
                    cellTemplate: $templateCache.get("statusTemplate.html")
                },
                {
                    field: 'containerImages',
                    displayName: 'Images',
                    cellTemplate: $templateCache.get("imageTemplate.html")
                },
                {
                    field: 'spec.host',
                    displayName: 'Host',
                    cellTemplate: $templateCache.get("hostTemplate.html")
                },
                {
                    field: 'labels',
                    displayName: 'Labels',
                    cellTemplate: $templateCache.get("labelTemplate.html")
                },
                {
                    field: 'status.podIP',
                    displayName: 'Pod IP'
                }
            ]
        };
        $scope.openLogs = function () {
            var pods = $scope.tableConfig.selectedItems;
            if (!pods || !pods.length) {
                if ($scope.id) {
                    var item = $scope.item;
                    if (item) {
                        pods = [item];
                    }
                }
            }
            Kubernetes.openLogsForPods(ServiceRegistry, $window, KubernetesModel.currentNamespace(), pods);
        };
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.deletePrompt = function (selected) {
            if (angular.isString(selected)) {
                selected = [{
                    id: selected
                }];
            }
            UI.multiItemConfirmActionDialog({
                collection: selected,
                index: 'metadata.name',
                onClose: function (result) {
                    if (result) {
                        function deleteSelected(selected, next) {
                            if (next) {
                                Kubernetes.log.debug("deleting: ", Kubernetes.getName(next));
                                KubernetesPods.delete({
                                    id: Kubernetes.getName(next)
                                }, undefined, function () {
                                    Kubernetes.log.debug("deleted: ", Kubernetes.getName(next));
                                    deleteSelected(selected, selected.shift());
                                }, function (error) {
                                    Kubernetes.log.debug("Error deleting: ", error);
                                    deleteSelected(selected, selected.shift());
                                });
                            }
                        }
                        deleteSelected(selected, selected.shift());
                    }
                },
                title: 'Delete pods?',
                action: 'The following pods will be deleted:',
                okText: 'Delete',
                okClass: 'btn-danger',
                custom: "This operation is permanent once completed!",
                customClass: "alert alert-warning"
            }).open();
        };
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.ReplicationControllerController = Kubernetes.controller("ReplicationControllerController", ["$scope", "KubernetesModel", "KubernetesState", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesState, $templateCache, $location, $routeParams, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.rawMode = false;
        $scope.rawModel = null;
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.itemConfig = {
            properties: {
                '^\\/labels$': {
                    template: $templateCache.get('labelTemplate.html')
                }
            }
        };
        $scope.$on('kubernetesModelUpdated', function () {
            updateData();
        });
        $scope.$on('$routeUpdate', function ($event) {
            updateData();
        });
        $scope.$watch('model.pods', function (newValue, oldValue) {
            updateData();
        }, true);
        $scope.flipRaw = function () {
            $scope.rawMode = !$scope.rawMode;
            Core.$apply($scope);
        };
        updateData();
        function updateData() {
            $scope.id = $routeParams["id"];
            $scope.item = $scope.model.getReplicationController(KubernetesState.selectedNamespace, $scope.id);
            if ($scope.item) {
                $scope.rawModel = Kubernetes.toRawJson($scope.item);
            }
            Core.$apply($scope);
        }
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.ReplicationControllerEditController = Kubernetes.controller("ReplicationControllerEditController", ["$scope", "KubernetesModel", "KubernetesState", "KubernetesSchema", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "KubernetesApiURL", "SchemaRegistry", function ($scope, KubernetesModel, KubernetesState, KubernetesSchema, $templateCache, $location, $routeParams, $http, $timeout, KubernetesApiURL, schemas) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.id = $routeParams["id"];
        $scope.schema = KubernetesSchema;
        Kubernetes.log.debug("Schema: ", $scope.schema);
        $scope.config = schemas.cloneSchema("io.fabric8.kubernetes.api.model.ReplicationController");
        //$$scope.config = KubernetesSchema.definitions.kubernetes_v1beta3_ReplicationController;
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.$on('$routeUpdate', function ($event) {
            updateData();
        });
        updateData();
        function updateData() {
            if ($scope.id) {
                $scope.entity = $scope.model.getReplicationController(KubernetesState.selectedNamespace, $scope.id);
                Core.$apply($scope);
                $scope.fetched = true;
            }
            else {
                $scope.fetched = true;
            }
        }
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.ReplicationControllers = Kubernetes.controller("ReplicationControllers", ["$scope", "KubernetesModel", "KubernetesReplicationControllers", "KubernetesPods", "KubernetesState", "$templateCache", "$location", "$routeParams", "jolokia", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesReplicationControllers, KubernetesPods, KubernetesState, $templateCache, $location, $routeParams, jolokia, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.tableConfig = {
            data: 'model.replicationControllers',
            showSelectionCheckbox: true,
            enableRowClickSelection: false,
            multiSelect: true,
            selectedItems: [],
            filterOptions: {
                filterText: $location.search()["q"] || ''
            },
            columnDefs: [
                { field: 'metadata.name', displayName: 'ID', cellTemplate: $templateCache.get("idTemplate.html") },
                { field: '$podsLink', displayName: 'Pods', cellTemplate: $templateCache.get("podCountsAndLinkTemplate.html") },
                { field: 'desiredState.replicas', displayName: 'Replicas', cellTemplate: $templateCache.get("desiredReplicas.html") },
                { field: 'labelsText', displayName: 'Labels', cellTemplate: $templateCache.get("labelTemplate.html") },
                { field: 'metadata.namespace', displayName: 'Namespace' }
            ]
        };
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.deletePrompt = function (selected) {
            if (angular.isString(selected)) {
                selected = [{
                    id: selected
                }];
            }
            UI.multiItemConfirmActionDialog({
                collection: selected,
                index: 'metadata.name',
                onClose: function (result) {
                    if (result) {
                        function deleteSelected(selected, next) {
                            if (next) {
                                Kubernetes.log.debug("deleting: ", Kubernetes.getName(next));
                                KubernetesReplicationControllers.delete({
                                    id: Kubernetes.getName(next)
                                }, undefined, function () {
                                    Kubernetes.log.debug("deleted: ", Kubernetes.getName(next));
                                    deleteSelected(selected, selected.shift());
                                }, function (error) {
                                    Kubernetes.log.debug("Error deleting: ", error);
                                    deleteSelected(selected, selected.shift());
                                });
                            }
                        }
                        deleteSelected(selected, selected.shift());
                    }
                },
                title: 'Delete replication controllers?',
                action: 'The following replication controllers will be deleted:',
                okText: 'Delete',
                okClass: 'btn-danger',
                custom: "This operation is permanent once completed!",
                customClass: "alert alert-warning"
            }).open();
        };
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.ServiceController = Kubernetes.controller("ServiceController", ["$scope", "KubernetesModel", "KubernetesState", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesState, $templateCache, $location, $routeParams, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.rawMode = false;
        $scope.rawModel = null;
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.itemConfig = {
            properties: {
                '^\\/labels$': {
                    template: $templateCache.get('labelTemplate.html')
                }
            }
        };
        $scope.$on('kubernetesModelUpdated', function () {
            updateData();
        });
        $scope.$watch('model.services', function (newValue, oldValue) {
            updateData();
        }, true);
        $scope.$on('$routeUpdate', function ($event) {
            updateData();
        });
        $scope.flipRaw = function () {
            $scope.rawMode = !$scope.rawMode;
            Core.$apply($scope);
        };
        updateData();
        function updateData() {
            $scope.id = $routeParams["id"];
            $scope.namespace = $routeParams["namespace"] || KubernetesState.selectedNamespace;
            $scope.item = $scope.model.getService($scope.namespace, $scope.id);
            if ($scope.item) {
                $scope.rawModel = Kubernetes.toRawJson($scope.item);
            }
            Core.$apply($scope);
        }
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.ServiceEditController = Kubernetes.controller("ServiceEditController", ["$scope", "KubernetesModel", "KubernetesState", "KubernetesSchema", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "KubernetesApiURL", "SchemaRegistry", function ($scope, KubernetesModel, KubernetesState, KubernetesSchema, $templateCache, $location, $routeParams, $http, $timeout, KubernetesApiURL, schemas) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.id = $routeParams["id"];
        $scope.schema = KubernetesSchema;
        $scope.config = schemas.cloneSchema("io.fabric8.kubernetes.api.model.Service");
        //$scope.config = KubernetesSchema.definitions.kubernetes_v1beta2_Service;
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.$on('$routeUpdate', function ($event) {
            updateData();
        });
        updateData();
        function updateData() {
            if ($scope.id) {
                $scope.entity = $scope.model.getService(KubernetesState.selectedNamespace, $scope.id);
                Core.$apply($scope);
                $scope.fetched = true;
            }
            else {
                $scope.fetched = true;
            }
        }
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
/// <reference path="kubernetesModel.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes._module.factory('ServiceRegistry', [function () {
        return new ServiceRegistryService();
    }]);
    /**
     * Represents a simple interface to service discovery that can be used early on in the application lifecycle before the
     * underlying model has been created via dependency injection
     */
    var ServiceRegistryService = (function () {
        function ServiceRegistryService() {
            this.model = null;
        }
        /**
         * Returns true if there is a service available for the given ID or false
         */
        ServiceRegistryService.prototype.hasService = function (serviceName) {
            return this.findService(serviceName) ? true : false;
        };
        /**
         * Returns the service for the given service name (ID) or null if it cannot be found
         *
         * @param serviceName the name of the service to look for
         * @return {null}
         */
        ServiceRegistryService.prototype.findService = function (serviceName) {
            var answer = null;
            if (serviceName) {
                var model = this.getModel();
                if (model) {
                    var namespace = model.currentNamespace();
                    return model.getService(namespace, serviceName);
                }
            }
            return answer;
        };
        /**
         * Returns the service link for the given service name
         *
         * @param serviceName the name of the service
         * @return {null}
         */
        ServiceRegistryService.prototype.serviceLink = function (serviceName) {
            var service = this.findService(serviceName);
            return Kubernetes.serviceLinkUrl(service);
        };
        ServiceRegistryService.prototype.getModel = function () {
            var answer = this.model;
            // lets allow lazy load so we can be invoked before the injector has been created
            if (!answer) {
                var injector = HawtioCore.injector;
                if (injector) {
                    this.model = injector.get('KubernetesModel');
                }
            }
            answer = this.model;
            return answer;
        };
        return ServiceRegistryService;
    })();
    Kubernetes.ServiceRegistryService = ServiceRegistryService;
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.Services = Kubernetes.controller("Services", ["$scope", "KubernetesModel", "KubernetesServices", "KubernetesPods", "KubernetesState", "$templateCache", "$location", "$routeParams", "jolokia", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesServices, KubernetesPods, KubernetesState, $templateCache, $location, $routeParams, jolokia, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.tableConfig = {
            data: 'model.services',
            showSelectionCheckbox: true,
            enableRowClickSelection: false,
            multiSelect: true,
            selectedItems: [],
            filterOptions: {
                filterText: $location.search()["q"] || ''
            },
            columnDefs: [
                { field: 'metadata.name', displayName: 'ID', cellTemplate: $templateCache.get("idTemplate.html") },
                { field: 'spec.portalIP', displayName: 'Address', cellTemplate: $templateCache.get("portalAddress.html") },
                { field: '$podsLink', displayName: 'Pods', cellTemplate: $templateCache.get("podCountsAndLinkTemplate.html") },
                { field: 'spec.selector', displayName: 'Selector', cellTemplate: $templateCache.get("selectorTemplate.html") },
                { field: 'labelsText', displayName: 'Labels', cellTemplate: $templateCache.get("labelTemplate.html") },
                { field: 'metadata.namespace', displayName: 'Namespace' }
            ]
        };
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.deletePrompt = function (selected) {
            if (angular.isString(selected)) {
                selected = [{
                    id: selected
                }];
            }
            UI.multiItemConfirmActionDialog({
                collection: selected,
                index: 'metadata.name',
                onClose: function (result) {
                    if (result) {
                        function deleteSelected(selected, next) {
                            if (next) {
                                Kubernetes.log.debug("deleting: ", Kubernetes.getName(next));
                                KubernetesServices.delete({
                                    id: Kubernetes.getName(next)
                                }, undefined, function () {
                                    Kubernetes.log.debug("deleted: ", Kubernetes.getName(next));
                                    deleteSelected(selected, selected.shift());
                                }, function (error) {
                                    Kubernetes.log.debug("Error deleting: ", error);
                                    deleteSelected(selected, selected.shift());
                                });
                            }
                        }
                        deleteSelected(selected, selected.shift());
                    }
                },
                title: 'Delete services?',
                action: 'The following services will be deleted:',
                okText: 'Delete',
                okClass: 'btn-danger',
                custom: "This operation is permanent once completed!",
                customClass: "alert alert-warning"
            }).open();
        };
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    // controller for the status icon cell
    Kubernetes.PodStatus = Kubernetes.controller("PodStatus", ["$scope", function ($scope) {
        $scope.statusMapping = function (text) {
            return Kubernetes.statusTextToCssClass(text);
        };
    }]);
    // controller that deals with the labels per pod
    Kubernetes.Labels = Kubernetes.controller("Labels", ["$scope", "workspace", "jolokia", "$location", function ($scope, workspace, jolokia, $location) {
        $scope.labels = [];
        var labelKeyWeights = {
            "name": 1,
            "replicationController": 2,
            "group": 3
        };
        $scope.$watch('entity', function (newValue, oldValue) {
            if (newValue) {
                // log.debug("labels: ", newValue);
                // massage the labels a bit
                $scope.labels = [];
                angular.forEach(Core.pathGet($scope.entity, ["metadata", "labels"]), function (value, key) {
                    if (key === 'fabric8') {
                        // TODO not sure what this is for, the container type?
                        return;
                    }
                    $scope.labels.push({
                        key: key,
                        title: value
                    });
                });
                //  lets sort by key but lets make sure that we weight certain labels so they are first
                $scope.labels = $scope.labels.sort(function (a, b) {
                    function getWeight(key) {
                        return labelKeyWeights[key] || 1000;
                    }
                    var n1 = a["key"];
                    var n2 = b["key"];
                    var w1 = getWeight(n1);
                    var w2 = getWeight(n2);
                    var diff = w1 - w2;
                    if (diff < 0) {
                        return -1;
                    }
                    else if (diff > 0) {
                        return 1;
                    }
                    if (n1 && n2) {
                        if (n1 > n2) {
                            return 1;
                        }
                        else if (n1 < n2) {
                            return -1;
                        }
                        else {
                            return 0;
                        }
                    }
                    else {
                        if (n1 === n2) {
                            return 0;
                        }
                        else if (n1) {
                            return 1;
                        }
                        else {
                            return -1;
                        }
                    }
                });
            }
        });
        $scope.handleClick = function (entity, labelType, value) {
            // log.debug("handleClick, entity: ", entity, " key: ", labelType, " value: ", value);
            var filterTextSection = labelType + "=" + value.title;
            $scope.$emit('labelFilterUpdate', filterTextSection);
        };
        $scope.labelClass = Kubernetes.containerLabelClass;
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.TemplateController = Kubernetes.controller("TemplateController", ["$scope", "KubernetesModel", "$location", "marked", function ($scope, KubernetesModel, $location, marked) {
        $scope.model = KubernetesModel;
        $scope.filterText = "";
        function getAnnotations(obj) {
            return Core.pathGet(obj, ['metadata', 'annotations']);
        }
        function getValueFor(obj, key) {
            var annotations = getAnnotations(obj);
            if (!annotations) {
                return "";
            }
            var name = Kubernetes.getName(obj);
            if (name) {
                var fullKey = "fabric8." + name + "/" + key;
                var answer = annotations[fullKey];
                if (answer) {
                    return answer;
                }
            }
            var key = _.find(_.keys(annotations), function (k) { return _.endsWith(k, key); });
            if (key) {
                return annotations[key];
            }
            else {
                return "";
            }
        }
        $scope.cancel = function () {
            if ($scope.formConfig) {
                delete $scope.formConfig;
                delete $scope.entity;
                $scope.objects = undefined;
                return;
            }
            $location.path('/kubernetes/apps');
        };
        $scope.$watch('model.templates.length', function (newValue) {
            if (newValue === 0) {
                $location.path('/kubernetes/apps');
            }
        });
        $scope.filterTemplates = function (template) {
            if (Core.isBlank($scope.filterText)) {
                return true;
            }
            return _.contains(angular.toJson(template), $scope.filterText.toLowerCase());
        };
        $scope.getDescription = function (template) {
            return marked(getValueFor(template, 'description') || 'No description');
        };
        $scope.getIconUrl = function (template) {
            return getValueFor(template, 'iconUrl') || Kubernetes.defaultIconUrl;
        };
        $scope.deployTemplate = function (template) {
            Kubernetes.log.debug("Template parameters: ", template.parameters);
            Kubernetes.log.debug("Template objects: ", template.objects);
            var routeServiceName = undefined;
            var service = _.find(template.objects, function (obj) {
                if (Kubernetes.getKind(obj) === "Service") {
                    var ports = Kubernetes.getPorts(obj);
                    if (ports && ports.length === 1) {
                        return true;
                    }
                }
                else {
                    return false;
                }
            });
            if (service) {
                routeServiceName = Kubernetes.getName(service);
            }
            Kubernetes.log.debug("Service: ", service);
            if (!routeServiceName && (!template.parameters || template.parameters.length === 0)) {
                Kubernetes.log.debug("No parameters required, deploying objects");
                applyObjects(template.objects);
                return;
            }
            var formConfig = {
                style: 0 /* STANDARD */,
                hideLegend: true,
                properties: {}
            };
            var params = template.parameters;
            _.forEach(params, function (param) {
                var property = {};
                property.label = param.name.titleize();
                property.description = param.description;
                property.default = param.value;
                // TODO, do parameters support types?
                property.type = 'string';
                formConfig.properties[param.name] = property;
            });
            if (routeServiceName) {
                formConfig.properties.createRoute = {
                    type: 'boolean',
                    default: true,
                    label: "Create Route"
                };
                /*
                        formConfig.properties.routeName = {
                          type: 'string',
                          label: 'Route Name',
                          default: routeServiceName,
                          'control-group-attributes': {
                            'ng-show': 'entity.createRoute'
                          }
                        };
                */
                formConfig.properties.routeServiceName = {
                    type: 'hidden',
                    default: routeServiceName
                };
                var namespace = Kubernetes.currentKubernetesNamespace();
                // TODO store this in localStorage!
                var domain = "vagrant.f8";
                var defaultRouteHostSuffix = '.' + (namespace === "default" ? "" : namespace + ".") + domain;
                formConfig.properties.routeHostname = {
                    type: 'string',
                    default: defaultRouteHostSuffix,
                    label: "Route host name suffix",
                    'control-group-attributes': {
                        'ng-show': 'entity.createRoute'
                    }
                };
            }
            $scope.entity = {};
            $scope.formConfig = formConfig;
            $scope.objects = template.objects;
            Kubernetes.log.debug("Form config: ", formConfig);
        };
        function substitute(str, data) {
            return str.replace(/\${\w*}/g, function (match) {
                var key = match.replace(/\${/, '').replace(/}/, '').trim();
                return data[key] || match;
            });
        }
        $scope.substituteAndDeployTemplate = function () {
            var objects = $scope.objects;
            var objectsText = angular.toJson(objects, true);
            // pull these out of the entity object so they're not used in substitutions
            var createRoute = $scope.entity.createRoute;
            var routeHostnameSuffix = $scope.entity.routeHostname || "";
            var routeName = $scope.entity.routeName;
            var routeServiceName = $scope.entity.routeServiceName;
            delete $scope.entity.createRoute;
            delete $scope.entity.routeHostname;
            delete $scope.entity.routeName;
            delete $scope.entity.routeServiceName;
            objectsText = substitute(objectsText, $scope.entity);
            objects = angular.fromJson(objectsText);
            if (createRoute) {
                var routes = [];
                angular.forEach(objects, function (object) {
                    var kind = object.kind;
                    var name = Kubernetes.getName(object);
                    if (name && "Service" === kind) {
                        var routeHostname = name + routeHostnameSuffix;
                        var route = {
                            kind: "Route",
                            apiVersion: Kubernetes.defaultOSApiVersion,
                            metadata: {
                                name: name,
                            },
                            spec: {
                                host: routeHostname,
                                to: {
                                    kind: "Service",
                                    name: name
                                }
                            }
                        };
                        routes.push(route);
                    }
                });
                objects = objects.concat(routes);
            }
            applyObjects(objects);
        };
        function applyObjects(objects) {
            _.forEach(objects, function (object) {
                Kubernetes.log.debug("Object: ", object);
                Kubernetes.updateOrCreateObject(object, KubernetesModel);
            });
            $location.path('/kubernetes/apps');
        }
        $scope.deleteTemplate = function (template) {
            UI.multiItemConfirmActionDialog({
                collection: [template],
                index: 'metadata.name',
                onClose: function (result) {
                    if (result) {
                        KubernetesModel['templatesResource'].delete({
                            id: template.metadata.name
                        }, undefined, function () {
                            KubernetesModel['templatesResource'].query(function (data) {
                                KubernetesModel.templates = data.items;
                            });
                        }, function (error) {
                            Kubernetes.log.debug("Error deleting template: ", error);
                        });
                    }
                },
                title: 'Delete Template?',
                action: 'The following template will be deleted:',
                okText: 'Delete',
                okClass: 'btn-danger',
                custom: "This operation is permanent once completed!",
                customClass: "alert alert-warning"
            }).open();
        };
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    var log = Logger.get('kubernetes-watcher');
    var apiUrl = UrlHelpers.join('api', 'v1');
    var namespaceType = Kubernetes.WatchTypes.NAMESPACES;
    var k8sTypes = Kubernetes.NamespacedTypes.k8sTypes;
    var osTypes = Kubernetes.NamespacedTypes.osTypes;
    var baseWatch = {
        url: undefined,
        connectTime: undefined,
        objects: {},
        objectArray: [],
        customizers: [],
        onAddActions: [],
        onModifiedActions: [],
        onDeletedActions: [],
        socket: undefined,
        connected: false
    };
    var namespaceWatch = _.assign(_.cloneDeep(baseWatch), {
        selected: undefined,
        connectTime: undefined,
        url: UrlHelpers.join(apiUrl, Kubernetes.WatchTypes.NAMESPACES),
    });
    var watches = {};
    _.forEach(k8sTypes, function (type) {
        watches[type] = _.assign(_.cloneDeep(baseWatch), {
            prefix: Kubernetes.kubernetesApiPrefix()
        });
    });
    _.forEach(osTypes, function (type) {
        watches[type] = _.assign(_.cloneDeep(baseWatch), {
            prefix: UrlHelpers.join(Kubernetes.openshiftApiPrefix())
        });
    });
    hawtioPluginLoader.registerPreBootstrapTask(function (next) {
        var uri = new URI(Kubernetes.masterApiUrl());
        uri.path(namespaceWatch.url);
        var url = uri.toString();
        // can't use $http here
        $.get(uri.toString()).done(function (data) {
            _.forEach(data.items, function (namespace) {
                if (!namespace.metadata.uid) {
                    namespace.metadata.uid = namespace.metadata.namespace + '/' + namespace.metadata.name;
                }
                namespaceWatch.objects[namespace.metadata.uid] = namespace;
            });
            namespaceWatch.objectArray.length = 0;
            _.forIn(namespaceWatch.objects, function (object, key) {
                namespaceWatch.objectArray.push(object);
            });
        }).always(next);
    });
    function createWatch(type, watch, userDetails, $scope, onMessage, onClose, onOpen) {
        if (onMessage === void 0) { onMessage = function (event) {
        }; }
        if (onClose === void 0) { onClose = function (event) {
        }; }
        if (onOpen === void 0) { onOpen = function (event) {
        }; }
        var uri = new URI(Kubernetes.masterApiUrl());
        uri.path(watch.url);
        if (uri.protocol() === "https") {
            uri.protocol('wss');
        }
        else {
            uri.protocol('ws');
        }
        uri.query({
            watch: true,
            access_token: userDetails.token
        });
        watch.retries = 0;
        var onOpenInternal = function (event) {
            watch.retries = 0;
            watch.connectTime = new Date().getTime();
            watch.connected = true;
            onOpen(event);
        };
        var onMessageInternal = function (event) {
            // log.debug(type, " onmessage: ", event);
            var data = angular.fromJson(event.data);
            switch (data.type) {
                case Kubernetes.WatchActions.ADDED:
                case Kubernetes.WatchActions.MODIFIED:
                    var obj = data.object;
                    if (watch.customizers.length > 0) {
                        _.forEach(watch.customizers, function (customizer) {
                            customizer(obj);
                        });
                    }
                    if (!data.object.metadata.uid) {
                        data.object.metadata.uid = data.object.metadata.namespace + '/' + data.object.metadata.name;
                    }
                    watch.objects[data.object.metadata.uid] = data.object;
                    break;
                case Kubernetes.WatchActions.DELETED:
                    delete watch.objects[data.object.metadata.uid];
                    break;
                default:
                    log.info("Unknown event type: ", data.type);
                    return;
            }
            watch.objectArray.length = 0;
            _.forIn(watch.objects, function (object, uid) {
                watch.objectArray.push(object);
            });
            onMessage(data);
            switch (data.type) {
                case Kubernetes.WatchActions.ADDED:
                    _.forEach(watch.onAddActions, function (action) { return action(data.object); });
                    break;
                case Kubernetes.WatchActions.MODIFIED:
                    _.forEach(watch.onModifiedActions, function (action) { return action(data.object); });
                    break;
                case Kubernetes.WatchActions.DELETED:
                    _.forEach(watch.onDeletedActions, function (action) { return action(data.object); });
                    break;
            }
            Core.$apply($scope);
        };
        var onCloseInternal = function (event) {
            watch.connected = false;
            if (watch.retries < 3 && watch.connectTime && new Date().getTime() - watch.connectTime > 5000) {
                setTimeout(function () {
                    watch.retries = watch.retries + 1;
                    log.debug("watch ", type, " disconnected, retry #", watch.retries);
                    var ws = watch.socket = new WebSocket(uri.toString());
                    ws.onopen = onOpenInternal;
                    ws.onmessage = onMessageInternal;
                    ws.onclose = onCloseInternal;
                }, 5000);
            }
            else {
                onClose(event);
            }
        };
        var ws = watch.socket = new WebSocket(uri.toString());
        ws.onopen = onOpenInternal;
        ws.onmessage = onMessageInternal;
        ws.onclose = onCloseInternal;
    }
    /*
    _module.run(['WatcherService', '$rootScope', (WatcherService:WatcherService, $rootScope) => {
        log.debug("Started watcher service");

//		Kubernetes.keepPollingModel = false;

        // some usage examples
//		WatcherService.addCustomizer('pods', (pod) => {
//			pod.SomeValue = 'foobar';
//		});
//		$rootScope.pods = WatcherService.getObjects('pods');
//		$rootScope.podMap = WatcherService.getObjectMap('pods');
//
//		$rootScope.$watchCollection('pods', (newValue) => {
//		  log.debug("pods changed: ", newValue);
//		});
//
//		$rootScope.$watch('podMap', (newValue) => {
//		  log.debug("pod map changed: ", newValue);
//		}, true);
    }]);
    */
    Kubernetes._module.service('WatcherService', ['userDetails', '$rootScope', '$timeout', function (userDetails, $rootScope, $timeout) {
        var self = {
            hasWebSocket: false
        };
        try {
            if (!WebSocket) {
                return self;
            }
        }
        catch (err) {
            return self;
        }
        self.setNamespace = function (namespace) {
            if (namespace !== namespaceWatch.selected) {
                log.debug("Namespace changed, shutting down existing watches");
                _.forIn(watches, function (watch, type) {
                    if (watch.socket) {
                        watch.socket.close();
                    }
                });
                log.debug("Setting namespace watch to: ", namespace);
                namespaceWatch.selected = namespace;
                if (!namespace) {
                    delete localStorage[Kubernetes.Constants.NAMESPACE_STORAGE_KEY];
                }
                else {
                    localStorage[Kubernetes.Constants.NAMESPACE_STORAGE_KEY] = namespace;
                }
                $rootScope.$broadcast("WatcherNamespaceChanged", namespace);
                if (namespace) {
                    _.forIn(watches, function (watch, type) {
                        // reset the object rather than re-assigning them
                        // ensures that any watches in controllers won't
                        // be watching a stale object
                        watch.url = UrlHelpers.join(watch.prefix, Kubernetes.WatchTypes.NAMESPACES, namespace, type);
                        watch.connectTime = undefined;
                        _.forEach(_.keys(watch.objects), function (uid) {
                            _.forEach(watch.onDeletedActions, function (action) { return action(watch.objects[uid]); });
                            delete watch.objects[uid];
                        });
                        watch.objectArray.length = 0;
                        watch.socket = undefined;
                    });
                    _.forIn(watches, function (watch, type) {
                        createWatch(type, watch, userDetails, $rootScope);
                    });
                }
            }
        };
        createWatch(Kubernetes.WatchTypes.NAMESPACES, namespaceWatch, userDetails, $rootScope, function (event) {
            switch (event.type) {
                case Kubernetes.WatchActions.ADDED:
                case Kubernetes.WatchActions.MODIFIED:
                    if (!namespaceWatch.selected) {
                        self.setNamespace(event.object.metadata.name);
                    }
                    break;
                case Kubernetes.WatchActions.DELETED:
                    var next = _.first(namespaceWatch.objectArray);
                    if (next) {
                        self.setNamespace(next.metadata.name);
                    }
                    else {
                        self.setNamespace(undefined);
                    }
                    break;
                default:
                    log.debug("Unknown namespace event type: ", event.type);
                    return;
            }
        }, function (event) {
            log.debug("Namespace watch closed");
            self.setNamespace(undefined);
        });
        self.setNamespace(localStorage[Kubernetes.Constants.NAMESPACE_STORAGE_KEY]);
        self.hasWebSocket = true;
        self.getNamespace = function () { return namespaceWatch.selected; };
        self.addCustomizer = function (type, customizer) {
            if (type in watches) {
                watches[type].customizers.push(customizer);
                _.forEach(watches[type].objectArray, function (obj) { return customizer(obj); });
            }
        };
        self.getTypes = function () {
            return k8sTypes.concat([Kubernetes.WatchTypes.NAMESPACES]).concat(osTypes);
        };
        self.getObjectMap = function (type) {
            if (type === Kubernetes.WatchTypes.NAMESPACES) {
                return namespaceWatch.objects;
            }
            if (type in watches) {
                return watches[type].objects;
            }
            else {
                return undefined;
            }
        };
        self.getObjects = function (type) {
            if (type === Kubernetes.WatchTypes.NAMESPACES) {
                return namespaceWatch.objectArray;
            }
            if (type in watches) {
                return watches[type].objectArray;
            }
            else {
                return undefined;
            }
        };
        self.listeners = [];
        var updateFunction = function () {
            log.debug("Objects changed, firing listeners");
            var objects = {};
            _.forEach(self.getTypes(), function (type) {
                objects[type] = self.getObjects(type);
            });
            _.forEach(self.listeners, function (listener) {
                listener(objects);
            });
        };
        var debouncedUpdate = _.debounce(updateFunction, 500, { trailing: true });
        // listener gets notified after a bunch of changes have occurred
        self.registerListener = function (fn) {
            self.listeners.push(fn);
            _.forEach(self.getTypes(), function (type) {
                self.addAction(type, Kubernetes.WatchActions.ANY, debouncedUpdate);
            });
        };
        // function to watch individual actions on the k8s objects
        self.addAction = function (type, action, fn) {
            var watch = undefined;
            if (type === Kubernetes.WatchTypes.NAMESPACES) {
                watch = namespaceWatch;
            }
            else {
                watch = watches[type];
            }
            if (watch) {
                switch (action) {
                    case Kubernetes.WatchActions.ANY:
                        _.forEach(watch.objectArray, function (obj) { return fn(obj); });
                        watch.onAddActions.push(fn);
                        watch.onDeletedActions.push(fn);
                        watch.onModifiedActions.push(fn);
                        break;
                    case Kubernetes.WatchActions.ADDED:
                        _.forEach(watch.objectArray, function (obj) { return fn(obj); });
                        watch.onAddActions.push(fn);
                        break;
                    case Kubernetes.WatchActions.MODIFIED:
                        watch.onModifiedActions.push(fn);
                        break;
                    case Kubernetes.WatchActions.DELETED:
                        watch.onDeletedActions.push(fn);
                        break;
                    default:
                        log.debug("Attempting to add unknown action: ", action);
                }
            }
        };
        return self;
    }]);
})(Kubernetes || (Kubernetes = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2UvamF2YS9oYXd0aW8ta3ViZXJuZXRlcy9pbmNsdWRlcy50cyIsIi93b3Jrc3BhY2UvamF2YS9oYXd0aW8ta3ViZXJuZXRlcy9rdWJlcm5ldGVzL3RzL2t1YmVybmV0ZXNJbnRlcmZhY2VzLnRzIiwiL3dvcmtzcGFjZS9qYXZhL2hhd3Rpby1rdWJlcm5ldGVzL2t1YmVybmV0ZXMvdHMva3ViZXJuZXRlc0hlbHBlcnMudHMiLCIvd29ya3NwYWNlL2phdmEvaGF3dGlvLWt1YmVybmV0ZXMvcHJvamVjdC90cy9wcm9qZWN0SGVscGVycy50cyIsIi93b3Jrc3BhY2UvamF2YS9oYXd0aW8ta3ViZXJuZXRlcy9wcm9qZWN0L3RzL3Byb2plY3RQbHVnaW4udHMiLCIvd29ya3NwYWNlL2phdmEvaGF3dGlvLWt1YmVybmV0ZXMvcHJvamVjdC90cy9wcm9qZWN0LnRzIiwiL3dvcmtzcGFjZS9qYXZhL2hhd3Rpby1rdWJlcm5ldGVzL2t1YmVybmV0ZXMvdHMva3ViZXJuZXRlc1BsdWdpbi50cyIsIi93b3Jrc3BhY2UvamF2YS9oYXd0aW8ta3ViZXJuZXRlcy9rdWJlcm5ldGVzL3RzL2FwcHMudHMiLCIvd29ya3NwYWNlL2phdmEvaGF3dGlvLWt1YmVybmV0ZXMva3ViZXJuZXRlcy90cy9idWlsZC50cyIsIi93b3Jrc3BhY2UvamF2YS9oYXd0aW8ta3ViZXJuZXRlcy9rdWJlcm5ldGVzL3RzL2J1aWxkQ29uZmlnLnRzIiwiL3dvcmtzcGFjZS9qYXZhL2hhd3Rpby1rdWJlcm5ldGVzL2t1YmVybmV0ZXMvdHMvYnVpbGRDb25maWdFZGl0LnRzIiwiL3dvcmtzcGFjZS9qYXZhL2hhd3Rpby1rdWJlcm5ldGVzL2t1YmVybmV0ZXMvdHMvYnVpbGRDb25maWdzLnRzIiwiL3dvcmtzcGFjZS9qYXZhL2hhd3Rpby1rdWJlcm5ldGVzL2t1YmVybmV0ZXMvdHMvYnVpbGRMb2dzLnRzIiwiL3dvcmtzcGFjZS9qYXZhL2hhd3Rpby1rdWJlcm5ldGVzL2t1YmVybmV0ZXMvdHMvYnVpbGRzLnRzIiwiL3dvcmtzcGFjZS9qYXZhL2hhd3Rpby1rdWJlcm5ldGVzL2t1YmVybmV0ZXMvdHMvY29ubmVjdC50cyIsIi93b3Jrc3BhY2UvamF2YS9oYXd0aW8ta3ViZXJuZXRlcy9rdWJlcm5ldGVzL3RzL2RlcGxveW1lbnRDb25maWcudHMiLCIvd29ya3NwYWNlL2phdmEvaGF3dGlvLWt1YmVybmV0ZXMva3ViZXJuZXRlcy90cy9kZXBsb3ltZW50Q29uZmlncy50cyIsIi93b3Jrc3BhY2UvamF2YS9oYXd0aW8ta3ViZXJuZXRlcy9rdWJlcm5ldGVzL3RzL2t1YmVybmV0ZXNNb2RlbC50cyIsIi93b3Jrc3BhY2UvamF2YS9oYXd0aW8ta3ViZXJuZXRlcy9rdWJlcm5ldGVzL3RzL2hvc3QudHMiLCIvd29ya3NwYWNlL2phdmEvaGF3dGlvLWt1YmVybmV0ZXMva3ViZXJuZXRlcy90cy9ob3N0cy50cyIsIi93b3Jrc3BhY2UvamF2YS9oYXd0aW8ta3ViZXJuZXRlcy9rdWJlcm5ldGVzL3RzL2ltYWdlUmVwb3NpdG9yaWVzLnRzIiwiL3dvcmtzcGFjZS9qYXZhL2hhd3Rpby1rdWJlcm5ldGVzL2t1YmVybmV0ZXMvdHMva3ViZXJuZXRlc0pzb25EaXJlY3RpdmUudHMiLCIvd29ya3NwYWNlL2phdmEvaGF3dGlvLWt1YmVybmV0ZXMva3ViZXJuZXRlcy90cy9zY2hlbWEudHMiLCIvd29ya3NwYWNlL2phdmEvaGF3dGlvLWt1YmVybmV0ZXMva3ViZXJuZXRlcy90cy9rdWJlcm5ldGVzU2NoZW1hLnRzIiwiL3dvcmtzcGFjZS9qYXZhL2hhd3Rpby1rdWJlcm5ldGVzL2t1YmVybmV0ZXMvdHMva3ViZXJuZXRlc1NlcnZpY2VzLnRzIiwiL3dvcmtzcGFjZS9qYXZhL2hhd3Rpby1rdWJlcm5ldGVzL2t1YmVybmV0ZXMvdHMva3ViZXJuZXRlc1RvcExldmVsLnRzIiwiL3dvcmtzcGFjZS9qYXZhL2hhd3Rpby1rdWJlcm5ldGVzL2t1YmVybmV0ZXMvdHMvbmFtZXNwYWNlLnRzIiwiL3dvcmtzcGFjZS9qYXZhL2hhd3Rpby1rdWJlcm5ldGVzL2t1YmVybmV0ZXMvdHMvb3ZlcnZpZXcudHMiLCIvd29ya3NwYWNlL2phdmEvaGF3dGlvLWt1YmVybmV0ZXMva3ViZXJuZXRlcy90cy9waXBlbGluZXMudHMiLCIvd29ya3NwYWNlL2phdmEvaGF3dGlvLWt1YmVybmV0ZXMva3ViZXJuZXRlcy90cy9wb2QudHMiLCIvd29ya3NwYWNlL2phdmEvaGF3dGlvLWt1YmVybmV0ZXMva3ViZXJuZXRlcy90cy9wb2RFZGl0LnRzIiwiL3dvcmtzcGFjZS9qYXZhL2hhd3Rpby1rdWJlcm5ldGVzL2t1YmVybmV0ZXMvdHMvcG9kcy50cyIsIi93b3Jrc3BhY2UvamF2YS9oYXd0aW8ta3ViZXJuZXRlcy9rdWJlcm5ldGVzL3RzL3JlcGxpY2F0aW9uQ29udHJvbGxlci50cyIsIi93b3Jrc3BhY2UvamF2YS9oYXd0aW8ta3ViZXJuZXRlcy9rdWJlcm5ldGVzL3RzL3JlcGxpY2F0aW9uQ29udHJvbGxlckVkaXQudHMiLCIvd29ya3NwYWNlL2phdmEvaGF3dGlvLWt1YmVybmV0ZXMva3ViZXJuZXRlcy90cy9yZXBsaWNhdGlvbkNvbnRyb2xsZXJzLnRzIiwiL3dvcmtzcGFjZS9qYXZhL2hhd3Rpby1rdWJlcm5ldGVzL2t1YmVybmV0ZXMvdHMvc2VydmljZS50cyIsIi93b3Jrc3BhY2UvamF2YS9oYXd0aW8ta3ViZXJuZXRlcy9rdWJlcm5ldGVzL3RzL3NlcnZpY2VFZGl0LnRzIiwiL3dvcmtzcGFjZS9qYXZhL2hhd3Rpby1rdWJlcm5ldGVzL2t1YmVybmV0ZXMvdHMvc2VydmljZVJlZ2lzdHJ5LnRzIiwiL3dvcmtzcGFjZS9qYXZhL2hhd3Rpby1rdWJlcm5ldGVzL2t1YmVybmV0ZXMvdHMvc2VydmljZXMudHMiLCIvd29ya3NwYWNlL2phdmEvaGF3dGlvLWt1YmVybmV0ZXMva3ViZXJuZXRlcy90cy9zaGFyZWRDb250cm9sbGVycy50cyIsIi93b3Jrc3BhY2UvamF2YS9oYXd0aW8ta3ViZXJuZXRlcy9rdWJlcm5ldGVzL3RzL3RlbXBsYXRlcy50cyIsIi93b3Jrc3BhY2UvamF2YS9oYXd0aW8ta3ViZXJuZXRlcy9rdWJlcm5ldGVzL3RzL3dhdGNoZXIudHMiXSwibmFtZXMiOlsiS3ViZXJuZXRlcyIsIkt1YmVybmV0ZXMuY29uc3RzIiwiS3ViZXJuZXRlcy5jb25zdHMuY29uc3RydWN0b3IiLCJLdWJlcm5ldGVzLmNvbnN0cy5OQU1FU1BBQ0VfU1RPUkFHRV9LRVkiLCJLdWJlcm5ldGVzLldhdGNoVHlwZXMiLCJLdWJlcm5ldGVzLldhdGNoVHlwZXMuY29uc3RydWN0b3IiLCJLdWJlcm5ldGVzLldhdGNoVHlwZXMuTkFNRVNQQUNFUyIsIkt1YmVybmV0ZXMuV2F0Y2hUeXBlcy5FTkRQT0lOVFMiLCJLdWJlcm5ldGVzLldhdGNoVHlwZXMuUE9EUyIsIkt1YmVybmV0ZXMuV2F0Y2hUeXBlcy5SRVBMSUNBVElPTl9DT05UUk9MTEVSUyIsIkt1YmVybmV0ZXMuV2F0Y2hUeXBlcy5TRVJWSUNFUyIsIkt1YmVybmV0ZXMuV2F0Y2hUeXBlcy5URU1QTEFURVMiLCJLdWJlcm5ldGVzLldhdGNoVHlwZXMuUk9VVEVTIiwiS3ViZXJuZXRlcy5XYXRjaFR5cGVzLkJVSUxEX0NPTkZJR1MiLCJLdWJlcm5ldGVzLldhdGNoVHlwZXMuQlVJTERTIiwiS3ViZXJuZXRlcy5XYXRjaFR5cGVzLkRFUExPWU1FTlRfQ09ORklHUyIsIkt1YmVybmV0ZXMuV2F0Y2hUeXBlcy5JTUFHRV9TVFJFQU1TIiwiS3ViZXJuZXRlcy5XYXRjaFR5cGVzLlBPTElDSUVTIiwiS3ViZXJuZXRlcy5XYXRjaFR5cGVzLlBPTElDWV9CSU5ESU5HUyIsIkt1YmVybmV0ZXMuV2F0Y2hUeXBlcy5ST0xFX0JJTkRJTkdTIiwiS3ViZXJuZXRlcy5XYXRjaFR5cGVzLlJPTEVTIiwiS3ViZXJuZXRlcy5OYW1lc3BhY2VkVHlwZXMiLCJLdWJlcm5ldGVzLk5hbWVzcGFjZWRUeXBlcy5jb25zdHJ1Y3RvciIsIkt1YmVybmV0ZXMuTmFtZXNwYWNlZFR5cGVzLms4c1R5cGVzIiwiS3ViZXJuZXRlcy5OYW1lc3BhY2VkVHlwZXMub3NUeXBlcyIsIkt1YmVybmV0ZXMuV2F0Y2hBY3Rpb25zIiwiS3ViZXJuZXRlcy5XYXRjaEFjdGlvbnMuY29uc3RydWN0b3IiLCJLdWJlcm5ldGVzLldhdGNoQWN0aW9ucy5BTlkiLCJLdWJlcm5ldGVzLldhdGNoQWN0aW9ucy5BRERFRCIsIkt1YmVybmV0ZXMuV2F0Y2hBY3Rpb25zLk1PRElGSUVEIiwiS3ViZXJuZXRlcy5XYXRjaEFjdGlvbnMuREVMRVRFRCIsIkt1YmVybmV0ZXMua3ViZXJuZXRlc05hbWVzcGFjZVBhdGgiLCJLdWJlcm5ldGVzLmFwaVByZWZpeCIsIkt1YmVybmV0ZXMub3NBcGlQcmVmaXgiLCJLdWJlcm5ldGVzLm1hc3RlckFwaVVybCIsIkt1YmVybmV0ZXMua3ViZXJuZXRlc0FwaVByZWZpeCIsIkt1YmVybmV0ZXMub3BlbnNoaWZ0QXBpUHJlZml4IiwiS3ViZXJuZXRlcy5wcmVmaXhGb3JUeXBlIiwiS3ViZXJuZXRlcy5rdWJlcm5ldGVzQXBpVXJsIiwiS3ViZXJuZXRlcy5vcGVuc2hpZnRBcGlVcmwiLCJLdWJlcm5ldGVzLnVwZGF0ZU9yQ3JlYXRlT2JqZWN0IiwiS3ViZXJuZXRlcy5jcmVhdGVSZXNvdXJjZSIsIkt1YmVybmV0ZXMuaW1hZ2VSZXBvc2l0b3JpZXNSZXN0VVJMIiwiS3ViZXJuZXRlcy5kZXBsb3ltZW50Q29uZmlnc1Jlc3RVUkwiLCJLdWJlcm5ldGVzLmJ1aWxkc0xvZ3NSZXN0VVJMIiwiS3ViZXJuZXRlcy5idWlsZHNSZXN0VVJMIiwiS3ViZXJuZXRlcy5idWlsZENvbmZpZ0hvb2tzUmVzdFVSTCIsIkt1YmVybmV0ZXMuYnVpbGRDb25maWdzUmVzdFVSTCIsIkt1YmVybmV0ZXMucm91dGVzUmVzdFVSTCIsIkt1YmVybmV0ZXMudGVtcGxhdGVzUmVzdFVSTCIsIkt1YmVybmV0ZXMuZ2V0TmFtZXNwYWNlIiwiS3ViZXJuZXRlcy5nZXRMYWJlbHMiLCJLdWJlcm5ldGVzLmdldE5hbWUiLCJLdWJlcm5ldGVzLmdldEtpbmQiLCJLdWJlcm5ldGVzLmdldFNlbGVjdG9yIiwiS3ViZXJuZXRlcy5nZXRIb3N0IiwiS3ViZXJuZXRlcy5nZXRTdGF0dXMiLCJLdWJlcm5ldGVzLmdldFBvcnRzIiwiS3ViZXJuZXRlcy5nZXRDcmVhdGlvblRpbWVzdGFtcCIsIkt1YmVybmV0ZXMuaXNLdWJlcm5ldGVzIiwiS3ViZXJuZXRlcy5pc0t1YmVybmV0ZXNUZW1wbGF0ZU1hbmFnZXIiLCJLdWJlcm5ldGVzLmlzQXBwVmlldyIsIkt1YmVybmV0ZXMuc2V0SnNvbiIsIkt1YmVybmV0ZXMubGFiZWxzVG9TdHJpbmciLCJLdWJlcm5ldGVzLmluaXRTaGFyZWQiLCJLdWJlcm5ldGVzLmluaXRTaGFyZWQuaGFzU2VydmljZSIsIkt1YmVybmV0ZXMuc2VydmljZUxpbmtVcmwiLCJLdWJlcm5ldGVzLmNyZWF0ZVBvZENvdW50ZXJzIiwiS3ViZXJuZXRlcy5jb252ZXJ0S3ViZXJuZXRlc0pzb25Ub0l0ZW1zIiwiS3ViZXJuZXRlcy5pc1YxYmV0YTFPcjIiLCJLdWJlcm5ldGVzLmVudGl0eVBhZ2VMaW5rIiwiS3ViZXJuZXRlcy5yZXNvdXJjZUtpbmRUb1VyaVBhdGgiLCJLdWJlcm5ldGVzLmlzSWdub3JlTmFtZXNwYWNlS2luZCIsIkt1YmVybmV0ZXMua3ViZXJuZXRlc1VybEZvcktpbmQiLCJLdWJlcm5ldGVzLmt1YmVybmV0ZXNVcmxGb3JJdGVtS2luZCIsIkt1YmVybmV0ZXMua3ViZXJuZXRlc1Byb3h5VXJsRm9yU2VydmljZSIsIkt1YmVybmV0ZXMuYnVpbGRDb25maWdSZXN0VXJsIiwiS3ViZXJuZXRlcy5kZXBsb3ltZW50Q29uZmlnUmVzdFVybCIsIkt1YmVybmV0ZXMuaW1hZ2VSZXBvc2l0b3J5UmVzdFVybCIsIkt1YmVybmV0ZXMuYnVpbGRSZXN0VXJsIiwiS3ViZXJuZXRlcy5idWlsZExvZ3NSZXN0VXJsIiwiS3ViZXJuZXRlcy5ydW5BcHAiLCJLdWJlcm5ldGVzLmlzUnVubmluZyIsIkt1YmVybmV0ZXMuc2VsZWN0b3JNYXRjaGVzIiwiS3ViZXJuZXRlcy5nZXRTZXJ2aWNlUmVnaXN0cnkiLCJLdWJlcm5ldGVzLmtpYmFuYUxvZ3NMaW5rIiwiS3ViZXJuZXRlcy5vcGVuTG9nc0ZvclBvZHMiLCJLdWJlcm5ldGVzLnJlc2l6ZUNvbnRyb2xsZXIiLCJLdWJlcm5ldGVzLnN0YXR1c1RleHRUb0Nzc0NsYXNzIiwiS3ViZXJuZXRlcy5wb2RTdGF0dXMiLCJLdWJlcm5ldGVzLmNyZWF0ZUFwcFZpZXdQb2RDb3VudGVycyIsIkt1YmVybmV0ZXMuY3JlYXRlQXBwVmlld1NlcnZpY2VWaWV3cyIsIkt1YmVybmV0ZXMuZ2l0UGF0aFRvVXJsIiwiS3ViZXJuZXRlcy5lbnJpY2hCdWlsZENvbmZpZyIsIkt1YmVybmV0ZXMuZW5yaWNoQnVpbGRDb25maWcuZGVmYXVsdFByb3BlcnRpZXNJZk5vdEV4aXN0IiwiS3ViZXJuZXRlcy5lbnJpY2hCdWlsZENvbmZpZ3MiLCJLdWJlcm5ldGVzLmVucmljaEJ1aWxkcyIsIkt1YmVybmV0ZXMuZW5yaWNoQnVpbGQiLCJLdWJlcm5ldGVzLmVucmljaERlcGxveW1lbnRDb25maWciLCJLdWJlcm5ldGVzLmVucmljaERlcGxveW1lbnRDb25maWdzIiwiS3ViZXJuZXRlcy5lbnJpY2hJbWFnZVJlcG9zaXRvcnkiLCJLdWJlcm5ldGVzLmVucmljaEltYWdlUmVwb3NpdG9yaWVzIiwiS3ViZXJuZXRlcy5jb250YWluZXJMYWJlbENsYXNzIiwiS3ViZXJuZXRlcy5pc0ZvcmdlRW5hYmxlZCIsIkt1YmVybmV0ZXMuY3VycmVudEt1YmVybmV0ZXNOYW1lc3BhY2UiLCJLdWJlcm5ldGVzLmNvbmZpZ3VyZVNjaGVtYSIsIkt1YmVybmV0ZXMudG9SYXdKc29uIiwiUHJvamVjdCIsIlByb2plY3QuY3JlYXRlUHJvamVjdCIsIlByb2plY3QudXBkYXRlRGF0YSIsIkt1YmVybmV0ZXMuYXBwTWF0Y2hlcyIsIkt1YmVybmV0ZXMuYXBwUnVubmluZyIsIkt1YmVybmV0ZXMuZGVsZXRlQXBwIiwiS3ViZXJuZXRlcy5kZWxldGVBcHAuZGVsZXRlU2VydmljZXMiLCJLdWJlcm5ldGVzLmRlbGV0ZUFwcC5kZWxldGVSZXBsaWNhdGlvbkNvbnRyb2xsZXJzIiwiS3ViZXJuZXRlcy5kZWxldGVBcHAuZGVsZXRlUG9kcyIsIkt1YmVybmV0ZXMuZGVsZXRlU2VsZWN0ZWQiLCJLdWJlcm5ldGVzLnVwZGF0ZURhdGEiLCJLdWJlcm5ldGVzLmRlbGV0ZUVudGl0eSIsIkt1YmVybmV0ZXMuYnlJZCIsIkt1YmVybmV0ZXMuY3JlYXRlS2V5IiwiS3ViZXJuZXRlcy5wb3B1bGF0ZUtleSIsIkt1YmVybmV0ZXMucG9wdWxhdGVLZXlzIiwiS3ViZXJuZXRlcy5zZWxlY3RQb2RzIiwiS3ViZXJuZXRlcy5LdWJlcm5ldGVzTW9kZWxTZXJ2aWNlIiwiS3ViZXJuZXRlcy5LdWJlcm5ldGVzTW9kZWxTZXJ2aWNlLmNvbnN0cnVjdG9yIiwiS3ViZXJuZXRlcy5LdWJlcm5ldGVzTW9kZWxTZXJ2aWNlLnJlcGxpY2F0aW9uQ29udHJvbGxlcnMiLCJLdWJlcm5ldGVzLkt1YmVybmV0ZXNNb2RlbFNlcnZpY2UubmFtZXNwYWNlcyIsIkt1YmVybmV0ZXMuS3ViZXJuZXRlc01vZGVsU2VydmljZS4ka2VlcFBvbGxpbmciLCJLdWJlcm5ldGVzLkt1YmVybmV0ZXNNb2RlbFNlcnZpY2Uub3JSZWRyYXciLCJLdWJlcm5ldGVzLkt1YmVybmV0ZXNNb2RlbFNlcnZpY2UuZ2V0U2VydmljZSIsIkt1YmVybmV0ZXMuS3ViZXJuZXRlc01vZGVsU2VydmljZS5nZXRSZXBsaWNhdGlvbkNvbnRyb2xsZXIiLCJLdWJlcm5ldGVzLkt1YmVybmV0ZXNNb2RlbFNlcnZpY2UuZ2V0UG9kIiwiS3ViZXJuZXRlcy5LdWJlcm5ldGVzTW9kZWxTZXJ2aWNlLnBvZHNGb3JOYW1lc3BhY2UiLCJLdWJlcm5ldGVzLkt1YmVybmV0ZXNNb2RlbFNlcnZpY2UuY3VycmVudE5hbWVzcGFjZSIsIkt1YmVybmV0ZXMuS3ViZXJuZXRlc01vZGVsU2VydmljZS51cGRhdGVJY29uVXJsQW5kQXBwSW5mbyIsIkt1YmVybmV0ZXMuS3ViZXJuZXRlc01vZGVsU2VydmljZS5tYXliZUluaXQiLCJLdWJlcm5ldGVzLkt1YmVybmV0ZXNNb2RlbFNlcnZpY2UudXBkYXRlQXBwcyIsIkt1YmVybmV0ZXMuS3ViZXJuZXRlc01vZGVsU2VydmljZS5kaXNjb3ZlclBvZENvbm5lY3Rpb25zIiwiS3ViZXJuZXRlcy53aXRoUHJvcGVydHkiLCJLdWJlcm5ldGVzLmhpZGVQcm9wZXJ0aWVzIiwiS3ViZXJuZXRlcy5LdWJlcm5ldGVzU3RhdGVJbXBsIiwiS3ViZXJuZXRlcy5LdWJlcm5ldGVzU3RhdGVJbXBsLmNvbnN0cnVjdG9yIiwiS3ViZXJuZXRlcy5LdWJlcm5ldGVzU3RhdGVJbXBsLm5hbWVzcGFjZXMiLCJLdWJlcm5ldGVzLkt1YmVybmV0ZXNTdGF0ZUltcGwuc2VsZWN0ZWROYW1lc3BhY2UiLCJLdWJlcm5ldGVzLmludGVycG9sYXRlIiwiS3ViZXJuZXRlcy5jcmVhdGVFbGVtZW50IiwiS3ViZXJuZXRlcy5jcmVhdGVFbGVtZW50cyIsIkt1YmVybmV0ZXMuYXBwZW5kTmV3RWxlbWVudHMiLCJLdWJlcm5ldGVzLm5hbWVzcGFjZUZpbHRlciIsIkt1YmVybmV0ZXMuZmlyc3REcmF3IiwiS3ViZXJuZXRlcy51cGRhdGUiLCJLdWJlcm5ldGVzLnJlZnJlc2hEcmF3aW5nIiwiS3ViZXJuZXRlcy5jcmVhdGVQaXBlbGluZUtleSIsIkt1YmVybmV0ZXMubWF5YmVOZXh0IiwiS3ViZXJuZXRlcy5TZXJ2aWNlUmVnaXN0cnlTZXJ2aWNlIiwiS3ViZXJuZXRlcy5TZXJ2aWNlUmVnaXN0cnlTZXJ2aWNlLmNvbnN0cnVjdG9yIiwiS3ViZXJuZXRlcy5TZXJ2aWNlUmVnaXN0cnlTZXJ2aWNlLmhhc1NlcnZpY2UiLCJLdWJlcm5ldGVzLlNlcnZpY2VSZWdpc3RyeVNlcnZpY2UuZmluZFNlcnZpY2UiLCJLdWJlcm5ldGVzLlNlcnZpY2VSZWdpc3RyeVNlcnZpY2Uuc2VydmljZUxpbmsiLCJLdWJlcm5ldGVzLlNlcnZpY2VSZWdpc3RyeVNlcnZpY2UuZ2V0TW9kZWwiLCJLdWJlcm5ldGVzLmdldFdlaWdodCIsIkt1YmVybmV0ZXMuZ2V0QW5ub3RhdGlvbnMiLCJLdWJlcm5ldGVzLmdldFZhbHVlRm9yIiwiS3ViZXJuZXRlcy5zdWJzdGl0dXRlIiwiS3ViZXJuZXRlcy5hcHBseU9iamVjdHMiLCJLdWJlcm5ldGVzLmNyZWF0ZVdhdGNoIl0sIm1hcHBpbmdzIjoiQUFBQSxzREFBc0Q7QUFDdEQsc0RBQXNEO0FBQ3RELG1EQUFtRDtBQUNuRCwwREFBMEQ7QUFDMUQscURBQXFEOztBQ0pyRCxJQUFPLFVBQVUsQ0EyR2hCO0FBM0dELFdBQU8sVUFBVSxFQUFDLENBQUM7SUFFakJBLElBQWFBLE1BQU1BO1FBQW5CQyxTQUFhQSxNQUFNQTtRQUVuQkMsQ0FBQ0E7UUFEQ0Qsc0JBQUlBLHlDQUFxQkE7aUJBQXpCQTtnQkFBcUNFLE1BQU1BLENBQUNBLHNCQUFzQkEsQ0FBQ0E7WUFBQ0EsQ0FBQ0E7OztXQUFBRjtRQUN2RUEsYUFBQ0E7SUFBREEsQ0FGQUQsQUFFQ0MsSUFBQUQ7SUFGWUEsaUJBQU1BLEdBQU5BLE1BRVpBLENBQUFBO0lBRVVBLG9CQUFTQSxHQUFHQSxJQUFJQSxNQUFNQSxFQUFFQSxDQUFDQTtJQTRCckNBLElBQWFBLFVBQVVBO1FBQXZCSSxTQUFhQSxVQUFVQTtRQWdCdkJDLENBQUNBO1FBZkFELHNCQUFrQkEsd0JBQVVBO2lCQUE1QkE7Z0JBQXdDRSxNQUFNQSxDQUFDQSxZQUFZQSxDQUFDQTtZQUFDQSxDQUFDQTs7O1dBQUFGO1FBQzlEQSxzQkFBa0JBLHVCQUFTQTtpQkFBM0JBO2dCQUF1Q0csTUFBTUEsQ0FBQ0EsV0FBV0EsQ0FBQ0E7WUFBQ0EsQ0FBQ0E7OztXQUFBSDtRQUM1REEsc0JBQWtCQSxrQkFBSUE7aUJBQXRCQTtnQkFBa0NJLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBO1lBQUNBLENBQUNBOzs7V0FBQUo7UUFDbERBLHNCQUFrQkEscUNBQXVCQTtpQkFBekNBO2dCQUFxREssTUFBTUEsQ0FBQ0Esd0JBQXdCQSxDQUFDQTtZQUFDQSxDQUFD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QUFTQSxDQUFDQSxTQUFTQTtRQUNqQzZELEFBQ0FBLHFGQURxRkE7UUFDckZBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO0lBQ2RBLENBQUNBO0lBSGU3RCxvQkFBU0EsR0FBVEEsU0FHZkEsQ0FBQUE7SUFFREEsU0FBZ0JBLE9BQU9BLENBQUNBLE1BQU1BLEVBQUVBLEVBQUVBLEVBQUVBLFVBQVVBO1FBQzVDOEQsTUFBTUEsQ0FBQ0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0E7UUFDZkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDcEJBLE1BQU1BLENBQUNBO1FBQ1RBLENBQUNBO1FBQ0RBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1lBQ1JBLE1BQU1BLENBQUNBLElBQUlBLEdBQUdBLEVBQUVBLENBQUNBO1lBQ2pCQSxNQUFNQSxDQUFDQTtRQUNUQSxDQUFDQTtRQUNEQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNoQkEsTUFBTUEsQ0FBQ0E7UUFDVEEsQ0FBQ0E7UUFDREEsSUFBSUEsSUFBSUEsR0FBR0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBQ0EsSUFBSUE7WUFBT0EsTUFBTUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7UUFBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDdkVBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO1lBQ1RBLE1BQU1BLENBQUNBLElBQUlBLEdBQUdBLE9BQU9BLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO1lBQ3pDQSxNQUFNQSxDQUFDQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUNyQkEsQ0FBQ0E7UUFBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDTkEsTUFBTUEsQ0FBQ0EsRUFB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QUN4QkEsQ0FBQ0E7WUFDREEsR0FBR0EsQ0FBQ0EsV0FBV0EsR0FBR0Esb0JBQW9CQSxDQUFDQSxTQUFTQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN6REEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFSEEsSUFBSUEsUUFBUUEsR0FBR0EsT0FBT0EsQ0FBQ0EsUUFBUUEsSUFBSUEsRUFBRUEsQ0FBQ0E7UUFDdENBLElBQUlBLHNCQUFzQkEsR0FBR0EsT0FBT0EsQ0FBQ0Esc0JBQXNCQSxJQUFJQSxFQUFFQSxDQUFDQTtRQUNsRUEsSUFBSUEsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsTUFBTUEsRUFBRUEsc0JBQXNCQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN2RUEsSUFBSUEsT0FBT0EsR0FBR0EsT0FBT0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFDakNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLEVBQUVBLENBQUNBLEVBQUVBLEVBQUVBLENBQUNBO1lBQzlCQSxJQUFJQSxPQUFPQSxHQUFHQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUMxQkEsSUFBSUEscUJBQXFCQSxHQUFHQSxzQkFBc0JBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ3REQSxJQUFJQSxZQUFZQSxHQUFHQSxPQUFPQSxDQUFDQSxxQkFBcUJBLENBQUNBLENBQUNBO1lBQ2xEQSxJQUFJQSxJQUFJQSxHQUFHQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxZQUFZQSxDQUFDQTtZQUM1Q0EsSUFBSUEsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0EsTUFBTUEsRUFBRUEsVUFBVUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDMURBLEVBQUVBLENBQUNBLENBQUNBLENBQUNB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QUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxrQkFBT0EsRUFBRUEsdUNBQXVDQSxDQUFDQSxFQUFFQSxnQkFBS0EsQ0FBQ0Esa0JBQWtCQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUN6R0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0Esa0JBQU9BLEVBQUVBLE1BQU1BLENBQUNBLEVBQUVBLGdCQUFLQSxDQUFDQSxXQUFXQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUNqRUEsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0Esa0JBQU9BLEVBQUVBLGlCQUFpQkEsQ0FBQ0EsRUFBRUEsZ0JBQUtBLENBQUNBLFdBQVdBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBLENBQzVFQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxrQkFBT0EsRUFBRUEsV0FBV0EsQ0FBQ0EsRUFBRUEsZ0JBQUtBLENBQUNBLGdCQUFnQkEsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FDM0VBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLGtCQUFPQSxFQUFFQSxPQUFPQSxDQUFDQSxFQUFFQSxnQkFBS0EsQ0FBQ0EsWUFBWUEsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FDbkVBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLGtCQUFPQSxFQUFFQSxXQUFXQSxDQUFDQSxFQUFFQSxnQkFBS0EsQ0FBQ0EsV0FBV0EsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FDckVBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLGtCQUFPQSxFQUFFQSxRQUFRQSxDQUFDQSxFQUFFQSxnQkFBS0EsQ0FBQ0EsYUFBYUEsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FDckVBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLGtCQUFPQSxFQUFFQSxZQUFZQSxDQUFDQSxFQUFFQSxnQkFBS0EsQ0FBQ0EsWUFBWUEsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FDdkVBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLGtCQUFPQSxFQUFFQSxlQUFlQSxDQUFDQSxFQUFFQSxnQkFBS0EsQ0FBQ0EsZ0JBQWdCQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUM5RUEsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0Esa0JBQU9BLEVBQUVBLGNBQWNBLENBQUNBLEVBQUVBLGdCQUFLQSxDQUFDQSxtQkFBbUJBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBLENBQ2pGQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxrQkFBT0EsRUFBRUEsa0JBQWtCQSxDQUFDQSxFQUFFQSxnQkFBS0EsQ0FBQ0Esa0JBQWtCQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUNuRkEsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0Esa0JBQU9BLEVBQUVBLHFCQUFxQkEsQ0FBQ0EsRUFBRUEsZ0JBQUtBLENBQUNBLHNCQUFzQkEsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FDMUZBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLGtCQUFPQSxFQUFFQSxtQkFBbUJBLENBQUNBLEVBQUVBLGdCQUFLQSxDQUFDQSx3QkFBd0JBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBLENBQzFGQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxrQkFBT0EsRUFBRUEsbUJBQW1CQSxDQUFDQSxFQUFFQSxnQkFBS0EsQ0FBQ0Esd0JBQXdCQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUMzRkEsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0Esa0JBQU9BLEVBQUVBLHVCQUF1QkEsQ0FBQ0EsRUFBRUEsZ0JBQUtBLENBQUNBLHVCQUF1QkEsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FDN0ZBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLGtCQUFPQSxFQUFFQSxtQkFBbUJBLENBQUNBLEVBQUVBLGdCQUFLQSxDQUFDQSx3QkFBd0JBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBLENBQzNGQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxrQkFBT0EsRUFBRUEsV0FBV0EsQ0FBQ0EsRUFBRUEsZ0JBQUtBLENBQUNBLGdCQUFnQkEsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FDM0VBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLGtCQUFPQSxFQUFFQSxVQUFVQSxDQUFDQSxFQUFFQSxnQkFBS0EsQ0FBQ0EsZUFBZUEsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FDeEVBLElBQUlBLENBQUNBLGtCQUFPQSxFQUFFQSxFQUFFQSxVQUFVQSxFQUFFQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxrQkFBT0EsRUFBRUEsTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7SUFDakZBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO0lBR0pBLGtCQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxlQUFlQSxFQUFFQSxDQUFDQSxZQUFZQSxFQUFFQSxVQUFDQSxVQUErQkE7UUFDOUVBLE1BQU1BLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLDJCQUFnQkEsRUFBRUEsRUFBRUEsUUFBUUEsRUFBRUEsa0NBQXVCQSxFQUFFQSxFQUFFQSx1QkFBdUJBLENBQUNBLENBQUNBO0lBQzNHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUVKQSxrQkFBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0Esa0JBQWtCQSxFQUFFQTtRQUNsQ0EsTUFBTUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsMkJBQWdCQSxFQUFFQSxFQUFFQSxRQUFRQSxFQUFFQSxrQ0FBdUJBLEVBQUVBLEVBQUVBLHNCQUFzQkEsQ0FBQ0EsQ0FBQ0E7SUFDMUdBLENBQUNBLENBQUNBLENBQUNBO0lBRUhBLGtCQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxnQkFBZ0JBLEVBQUVBLENBQUNBLFdBQVdBLEVBQUVBLGNBQWNBLEVBQUVBLFVBQUNBLFNBQVNBLEVBQUVBLFlBQVlBO1FBQ3RGQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQTtJQUNmQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUVKQSxrQkFBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0Esc0JBQXNCQSxFQUFFQSxDQUFDQSxZQUFZQSxFQUFFQSxVQUFDQSxVQUErQkE7UUFDckZBLE1BQU1BLENBQUVBO1lBQ0FBLE1BQU1BLEVBQUVBLElBQUlBLEVBQUVBLENBQUNBLE1BQU1BLEVBQUVBO1lBQ3ZCQSxlQUFlQSxFQUFFQSxLQUFLQTtZQUN0QkEsUUFBUUEsRUFBRUEsSUFBSUE7WUFDZEEsUUFBUUEsRUFBRUEsSUFBSUE7WUFDZEEsVUFBVUEsRUFBRUEsSUFBSUE7WUFDaEJBLGFBQWFBLEVBQUVBLElBQUlBO1lBQ25CQSxJQUFJQSxFQUFFQSxJQUFJQTtTQUNqQkEsQ0FBQ0E7SUFDSkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFFSkEsa0JBQU9BLENBQUNBLE1BQU1BLENBQUNBLG9CQUFvQkEsRUFBRUEsY0FBTUEsZ0NBQWNBLEVBQWRBLENBQWNBLENBQUNBLENBQUNBO0lBRTNEQSxrQkFBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsY0FBY0EsRUFBRUEsV0FBV0EsRUFBRUEsaUJBQWlCQSxFQUFFQSxXQUFXQSxFQUFFQSxVQUFDQSxZQUFZQSxFQUFFQSxTQUF3QkEsRUFBRUEsZUFBZUEsRUFBRUEsU0FBU0E7UUFDM0lBLGNBQUdBLENBQUNBLEtBQUtBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBO1FBQ3JCQSxZQUFZQSxDQUFDQSxZQUFZQSxDQUFDQSxHQUFHQSx1QkFBWUEsR0FBR0EsdUJBQXVCQSxDQUFDQTtRQUNwRUEsSUFBSUEsT0FBT0EsR0FBR0EsU0FBU0EsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0E7UUFDbENBLElBQUlBLElBQUlBLEdBQUdBLE9BQU9BLENBQUNBLEVBQUVBLENBQUNBLFdBQVdBLENBQUNBLENBQ2ZBLElBQUlBLENBQUNBLGNBQU1BLE9BQUFBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLGtCQUFPQSxFQUFFQSxNQUFNQSxDQUFDQSxFQUFoQ0EsQ0FBZ0NBLENBQUNBLENBQzVDQSxLQUFLQSxDQUFDQSxjQUFNQSxhQUFNQSxFQUFOQSxDQUFNQSxDQUFDQSxDQUNuQkEsS0FBS0EsRUFBRUEsQ0FBQ0E7UUFFM0JBLElBQUlBLFFBQVFBLEdBQUdBLE9BQU9BLENBQUNBLEVBQUVBLENBQUNBLGVBQWVBLENBQUNBLENBQ3ZCQSxJQUFJQSxDQUFDQSxjQUFNQSxPQUFBQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxrQkFBT0EsRUFBRUEsVUFBVUEsQ0FBQ0EsRUFBcENBLENBQW9DQSxDQUFDQSxDQUNoREEsS0FBS0EsQ0FBQ0EsY0FBTUEsaUJBQVVBLEVBQVZBLENBQVVBLENBQUNBLENBQ3ZCQSxLQUFLQSxFQUFFQSxDQUFDQTtRQUUzQkEsSUFBSUEsV0FBV0EsR0FBR0EsT0FBT0EsQ0FBQ0EsRUFBRUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxDQUM3QkEsSUFBSUEsQ0FBQ0EsY0FBTUEsT0FBQUEsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0Esa0JBQU9BLEVBQUVBLHdCQUF3QkEsQ0FBQ0EsRUFBbERBLENBQWtEQSxDQUFDQSxDQUM5REEsS0FBS0EsQ0FBQ0EsY0FBTUEsb0JBQWFBLEVBQWJBLENBQWFBLENBQUNBLENBQzFCQSxLQUFLQSxFQUFFQSxDQUFDQTtRQUUzQkEsSUFBSUEsSUFBSUEsR0FBR0EsT0FBT0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsQ0FDZkEsSUFBSUEsQ0FBQ0EsY0FBTUEsT0FBQUEsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0Esa0JBQU9BLEVBQUVBLE1BQU1BLENBQUNBLEVBQWhDQSxDQUFnQ0EsQ0FBQ0EsQ0FDNUNBLEtBQUtBLENBQUNBLGNBQU1BLGFBQU1BLEVBQU5BLENBQU1BLENBQUNBLENBQ25CQSxLQUFLQSxFQUFFQSxDQUFDQTtRQUUzQkEsSUFBSUEsS0FBS0EsR0FBR0EsT0FBT0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FDakJBLElBQUlBLENBQUNBLGNBQU1BLE9BQUFBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLGtCQUFPQSxFQUFFQSxPQUFPQSxDQUFDQSxFQUFqQ0EsQ0FBaUNBLENBQUNBLENBQzdDQSxLQUFLQSxDQUFDQSxjQUFNQSxjQUFPQSxFQUFQQSxDQUFPQSxDQUFDQSxDQUNwQkEsS0FBS0EsRUFBRUEsQ0FBQ0E7UUFFM0JBLElBQUlBLFFBQVFBLEdBQUdBLE9BQU9BLENBQUNBLEVBQUVBLENBQUNBLGVBQWVBLENBQUNBLENBQ25CQSxJQUFJQSxDQUFDQSxjQUFNQSxPQUFBQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxrQkFBT0EsRUFBRUEsVUFBVUEsQ0FBQ0EsRUFBcENBLENBQW9DQSxDQUFDQSxDQUNoREEsS0FBS0EsQ0FBQ0EsY0FBTUEsZ0JBQVNBLEVBQVRBLENBQVNBLENBQUNBLENBQ3RCQSxLQUFLQSxFQUFFQSxDQUFDQTtRQUUvQkEsSUFBSUEsTUFBTUEsR0FBR0EsT0FBT0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsQ0FDbkJBLElBQUlBLENBQUNBLGNBQU1BLE9BQUFBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLGtCQUFPQSxFQUFFQSxRQUFRQSxDQUFDQSxFQUFsQ0EsQ0FBa0NBLENBQUNBLENBQzlDQSxLQUFLQSxDQUFDQSxjQUFNQSxlQUFRQSxFQUFSQSxDQUFRQSxDQUFDQSxDQUNyQkEsS0FBS0EsRUFBRUEsQ0FBQ0E7UUFFM0JBLElBQUlBLFlBQVlBLEdBQUdBLE9BQU9BLENBQUNBLEVBQUVBLENBQUNBLG1CQUFtQkEsQ0FBQ0EsQ0FDL0JBLElBQUlBLENBQUNBLGNBQU1BLE9BQUFBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLGtCQUFPQSxFQUFFQSxjQUFjQSxDQUFDQSxFQUF4Q0EsQ0FBd0NBLENBQUNBLENBQ3BEQSxLQUFLQSxDQUFDQSxjQUFNQSxzQkFBZUEsRUFBZkEsQ0FBZUEsQ0FBQ0EsQ0FDNUJBLEtBQUtBLEVBQUVBLENBQUNBO1FBRTNCQSxJQUFJQSxPQUFPQSxHQUFHQSxPQUFPQSxDQUFDQSxFQUFFQSxDQUFDQSxjQUFjQSxDQUFDQSxDQUNyQkEsSUFBSUEsQ0FBQ0EsY0FBTUEsT0FBQUEsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0Esa0JBQU9BLEVBQUVBLG1CQUFtQkEsQ0FBQ0EsRUFBN0NBLENBQTZDQSxDQUFDQSxDQUN6REEsS0FBS0EsQ0FBQ0EsY0FBTUEsZ0JBQVNBLEVBQVRBLENBQVNBLENBQUNBLENBQ3RCQSxLQUFLQSxFQUFFQSxDQUFDQTtRQUUzQkEsSUFBSUEsaUJBQWlCQSxHQUFHQSxPQUFPQSxDQUFDQSxFQUFFQSxDQUFDQSx3QkFBd0JBLENBQUNBLENBQ3pDQSxJQUFJQSxDQUFDQSxjQUFNQSxPQUFBQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxrQkFBT0EsRUFBRUEsbUJBQW1CQSxDQUFDQSxFQUE3Q0EsQ0FBNkNBLENBQUNBLENBQ3pEQSxLQUFLQSxDQUFDQSxjQUFNQSxtQkFBWUEsRUFBWkEsQ0FBWUEsQ0FBQ0EsQ0FDekJBLEtBQUtBLEVBQUVBLENBQUNBO1FBRTNCQSxJQUFJQSxTQUFTQSxHQUFHQSxPQUFPQSxDQUFDQSxFQUFFQSxDQUFDQSxnQkFBZ0JBLENBQUNBLENBQ3pCQSxJQUFJQSxDQUFDQSxjQUFNQSxPQUFBQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxrQkFBT0EsRUFBRUEsV0FBV0EsQ0FBQ0EsRUFBckNBLENBQXFDQSxDQUFDQSxDQUNqREEsS0FBS0EsQ0FBQ0EsY0FBTUEsa0JBQVdBLEVBQVhBLENBQVdBLENBQUNBLENBQ3hCQSxLQUFLQSxFQUFFQSxDQUFDQTtRQUUzQkEsSUFBSUEsS0FBS0EsR0FBR0EsT0FBT0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FDakJBLElBQUlBLENBQUNBLGNBQU1BLHFCQUFjQSxFQUFkQSxDQUFjQSxDQUFDQSxDQUMxQkEsT0FBT0EsQ0FBQ0EsY0FBTUEsT0FBQUEsZUFBZUEsQ0FBQ0EsVUFBVUEsQ0FBQ0Esa0NBQXVCQSxDQUFDQSxJQUFJQSxlQUFlQSxDQUFDQSxVQUFVQSxDQUFDQSwwQkFBZUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxFQUFFQSxFQUFoSUEsQ0FBZ0lBLENBQUNBLENBQy9JQSxLQUFLQSxDQUFDQSxjQUFNQSxxQkFBY0EsRUFBZEEsQ0FBY0EsQ0FBQ0EsQ0FDM0JBLEtBQUtBLEVBQUVBLENBQUNBO1FBRTNCQSxJQUFJQSxPQUFPQSxHQUFHQSxPQUFPQSxDQUFDQSxFQUFFQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUNoQkEsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FDVEEsV0FBV0EsQ0FBQ0E7WUFDWEEsSUFBSUEsRUFBRUEsRUFBRUE7WUFDUkEsT0FBT0EsRUFBRUEsVUFBQ0EsR0FBR0EsRUFBRUEsRUFBRUE7Z0JBQ2ZBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLGtCQUFrQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQy9CQSxHQUFHQSxFQUFFQSxDQUFDQTtnQkFDUkEsQ0FBQ0E7Z0JBQUNBLElBQUlBLENBQUNBLENBQUNBO29CQUNOQSxFQUFFQSxFQUFFQSxDQUFDQTtnQkFDUEEsQ0FBQ0E7WUFDSEEsQ0FBQ0E7U0FDRkEsQ0FBQ0EsQ0FDREEsSUFBSUEsQ0FBQ0EsY0FBTUEseUJBQU9BLEVBQVBBLENBQU9BLENBQUNBLENBQ25CQSxLQUFLQSxDQUFDQSxjQUFNQSxtQkFBWUEsRUFBWkEsQ0FBWUEsQ0FBQ0EsQ0FDekJBLE9BQU9BLENBQUNBLGNBQU1BLFFBQUNBLElBQUlBLENBQUNBLGtCQUFrQkEsRUFBRUEsRUFBMUJBLENBQTBCQSxDQUFDQSxDQUN6Q0EsSUFBSUEsQ0FBQ0EsSUFBSUEsRUFBRUEsUUFBUUEsRUFBRUEsV0FBV0EsRUFBRUEsSUFBSUEsRUFBRUEsS0FBS0EsRUFBRUEsUUFBUUEsQ0FBQ0EsQ0FDeERBLEtBQUtBLEVBQUVBLENBQUNBO1FBQzlCQSxTQUFTQSxDQUFDQSxHQUFHQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUd2QkEsSUFBSUEsV0FBV0EsR0FBR0EsT0FBT0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsQ0FDbkJBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLENBQ1RBLElBQUlBLENBQUNBLGNBQU1BLE9BQUFBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLGtCQUFPQSxFQUFFQSxjQUFjQSxDQUFDQSxHQUFHQSw0QkFBNEJBLEVBQXZFQSxDQUF1RUEsQ0FBQ0EsQ0FDbkZBLEtBQUtBLENBQUNBLGNBQU1BLGlCQUFVQSxFQUFWQSxDQUFVQSxDQUFDQSxDQUN2QkEsT0FBT0EsQ0FBQ0EsY0FBTUEsUUFBQ0EsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxFQUFFQSxFQUExQkEsQ0FBMEJBLENBQUNBLENBR3pDQSxJQUFJQSxDQUFDQSxLQUFLQSxFQUFFQSxZQUFZQSxFQUFFQSxNQUFNQSxFQUFHQSxPQUFPQSxFQUFFQSxpQkFBaUJBLENBQUNBLENBQzlEQSxLQUFLQSxFQUFFQSxDQUFDQTtRQUU5QkEsU0FBU0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsQ0FBQ0E7SUFDN0JBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO0lBRUpBLGtCQUFrQkEsQ0FBQ0Esd0JBQXdCQSxDQUFDQSxVQUFDQSxJQUFJQTtRQUMvQ0EsQ0FBQ0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EscUJBQXFCQSxDQUFDQSxDQUMvQkEsSUFBSUEsQ0FBQ0EsVUFBQ0EsTUFBTUEsRUFBRUEsVUFBVUE7WUFDdkJBLElBQUlBLE1BQU1BLEdBQW1CQSxVQUFVQSxDQUFDQSxRQUFRQSxHQUFHQSxNQUFNQSxDQUFDQSxrQkFBa0JBLENBQUNBLENBQUNBO1lBQzlFQSxjQUFHQSxDQUFDQSxLQUFLQSxDQUFDQSw0QkFBNEJBLEVBQUVBLE1BQU1BLENBQUNBLENBQUNBO1lBQ2hEQSxJQUFJQSxNQUFNQSxHQUFVQSxTQUFTQSxDQUFDQTtZQUM5QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsSUFBSUEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2pDQSxJQUFJQSxTQUFTQSxHQUFHQSxJQUFJQSxHQUFHQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtnQkFDcEZBLEVBQUVBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBO29CQUN6QkEsU0FBU0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzNDQSxDQUFDQTtnQkFDREEsTUFBTUEsR0FBR0EsU0FBU0EsQ0FBQ0EsUUFBUUEsRUFBRUEsQ0FBQ0E7WUFDaENBLENBQUNBO1lBQ0RBLGFBQWFBLEdBQUdBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO1lBQy9CQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDbkJBLFVBQVVBLENBQUNBLFNBQVNBLEdBQUdBLE1BQU1BLENBQUNBO2dCQUM5QkEsSUFBSUEsRUFBRUEsQ0FBQ0E7Z0JBQ1BBLE1BQU1BLENBQUNBO1lBQ1RBLENBQUNBO1lBQ0RBLE1BQU1BLEdBQUdBLGFBQWFBLENBQUNBLFVBQVVBLENBQUNBO1lBQ2xDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDWkEsSUFBSUEsbUJBQW1CQSxHQUFHQSxhQUFhQSxDQUFDQSxtQkFBbUJBLENBQUNBO2dCQUM1REEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsbUJBQW1CQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDeEJBLElBQUlBLElBQUlBLEdBQUdBLG1CQUFtQkEsQ0FBQ0E7b0JBQy9CQSxJQUFJQSxHQUFHQSxHQUFHQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtvQkFDOUJBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO3dCQUNaQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQTt3QkFDVEEsR0FBR0EsR0FBR0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsR0FBR0EsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7d0JBQzdCQSxFQUFFQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTs0QkFDWkEsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7d0JBQ3BDQSxDQUFDQTtvQkFDSEEsQ0FBQ0E7Z0JBQ0hBLENBQUNBO1lBQ0hBLENBQUNBO1lBQ0RBLEVBQUVBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBO2dCQUNYQSxVQUFVQSxDQUFDQSxTQUFTQSxHQUFHQSxNQUFNQSxDQUFDQTtZQUNoQ0EsQ0FBQ0E7UUFDSEEsQ0FBQ0EsQ0FBQ0EsQ0FDREEsSUFBSUEsQ0FBQ0EsVUFBQ0EsUUFBUUE7WUFDYkEsY0FBR0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsK0JBQStCQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQTtRQUN2REEsQ0FBQ0EsQ0FBQ0EsQ0FDREEsTUFBTUEsQ0FBQ0E7WUFDTkEsSUFBSUEsRUFBRUEsQ0FBQ0E7UUFDVEEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDUEEsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFFVEEsa0JBQWtCQSxDQUFDQSxTQUFTQSxDQUFDQSxxQkFBVUEsQ0FBQ0EsQ0FBQ0E7QUFDM0NBLENBQUNBLEVBdE5NLFVBQVUsS0FBVixVQUFVLFFBc05oQjs7QUMzTkQseUNBQXlDO0FBQ3pDLDJDQUEyQztBQUUzQyxJQUFPLFVBQVUsQ0FzU2hCO0FBdFNELFdBQU8sVUFBVSxFQUFDLENBQUM7SUFFTkEsZUFBSUEsR0FBR0EscUJBQVVBLENBQUNBLE1BQU1BLEVBQ2pDQSxDQUFDQSxRQUFRQSxFQUFFQSxpQkFBaUJBLEVBQUVBLG9CQUFvQkEsRUFBRUEsa0NBQWtDQSxFQUFFQSxnQkFBZ0JBLEVBQUVBLGlCQUFpQkEsRUFBRUEsa0JBQWtCQSxFQUFFQSxnQkFBZ0JBLEVBQUVBLFdBQVdBLEVBQUVBLGNBQWNBLEVBQUVBLE9BQU9BLEVBQUVBLFNBQVNBLEVBQUVBLFVBQVVBLEVBQUVBLFdBQVdBLEVBQUVBLFNBQVNBLEVBQ3BQQSxVQUFDQSxNQUFNQSxFQUFFQSxlQUFrREEsRUFBRUEsa0JBQTZDQSxFQUFFQSxnQ0FBMkRBLEVBQUVBLGNBQXlDQSxFQUFFQSxlQUFlQSxFQUFFQSxnQkFBZ0JBLEVBQ3BQQSxjQUF1Q0EsRUFBRUEsU0FBNkJBLEVBQUVBLFlBQVlBLEVBQUVBLEtBQUtBLEVBQUVBLE9BQU9BLEVBQUVBLFFBQVFBLEVBQUVBLFNBQVNBLEVBQUVBLE9BQXdCQTtRQUV0SkEsTUFBTUEsQ0FBQ0EsS0FBS0EsR0FBR0EsZUFBZUEsQ0FBQ0E7UUFFL0JBLE1BQU1BLENBQUNBLElBQUlBLEdBQUdBLEVBQUVBLENBQUNBO1FBQ2pCQSxNQUFNQSxDQUFDQSxPQUFPQSxHQUFHQSxFQUFFQSxDQUFDQTtRQUNwQkEsTUFBTUEsQ0FBQ0EsVUFBVUEsR0FBR0EsZUFBZUEsQ0FBQ0E7UUFDcENBLE1BQU1BLENBQUNBLE9BQU9BLEdBQUdBLEtBQUtBLENBQUNBO1FBQ3ZCQSxNQUFNQSxDQUFDQSxJQUFJQSxHQUFHQSxFQUFFQSxDQUFDQTtRQUNqQkEsaUJBQWlCQSxDQUFDQSxzQkFBc0JBLENBQUNBLE1BQU1BLEVBQUVBLFNBQVNBLEVBQUVBLElBQUlBLEVBQUVBLEtBQUtBLEVBQUVBLFNBQVNBLENBQUNBLENBQUNBO1FBQ3BGQSxpQkFBaUJBLENBQUNBLHNCQUFzQkEsQ0FBQ0EsTUFBTUEsRUFBRUEsU0FBU0EsRUFBRUEsaUJBQWlCQSxFQUFFQSxTQUFTQSxFQUFFQSxTQUFTQSxDQUFDQSxDQUFDQTtRQUNyR0EsaUJBQWlCQSxDQUFDQSxzQkFBc0JBLENBQUNBLE1BQU1BLEVBQUVBLFNBQVNBLEVBQUVBLE1BQU1BLEVBQUVBLE1BQU1BLEVBQUVBLFFBQVFBLENBQUNBLENBQUNBO1FBRXRGQSxJQUFJQSxNQUFNQSxHQUFHQSxNQUFNQSxDQUFDQSxNQUFNQSxJQUFJQSxRQUFRQSxDQUFDQTtRQUN2Q0EsSUFBSUEsU0FBU0EsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFFckJBLFNBQVNBLFVBQVVBLENBQUNBLEdBQUdBO1lBQ3JCOEcsSUFBSUEsVUFBVUEsR0FBR0EsTUFBTUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsVUFBVUEsQ0FBQ0E7WUFDL0NBLEVBQUVBLENBQUNBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBLENBQUNBO2dCQUNmQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxxQkFBcUJBLENBQUNBLEdBQUdBLENBQUNBLE9BQU9BLEVBQUVBLFVBQVVBLENBQUNBLElBQ3hEQSxJQUFJQSxDQUFDQSxxQkFBcUJBLENBQUNBLEdBQUdBLENBQUNBLFVBQVVBLEVBQUVBLFVBQVVBLENBQUNBLElBQ3REQSxJQUFJQSxDQUFDQSxxQkFBcUJBLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLEVBQUVBLFVBQVVBLENBQUNBLElBQ2hEQSxJQUFJQSxDQUFDQSxxQkFBcUJBLENBQUNBLEdBQUdBLENBQUNBLFdBQVdBLEVBQUVBLFVBQVVBLENBQUNBLENBQUNBO1lBQzVEQSxDQUFDQTtZQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtnQkFDTkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7WUFDZEEsQ0FBQ0E7UUFDSEEsQ0FBQ0E7UUFFRDlHLFNBQVNBLFVBQVVBLENBQUNBLEdBQUdBO1lBQ3JCK0csTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsVUFBQ0EsT0FBT0EsSUFBS0EsT0FBQUEsT0FBT0EsQ0FBQ0EsT0FBT0EsS0FBS0EsR0FBR0EsQ0FBQ0EsT0FBT0EsRUFBL0JBLENBQStCQSxDQUFDQSxDQUFDQTtRQUM3RUEsQ0FBQ0E7UUFFRC9HLE1BQU1BLENBQUNBLFdBQVdBLEdBQUdBO1lBQ25CQSxJQUFJQSxFQUFFQSxZQUFZQTtZQUNsQkEscUJBQXFCQSxFQUFFQSxJQUFJQTtZQUMzQkEsdUJBQXVCQSxFQUFFQSxLQUFLQTtZQUM5QkEsV0FBV0EsRUFBRUEsSUFBSUE7WUFDakJBLGFBQWFBLEVBQUVBLEVBQUVBO1lBQ2pCQSxhQUFhQSxFQUFFQTtnQkFDYkEsVUFBVUEsRUFBRUEsU0FBU0EsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsRUFBRUE7YUFDMUNBO1lBQ0RBLFVBQVVBLEVBQUVBO2dCQUNWQSxFQUFFQSxLQUFLQSxFQUFFQSxNQUFNQSxFQUFFQSxXQUFXQSxFQUFFQSxLQUFLQSxFQUFFQSxZQUFZQSxFQUFFQSxjQUFjQSxDQUFDQSxHQUFHQSxDQUFDQSxzQkFBc0JBLENBQUNBLEVBQUVBO2dCQUMvRkEsRUFBRUEsS0FBS0EsRUFBRUEsVUFBVUEsRUFBRUEsV0FBV0EsRUFBRUEsVUFBVUEsRUFBRUEsWUFBWUEsRUFBRUEsY0FBY0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsMEJBQTBCQSxDQUFDQSxFQUFFQTtnQkFDNUdBLEVBQUVBLEtBQUtBLEVBQUVBLHdCQUF3QkEsRUFBRUEsV0FBV0EsRUFBRUEsYUFBYUEsRUFBRUEsWUFBWUEsRUFBRUEsY0FBY0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsdUNBQXVDQSxDQUFDQSxFQUFFQTtnQkFDMUlBLEVBQUVBLEtBQUtBLEVBQUVBLFdBQVdBLEVBQUVBLFdBQVdBLEVBQUVBLE1BQU1BLEVBQUVBLFlBQVlBLEVBQUVBLGNBQWNBLENBQUNBLEdBQUdBLENBQUNBLGtDQUFrQ0EsQ0FBQ0EsRUFBRUE7Z0JBQ2pIQSxFQUFFQSxLQUFLQSxFQUFFQSxlQUFlQSxFQUFFQSxXQUFXQSxFQUFFQSxVQUFVQSxFQUFFQSxZQUFZQSxFQUFFQSxjQUFjQSxDQUFDQSxHQUFHQSxDQUFDQSwwQkFBMEJBLENBQUNBLEVBQUVBO2FBQ2xIQTtTQUNGQSxDQUFDQTtRQUVGQSxVQUFVQSxDQUFDQSxVQUFVQSxDQUFDQSxNQUFNQSxFQUFFQSxTQUFTQSxFQUFFQSxLQUFLQSxFQUFFQSxRQUFRQSxFQUFFQSxZQUFZQSxFQUFFQSxlQUFlQSxFQUFFQSxlQUFlQSxFQUFFQSxnQkFBZ0JBLENBQUNBLENBQUNBO1FBRzVIQSxNQUFNQSxDQUFDQSxZQUFZQSxHQUFHQSxFQUFFQSxDQUFDQTtRQUV6QkEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsV0FBV0EsRUFBRUEsVUFBQ0EsTUFBTUEsRUFBRUEsVUFBVUE7WUFDekNBLE1BQU1BLENBQUNBLFlBQVlBLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBO1FBQ3ZDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUdIQSxNQUFNQSxDQUFDQSxXQUFXQSxHQUFHQSxVQUFDQSxHQUFHQTtZQUN2QkEsSUFBSUEsRUFBRUEsR0FBR0Esa0JBQU9BLENBQUNBLEdBQUdBLENBQUNBLENBQUFBO1lBQ3JCQSxNQUFNQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxZQUFZQSxJQUFJQSxFQUFFQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUM1REEsQ0FBQ0EsQ0FBQ0E7UUFFRkEsTUFBTUEsQ0FBQ0EsU0FBU0EsR0FBR0EsVUFBQ0EsR0FBR0E7WUFDckJBLElBQUlBLEVBQUVBLEdBQUdBLGtCQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUN0QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ1BBLE1BQU1BLENBQUNBLFlBQVlBLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO1lBQy9CQSxDQUFDQTtRQUNIQSxDQUFDQSxDQUFDQTtRQUVGQSxNQUFNQSxDQUFDQSxXQUFXQSxHQUFHQSxVQUFDQSxHQUFHQTtZQUN2QkEsSUFBSUEsRUFBRUEsR0FBR0Esa0JBQU9BLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQ3RCQSxFQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDUEEsTUFBTUEsQ0FBQ0EsWUFBWUEsR0FBR0EsTUFBTUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsVUFBQ0EsQ0FBQ0EsSUFBS0EsT0FBQUEsRUFBRUEsS0FBS0EsQ0FBQ0EsRUFBUkEsQ0FBUUEsQ0FBQ0EsQ0FBQ0E7WUFDcEVBLENBQUNBO1FBQ0hBLENBQUNBLENBQUNBO1FBRUZBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLGNBQWNBLEVBQUVBLFVBQUNBLE1BQU1BO1lBQ2hDQSxVQUFVQSxDQUFDQSxPQUFPQSxDQUFDQSxNQUFNQSxFQUFFQSxTQUFTQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQSxLQUFLQSxDQUFDQSxFQUFFQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUMzRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFSEEsU0FBU0EsU0FBU0EsQ0FBQ0EsR0FBR0EsRUFBRUEsWUFBWUE7WUFDbENnSCxTQUFTQSxjQUFjQSxDQUFDQSxRQUFRQSxFQUFFQSxPQUFPQSxFQUFFQSxhQUFhQTtnQkFDdERDLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLE9BQU9BLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBO29CQUMxQkEsTUFBTUEsQ0FBQ0EsYUFBYUEsRUFBRUEsQ0FBQ0E7Z0JBQ3pCQSxDQUFDQTtnQkFDREEsSUFBSUEsRUFBRUEsR0FBR0Esa0JBQU9BLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO2dCQUMxQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ1JBLGNBQUdBLENBQUNBLElBQUlBLENBQUNBLG9CQUFvQkEsR0FBR0EsT0FBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzNEQSxDQUFDQTtnQkFBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7b0JBQ05BLGtCQUFrQkEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7d0JBQ3hCQSxFQUFFQSxFQUFFQSxFQUFFQTtxQkFDUEEsRUFBRUEsU0FBU0EsRUFBRUE7d0JBQ1pBLGNBQUdBLENBQUNBLEtBQUtBLENBQUNBLG1CQUFtQkEsRUFBRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7d0JBQ25DQSxjQUFjQSxDQUFDQSxRQUFRQSxFQUFFQSxRQUFRQSxDQUFDQSxLQUFLQSxFQUFFQSxFQUFFQSxhQUFhQSxDQUFDQSxDQUFDQTtvQkFDNURBLENBQUNBLEVBQUVBLFVBQUNBLEtBQUtBO3dCQUNQQSxjQUFHQSxDQUFDQSxLQUFLQSxDQUFDQSwwQkFBMEJBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBO3dCQUM3Q0EsY0FBY0EsQ0FBQ0EsUUFBUUEsRUFBRUEsUUFBUUEsQ0FBQ0EsS0FBS0EsRUFBRUEsRUFBRUEsYUFBYUEsQ0FBQ0EsQ0FBQ0E7b0JBQzVEQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDTEEsQ0FBQ0E7WUFDSEEsQ0FBQ0E7WUFFREQsU0FBU0EsNEJBQTRCQSxDQUFDQSxzQkFBc0JBLEVBQUVBLHFCQUFxQkEsRUFBRUEsYUFBYUE7Z0JBQ2hHRSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxxQkFBcUJBLElBQUlBLENBQUNBLHNCQUFzQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ3REQSxNQUFNQSxDQUFDQSxhQUFhQSxFQUFFQSxDQUFDQTtnQkFDekJBLENBQUNBO2dCQUNEQSxJQUFJQSxFQUFFQSxHQUFHQSxrQkFBT0EsQ0FBQ0EscUJBQXFCQSxDQUFDQSxDQUFDQTtnQkFDeENBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO29CQUNSQSxjQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxrQ0FBa0NBLEdBQUdBLE9BQU9BLENBQUNBLE1BQU1BLENBQUNBLHFCQUFxQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3ZGQSxDQUFDQTtnQkFBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7b0JBQ05BLGdDQUFnQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0E7d0JBQ3RDQSxFQUFFQSxFQUFFQSxFQUFFQTtxQkFDUEEsRUFBRUEsU0FBU0EsRUFBRUE7d0JBQ1pBLGNBQUdBLENBQUNBLEtBQUtBLENBQUNBLGlDQUFpQ0EsRUFBRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7d0JBQ2pEQSw0QkFBNEJBLENBQUNBLHNCQUFzQkEsRUFBRUEsc0JBQXNCQSxDQUFDQSxLQUFLQSxFQUFFQSxFQUFFQSxhQUFhQSxDQUFDQSxDQUFDQTtvQkFDdEdBLENBQUNBLEVBQUVBLFVBQUNBLEtBQUtBO3dCQUNQQSxjQUFHQSxDQUFDQSxLQUFLQSxDQUFDQSx3Q0FBd0NBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBO3dCQUMzREEsNEJBQTRCQSxDQUFDQSxzQkFBc0JBLEVBQUVBLHNCQUFzQkEsQ0FBQ0EsS0FBS0EsRUFBRUEsRUFBRUEsYUFBYUEsQ0FBQ0EsQ0FBQ0E7b0JBQ3RHQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDTEEsQ0FBQ0E7WUFDSEEsQ0FBQ0E7WUFFREYsU0FBU0EsVUFBVUEsQ0FBQ0EsSUFBSUEsRUFBRUEsR0FBR0EsRUFBRUEsYUFBYUE7Z0JBQzFDRyxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDbEJBLE1BQU1BLENBQUNBLGFBQWFBLEVBQUVBLENBQUNBO2dCQUN6QkEsQ0FBQ0E7Z0JBQ0RBLElBQUlBLEVBQUVBLEdBQUdBLGtCQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFDdEJBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO29CQUNSQSxjQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLE9BQU9BLENBQUNBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO2dCQUNuREEsQ0FBQ0E7Z0JBQUNBLElBQUlBLENBQUNBLENBQUNBO29CQUNOQSxjQUFjQSxDQUFDQSxNQUFNQSxDQUFDQTt3QkFDcEJBLEVBQUVBLEVBQUVBLEVBQUVBO3FCQUNQQSxFQUFFQSxTQUFTQSxFQUFFQTt3QkFDWkEsY0FBR0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsZUFBZUEsRUFBRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7d0JBQy9CQSxVQUFVQSxDQUFDQSxJQUFJQSxFQUFFQSxJQUFJQSxDQUFDQSxLQUFLQSxFQUFFQSxFQUFFQSxhQUFhQSxDQUFDQSxDQUFDQTtvQkFDaERBLENBQUNBLEVBQUVBLFVBQUNBLEtBQUtBO3dCQUNQQSxjQUFHQSxDQUFDQSxLQUFLQSxDQUFDQSxzQkFBc0JBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBO3dCQUN6Q0EsVUFBVUEsQ0FBQ0EsSUFBSUEsRUFBRUEsSUFBSUEsQ0FBQ0EsS0FBS0EsRUFBRUEsRUFBRUEsYUFBYUEsQ0FBQ0EsQ0FBQ0E7b0JBQ2hEQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDTEEsQ0FBQ0E7WUFDSEEsQ0FBQ0E7WUFFREgsSUFBSUEsUUFBUUEsR0FBR0EsRUFBRUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7WUFDdkNBLGNBQWNBLENBQUNBLFFBQVFBLEVBQUVBLFFBQVFBLENBQUNBLEtBQUtBLEVBQUVBLEVBQUVBO2dCQUV6Q0EsSUFBSUEsc0JBQXNCQSxHQUFHQSxFQUFFQSxDQUFDQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxzQkFBc0JBLENBQUNBLENBQUNBO2dCQUNuRUEsNEJBQTRCQSxDQUFDQSxzQkFBc0JBLEVBQUVBLHNCQUFzQkEsQ0FBQ0EsS0FBS0EsRUFBRUEsRUFBRUE7b0JBRW5GQSxJQUFJQSxJQUFJQSxHQUFHQSxFQUFFQSxDQUFDQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtvQkFDL0JBLFVBQVVBLENBQUNBLElBQUlBLEVBQUVBLElBQUlBLENBQUNBLEtBQUtBLEVBQUVBLEVBQUVBLFlBQVlBLENBQUNBLENBQUNBO2dCQUMvQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDTEEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDTEEsQ0FBQ0E7UUFFRGhILE1BQU1BLENBQUNBLGVBQWVBLEdBQUdBLFVBQUNBLEdBQUdBO1lBQzNCQSxNQUFNQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUM3QkEsQ0FBQ0EsQ0FBQUE7UUFFREEsTUFBTUEsQ0FBQ0EsWUFBWUEsR0FBR0EsVUFBQ0EsUUFBUUE7WUFDN0JBLEVBQUVBLENBQUNBLENBQUNBLE9BQU9BLENBQUNBLFFBQVFBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUMvQkEsUUFBUUEsR0FBR0EsQ0FBQ0E7b0JBQ1ZBLEVBQUVBLEVBQUVBLFFBQVFBO2lCQUNiQSxDQUFDQSxDQUFDQTtZQUNMQSxDQUFDQTtZQUNEQSxFQUFFQSxDQUFDQSw0QkFBNEJBLENBQW1DQTtnQkFDaEVBLFVBQVVBLEVBQUVBLFFBQVFBO2dCQUNwQkEsS0FBS0EsRUFBRUEsT0FBT0E7Z0JBQ2RBLE9BQU9BLEVBQUVBLFVBQUNBLE1BQWNBO29CQUN0QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7d0JBQ1hBLFNBQVNBLGNBQWNBLENBQUNBLFFBQVFBLEVBQUVBLElBQUlBOzRCQUNwQ29ILEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO2dDQUNUQSxJQUFJQSxFQUFFQSxHQUFHQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQTtnQ0FDbkJBLGNBQUdBLENBQUNBLEtBQUtBLENBQUNBLFlBQVlBLEVBQUVBLEVBQUVBLENBQUNBLENBQUNBO2dDQUM1QkEsU0FBU0EsQ0FBQ0EsSUFBSUEsRUFBRUE7b0NBQ2RBLGNBQUdBLENBQUNBLEtBQUtBLENBQUNBLFdBQVdBLEVBQUVBLEVBQUVBLENBQUNBLENBQUNBO29DQUMzQkEsY0FBY0EsQ0FBQ0EsUUFBUUEsRUFBRUEsUUFBUUEsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7Z0NBQzdDQSxDQUFDQSxDQUFDQSxDQUFDQTs0QkFDTEEsQ0FBQ0E7d0JBQ0hBLENBQUNBO3dCQUVEcEgsY0FBY0EsQ0FBQ0EsUUFBUUEsRUFBRUEsUUFBUUEsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7b0JBQzdDQSxDQUFDQTtnQkFDSEEsQ0FBQ0E7Z0JBQ0RBLEtBQUtBLEVBQUVBLGNBQWNBO2dCQUNyQkEsTUFBTUEsRUFBRUEscUNBQXFDQTtnQkFDN0NBLE1BQU1BLEVBQUVBLFFBQVFBO2dCQUNoQkEsT0FBT0EsRUFBRUEsWUFBWUE7Z0JBQ3JCQSxNQUFNQSxFQUFFQSw2Q0FBNkNBO2dCQUNyREEsV0FBV0EsRUFBRUEscUJBQXFCQTthQUNuQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsRUFBRUEsQ0FBQ0E7UUFDWkEsQ0FBQ0EsQ0FBQ0E7UUFFRkEsTUFBTUEsQ0FBQ0EsV0FBV0EsR0FBR0E7WUFDbkJBLFVBQVVBLEVBQUVBLEVBQUVBO1lBQ2RBLE9BQU9BLEVBQUVBLEVBQUVBO1lBQ1hBLFlBQVlBLEVBQUVBLEVBQUVBO1lBRWhCQSxNQUFNQSxFQUFFQSxVQUFDQSxNQUFNQTtnQkFDYkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsVUFBVUEsS0FBS0EsRUFBRUEsSUFBSUEsTUFBTUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQzVEQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQTtnQkFDbEJBLENBQUNBO2dCQUNEQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQTtZQUNsQkEsQ0FBQ0E7WUFFREEsZ0JBQWdCQSxFQUFFQSxVQUFDQSxHQUFHQTtnQkFDcEJBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBO29CQUNqQkEsTUFBTUEsQ0FBQ0EsVUFBVUEsQ0FBQ0E7Z0JBQ3BCQSxDQUFDQTtnQkFDREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ2pCQSxNQUFNQSxDQUFDQSxVQUFVQSxDQUFDQTtnQkFDcEJBLENBQUNBO2dCQUNEQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQTtZQUNaQSxDQUFDQTtZQUVEQSxPQUFPQSxFQUFFQSxVQUFDQSxHQUFHQTtnQkFDWEEsTUFBTUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDN0NBLENBQUNBO1lBRURBLFVBQVVBLEVBQUVBLFVBQUNBLE1BQU1BO2dCQUNqQkEsTUFBTUEsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsVUFBVUEsSUFBSUEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBQ0EsR0FBR0EsSUFBS0EsT0FBQUEsVUFBVUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBbkNBLENBQW1DQSxDQUFDQSxDQUFDQTtZQUMxR0EsQ0FBQ0E7WUFFREEsYUFBYUEsRUFBRUE7Z0JBQ2JBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLFVBQVVBLEVBQUVBLFVBQUNBLE1BQU1BO29CQUM5Q0EsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsRUFBRUEsVUFBQ0EsR0FBR0E7d0JBQy9CQSxHQUFHQSxDQUFDQSxRQUFRQSxHQUFHQSxLQUFLQSxDQUFDQTtvQkFDdkJBLENBQUNBLENBQUNBLENBQUNBO2dCQUNMQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDSEEsTUFBTUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsWUFBWUEsR0FBR0EsRUFBRUEsQ0FBQ0E7Z0JBQ3JDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtZQUN0QkEsQ0FBQ0E7WUFFREEsY0FBY0EsRUFBRUE7Z0JBQ2RBLEFBQ0FBLGdDQURnQ0E7b0JBQzVCQSxZQUFZQSxHQUFHQSxFQUFFQSxDQUFDQTtnQkFDdEJBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLFVBQVVBLEVBQUVBLFVBQUNBLE1BQU1BO29CQUM5Q0EsSUFBSUEsSUFBSUEsR0FBR0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsVUFBQ0EsR0FBR0EsSUFBS0EsT0FBQUEsR0FBR0EsQ0FBQ0EsUUFBUUEsRUFBWkEsQ0FBWUEsQ0FBQ0EsQ0FBQ0E7b0JBQ3JEQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTt3QkFDVEEsWUFBWUEsR0FBR0EsWUFBWUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7b0JBQzNDQSxDQUFDQTtnQkFDSEEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ0hBLE1BQU1BLENBQUNBLFdBQVdBLENBQUNBLFlBQVlBLEdBQUdBLFlBQVlBLENBQUNBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO1lBQ2hFQSxDQUFDQTtZQUVEQSxNQUFNQSxFQUFFQSxVQUFDQSxHQUFHQSxFQUFFQSxJQUFJQTtnQkFDaEJBLEdBQUdBLENBQUNBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBO2dCQUNwQkEsTUFBTUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsY0FBY0EsRUFBRUEsQ0FBQ0E7WUFDdENBLENBQUNBO1lBRURBLFlBQVlBLEVBQUVBO2dCQUNaQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxVQUFVQSxDQUFDQSxHQUFHQSxDQUFDQSxVQUFDQSxNQUFNQSxJQUFLQSxPQUFBQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxVQUFDQSxHQUFHQSxJQUFLQSxPQUFBQSxHQUFHQSxDQUFDQSxRQUFRQSxFQUFaQSxDQUFZQSxDQUFDQSxFQUF0Q0EsQ0FBc0NBLENBQUNBLENBQUNBO1lBQ3pGQSxDQUFDQTtZQUdEQSxlQUFlQSxFQUFFQTtnQkFDZkEsQUFDQUEsaUNBRGlDQTtnQkFDakNBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLE1BQU1BLENBQUNBLFdBQVdBLENBQUNBLFlBQVlBLEVBQUVBLFVBQUNBLEdBQUdBO29CQUNuREEsSUFBSUEsSUFBSUEsR0FBR0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0E7b0JBQ3BCQSxJQUFJQSxZQUFZQSxHQUFHQSxHQUFHQSxDQUFDQSxZQUFZQSxDQUFDQTtvQkFDcENBLEVBQUVBLENBQUNBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLENBQUNBO3dCQUNqQkEsQUFFQUEsMEJBRjBCQTt3QkFDMUJBLG9FQUFvRUE7NEJBQ2hFQSxHQUFHQSxHQUFHQSx1QkFBWUEsQ0FBQ0EsWUFBWUEsRUFBRUEsTUFBTUEsQ0FBQ0EsQ0FBQ0E7d0JBQzdDQSxFQUFFQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTs0QkFDUkEsS0FBS0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FDWkEsT0FBT0EsQ0FBQ0EsVUFBVUEsSUFBSUEsRUFBRUEsTUFBTUEsRUFBRUEsT0FBT0EsRUFBRUEsTUFBTUE7Z0NBQzdDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7b0NBQ1QsQUFDQSx1REFEdUQ7d0NBQ25ELElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO29DQUNoQyxJQUFJLEVBQUUsR0FBRztvQ0FBTyxDQUFDLENBQUM7b0NBQ2xCLFVBQVUsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUM7Z0NBQzNGLENBQUM7NEJBQ0gsQ0FBQyxDQUFDQSxDQUNGQSxLQUFLQSxDQUFDQSxVQUFVQSxJQUFJQSxFQUFFQSxNQUFNQSxFQUFFQSxPQUFPQSxFQUFFQSxNQUFNQTtnQ0FDM0MsTUFBTSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7Z0NBQzFCLGNBQUcsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDOzRCQUNoRSxDQUFDLENBQUNBLENBQUNBO3dCQUNQQSxDQUFDQTtvQkFDSEEsQ0FBQ0E7Z0JBQ0hBLENBQUNBLENBQUNBLENBQUNBO2dCQUNIQSxBQUNBQSxnQ0FEZ0NBO2dCQUNoQ0EsTUFBTUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsYUFBYUEsRUFBRUEsQ0FBQ0E7Z0JBQ25DQSxNQUFNQSxDQUFDQSxlQUFlQSxHQUFHQSxLQUFLQSxDQUFDQTtZQUNqQ0EsQ0FBQ0E7U0FDRkEsQ0FBQ0E7SUFFSkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7QUFDTkEsQ0FBQ0EsRUF0U00sVUFBVSxLQUFWLFVBQVUsUUFzU2hCOztBQ3pTRCx5Q0FBeUM7QUFDekMsNENBQTRDO0FBQzVDLDJDQUEyQztBQUUzQyxJQUFPLFVBQVUsQ0E4Q2hCO0FBOUNELFdBQU8sVUFBVSxFQUFDLENBQUM7SUFFTkEsMEJBQWVBLEdBQUdBLHFCQUFVQSxDQUFDQSxpQkFBaUJBLEVBQ3ZEQSxDQUFDQSxRQUFRQSxFQUFFQSxpQkFBaUJBLEVBQUVBLGlCQUFpQkEsRUFBRUEsa0JBQWtCQSxFQUFFQSxnQkFBZ0JBLEVBQUVBLFdBQVdBLEVBQUVBLGNBQWNBLEVBQUVBLE9BQU9BLEVBQUVBLFVBQVVBLEVBQUVBLGtCQUFrQkEsRUFDekpBLFVBQUNBLE1BQU1BLEVBQUVBLGVBQWlEQSxFQUFFQSxlQUFlQSxFQUFFQSxnQkFBZ0JBLEVBQzVGQSxjQUF1Q0EsRUFBRUEsU0FBNkJBLEVBQUVBLFlBQVlBLEVBQUVBLEtBQUtBLEVBQUVBLFFBQVFBLEVBQUVBLGdCQUFnQkE7UUFFdEhBLE1BQU1BLENBQUNBLFVBQVVBLEdBQUdBLGVBQWVBLENBQUNBO1FBQ3BDQSxNQUFNQSxDQUFDQSxLQUFLQSxHQUFHQSxlQUFlQSxDQUFDQTtRQUMvQkEsTUFBTUEsQ0FBQ0EsRUFBRUEsR0FBR0EsWUFBWUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDL0JBLE1BQU1BLENBQUNBLE1BQU1BLEdBQUdBLGdCQUFnQkEsQ0FBQ0E7UUFDakNBLE1BQU1BLENBQUNBLE1BQU1BLEdBQUdBLGdCQUFnQkEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsY0FBY0EsQ0FBQ0E7UUFFNURBLFVBQVVBLENBQUNBLFVBQVVBLENBQUNBLE1BQU1BLEVBQUVBLFNBQVNBLEVBQUVBLEtBQUtBLEVBQUVBLFFBQVFBLEVBQUVBLFlBQVlBLEVBQUVBLGVBQWVBLEVBQUVBLGVBQWVBLEVBQUVBLGdCQUFnQkEsQ0FBQ0EsQ0FBQ0E7UUFFNUhBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLHdCQUF3QkEsRUFBRUE7WUFDbkMsVUFBVSxFQUFFLENBQUM7UUFDZixDQUFDLENBQUNBLENBQUNBO1FBRUhBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLGNBQWNBLEVBQUVBLFVBQUNBLE1BQU1BO1lBQ2hDQSxVQUFVQSxFQUFFQSxDQUFDQTtRQUNmQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUVIQSxVQUFVQSxFQUFFQSxDQUFDQTtRQUViQSxTQUFTQSxVQUFVQTtZQUNqQnFILE1BQU1BLENBQUNBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBO1lBQ25CQSxFQUFFQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDZEEsSUFBSUEsR0FBR0EsR0FBR0EsdUJBQVlBLENBQUNBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO2dCQUNsQ0EsS0FBS0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FDWkEsT0FBT0EsQ0FBQ0EsVUFBVUEsSUFBSUEsRUFBRUEsTUFBTUEsRUFBRUEsT0FBT0EsRUFBRUEsTUFBTUE7b0JBQzdDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7d0JBQ1QsTUFBTSxDQUFDLE1BQU0sR0FBRyxzQkFBVyxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUNwQyxDQUFDO29CQUNELE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO29CQUN0QixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUN0QixDQUFDLENBQUNBLENBQ0ZBLEtBQUtBLENBQUNBLFVBQVVBLElBQUlBLEVBQUVBLE1BQU1BLEVBQUVBLE9BQU9BLEVBQUVBLE1BQU1BO29CQUMzQyxjQUFHLENBQUMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQztnQkFDaEUsQ0FBQyxDQUFDQSxDQUFDQTtZQUNQQSxDQUFDQTtZQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtnQkFDTkEsTUFBTUEsQ0FBQ0EsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0E7Z0JBQ3RCQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtZQUN0QkEsQ0FBQ0E7UUFDSEEsQ0FBQ0E7SUFDSHJILENBQUNBLENBQUNBLENBQUNBLENBQUNBO0FBQ1ZBLENBQUNBLEVBOUNNLFVBQVUsS0FBVixVQUFVLFFBOENoQjs7QUNsREQseUNBQXlDO0FBQ3pDLDRDQUE0QztBQUM1QywyQ0FBMkM7QUFFM0MsSUFBTyxVQUFVLENBZ0RoQjtBQWhERCxXQUFPLFVBQVUsRUFBQyxDQUFDO0lBRU5BLGdDQUFxQkEsR0FBR0EscUJBQVVBLENBQUNBLHVCQUF1QkEsRUFDbkVBLENBQUNBLFFBQVFBLEVBQUVBLGlCQUFpQkEsRUFBRUEsaUJBQWlCQSxFQUFFQSxrQkFBa0JBLEVBQUVBLGdCQUFnQkEsRUFBRUEsV0FBV0EsRUFBRUEsY0FBY0EsRUFBRUEsT0FBT0EsRUFBRUEsVUFBVUEsRUFBRUEsa0JBQWtCQSxFQUN6SkEsVUFBQ0EsTUFBTUEsRUFBRUEsZUFBaURBLEVBQUVBLGVBQWVBLEVBQUVBLGdCQUFnQkEsRUFDNUZBLGNBQXVDQSxFQUFFQSxTQUE2QkEsRUFBRUEsWUFBWUEsRUFBRUEsS0FBS0EsRUFBRUEsUUFBUUEsRUFBRUEsZ0JBQWdCQTtRQUV0SEEsTUFBTUEsQ0FBQ0EsVUFBVUEsR0FBR0EsZUFBZUEsQ0FBQ0E7UUFDcENBLE1BQU1BLENBQUNBLEtBQUtBLEdBQUdBLGVBQWVBLENBQUNBO1FBQy9CQSxNQUFNQSxDQUFDQSxFQUFFQSxHQUFHQSxZQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUMvQkEsTUFBTUEsQ0FBQ0EsTUFBTUEsR0FBR0EsZ0JBQWdCQSxDQUFDQTtRQUNqQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsR0FBR0EsZ0JBQWdCQSxDQUFDQSxXQUFXQSxDQUFDQSxvQkFBb0JBLENBQUNBO1FBRWxFQSxVQUFVQSxDQUFDQSxVQUFVQSxDQUFDQSxNQUFNQSxFQUFFQSxTQUFTQSxFQUFFQSxLQUFLQSxFQUFFQSxRQUFRQSxFQUFFQSxZQUFZQSxFQUFFQSxlQUFlQSxFQUFFQSxlQUFlQSxFQUFFQSxnQkFBZ0JBLENBQUNBLENBQUNBO1FBRTVIQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSx3QkFBd0JBLEVBQUVBO1lBQ25DLFVBQVUsRUFBRSxDQUFDO1FBQ2YsQ0FBQyxDQUFDQSxDQUFDQTtRQUVIQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxjQUFjQSxFQUFFQSxVQUFDQSxNQUFNQTtZQUNoQ0EsVUFBVUEsRUFBRUEsQ0FBQ0E7UUFDZkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFSEEsVUFBVUEsRUFBRUEsQ0FBQ0E7UUFFYkEsU0FBU0EsVUFBVUE7WUFDakJxSCxNQUFNQSxDQUFDQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUNuQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2RBLElBQUlBLEdBQUdBLEdBQUdBLDZCQUFrQkEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ3hDQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUNaQSxPQUFPQSxDQUFDQSxVQUFVQSxJQUFJQSxFQUFFQSxNQUFNQSxFQUFFQSxPQUFPQSxFQUFFQSxNQUFNQTtvQkFDN0MsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzt3QkFDVCxNQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQzt3QkFDckIsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDO3dCQUN4Qiw0QkFBaUIsQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLENBQUM7b0JBQ3hDLENBQUM7b0JBQ0QsTUFBTSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7b0JBQ3RCLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3RCLENBQUMsQ0FBQ0EsQ0FDRkEsS0FBS0EsQ0FBQ0EsVUFBVUEsSUFBSUEsRUFBRUEsTUFBTUEsRUFBRUEsT0FBT0EsRUFBRUEsTUFBTUE7b0JBQzNDLGNBQUcsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDO2dCQUNoRSxDQUFDLENBQUNBLENBQUNBO1lBQ1BBLENBQUNBO1lBQUNBLElBQUlBLENBQUNBLENBQUNBO2dCQUNOQSxNQUFNQSxDQUFDQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQTtnQkFDdEJBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO1lBQ3RCQSxDQUFDQTtRQUNIQSxDQUFDQTtJQUNIckgsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7QUFDVkEsQ0FBQ0EsRUFoRE0sVUFBVSxLQUFWLFVBQVUsUUFnRGhCOztBQ3BERCx5Q0FBeUM7QUFDekMsNENBQTRDO0FBQzVDLDJDQUEyQztBQUUzQyxJQUFPLFVBQVUsQ0ErRWhCO0FBL0VELFdBQU8sVUFBVSxFQUFDLENBQUM7SUFFTkEsb0NBQXlCQSxHQUFHQSxxQkFBVUEsQ0FBQ0EsMkJBQTJCQSxFQUMzRUEsQ0FBQ0EsUUFBUUEsRUFBRUEsaUJBQWlCQSxFQUFFQSxpQkFBaUJBLEVBQUVBLGtCQUFrQkEsRUFBRUEsZ0JBQWdCQSxFQUFFQSxXQUFXQSxFQUFFQSxjQUFjQSxFQUFFQSxPQUFPQSxFQUFFQSxVQUFVQSxFQUFFQSxrQkFBa0JBLEVBQ3pKQSxVQUFDQSxNQUFNQSxFQUFFQSxlQUFpREEsRUFBRUEsZUFBZUEsRUFBRUEsZ0JBQWdCQSxFQUM1RkEsY0FBdUNBLEVBQUVBLFNBQTZCQSxFQUFFQSxZQUFZQSxFQUFFQSxLQUFLQSxFQUFFQSxRQUFRQSxFQUFFQSxnQkFBZ0JBO1FBRXRIQSxNQUFNQSxDQUFDQSxVQUFVQSxHQUFHQSxlQUFlQSxDQUFDQTtRQUNwQ0EsTUFBTUEsQ0FBQ0EsS0FBS0EsR0FBR0EsZUFBZUEsQ0FBQ0E7UUFDL0JBLE1BQU1BLENBQUNBLEVBQUVBLEdBQUdBLFlBQVlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBQy9CQSxNQUFNQSxDQUFDQSxNQUFNQSxHQUFHQSxnQkFBZ0JBLENBQUNBO1FBQ2pDQSxNQUFNQSxDQUFDQSxNQUFNQSxHQUFHQSxnQkFBZ0JBLENBQUNBLFdBQVdBLENBQUNBLG9CQUFvQkEsQ0FBQ0E7UUFFbEVBLFVBQVVBLENBQUNBLFVBQVVBLENBQUNBLE1BQU1BLEVBQUVBLFNBQVNBLEVBQUVBLEtBQUtBLEVBQUVBLFFBQVFBLEVBQUVBLFlBQVlBLEVBQUVBLGVBQWVBLEVBQUVBLGVBQWVBLEVBQUVBLGdCQUFnQkEsQ0FBQ0EsQ0FBQ0E7UUFFNUhBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLHdCQUF3QkEsRUFBRUE7WUFDbkMsVUFBVSxFQUFFLENBQUM7UUFDZixDQUFDLENBQUNBLENBQUNBO1FBRUhBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLGNBQWNBLEVBQUVBLFVBQUNBLE1BQU1BO1lBQ2hDQSxVQUFVQSxFQUFFQSxDQUFDQTtRQUNmQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUVIQSxVQUFVQSxFQUFFQSxDQUFDQTtRQUViQSxTQUFTQSxVQUFVQTtZQUNqQnFILE1BQU1BLENBQUNBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBO1lBQ25CQSxFQUFFQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDZEEsSUFBSUEsR0FBR0EsR0FBR0EsNkJBQWtCQSxDQUFDQTtnQkFDN0JBLEtBQUtBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQ1pBLE9BQU9BLENBQUNBLFVBQVVBLElBQUlBLEVBQUVBLE1BQU1BLEVBQUVBLE9BQU9BLEVBQUVBLE1BQU1BO29CQUM3QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO3dCQUNULE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO29CQUN2QixDQUFDO29CQUNELE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO29CQUN0QixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUN0QixDQUFDLENBQUNBLENBQ0ZBLEtBQUtBLENBQUNBLFVBQVVBLElBQUlBLEVBQUVBLE1BQU1BLEVBQUVBLE9BQU9BLEVBQUVBLE1BQU1BO29CQUMzQyxjQUFHLENBQUMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQztnQkFDaEUsQ0FBQyxDQUFDQSxDQUFDQTtZQUNQQSxDQUFDQTtZQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtnQkFDTkEsTUFBTUEsQ0FBQ0EsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0E7Z0JBRXRCQSxBQUNBQSw0Q0FENENBO29CQUN4Q0EsZUFBZUEsR0FBR0Esb0JBQW9CQSxDQUFDQTtnQkFFM0NBLE1BQU1BLENBQUNBLE1BQU1BLEdBQUdBO29CQUNkQSxZQUFZQSxFQUFFQSxJQUFJQTtvQkFDbEJBLE1BQU1BLEVBQUVBLGFBQWFBO29CQUNyQkEsVUFBVUEsRUFBRUE7d0JBQ1ZBLE1BQU1BLEVBQUVBLEVBQUVBO3dCQUNWQSxRQUFRQSxFQUFFQTs0QkFDUkEsTUFBTUEsRUFBRUEsRUFBRUE7eUJBQ1hBO3FCQUNGQTtvQkFDREEsWUFBWUEsRUFBRUE7d0JBQ1pBLFFBQVFBLEVBQUVBOzRCQUNSQSxVQUFVQSxFQUFFQSxFQUFFQTs0QkFDZEEsVUFBVUEsRUFBRUEsZUFBZUE7eUJBQzVCQTt3QkFDREEsUUFBUUEsRUFBRUE7NEJBQ1JBLEtBQUtBLEVBQUVBO2dDQUNMQSxLQUFLQSxFQUFFQSxFQUFFQTs2QkFDVkE7NEJBQ0RBLE1BQU1BLEVBQUVBLEtBQUtBO3lCQUNkQTt3QkFDREEsVUFBVUEsRUFBRUE7NEJBQ1ZBLGFBQWFBLEVBQUVBO2dDQUNiQSxjQUFjQSxFQUFFQSxrQkFBa0JBOzZCQUNuQ0E7NEJBQ0RBLE1BQU1BLEVBQUVBLEtBQUtBO3lCQUNkQTtxQkFDRkE7b0JBQ0RBLFVBQVVBLEVBQUVBLEVBQUVBO2lCQUNmQSxDQUFDQTtnQkFDRkEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7WUFDdEJBLENBQUNBO1FBQ0hBLENBQUNBO0lBQ0hySCxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtBQUNWQSxDQUFDQSxFQS9FTSxVQUFVLEtBQVYsVUFBVSxRQStFaEI7O0FDbkZELHlDQUF5QztBQUN6QywyQ0FBMkM7QUFFM0MsSUFBTyxVQUFVLENBaUloQjtBQWpJRCxXQUFPLFVBQVUsRUFBQyxDQUFDO0lBRU5BLGlDQUFzQkEsR0FBR0EscUJBQVVBLENBQUNBLHdCQUF3QkEsRUFBRUEsQ0FBQ0EsUUFBUUEsRUFBRUEsaUJBQWlCQSxFQUFFQSxrQkFBa0JBLEVBQUVBLGlCQUFpQkEsRUFBRUEsU0FBU0EsRUFBRUEsU0FBU0EsRUFBRUEsZ0JBQWdCQSxFQUFFQSxjQUFjQSxFQUFFQSxXQUFXQSxFQUFFQSxjQUFjQSxFQUFFQSxPQUFPQSxFQUFFQSxVQUFVQSxFQUFFQSxrQkFBa0JBLEVBQ3hRQSxVQUFDQSxNQUFNQSxFQUFFQSxlQUFpREEsRUFBRUEsZ0JBQWdCQSxFQUFFQSxlQUFlQSxFQUFFQSxPQUFPQSxFQUFFQSxPQUFPQSxFQUFFQSxjQUFjQSxFQUFFQSxZQUFZQSxFQUFFQSxTQUE2QkEsRUFBRUEsWUFBWUEsRUFBRUEsS0FBS0EsRUFBRUEsUUFBUUEsRUFBRUEsZ0JBQWdCQTtRQUUzTkEsTUFBTUEsQ0FBQ0EsVUFBVUEsR0FBR0EsZUFBZUEsQ0FBQ0E7UUFDcENBLE1BQU1BLENBQUNBLEtBQUtBLEdBQUdBLGVBQWVBLENBQUNBO1FBQy9CQSxNQUFNQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLGdCQUFnQkEsQ0FBQ0E7UUFDM0NBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLHdCQUF3QkEsRUFBRUE7WUFDbkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0QixDQUFDLENBQUNBLENBQUNBO1FBRUhBLE1BQU1BLENBQUNBLFdBQVdBLEdBQUdBO1lBQ25CQSxJQUFJQSxFQUFFQSxjQUFjQTtZQUNwQkEscUJBQXFCQSxFQUFFQSxJQUFJQTtZQUMzQkEsdUJBQXVCQSxFQUFFQSxLQUFLQTtZQUM5QkEsV0FBV0EsRUFBRUEsSUFBSUE7WUFDakJBLGFBQWFBLEVBQUVBLEVBQUVBO1lBQ2pCQSxhQUFhQSxFQUFFQTtnQkFDYkEsVUFBVUEsRUFBRUEsU0FBU0EsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsRUFBRUE7YUFDMUNBO1lBQ0RBLFVBQVVBLEVBQUVBO2dCQUNWQTtvQkFDRUEsS0FBS0EsRUFBRUEsZUFBZUE7b0JBQ3RCQSxXQUFXQSxFQUFFQSxNQUFNQTtvQkFDbkJBLFlBQVlBLEVBQUVBLGNBQWNBLENBQUNBLEdBQUdBLENBQUNBLDhCQUE4QkEsQ0FBQ0E7aUJBQ2pFQTtnQkFPREE7b0JBQ0VBLEtBQUtBLEVBQUVBLHFCQUFxQkE7b0JBQzVCQSxXQUFXQSxFQUFFQSxZQUFZQTtpQkFDMUJBO2dCQU9EQTtvQkFDRUEsS0FBS0EsRUFBRUEsaUNBQWlDQTtvQkFDeENBLFdBQVdBLEVBQUVBLGNBQWNBO2lCQUM1QkE7Z0JBQ0RBO29CQUNFQSxLQUFLQSxFQUFFQSxzQkFBc0JBO29CQUM3QkEsV0FBV0EsRUFBRUEsY0FBY0E7aUJBQzVCQTtnQkFDREE7b0JBQ0VBLEtBQUtBLEVBQUVBLGVBQWVBO29CQUN0QkEsV0FBV0EsRUFBRUEsT0FBT0E7b0JBQ3BCQSxLQUFLQSxFQUFFQSxLQUFLQTtvQkFDWkEsUUFBUUEsRUFBRUEsR0FBR0E7b0JBQ2JBLFlBQVlBLEVBQUVBLGNBQWNBLENBQUNBLEdBQUdBLENBQUNBLCtCQUErQkEsQ0FBQ0E7aUJBQ2xFQTthQUNGQTtTQUNGQSxDQUFDQTtRQUVGQSxVQUFVQSxDQUFDQSxVQUFVQSxDQUFDQSxNQUFNQSxFQUFFQSxTQUFTQSxFQUFFQSxLQUFLQSxFQUFFQSxRQUFRQSxFQUFFQSxZQUFZQSxFQUFFQSxlQUFlQSxFQUFFQSxlQUFlQSxFQUFFQSxnQkFBZ0JBLENBQUNBLENBQUNBO1FBRTVIQSxNQUFNQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLEtBQUtBLENBQUNBLGdCQUFnQkEsQ0FBQ0E7UUFFakRBLE1BQU1BLENBQUNBLFlBQVlBLEdBQUdBLFVBQUNBLFFBQVFBO1lBQzdCQSxFQUFFQSxDQUFDQSw0QkFBNEJBLENBQW1DQTtnQkFDaEVBLFVBQVVBLEVBQUVBLFFBQVFBO2dCQUNwQkEsS0FBS0EsRUFBRUEsT0FBT0E7Z0JBQ2RBLE9BQU9BLEVBQUVBLFVBQUNBLE1BQWNBO29CQUN0QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7d0JBQ1hBLFNBQVNBLGNBQWNBLENBQUNBLFFBQVFBLEVBQUVBLElBQUlBOzRCQUNwQ29ILEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO2dDQUNUQSxZQUFZQSxDQUFDQSxJQUFJQSxFQUFFQTtvQ0FDakJBLGNBQWNBLENBQUNBLFFBQVFBLEVBQUVBLFFBQVFBLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBLENBQUNBO2dDQUM3Q0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7NEJBQ0xBLENBQUNBOzRCQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtnQ0FDTkEsVUFBVUEsRUFBRUEsQ0FBQ0E7NEJBQ2ZBLENBQUNBO3dCQUNIQSxDQUFDQTt3QkFFRHBILGNBQWNBLENBQUNBLFFBQVFBLEVBQUVBLFFBQVFBLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBLENBQUNBO29CQUM3Q0EsQ0FBQ0E7Z0JBQ0hBLENBQUNBO2dCQUNEQSxLQUFLQSxFQUFFQSx1QkFBdUJBO2dCQUM5QkEsTUFBTUEsRUFBRUEsOENBQThDQTtnQkFDdERBLE1BQU1BLEVBQUVBLFFBQVFBO2dCQUNoQkEsT0FBT0EsRUFBRUEsWUFBWUE7Z0JBQ3JCQSxNQUFNQSxFQUFFQSw2Q0FBNkNBO2dCQUNyREEsV0FBV0EsRUFBRUEscUJBQXFCQTthQUNuQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsRUFBRUEsQ0FBQ0E7UUFDWkEsQ0FBQ0EsQ0FBQ0E7UUFFRkEsU0FBU0EsWUFBWUEsQ0FBQ0EsU0FBU0EsRUFBRUEsWUFBWUE7WUFDM0NzSCxJQUFJQSxJQUFJQSxHQUFHQSxDQUFDQSxTQUFTQSxJQUFJQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQTtZQUNuQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ1RBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLGdDQUFnQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ3JEQSxJQUFJQSxHQUFHQSxHQUFHQSw2QkFBa0JBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO2dCQUNuQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FDZkEsT0FBT0EsQ0FBQ0EsVUFBVUEsSUFBSUEsRUFBRUEsTUFBTUEsRUFBRUEsT0FBT0EsRUFBRUEsTUFBTUE7b0JBQzdDLFlBQVksRUFBRSxDQUFDO2dCQUNqQixDQUFDLENBQUNBLENBQ0ZBLEtBQUtBLENBQUNBLFVBQVVBLElBQUlBLEVBQUVBLE1BQU1BLEVBQUVBLE9BQU9BLEVBQUVBLE1BQU1BO29CQUMzQyxjQUFHLENBQUMsSUFBSSxDQUFDLG1DQUFtQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQztnQkFDbEYsQ0FBQyxDQUFDQSxDQUFDQTtZQUNQQSxDQUFDQTtZQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtnQkFDTkEsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0Esa0NBQWtDQSxHQUFHQSxPQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUM5RUEsQ0FBQ0E7UUFDSEEsQ0FBQ0E7UUFFRHRILFNBQVNBLFVBQVVBO1lBQ2pCcUgsSUFBSUEsR0FBR0EsR0FBR0EsOEJBQW1CQSxFQUFFQSxDQUFDQTtZQUNoQ0EsS0FBS0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FDWkEsT0FBT0EsQ0FBQ0EsVUFBVUEsSUFBSUEsRUFBRUEsTUFBTUEsRUFBRUEsT0FBT0EsRUFBRUEsTUFBTUE7Z0JBQzdDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ1QsQUFDQSx3REFEd0Q7d0JBQ3BELFlBQVksR0FBRyxJQUFJLENBQUM7b0JBQ3hCLE1BQU0sQ0FBQyxZQUFZLEdBQUcsNkJBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQztvQkFDbkUsTUFBTSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7b0JBQ3RCLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3RCLENBQUM7WUFDSCxDQUFDLENBQUNBLENBQ0ZBLEtBQUtBLENBQUNBLFVBQVVBLElBQUlBLEVBQUVBLE1BQU1BLEVBQUVBLE9BQU9BLEVBQUVBLE1BQU1BO2dCQUMzQyxjQUFHLENBQUMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQztZQUNoRSxDQUFDLENBQUNBLENBQUNBO1FBQ1BBLENBQUNBO1FBRURySCxVQUFVQSxFQUFFQSxDQUFDQTtJQUNmQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtBQUNSQSxDQUFDQSxFQWpJTSxVQUFVLEtBQVYsVUFBVSxRQWlJaEI7O0FDcElELHlDQUF5QztBQUN6Qyw0Q0FBNEM7QUFDNUMsMkNBQTJDO0FBRTNDLElBQU8sVUFBVSxDQStEaEI7QUEvREQsV0FBTyxVQUFVLEVBQUMsQ0FBQztJQUVOQSw4QkFBbUJBLEdBQUdBLHFCQUFVQSxDQUFDQSxxQkFBcUJBLEVBQy9EQSxDQUFDQSxRQUFRQSxFQUFFQSxpQkFBaUJBLEVBQUVBLGlCQUFpQkEsRUFBRUEsa0JBQWtCQSxFQUFFQSxnQkFBZ0JBLEVBQUVBLFdBQVdBLEVBQUVBLGNBQWNBLEVBQUVBLE9BQU9BLEVBQUVBLFVBQVVBLEVBQUVBLGtCQUFrQkEsRUFDekpBLFVBQUNBLE1BQU1BLEVBQUVBLGVBQWlEQSxFQUFFQSxlQUFlQSxFQUFFQSxnQkFBZ0JBLEVBQzVGQSxjQUF1Q0EsRUFBRUEsU0FBNkJBLEVBQUVBLFlBQVlBLEVBQUVBLEtBQUtBLEVBQUVBLFFBQVFBLEVBQUVBLGdCQUFnQkE7UUFFdEhBLE1BQU1BLENBQUNBLFVBQVVBLEdBQUdBLGVBQWVBLENBQUNBO1FBQ3BDQSxNQUFNQSxDQUFDQSxLQUFLQSxHQUFHQSxlQUFlQSxDQUFDQTtRQUMvQkEsTUFBTUEsQ0FBQ0EsRUFBRUEsR0FBR0EsWUFBWUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDL0JBLE1BQU1BLENBQUNBLE1BQU1BLEdBQUdBLGdCQUFnQkEsQ0FBQ0E7UUFDakNBLE1BQU1BLENBQUNBLE1BQU1BLEdBQUdBLGdCQUFnQkEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsY0FBY0EsQ0FBQ0E7UUFFNURBLFVBQVVBLENBQUNBLFVBQVVBLENBQUNBLE1BQU1BLEVBQUVBLFNBQVNBLEVBQUVBLEtBQUtBLEVBQUVBLFFBQVFBLEVBQUVBLFlBQVlBLEVBQUVBLGVBQWVBLEVBQUVBLGVBQWVBLEVBQUVBLGdCQUFnQkEsQ0FBQ0EsQ0FBQ0E7UUFFNUhBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLHdCQUF3QkEsRUFBRUE7WUFDbkMsVUFBVSxFQUFFLENBQUM7UUFDZixDQUFDLENBQUNBLENBQUNBO1FBRUhBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLGNBQWNBLEVBQUVBLFVBQUNBLE1BQU1BO1lBQ2hDQSxVQUFVQSxFQUFFQSxDQUFDQTtRQUNmQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUVIQSxNQUFNQSxDQUFDQSxRQUFRQSxHQUFHQSxpQkFBaUJBLENBQUNBO1FBRXBDQSxVQUFVQSxFQUFFQSxDQUFDQTtRQUViQSxTQUFTQSxVQUFVQTtZQUNqQnFILE1BQU1BLENBQUNBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBO1lBQ25CQSxFQUFFQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDZEEsSUFBSUEsR0FBR0EsR0FBR0EsdUJBQVlBLENBQUNBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO2dCQUNsQ0EsS0FBS0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FDWkEsT0FBT0EsQ0FBQ0EsVUFBVUEsSUFBSUEsRUFBRUEsTUFBTUEsRUFBRUEsT0FBT0EsRUFBRUEsTUFBTUE7b0JBQzdDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7d0JBQ1QsTUFBTSxDQUFDLE1BQU0sR0FBRyxzQkFBVyxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUNwQyxDQUFDO29CQUNELE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO29CQUN0QixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUN0QixDQUFDLENBQUNBLENBQ0ZBLEtBQUtBLENBQUNBLFVBQVVBLElBQUlBLEVBQUVBLE1BQU1BLEVBQUVBLE9BQU9BLEVBQUVBLE1BQU1BO29CQUMzQyxjQUFHLENBQUMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQztnQkFDaEUsQ0FBQyxDQUFDQSxDQUFDQTtnQkFFTEEsR0FBR0EsR0FBR0EsMkJBQWdCQSxDQUFDQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtnQkFDbENBLEtBQUtBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQ1pBLE9BQU9BLENBQUNBLFVBQVVBLElBQUlBLEVBQUVBLE1BQU1BO29CQUM1QixNQUFNLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztvQkFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDdEIsQ0FBQyxDQUFDQSxDQUNGQSxLQUFLQSxDQUFDQSxVQUFVQSxJQUFJQSxFQUFFQSxNQUFNQTtvQkFDMUIsTUFBTSxDQUFDLFFBQVEsR0FBRyw0QkFBNEIsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxXQUFXLEdBQUcsTUFBTSxDQUFDO29CQUN6RixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUN0QixDQUFDLENBQUNBLENBQ0ZBLEtBQUtBLENBQUNBLFVBQVVBLEtBQUtBO29CQUNuQixNQUFNLENBQUMsUUFBUSxHQUFHLHVCQUF1QixHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO29CQUN4RSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUN0QixDQUFDLENBQUNBLENBQUNBO1lBQ1BBLENBQUNBO1lBQUNBLElBQUlBLENBQUNBLENBQUNBO2dCQUNOQSxNQUFNQSxDQUFDQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQTtnQkFDdEJBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO1lBQ3RCQSxDQUFDQTtRQUNIQSxDQUFDQTtJQUNIckgsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7QUFDVkEsQ0FBQ0EsRUEvRE0sVUFBVSxLQUFWLFVBQVUsUUErRGhCOztBQ25FRCx5Q0FBeUM7QUFDekMsMkNBQTJDO0FBRTNDLElBQU8sVUFBVSxDQWlHaEI7QUFqR0QsV0FBTyxVQUFVLEVBQUMsQ0FBQztJQUVOQSwyQkFBZ0JBLEdBQUdBLHFCQUFVQSxDQUFDQSxrQkFBa0JBLEVBQUVBLENBQUNBLFFBQVFBLEVBQUVBLGlCQUFpQkEsRUFBRUEsa0JBQWtCQSxFQUFFQSxpQkFBaUJBLEVBQUVBLFNBQVNBLEVBQUVBLFNBQVNBLEVBQUVBLGdCQUFnQkEsRUFBRUEsY0FBY0EsRUFBRUEsV0FBV0EsRUFBRUEsY0FBY0EsRUFBRUEsT0FBT0EsRUFBRUEsVUFBVUEsRUFBRUEsa0JBQWtCQSxFQUM1UEEsVUFBQ0EsTUFBTUEsRUFBRUEsZUFBaURBLEVBQUVBLGdCQUFnQkEsRUFBRUEsZUFBZUEsRUFBRUEsT0FBT0EsRUFBRUEsT0FBT0EsRUFBRUEsY0FBY0EsRUFBRUEsWUFBWUEsRUFBRUEsU0FBNkJBLEVBQUVBLFlBQVlBLEVBQUVBLEtBQUtBLEVBQUVBLFFBQVFBLEVBQUVBLGdCQUFnQkE7UUFFM05BLE1BQU1BLENBQUNBLFVBQVVBLEdBQUdBLGVBQWVBLENBQUNBO1FBQ3BDQSxNQUFNQSxDQUFDQSxLQUFLQSxHQUFHQSxlQUFlQSxDQUFDQTtRQUMvQkEsTUFBTUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSxnQkFBZ0JBLENBQUNBO1FBQzNDQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSx3QkFBd0JBLEVBQUVBO1lBQ25DLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEIsQ0FBQyxDQUFDQSxDQUFDQTtRQUVIQSxNQUFNQSxDQUFDQSxXQUFXQSxHQUFHQTtZQUNuQkEsSUFBSUEsRUFBRUEsUUFBUUE7WUFDZEEscUJBQXFCQSxFQUFFQSxJQUFJQTtZQUMzQkEsdUJBQXVCQSxFQUFFQSxLQUFLQTtZQUM5QkEsV0FBV0EsRUFBRUEsSUFBSUE7WUFDakJBLGFBQWFBLEVBQUVBLEVBQUVBO1lBQ2pCQSxhQUFhQSxFQUFFQTtnQkFDYkEsVUFBVUEsRUFBRUEsU0FBU0EsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsRUFBRUE7YUFDMUNBO1lBQ0RBLFVBQVVBLEVBQUVBO2dCQUNWQTtvQkFDRUEsS0FBS0EsRUFBRUEsZUFBZUE7b0JBQ3RCQSxXQUFXQSxFQUFFQSxNQUFNQTtvQkFDbkJBLFlBQVlBLEVBQUVBLGNBQWNBLENBQUNBLEdBQUdBLENBQUNBLHdCQUF3QkEsQ0FBQ0E7aUJBQzNEQTtnQkFDREE7b0JBQ0VBLEtBQUtBLEVBQUVBLGVBQWVBO29CQUN0QkEsV0FBV0EsRUFBRUEsTUFBTUE7b0JBQ25CQSxXQUFXQSxFQUFFQSxJQUFJQTtvQkFDakJBLFlBQVlBLEVBQUVBLGNBQWNBLENBQUNBLEdBQUdBLENBQUNBLHdCQUF3QkEsQ0FBQ0E7aUJBQzNEQTtnQkFDREE7b0JBQ0VBLEtBQUtBLEVBQUVBLFFBQVFBO29CQUNmQSxXQUFXQSxFQUFFQSxRQUFRQTtvQkFDckJBLFlBQVlBLEVBQUVBLGNBQWNBLENBQUNBLEdBQUdBLENBQUNBLDBCQUEwQkEsQ0FBQ0E7aUJBQzdEQTtnQkFDREE7b0JBQ0VBLEtBQUtBLEVBQUVBLFdBQVdBO29CQUNsQkEsV0FBV0EsRUFBRUEsTUFBTUE7b0JBQ25CQSxZQUFZQSxFQUFFQSxjQUFjQSxDQUFDQSxHQUFHQSxDQUFDQSx3QkFBd0JBLENBQUNBO2lCQUMzREE7Z0JBQ0RBO29CQUNFQSxLQUFLQSxFQUFFQSxVQUFVQTtvQkFDakJBLFdBQVdBLEVBQUVBLFdBQVdBO29CQUN4QkEsWUFBWUEsRUFBRUEsY0FBY0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsdUJBQXVCQSxDQUFDQTtpQkFDMURBO2dCQU9EQTtvQkFDRUEsS0FBS0EsRUFBRUEsMkJBQTJCQTtvQkFDbENBLFdBQVdBLEVBQUVBLFlBQVlBO29CQUN6QkEsWUFBWUEsRUFBRUEsY0FBY0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsOEJBQThCQSxDQUFDQTtpQkFDakVBO2dCQUNEQTtvQkFDRUEsS0FBS0EsRUFBRUEsMEJBQTBCQTtvQkFDakNBLFdBQVdBLEVBQUVBLFVBQVVBO2lCQUN4QkE7Z0JBQ0RBO29CQUNFQSxLQUFLQSxFQUFFQSx1Q0FBdUNBO29CQUM5Q0EsV0FBV0EsRUFBRUEsY0FBY0E7aUJBQzVCQTtnQkFDREE7b0JBQ0VBLEtBQUtBLEVBQUVBLDRCQUE0QkE7b0JBQ25DQSxXQUFXQSxFQUFFQSxjQUFjQTtpQkFDNUJBO2FBQUNBO1NBQ0xBLENBQUNBO1FBRUZBLFVBQVVBLENBQUNBLFVBQVVBLENBQUNBLE1BQU1BLEVBQUVBLFNBQVNBLEVBQUVBLEtBQUtBLEVBQUVBLFFBQVFBLEVBQUVBLFlBQVlBLEVBQUVBLGVBQWVBLEVBQUVBLGVBQWVBLEVBQUVBLGdCQUFnQkEsQ0FBQ0EsQ0FBQ0E7UUFFNUhBLE1BQU1BLENBQUNBLFlBQVlBLEdBQUdBLGNBQU1BLGtDQUFnQkEsRUFBaEJBLENBQWdCQSxDQUFDQTtRQUM3Q0EsTUFBTUEsQ0FBQ0EsS0FBS0EsR0FBR0EsV0FBV0EsQ0FBQ0EsWUFBWUEsQ0FBQ0EsTUFBTUEsRUFBRUEsVUFBQ0EsSUFBZUE7WUFDOURBLElBQUlBLEdBQUdBLEdBQUdBLHdCQUFhQSxFQUFFQSxDQUFDQTtZQUMxQkEsS0FBS0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FDWkEsT0FBT0EsQ0FBQ0EsVUFBVUEsSUFBSUEsRUFBRUEsTUFBTUEsRUFBRUEsT0FBT0EsRUFBRUEsTUFBTUE7Z0JBQzdDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ1QsQUFDQSx3REFEd0Q7b0JBQ3hELE1BQU0sQ0FBQyxNQUFNLEdBQUcsdUJBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQ3pDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO2dCQUN4QixDQUFDO2dCQUNELElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3BCLElBQUksRUFBRSxDQUFDO1lBQ1QsQ0FBQyxDQUFDQSxDQUNGQSxLQUFLQSxDQUFDQSxVQUFVQSxJQUFJQSxFQUFFQSxNQUFNQSxFQUFFQSxPQUFPQSxFQUFFQSxNQUFNQTtnQkFDM0MsY0FBRyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUM7Z0JBQzlELElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3BCLElBQUksRUFBRSxDQUFDO1lBQ1QsQ0FBQyxDQUFDQSxDQUFDQTtRQUNQQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUVIQSxNQUFNQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtJQUNqQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7QUFDUkEsQ0FBQ0EsRUFqR00sVUFBVSxLQUFWLFVBQVUsUUFpR2hCOztBQ3BHRCx5Q0FBeUM7QUFDekMsNENBQTRDO0FBQzVDLDJDQUEyQztBQUUzQyxJQUFPLFVBQVUsQ0F5QmhCO0FBekJELFdBQU8sVUFBVSxFQUFDLENBQUM7SUFFakJBLEFBQ0FBLDhEQUQ4REE7SUFDbkRBLDRCQUFpQkEsR0FBR0EscUJBQVVBLENBQUNBLG1CQUFtQkEsRUFBRUE7UUFDN0RBLFFBQVFBO1FBQUVBLGNBQWNBO1FBQUVBLGFBQWFBO1FBQUVBLHNCQUFzQkE7UUFBRUEsVUFBVUE7UUFDM0VBLFVBQUNBLE1BQU1BLEVBQUVBLFlBQVlBLEVBQUVBLFdBQVdBLEVBQUVBLG9CQUFvQkEsRUFBRUEsUUFBMkJBO1lBRW5GQSxJQUFJQSxJQUFJQSxHQUFPQSxRQUFRQSxDQUFDQSxhQUFhQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtZQUM5Q0EsSUFBSUEsUUFBUUEsR0FBR0EsSUFBSUEsSUFBSUEsSUFBSUEsQ0FBQ0EsSUFBSUEsSUFBSUEsRUFBRUEsQ0FBQ0E7WUFFdkNBLE1BQU1BLENBQUNBLFNBQVNBLEdBQUdBLFVBQUNBLE1BQU1BO2dCQUN4QkEsSUFBSUEsVUFBVUEsR0FBT0EsSUFBSUEsR0FBR0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ3ZDQSxJQUFJQSxRQUFRQSxHQUFHQSxJQUFJQSxHQUFHQSxFQUFFQSxDQUFDQSxRQUFRQSxFQUFFQSxDQUFDQTtnQkFDcENBLElBQUlBLEtBQUtBLEdBQUdBLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLElBQUlBLG9CQUFvQkEsQ0FBQ0E7Z0JBQ3pEQSxJQUFJQSxLQUFLQSxHQUFHQSxXQUFXQSxDQUFDQSxLQUFLQSxJQUFJQSxFQUFFQSxDQUFDQTtnQkFDcENBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBO29CQUMzQkEsVUFBVUEsRUFBRUEsTUFBTUEsQ0FBQ0EsV0FBV0E7b0JBQzlCQSxLQUFLQSxFQUFFQSxLQUFLQTtvQkFDWkEsUUFBUUEsRUFBRUEsUUFBUUE7aUJBQ25CQSxDQUFDQSxDQUFDQTtnQkFDSEEsY0FBR0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsZUFBZUEsRUFBRUEsVUFBVUEsQ0FBQ0EsUUFBUUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ2xEQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxHQUFHQSxVQUFVQSxDQUFDQSxRQUFRQSxFQUFFQSxDQUFDQTtZQUMvQ0EsQ0FBQ0EsQ0FBQ0E7UUFFSkEsQ0FBQ0E7S0FBQ0EsQ0FBQ0EsQ0FBQ0E7QUFDUkEsQ0FBQ0EsRUF6Qk0sVUFBVSxLQUFWLFVBQVUsUUF5QmhCOztBQzdCRCx5Q0FBeUM7QUFDekMsNENBQTRDO0FBQzVDLDJDQUEyQztBQUUzQyxJQUFPLFVBQVUsQ0ErQ2hCO0FBL0NELFdBQU8sVUFBVSxFQUFDLENBQUM7SUFFTkEscUNBQTBCQSxHQUFHQSxxQkFBVUEsQ0FBQ0EsNEJBQTRCQSxFQUM3RUEsQ0FBQ0EsUUFBUUEsRUFBRUEsaUJBQWlCQSxFQUFFQSxpQkFBaUJBLEVBQUVBLGtCQUFrQkEsRUFBRUEsZ0JBQWdCQSxFQUFFQSxXQUFXQSxFQUFFQSxjQUFjQSxFQUFFQSxPQUFPQSxFQUFFQSxVQUFVQSxFQUFFQSxrQkFBa0JBLEVBQ3pKQSxVQUFDQSxNQUFNQSxFQUFFQSxlQUFpREEsRUFBRUEsZUFBZUEsRUFBRUEsZ0JBQWdCQSxFQUM1RkEsY0FBdUNBLEVBQUVBLFNBQTZCQSxFQUFFQSxZQUFZQSxFQUFFQSxLQUFLQSxFQUFFQSxRQUFRQSxFQUFFQSxnQkFBZ0JBO1FBRXRIQSxNQUFNQSxDQUFDQSxVQUFVQSxHQUFHQSxlQUFlQSxDQUFDQTtRQUNwQ0EsTUFBTUEsQ0FBQ0EsS0FBS0EsR0FBR0EsZUFBZUEsQ0FBQ0E7UUFDL0JBLE1BQU1BLENBQUNBLEVBQUVBLEdBQUdBLFlBQVlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBQy9CQSxNQUFNQSxDQUFDQSxNQUFNQSxHQUFHQSxnQkFBZ0JBLENBQUNBO1FBQ2pDQSxNQUFNQSxDQUFDQSxNQUFNQSxHQUFHQSxnQkFBZ0JBLENBQUNBLFdBQVdBLENBQUNBLDBCQUEwQkEsQ0FBQ0E7UUFFeEVBLFVBQVVBLENBQUNBLFVBQVVBLENBQUNBLE1BQU1BLEVBQUVBLFNBQVNBLEVBQUVBLEtBQUtBLEVBQUVBLFFBQVFBLEVBQUVBLFlBQVlBLEVBQUVBLGVBQWVBLEVBQUVBLGVBQWVBLEVBQUVBLGdCQUFnQkEsQ0FBQ0EsQ0FBQ0E7UUFFNUhBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLHdCQUF3QkEsRUFBRUE7WUFDbkMsVUFBVSxFQUFFLENBQUM7UUFDZixDQUFDLENBQUNBLENBQUNBO1FBRUhBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLGNBQWNBLEVBQUVBLFVBQUNBLE1BQU1BO1lBQ2hDQSxVQUFVQSxFQUFFQSxDQUFDQTtRQUNmQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUVIQSxVQUFVQSxFQUFFQSxDQUFDQTtRQUViQSxTQUFTQSxVQUFVQTtZQUNqQnFILE1BQU1BLENBQUNBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBO1lBQ25CQSxFQUFFQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDZEEsSUFBSUEsR0FBR0EsR0FBR0Esa0NBQXVCQSxDQUFDQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtnQkFDN0NBLEtBQUtBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQ1pBLE9BQU9BLENBQUNBLFVBQVVBLElBQUlBLEVBQUVBLE1BQU1BLEVBQUVBLE9BQU9BLEVBQUVBLE1BQU1BO29CQUM3QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO3dCQUNULE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO3dCQUNyQixpQ0FBc0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDL0IsQ0FBQztvQkFDRCxNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztvQkFDdEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDdEIsQ0FBQyxDQUFDQSxDQUNGQSxLQUFLQSxDQUFDQSxVQUFVQSxJQUFJQSxFQUFFQSxNQUFNQSxFQUFFQSxPQUFPQSxFQUFFQSxNQUFNQTtvQkFDM0MsY0FBRyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUM7Z0JBQ2hFLENBQUMsQ0FBQ0EsQ0FBQ0E7WUFDUEEsQ0FBQ0E7WUFBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ05BLE1BQU1BLENBQUNBLE9BQU9BLEdBQUdBLElBQUlBLENBQUNBO2dCQUN0QkEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7WUFDdEJBLENBQUNBO1FBQ0hBLENBQUNBO0lBQ0hySCxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtBQUNWQSxDQUFDQSxFQS9DTSxVQUFVLEtBQVYsVUFBVSxRQStDaEI7O0FDbkRELHlDQUF5QztBQUN6QywyQ0FBMkM7QUFFM0MsSUFBTyxVQUFVLENBeUhoQjtBQXpIRCxXQUFPLFVBQVUsRUFBQyxDQUFDO0lBRU5BLHNDQUEyQkEsR0FBR0EscUJBQVVBLENBQUNBLDZCQUE2QkEsRUFBRUEsQ0FBQ0EsUUFBUUEsRUFBRUEsaUJBQWlCQSxFQUFFQSxrQkFBa0JBLEVBQUVBLGlCQUFpQkEsRUFBRUEsU0FBU0EsRUFBRUEsU0FBU0EsRUFBRUEsZ0JBQWdCQSxFQUFFQSxjQUFjQSxFQUFFQSxXQUFXQSxFQUFFQSxjQUFjQSxFQUFFQSxPQUFPQSxFQUFFQSxVQUFVQSxFQUFFQSxrQkFBa0JBLEVBQ2xSQSxVQUFDQSxNQUFNQSxFQUFFQSxlQUFpREEsRUFBRUEsZ0JBQWdCQSxFQUFFQSxlQUFlQSxFQUFFQSxPQUFPQSxFQUFFQSxPQUFPQSxFQUFFQSxjQUFjQSxFQUFFQSxZQUFZQSxFQUFFQSxTQUE2QkEsRUFBRUEsWUFBWUEsRUFBRUEsS0FBS0EsRUFBRUEsUUFBUUEsRUFBRUEsZ0JBQWdCQTtRQUUzTkEsTUFBTUEsQ0FBQ0EsVUFBVUEsR0FBR0EsZUFBZUEsQ0FBQ0E7UUFDcENBLE1BQU1BLENBQUNBLEtBQUtBLEdBQUdBLGVBQWVBLENBQUNBO1FBQy9CQSxNQUFNQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLGdCQUFnQkEsQ0FBQ0E7UUFDM0NBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLHdCQUF3QkEsRUFBRUE7WUFDbkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0QixDQUFDLENBQUNBLENBQUNBO1FBQ0hBLE1BQU1BLENBQUNBLFVBQVVBLEdBQUdBLDhCQUFtQkEsQ0FBQ0E7UUFFeENBLE1BQU1BLENBQUNBLFdBQVdBLEdBQUdBO1lBQ25CQSxJQUFJQSxFQUFFQSxtQkFBbUJBO1lBQ3pCQSxxQkFBcUJBLEVBQUVBLElBQUlBO1lBQzNCQSx1QkFBdUJBLEVBQUVBLEtBQUtBO1lBQzlCQSxXQUFXQSxFQUFFQSxJQUFJQTtZQUNqQkEsYUFBYUEsRUFBRUEsRUFBRUE7WUFDakJBLGFBQWFBLEVBQUVBO2dCQUNiQSxVQUFVQSxFQUFFQSxTQUFTQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxFQUFFQTthQUMxQ0E7WUFDREEsVUFBVUEsRUFBRUE7Z0JBQ1ZBO29CQUNFQSxLQUFLQSxFQUFFQSxlQUFlQTtvQkFDdEJBLFdBQVdBLEVBQUVBLE1BQU1BO29CQUNuQkEsWUFBWUEsRUFBRUEsY0FBY0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsbUNBQW1DQSxDQUFDQTtpQkFDdEVBO2dCQUNEQTtvQkFDRUEsS0FBS0EsRUFBRUEsb0JBQW9CQTtvQkFDM0JBLFdBQVdBLEVBQUVBLFdBQVdBO2lCQUN6QkE7Z0JBQ0RBO29CQUNFQSxLQUFLQSxFQUFFQSw4QkFBOEJBO29CQUNyQ0EsV0FBV0EsRUFBRUEsV0FBV0E7aUJBQ3pCQTtnQkFDREE7b0JBQ0VBLEtBQUtBLEVBQUVBLG9DQUFvQ0E7b0JBQzNDQSxXQUFXQSxFQUFFQSxpQkFBaUJBO2lCQUMvQkE7Z0JBQ0RBO29CQUNFQSxLQUFLQSxFQUFFQSw4QkFBOEJBO29CQUNyQ0EsV0FBV0EsRUFBRUEsWUFBWUE7aUJBQzFCQTtnQkFDREE7b0JBQ0VBLEtBQUtBLEVBQUVBLHdCQUF3QkE7b0JBQy9CQSxXQUFXQSxFQUFFQSxLQUFLQTtpQkFDbkJBO2dCQUNEQTtvQkFDRUEsS0FBS0EsRUFBRUEsOENBQThDQTtvQkFDckRBLFdBQVdBLEVBQUVBLFFBQVFBO29CQUNyQkEsWUFBWUEsRUFBRUEsY0FBY0EsQ0FBQ0EsR0FBR0EsQ0FBQ0Esb0NBQW9DQSxDQUFDQTtpQkFDdkVBO2FBQ0ZBO1NBQ0ZBLENBQUNBO1FBRUZBLFVBQVVBLENBQUNBLFVBQVVBLENBQUNBLE1BQU1BLEVBQUVBLFNBQVNBLEVBQUVBLEtBQUtBLEVBQUVBLFFBQVFBLEVBQUVBLFlBQVlBLEVBQUVBLGVBQWVBLEVBQUVBLGVBQWVBLEVBQUVBLGdCQUFnQkEsQ0FBQ0EsQ0FBQ0E7UUFFNUhBLE1BQU1BLENBQUNBLFlBQVlBLEdBQUdBLFVBQUNBLFFBQVFBO1lBQzdCQSxFQUFFQSxDQUFDQSw0QkFBNEJBLENBQW1DQTtnQkFDaEVBLFVBQVVBLEVBQUVBLFFBQVFBO2dCQUNwQkEsS0FBS0EsRUFBRUEsT0FBT0E7Z0JBQ2RBLE9BQU9BLEVBQUVBLFVBQUNBLE1BQWNBO29CQUN0QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7d0JBQ1hBLFNBQVNBLGNBQWNBLENBQUNBLFFBQVFBLEVBQUVBLElBQUlBOzRCQUNwQ29ILEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO2dDQUNUQSxZQUFZQSxDQUFDQSxJQUFJQSxFQUFFQTtvQ0FDakJBLGNBQWNBLENBQUNBLFFBQVFBLEVBQUVBLFFBQVFBLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBLENBQUNBO2dDQUM3Q0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7NEJBQ0xBLENBQUNBOzRCQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtnQ0FDTkEsVUFBVUEsRUFBRUEsQ0FBQ0E7NEJBQ2ZBLENBQUNBO3dCQUNIQSxDQUFDQTt3QkFFRHBILGNBQWNBLENBQUNBLFFBQVFBLEVBQUVBLFFBQVFBLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBLENBQUNBO29CQUM3Q0EsQ0FBQ0E7Z0JBQ0hBLENBQUNBO2dCQUNEQSxLQUFLQSxFQUFFQSxvQkFBb0JBO2dCQUMzQkEsTUFBTUEsRUFBRUEsNENBQTRDQTtnQkFDcERBLE1BQU1BLEVBQUVBLFFBQVFBO2dCQUNoQkEsT0FBT0EsRUFBRUEsWUFBWUE7Z0JBQ3JCQSxNQUFNQSxFQUFFQSw2Q0FBNkNBO2dCQUNyREEsV0FBV0EsRUFBRUEscUJBQXFCQTthQUNuQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsRUFBRUEsQ0FBQ0E7UUFDWkEsQ0FBQ0EsQ0FBQ0E7UUFFRkEsU0FBU0EsWUFBWUEsQ0FBQ0EsU0FBU0EsRUFBRUEsWUFBWUE7WUFDM0NzSCxJQUFJQSxJQUFJQSxHQUFHQSxDQUFDQSxTQUFTQSxJQUFJQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQTtZQUNuQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ1RBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLHFDQUFxQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7Z0JBQzFEQSxJQUFJQSxHQUFHQSxHQUFHQSxrQ0FBdUJBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO2dCQUN4Q0EsS0FBS0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FDZkEsT0FBT0EsQ0FBQ0EsVUFBVUEsSUFBSUEsRUFBRUEsTUFBTUEsRUFBRUEsT0FBT0EsRUFBRUEsTUFBTUE7b0JBQzdDLFlBQVksRUFBRSxDQUFDO2dCQUNqQixDQUFDLENBQUNBLENBQ0ZBLEtBQUtBLENBQUNBLFVBQVVBLElBQUlBLEVBQUVBLE1BQU1BLEVBQUVBLE9BQU9BLEVBQUVBLE1BQU1BO29CQUMzQyxjQUFHLENBQUMsSUFBSSxDQUFDLHdDQUF3QyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQztnQkFDdkYsQ0FBQyxDQUFDQSxDQUFDQTtZQUNQQSxDQUFDQTtZQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtnQkFDTkEsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0Esa0NBQWtDQSxHQUFHQSxPQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUM5RUEsQ0FBQ0E7UUFDSEEsQ0FBQ0E7UUFFRHRILFNBQVNBLFVBQVVBO1lBQ2pCcUgsSUFBSUEsR0FBR0EsR0FBR0EsbUNBQXdCQSxFQUFFQSxDQUFDQTtZQUNyQ0EsS0FBS0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FDWkEsT0FBT0EsQ0FBQ0EsVUFBVUEsSUFBSUEsRUFBRUEsTUFBTUEsRUFBRUEsT0FBT0EsRUFBRUEsTUFBTUE7Z0JBQzdDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ1QsQUFDQSx3REFEd0Q7b0JBQ3hELE1BQU0sQ0FBQyxpQkFBaUIsR0FBRyxrQ0FBdUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQy9ELE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO29CQUN0QixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUN0QixDQUFDO1lBQ0gsQ0FBQyxDQUFDQSxDQUNGQSxLQUFLQSxDQUFDQSxVQUFVQSxJQUFJQSxFQUFFQSxNQUFNQSxFQUFFQSxPQUFPQSxFQUFFQSxNQUFNQTtnQkFDM0MsY0FBRyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUM7WUFDaEUsQ0FBQyxDQUFDQSxDQUFDQTtRQUNQQSxDQUFDQTtRQUVEckgsVUFBVUEsRUFBRUEsQ0FBQ0E7SUFDZkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7QUFDUkEsQ0FBQ0EsRUF6SE0sVUFBVSxLQUFWLFVBQVUsUUF5SGhCOztBQzVIRCx5Q0FBeUM7QUFDekMsMkNBQTJDO0FBRTNDLElBQU8sVUFBVSxDQThrQmhCO0FBOWtCRCxXQUFPLFVBQVUsRUFBQyxDQUFDO0lBRWpCQSxTQUFTQSxJQUFJQSxDQUFDQSxLQUFLQTtRQUNqQnVILE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLEVBQUVBLENBQUNBO0lBQ2xCQSxDQUFDQTtJQUVEdkgsU0FBU0EsU0FBU0EsQ0FBQ0EsU0FBU0EsRUFBRUEsRUFBRUE7UUFDOUJ3SCxNQUFNQSxDQUFDQSxDQUFDQSxTQUFTQSxJQUFJQSxFQUFFQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxFQUFFQSxDQUFDQTtJQUN0Q0EsQ0FBQ0E7SUFFRHhILFNBQVNBLFdBQVdBLENBQUNBLElBQUlBO1FBQ3ZCeUgsSUFBSUEsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFDbEJBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLEdBQUdBLFNBQVNBLENBQUNBLHVCQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxrQkFBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDOURBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBO0lBQ2hCQSxDQUFDQTtJQUVEekgsU0FBU0EsWUFBWUEsQ0FBQ0EsS0FBZ0JBO1FBQ3BDMEgsSUFBSUEsTUFBTUEsR0FBR0EsRUFBRUEsQ0FBQ0E7UUFDaEJBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLEtBQUtBLEVBQUVBLFVBQUNBLElBQUlBO1lBQzFCQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNqQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDSEEsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7SUFDaEJBLENBQUNBO0lBRUQxSCxTQUFTQSxVQUFVQSxDQUFDQSxJQUFJQSxFQUFFQSxTQUFTQSxFQUFFQSxNQUFNQTtRQUN6QzJILE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLFVBQUNBLEdBQUdBO1lBQ3JCQSxNQUFNQSxDQUFDQSx1QkFBWUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsS0FBS0EsU0FBU0EsSUFBSUEsMEJBQWVBLENBQUNBLE1BQU1BLEVBQUVBLG9CQUFTQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNwRkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDTEEsQ0FBQ0E7SUFFRDNILEFBR0FBOztPQURHQTtRQUNVQSxzQkFBc0JBO1FBQW5DNEgsU0FBYUEsc0JBQXNCQTtZQUMxQkMsZUFBVUEsR0FBcUJBLElBQUlBLENBQUNBO1lBQ3BDQSxTQUFJQSxHQUFHQSxFQUFFQSxDQUFDQTtZQUNWQSxhQUFRQSxHQUFHQSxFQUFFQSxDQUFDQTtZQUNkQSwyQkFBc0JBLEdBQUdBLEVBQUVBLENBQUNBO1lBTzVCQSxTQUFJQSxHQUFHQSxFQUFFQSxDQUFDQTtZQUNWQSxVQUFLQSxHQUFHQSxFQUFFQSxDQUFDQTtZQUlsQkEseUJBQXlCQTtZQUNsQkEsV0FBTUEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDWkEsY0FBU0EsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDZkEsV0FBTUEsR0FBR0EsS0FBS0EsQ0FBQ0E7WUFDZkEscUJBQWdCQSxHQUFHQSxFQUFFQSxDQUFDQTtZQUU3QkEsNEJBQTRCQTtZQUNyQkEsZUFBVUEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDaEJBLGtCQUFhQSxHQUFHQSxFQUFFQSxDQUFDQTtZQUNuQkEsZ0NBQTJCQSxHQUFHQSxFQUFFQSxDQUFDQTtZQUNqQ0EsY0FBU0EsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFFZkEsYUFBUUEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDZEEsYUFBUUEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDZEEsZUFBVUEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFFaEJBLFlBQU9BLEdBQUdBLEtBQUtBLENBQUNBO1lBQ2hCQSxnQkFBV0EsR0FBR0EsS0FBS0EsQ0FBQ0E7WUFFcEJBLFVBQUtBLEdBQUdBO1lBQ2ZBLENBQUNBLENBQUNBO1FBbWNKQSxDQUFDQTtRQWxlQ0Qsc0JBQVdBLDBEQUFzQkE7aUJBQWpDQTtnQkFDRUUsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0Esc0JBQXNCQSxDQUFDQTtZQUNyQ0EsQ0FBQ0E7aUJBQ0RGLFVBQWtDQSxzQkFBaUNBO2dCQUNqRUUsSUFBSUEsQ0FBQ0Esc0JBQXNCQSxHQUFHQSxzQkFBc0JBLENBQUNBO1lBQ3ZEQSxDQUFDQTs7O1dBSEFGO1FBTURBLHNCQUFXQSw4Q0FBVUE7aUJBQXJCQTtnQkFDRUcsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsVUFBVUEsQ0FBQ0E7WUFDcENBLENBQUNBOzs7V0FBQUg7UUF1Qk1BLDZDQUFZQSxHQUFuQkE7WUFDRUksTUFBTUEsQ0FBQ0EsMkJBQWdCQSxDQUFDQTtRQUMxQkEsQ0FBQ0E7UUFFTUoseUNBQVFBLEdBQWZBLFVBQWdCQSxJQUFJQTtZQUNsQkssSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsSUFBSUEsSUFBSUEsQ0FBQ0E7UUFDcENBLENBQUNBO1FBRU1MLDJDQUFVQSxHQUFqQkEsVUFBa0JBLFNBQVNBLEVBQUVBLEVBQUVBO1lBQzdCTSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQSxTQUFTQSxDQUFDQSxTQUFTQSxFQUFFQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN0REEsQ0FBQ0E7UUFFTU4seURBQXdCQSxHQUEvQkEsVUFBZ0NBLFNBQVNBLEVBQUVBLEVBQUVBO1lBQzNDTyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSwyQkFBMkJBLENBQUNBLFNBQVNBLENBQUNBLFNBQVNBLEVBQUVBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1FBQ3BFQSxDQUFDQTtRQUVNUCx1Q0FBTUEsR0FBYkEsVUFBY0EsU0FBU0EsRUFBRUEsRUFBRUE7WUFDekJRLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLFNBQVNBLENBQUNBLFNBQVNBLEVBQUVBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1FBQ2xEQSxDQUFDQTtRQUVNUixpREFBZ0JBLEdBQXZCQSxVQUF3QkEsU0FBbUNBO1lBQW5DUyx5QkFBbUNBLEdBQW5DQSxZQUFZQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEVBQUVBO1lBQ3pEQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxFQUFFQSxFQUFFQSxTQUFTQSxFQUFFQSxTQUFTQSxFQUFFQSxDQUFDQSxDQUFDQTtRQUN2REEsQ0FBQ0E7UUFFRFQ7O1dBRUdBO1FBQ0lBLGlEQUFnQkEsR0FBdkJBO1lBQ0VVLElBQUlBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBO1lBQ2xCQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDcEJBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLGlCQUFpQkEsQ0FBQ0E7WUFDN0NBLENBQUNBO1lBQ0RBLE1BQU1BLENBQUNBLE1BQU1BLElBQUlBLDJCQUFnQkEsQ0FBQ0E7UUFDcENBLENBQUNBO1FBRVNWLHdEQUF1QkEsR0FBakNBLFVBQWtDQSxNQUFNQSxFQUFFQSxTQUFpQkE7WUFDekRXLElBQUlBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBO1lBQ2xCQSxJQUFJQSxFQUFFQSxHQUFHQSxrQkFBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7WUFDekJBLEVBQUVBLENBQUNBLENBQUNBLEVBQUVBLElBQUlBLFNBQVNBLENBQUNBLENBQUNBLENBQUNBO2dCQUNwQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsSUFBSUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBQ0EsUUFBUUE7b0JBQ3RDQSxJQUFJQSxRQUFRQSxHQUFHQSxRQUFRQSxDQUFDQSxRQUFRQSxDQUFDQTtvQkFDakNBLEVBQUVBLENBQUNBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBO3dCQUNiQSxJQUFJQSxXQUFXQSxHQUFHQSxRQUFRQSxDQUFDQSxXQUFXQSxJQUFJQSxFQUFFQSxDQUFDQTt3QkFDN0NBLElBQUlBLE9BQU9BLEdBQUdBLFdBQVdBLENBQUNBLFVBQVVBLEdBQUdBLEVBQUVBLEdBQUdBLFVBQVVBLENBQUNBLElBQUlBLFdBQVdBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsQ0FBQ0E7d0JBQzFGQSxFQUFFQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQTs0QkFDWkEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsT0FBT0EsSUFBSUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBQ0EsSUFBSUE7Z0NBQ3BDQSxJQUFJQSxVQUFVQSxHQUFHQSxrQkFBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7Z0NBQy9CQSxFQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxLQUFLQSxVQUFVQSxDQUFDQSxDQUFDQSxDQUFDQTtvQ0FDdEJBLE1BQU1BLENBQUNBLFFBQVFBLEdBQUdBLE9BQU9BLENBQUNBO2dDQUM1QkEsQ0FBQ0E7NEJBQ0hBLENBQUNBLENBQUNBLENBQUNBO3dCQUNMQSxDQUFDQTtvQkFDSEEsQ0FBQ0E7Z0JBQ0hBLENBQUNBLENBQUNBLENBQUNBO2dCQUNIQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxJQUFJQSxFQUFFQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFDQSxPQUFPQTtvQkFDcENBLElBQUlBLFFBQVFBLEdBQUdBLE9BQU9BLENBQUNBLFFBQVFBLENBQUNBO29CQUNoQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsUUFBUUEsSUFBSUEsQ0FBQ0EsTUFBTUEsSUFBSUEsUUFBUUEsS0FBS0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7d0JBQy9DQSxJQUFJQSxPQUFPQSxHQUFHQSx1QkFBWUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7d0JBQ3JDQSxJQUFJQSxHQUFHQSxHQUFHQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQSxPQUFPQSxFQUFFQSxTQUFTQSxDQUFDQSxDQUFDQSxDQUFDQTt3QkFDdERBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLEVBQUVBLFVBQUNBLEtBQUtBOzRCQUN6QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsS0FBS0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0NBQ2pCQSxNQUFNQSxDQUFDQSxRQUFRQSxHQUFHQSxPQUFPQSxDQUFDQTtnQ0FDMUJBLE1BQU1BLENBQUNBLE9BQU9BLEdBQUdBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBO2dDQUNqQ0EsTUFBTUEsQ0FBQ0EsS0FBS0EsR0FBR0EsT0FBT0EsQ0FBQ0E7NEJBQ3pCQSxDQUFDQTt3QkFDSEEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ0xBLENBQUNBO2dCQUNIQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNMQSxDQUFDQTtZQUNEQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDckJBLE1BQU1BLENBQUNBLFFBQVFBLEdBQUdBLHlCQUFjQSxDQUFDQTtZQUNuQ0EsQ0FBQ0E7UUFDSEEsQ0FBQ0E7UUFFTVgsMENBQVNBLEdBQWhCQTtZQUFBWSxpQkE2S0NBO1lBNUtDQSxJQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUNwQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsSUFBSUEsSUFBSUEsQ0FBQ0Esc0JBQXNCQSxJQUFJQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDOURBLElBQUlBLENBQUNBLGFBQWFBLEdBQUdBLEVBQUVBLENBQUNBO2dCQUN4QkEsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsRUFBRUEsQ0FBQ0E7Z0JBQ3BCQSxJQUFJQSxDQUFDQSwyQkFBMkJBLEdBQUdBLEVBQUVBLENBQUNBO2dCQUV0Q0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBQ0EsR0FBR0E7b0JBQ3BCQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQTt3QkFBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsR0FBR0EsS0FBS0EsQ0FBQ0E7b0JBQ2hDQSxLQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQTtvQkFDL0JBLElBQUlBLElBQUlBLEdBQUdBLGtCQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtvQkFDeEJBLEdBQUdBLENBQUNBLFdBQVdBLEdBQUdBLFVBQVVBLENBQUNBLGNBQWNBLENBQUNBLG9CQUFTQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDNURBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO3dCQUNUQSxHQUFHQSxDQUFDQSxXQUFXQSxJQUFJQSxtQ0FBd0JBLEdBQUdBLE9BQU9BLEdBQUdBLElBQUlBLENBQUNBO29CQUMvREEsQ0FBQ0E7b0JBQ0RBLEdBQUdBLENBQUNBLFFBQVFBLEdBQUdBLHlCQUFjQSxDQUFDQTtvQkFDOUJBLEtBQUlBLENBQUNBLHNCQUFzQkEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7b0JBQ2pDQSxHQUFHQSxDQUFDQSxlQUFlQSxHQUFHQSxFQUFFQSxDQUFDQTtvQkFDekJBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBLE1BQU1BLEVBQUVBLFlBQVlBLENBQUNBLENBQUNBLEVBQUVBLFVBQUNBLFNBQVNBO3dCQUNuRUEsSUFBSUEsS0FBS0EsR0FBR0EsU0FBU0EsQ0FBQ0EsS0FBS0EsQ0FBQ0E7d0JBQzVCQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTs0QkFDVkEsSUFBSUEsR0FBR0EsR0FBR0EsS0FBS0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7NEJBQ2pDQSxFQUFFQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQ0FDWkEsS0FBS0EsR0FBR0EsS0FBS0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7NEJBQ2xDQSxDQUFDQTs0QkFDREEsSUFBSUEsS0FBS0EsR0FBR0EsS0FBS0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7NEJBQ2hDQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtnQ0FDakJBLElBQUlBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBO2dDQUNsQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0NBQ3RCQSxNQUFNQSxHQUFHQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQ0FDckNBLENBQUNBO2dDQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtvQ0FDN0JBLE1BQU1BLEdBQUdBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLEdBQUdBLEdBQUdBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dDQUNyQ0EsQ0FBQ0E7Z0NB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Q0FBQ0E7Z0JBQ25CQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQSxVQUFVQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQSxFQUFFQSxVQUFDQSxLQUFLQSxFQUFFQSxHQUFHQTtvQkFDOUVBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLEtBQUtBLFNBQVNBLENBQUNBLENBQUNBLENBQUNBO3dCQUN0QkEsQUFDQUEsc0RBRHNEQTt3QkFDdERBLE1BQU1BLENBQUNBO29CQUNUQSxDQUFDQTtvQkFDREEsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7d0JBQ2pCQSxHQUFHQSxFQUFFQSxHQUFHQTt3QkFDUkEsS0FBS0EsRUFBRUEsS0FBS0E7cUJBQ2JBLENBQUNBLENBQUNBO2dCQUNMQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFFSEEsQUFDQUEsdUZBRHVGQTtnQkFDdkZBLE1BQU1BLENBQUNBLE1BQU1BLEdBQUdBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFVBQUNBLENBQUNBLEVBQUVBLENBQUNBO29CQUN0Q0EsU0FBU0EsU0FBU0EsQ0FBQ0EsR0FBR0E7d0JBQ3BCaUssTUFBTUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsSUFBSUEsQ0FBQ0E7b0JBQ3RDQSxDQUFDQTtvQkFDRGpLLElBQUlBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO29CQUNsQkEsSUFBSUEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7b0JBQ2xCQSxJQUFJQSxFQUFFQSxHQUFHQSxTQUFTQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtvQkFDdkJBLElBQUlBLEVBQUVBLEdBQUdBLFNBQVNBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO29CQUN2QkEsSUFBSUEsSUFBSUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FB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O29CQUNQQSxLQUFLQSx1QkFBWUEsQ0FBQ0EsT0FBT0E7d0JBQ3hCQSxLQUFLQSxDQUFDQSxnQkFBZ0JBLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO3dCQUNoQ0EsS0FBS0EsQ0FBQ0E7b0JBQ1BBO3dCQUNDQSxHQUFHQSxDQUFDQSxLQUFLQSxDQUFDQSxvQ0FBb0NBLEVBQUVBLE1BQU1BLENBQUNBLENBQUNBO2dCQUMxREEsQ0FBQ0E7WUFDRkEsQ0FBQ0E7UUFDRkEsQ0FBQ0EsQ0FBQUE7UUFDREEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7SUFDYkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7QUFDTEEsQ0FBQ0EsRUFwVk0sVUFBVSxLQUFWLFVBQVUsUUFvVmhCIiwiZmlsZSI6ImNvbXBpbGVkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2xpYnMvaGF3dGlvLWZvcmdlL2RlZnMuZC50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9saWJzL2hhd3Rpby1mb3Jtcy9kZWZzLmQudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vbGlicy9oYXd0aW8tdWkvZGVmcy5kLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2xpYnMvaGF3dGlvLXV0aWxpdGllcy9kZWZzLmQudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vbGlicy9oYXd0aW8td2lraS9kZWZzLmQudHNcIi8+XG4iLCJtb2R1bGUgS3ViZXJuZXRlcyB7XG5cbiAgZXhwb3J0IGNsYXNzIGNvbnN0cyB7XG4gICAgZ2V0IE5BTUVTUEFDRV9TVE9SQUdFX0tFWSgpOnN0cmluZyB7IHJldHVybiBcIms4c1NlbGVjdGVkTmFtZXNwYWNlXCI7IH1cbiAgfVxuXG4gIGV4cG9ydCB2YXIgQ29uc3RhbnRzID0gbmV3IGNvbnN0cygpO1xuXHRcbiAgZXhwb3J0IGludGVyZmFjZSBBcGlMb2NhdGlvbiB7XG4gICAgcHJvdG8/OnN0cmluZztcbiAgICBob3N0UG9ydDpzdHJpbmc7XG4gICAgcHJlZml4OnN0cmluZztcbiAgfVxuICBcbiAgZXhwb3J0IGludGVyZmFjZSBBcGlMb2NhdGlvbnMge1xuICAgIG9wZW5zaGlmdD86IEFwaUxvY2F0aW9uO1xuICAgIGs4cz86IEFwaUxvY2F0aW9uO1xuICB9XG4gIFxuICBleHBvcnQgaW50ZXJmYWNlIE9BdXRoQ29uZmlnIHtcbiAgICBvYXV0aF9hdXRob3JpemVfdXJpOnN0cmluZztcbiAgICBvYXV0aF9jbGllbnRfaWQ6c3RyaW5nO1xuICB9XG4gIFxuICBleHBvcnQgaW50ZXJmYWNlIE9wZW5zaGlmdENvbmZpZyB7XG4gICAgYXBpPzogQXBpTG9jYXRpb25zO1xuICAgIGF1dGg/OiBPQXV0aENvbmZpZztcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgS3ViZXJuZXRlc1N0YXRlIHtcbiAgICBuYW1lc3BhY2VzOiBBcnJheTxzdHJpbmc+O1xuICAgIHNlbGVjdGVkTmFtZXNwYWNlOiBzdHJpbmc7XG4gIH1cblxuXHRleHBvcnQgY2xhc3MgV2F0Y2hUeXBlcyB7XG5cdFx0cHVibGljIHN0YXRpYyBnZXQgTkFNRVNQQUNFUygpOnN0cmluZyB7IHJldHVybiBcIm5hbWVzcGFjZXNcIjsgfVxuXHRcdHB1YmxpYyBzdGF0aWMgZ2V0IEVORFBPSU5UUygpOnN0cmluZyB7IHJldHVybiBcImVuZHBvaW50c1wiOyB9XG5cdFx0cHVibGljIHN0YXRpYyBnZXQgUE9EUygpOnN0cmluZyB7IHJldHVybiBcInBvZHNcIjsgfVxuXHRcdHB1YmxpYyBzdGF0aWMgZ2V0IFJFUExJQ0FUSU9OX0NPTlRST0xMRVJTKCk6c3RyaW5nIHsgcmV0dXJuIFwicmVwbGljYXRpb25jb250cm9sbGVyc1wiOyB9XG5cdFx0cHVibGljIHN0YXRpYyBnZXQgU0VSVklDRVMoKTpzdHJpbmcgeyByZXR1cm4gXCJzZXJ2aWNlc1wiOyB9XG5cdFx0cHVibGljIHN0YXRpYyBnZXQgVEVNUExBVEVTKCk6c3RyaW5nIHsgcmV0dXJuIFwidGVtcGxhdGVzXCI7IH1cblx0XHRwdWJsaWMgc3RhdGljIGdldCBST1VURVMoKTpzdHJpbmcgeyByZXR1cm4gXCJyb3V0ZXNcIjsgfVxuXHRcdHB1YmxpYyBzdGF0aWMgZ2V0IEJVSUxEX0NPTkZJR1MoKTpzdHJpbmcgeyByZXR1cm4gXCJidWlsZGNvbmZpZ3NcIjsgfVxuXHRcdHB1YmxpYyBzdGF0aWMgZ2V0IEJVSUxEUygpOnN0cmluZyB7IHJldHVybiBcImJ1aWxkc1wiOyB9XG5cdFx0cHVibGljIHN0YXRpYyBnZXQgREVQTE9ZTUVOVF9DT05GSUdTKCk6c3RyaW5nIHsgcmV0dXJuIFwiZGVwbG95bWVudGNvbmZpZ3NcIjsgfVxuXHRcdHB1YmxpYyBzdGF0aWMgZ2V0IElNQUdFX1NUUkVBTVMoKTpzdHJpbmcgeyByZXR1cm4gXCJpbWFnZXN0cmVhbXNcIjsgfVxuXHRcdHB1YmxpYyBzdGF0aWMgZ2V0IFBPTElDSUVTKCk6c3RyaW5nIHsgcmV0dXJuIFwicG9saWNpZXNcIjsgfVxuXHRcdHB1YmxpYyBzdGF0aWMgZ2V0IFBPTElDWV9CSU5ESU5HUygpOnN0cmluZyB7IHJldHVybiBcInBvbGljeWJpbmRpbmdzXCI7IH1cblx0XHRwdWJsaWMgc3RhdGljIGdldCBST0xFX0JJTkRJTkdTKCk6c3RyaW5nIHsgcmV0dXJuIFwicm9sZWJpbmRpbmdzXCI7IH1cblx0XHRwdWJsaWMgc3RhdGljIGdldCBST0xFUygpOnN0cmluZyB7IHJldHVybiBcInJvbGVzXCI7IH1cblx0fVxuXG4gIGV4cG9ydCBjbGFzcyBOYW1lc3BhY2VkVHlwZXMge1xuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IGs4c1R5cGVzKCk6QXJyYXk8c3RyaW5nPiB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICBXYXRjaFR5cGVzLkVORFBPSU5UUyxcbiAgICAgICAgV2F0Y2hUeXBlcy5QT0RTLFxuICAgICAgICBXYXRjaFR5cGVzLlJFUExJQ0FUSU9OX0NPTlRST0xMRVJTLFxuICAgICAgICBXYXRjaFR5cGVzLlNFUlZJQ0VTXG4gICAgICBdO1xuICAgIH1cbiAgICBwdWJsaWMgc3RhdGljIGdldCBvc1R5cGVzKCk6QXJyYXk8c3RyaW5nPiB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICBXYXRjaFR5cGVzLlRFTVBMQVRFUyxcbiAgICAgICAgV2F0Y2hUeXBlcy5CVUlMRF9DT05GSUdTLFxuICAgICAgICBXYXRjaFR5cGVzLlJPVVRFUyxcbiAgICAgICAgV2F0Y2hUeXBlcy5CVUlMRFMsXG4gICAgICAgIFdhdGNoVHlwZXMuQlVJTERfQ09ORklHUyxcbiAgICAgICAgV2F0Y2hUeXBlcy5ERVBMT1lNRU5UX0NPTkZJR1MsXG4gICAgICAgIFdhdGNoVHlwZXMuSU1BR0VfU1RSRUFNUyxcbiAgICAgICAgV2F0Y2hUeXBlcy5QT0xJQ0lFUyxcbiAgICAgICAgV2F0Y2hUeXBlcy5QT0xJQ1lfQklORElOR1MsXG4gICAgICAgIC8vV2F0Y2hUeXBlcy5ST0xFX0JJTkRJTkdTLFxuICAgICAgICAvL1dhdGNoVHlwZXMuUk9MRVNcbiAgICAgIF07XG4gICAgfVxuICB9XG5cdFxuXHRleHBvcnQgY2xhc3MgV2F0Y2hBY3Rpb25zIHtcblx0XHRwdWJsaWMgc3RhdGljIGdldCBBTlkoKTpzdHJpbmcgeyByZXR1cm4gXCIqXCI7IH1cblx0XHRwdWJsaWMgc3RhdGljIGdldCBBRERFRCgpOnN0cmluZyB7IHJldHVybiBcIkFEREVEXCI7IH1cblx0XHRwdWJsaWMgc3RhdGljIGdldCBNT0RJRklFRCgpOnN0cmluZyB7IHJldHVybiBcIk1PRElGSUVEXCI7IH1cblx0XHRwdWJsaWMgc3RhdGljIGdldCBERUxFVEVEKCk6c3RyaW5nIHsgcmV0dXJuIFwiREVMRVRFRFwiOyB9XG5cdH1cblx0XG5cdGV4cG9ydCBpbnRlcmZhY2UgT2JqZWN0TWFwIHtcblx0XHRbdWlkOnN0cmluZ106IGFueTtcdFx0XG5cdH1cblx0XG5cdGV4cG9ydCBpbnRlcmZhY2UgV2F0Y2hlclNlcnZpY2Uge1xuXHRcdGhhc1dlYlNvY2tldDogYm9vbGVhbjtcblx0XHRhZGRDdXN0b21pemVyOiAodHlwZTogc3RyaW5nLCBjdXN0b21pemVyOiAob2JqOmFueSkgPT4gdm9pZCkgPT4gdm9pZDtcblx0XHRnZXRUeXBlczogKCkgPT4gQXJyYXk8c3RyaW5nPjtcblx0XHRnZXROYW1lc3BhY2U6ICgpID0+IHN0cmluZztcblx0XHRzZXROYW1lc3BhY2U6IChuYW1lc3BhY2U6IHN0cmluZykgPT4gdm9pZDtcblx0XHRnZXRPYmplY3RzOiAodHlwZTogc3RyaW5nKSA9PiBBcnJheTxhbnk+O1xuXHRcdGdldE9iamVjdE1hcDogKHR5cGU6IHN0cmluZykgPT4gT2JqZWN0TWFwO1xuXHRcdGFkZEFjdGlvbjogKHR5cGU6IHN0cmluZywgYWN0aW9uOiBzdHJpbmcsIGZuOiAob2JqOmFueSkgPT4gdm9pZCkgPT4gdm9pZDtcblx0XHRyZWdpc3Rlckxpc3RlbmVyOiAoZm46KG9iamVjdHM6T2JqZWN0TWFwKSA9PiB2b2lkKSA9PiB2b2lkO1xuXHR9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBLdWJlUG9kIHtcbiAgICBpZDpzdHJpbmc7XG4gICAgbmFtZXNwYWNlOnN0cmluZztcbiAgfVxuXG5cdFxufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNJbnRlcmZhY2VzLnRzXCIvPlxubW9kdWxlIEt1YmVybmV0ZXMge1xuXG4gIGV4cG9ydCB2YXIgY29udGV4dCA9ICcva3ViZXJuZXRlcyc7XG4gIGV4cG9ydCB2YXIgaGFzaCA9ICcjJyArIGNvbnRleHQ7XG4gIGV4cG9ydCB2YXIgZGVmYXVsdFJvdXRlID0gaGFzaCArICcvYXBwcyc7XG4gIGV4cG9ydCB2YXIgcGx1Z2luTmFtZSA9ICdLdWJlcm5ldGVzJztcbiAgZXhwb3J0IHZhciBwbHVnaW5QYXRoID0gJ3BsdWdpbnMva3ViZXJuZXRlcy8nO1xuICBleHBvcnQgdmFyIHRlbXBsYXRlUGF0aCA9IHBsdWdpblBhdGggKyAnaHRtbC8nO1xuICBleHBvcnQgdmFyIGxvZzpMb2dnaW5nLkxvZ2dlciA9IExvZ2dlci5nZXQocGx1Z2luTmFtZSk7XG5cbiAgZXhwb3J0IHZhciBrZWVwUG9sbGluZ01vZGVsID0gdHJ1ZTtcblxuICBleHBvcnQgdmFyIGRlZmF1bHRJY29uVXJsID0gQ29yZS51cmwoXCIvaW1nL2t1YmVybmV0ZXMuc3ZnXCIpO1xuICBleHBvcnQgdmFyIGhvc3RJY29uVXJsID0gQ29yZS51cmwoXCIvaW1nL2hvc3Quc3ZnXCIpO1xuXG4gIC8vIHRoaXMgZ2V0cyBzZXQgYXMgYSBwcmUtYm9vdHN0cmFwIHRhc2tcbiAgZXhwb3J0IHZhciBvc0NvbmZpZzpPcGVuc2hpZnRDb25maWcgPSB1bmRlZmluZWQ7XG4gIGV4cG9ydCB2YXIgbWFzdGVyVXJsID0gXCJcIjtcblxuICBleHBvcnQgdmFyIGRlZmF1bHRBcGlWZXJzaW9uID0gXCJ2MVwiO1xuICBleHBvcnQgdmFyIGRlZmF1bHRPU0FwaVZlcnNpb24gPSBcInYxXCI7XG4gIGV4cG9ydCB2YXIgbGFiZWxGaWx0ZXJUZXh0U2VwYXJhdG9yID0gXCIsXCI7XG5cbiAgZXhwb3J0IHZhciBkZWZhdWx0TmFtZXNwYWNlID0gXCJkZWZhdWx0XCI7XG5cbiAgZXhwb3J0IHZhciBhcHBTdWZmaXggPSBcIi5hcHBcIjtcblxuICAvLyBrdWJlcm5ldGVzIHNlcnZpY2UgbmFtZXNcbiAgZXhwb3J0IHZhciBraWJhbmFTZXJ2aWNlTmFtZSA9IFwia2liYW5hXCI7XG4gIGV4cG9ydCB2YXIgZmFicmljOEZvcmdlU2VydmljZU5hbWUgPSBcImZhYnJpYzgtZm9yZ2VcIjtcbiAgZXhwb3J0IHZhciBnb2dzU2VydmljZU5hbWUgPSBcImdvZ3NcIjtcblxuICBleHBvcnQgZnVuY3Rpb24ga3ViZXJuZXRlc05hbWVzcGFjZVBhdGgoKSB7XG4gICAgdmFyIG5zID0gY3VycmVudEt1YmVybmV0ZXNOYW1lc3BhY2UoKTtcbiAgICBpZiAobnMpIHtcbiAgICAgIHJldHVybiBcIi9uYW1lc3BhY2VzL1wiICsgbnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBhcGlQcmVmaXgoKSB7XG4gICAgdmFyIHByZWZpeCA9IENvcmUucGF0aEdldChvc0NvbmZpZywgWydhcGknLCAnazhzJywgJ3ByZWZpeCddKTtcbiAgICBpZiAoIXByZWZpeCkge1xuICAgICAgcHJlZml4ID0gJ2FwaSc7XG4gICAgfVxuICAgIHJldHVybiBDb3JlLnRyaW1MZWFkaW5nKHByZWZpeCwgJy8nKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBvc0FwaVByZWZpeCgpIHtcbiAgICB2YXIgcHJlZml4ID0gQ29yZS5wYXRoR2V0KG9zQ29uZmlnLCBbJ2FwaScsICdvcGVuc2hpZnQnLCAncHJlZml4J10pO1xuICAgIGlmICghcHJlZml4KSB7XG4gICAgICBwcmVmaXggPSAnb2FwaSc7XG4gICAgfVxuICAgIHJldHVybiBDb3JlLnRyaW1MZWFkaW5nKHByZWZpeCwgJy8nKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBtYXN0ZXJBcGlVcmwoKSB7XG4gICAgcmV0dXJuIG1hc3RlclVybCB8fCBcIlwiO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGt1YmVybmV0ZXNBcGlQcmVmaXgoKSB7XG4gICAgcmV0dXJuIFVybEhlbHBlcnMuam9pbihhcGlQcmVmaXgoKSwgZGVmYXVsdEFwaVZlcnNpb24pO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIG9wZW5zaGlmdEFwaVByZWZpeCgpIHtcbiAgICByZXR1cm4gVXJsSGVscGVycy5qb2luKG9zQXBpUHJlZml4KCksIGRlZmF1bHRPU0FwaVZlcnNpb24pO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHByZWZpeEZvclR5cGUodHlwZTpzdHJpbmcpIHtcbiAgICBpZiAodHlwZSA9PT0gV2F0Y2hUeXBlcy5OQU1FU1BBQ0VTKSB7XG4gICAgICByZXR1cm4ga3ViZXJuZXRlc0FwaVByZWZpeCgpO1xuICAgIH1cbiAgICBpZiAoXy5hbnkoTmFtZXNwYWNlZFR5cGVzLms4c1R5cGVzLCAodCkgPT4gdCA9PT0gdHlwZSkpIHtcbiAgICAgIHJldHVybiBrdWJlcm5ldGVzQXBpUHJlZml4KCk7XG4gICAgfVxuICAgIGlmIChfLmFueShOYW1lc3BhY2VkVHlwZXMub3NUeXBlcywgKHQpID0+IHQgPT09IHR5cGUpKSB7XG4gICAgICByZXR1cm4gb3BlbnNoaWZ0QXBpUHJlZml4KCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGt1YmVybmV0ZXNBcGlVcmwoKSB7XG4gICAgcmV0dXJuIFVybEhlbHBlcnMuam9pbihtYXN0ZXJBcGlVcmwoKSwga3ViZXJuZXRlc0FwaVByZWZpeCgpKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBvcGVuc2hpZnRBcGlVcmwoKSB7XG4gICAgcmV0dXJuIFVybEhlbHBlcnMuam9pbihtYXN0ZXJBcGlVcmwoKSwgb3BlbnNoaWZ0QXBpUHJlZml4KCkpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZU9yQ3JlYXRlT2JqZWN0KG9iamVjdCwgS3ViZXJuZXRlc01vZGVsLCBzdWNjZXNzPzogKGRhdGEpID0+IHZvaWQsIGVycm9yPzogKGVycm9yKSA9PiB2b2lkKSB7XG4gICAgdmFyIGtpbmQgPSBnZXRLaW5kKG9iamVjdCk7XG4gICAgaWYgKGtpbmQgPT09IFwiTGlzdFwiKSB7XG4gICAgICBsb2cuZGVidWcoXCJPYmplY3QgaXMgYSBsaXN0LCBkZXBsb3lpbmcgYWxsIG9iamVjdHNcIik7XG4gICAgICBfLmZvckVhY2gob2JqZWN0Lml0ZW1zLCAob2JqKSA9PiB7XG4gICAgICAgIGxvZy5kZWJ1ZyhcIkRlcGxveWluZzogXCIsIG9iaik7XG4gICAgICAgIHVwZGF0ZU9yQ3JlYXRlT2JqZWN0KG9iaiwgS3ViZXJuZXRlc01vZGVsLCBzdWNjZXNzLCBlcnJvcik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFraW5kKSB7XG4gICAgICBsb2cuZGVidWcoXCJPYmplY3Q6IFwiLCBvYmplY3QsIFwiIGhhcyBubyBvYmplY3QgdHlwZVwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAga2luZCA9IGtpbmQudG9Mb3dlckNhc2UoKS5wbHVyYWxpemUoKTtcbiAgICB2YXIgcmVzb3VyY2UgPSBLdWJlcm5ldGVzTW9kZWxba2luZCArICdSZXNvdXJjZSddO1xuICAgIGlmICghcmVzb3VyY2UpIHtcbiAgICAgIGxvZy5kZWJ1ZyhcIlVuYWJsZSB0byBmaW5kIHJlc291cmNlIGZvciBraW5kOiBcIiwga2luZCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBuYW1lID0gZ2V0TmFtZShvYmplY3QpO1xuICAgIGlmICghbmFtZSkge1xuICAgICAgbG9nLmRlYnVnKFwiT2JqZWN0IGhhcyBubyBuYW1lOiBcIiwgb2JqZWN0KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaXNVcGRhdGUgPSBfLmFueShLdWJlcm5ldGVzTW9kZWxba2luZF0sIChuKSA9PiBuID09PSBuYW1lKVxuICAgIHZhciBhY3Rpb24gPSBpc1VwZGF0ZSA/IFwiTW9kaWZpZWRcIiA6IFwiQWRkZWRcIjtcblxuICAgIHZhciBzdWNjZXNzSW50ZXJuYWwgPSAoZGF0YSkgPT4ge1xuICAgICAgbG9nLmRlYnVnKGFjdGlvbiwgZGF0YSk7XG4gICAgICBpZiAoIWlzVXBkYXRlKSB7XG4gICAgICAgIEt1YmVybmV0ZXNNb2RlbFtraW5kXS5wdXNoKGRhdGEpO1xuICAgICAgfVxuICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgc3VjY2VzcyhkYXRhKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBlcnJvckludGVybmFsID0gKGVycikgPT4ge1xuICAgICAgbG9nLmRlYnVnKFwiRmFpbGVkIHRvIGFkZC9tb2RpZnkgb2JqZWN0OiBcIiwgb2JqZWN0LCBcIiBlcnJvcjogXCIsIGVycik7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgZXJyb3IoZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzVXBkYXRlKSB7XG4gICAgICBsb2cuZGVidWcoXCJPYmplY3QgYWxyZWFkeSBleGlzdHMsIHVwZGF0aW5nLi4uXCIpO1xuICAgICAgcmVzb3VyY2Uuc2F2ZSh7IGlkOiBuYW1lIH0sIG9iamVjdCwgc3VjY2Vzc0ludGVybmFsLCBlcnJvckludGVybmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nLmRlYnVnKFwiT2JqZWN0IGRvZXNuJ3QgZXhpc3QsIGNyZWF0aW5nLi4uXCIpO1xuICAgICAgcmVzb3VyY2UuY3JlYXRlKHt9LCBvYmplY3QsIHN1Y2Nlc3NJbnRlcm5hbCwgZXJyb3JJbnRlcm5hbCk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJlc291cmNlKHRoaW5nOnN0cmluZywgdXJsVGVtcGxhdGU6c3RyaW5nLCAkcmVzb3VyY2U6IG5nLnJlc291cmNlLklSZXNvdXJjZVNlcnZpY2UsIEt1YmVybmV0ZXNNb2RlbCkge1xuICAgIHZhciBwcmVmaXggPSBwcmVmaXhGb3JUeXBlKHRoaW5nKTtcbiAgICBpZiAoIXByZWZpeCkge1xuICAgICAgbG9nLmRlYnVnKFwiSW52YWxpZCB0eXBlIGdpdmVuOiBcIiwgdGhpbmcpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHBhcmFtcyA9IDxhbnk+IHtcbiAgICAgIG5hbWVzcGFjZTogY3VycmVudEt1YmVybmV0ZXNOYW1lc3BhY2VcbiAgICB9XG4gICAgaWYgKHRoaW5nID09PSBcIm5hbWVzcGFjZXNcIikge1xuICAgICAgcGFyYW1zID0ge307XG4gICAgfVxuXG4gICAgdmFyIHVybCA9IFVybEhlbHBlcnMuam9pbihtYXN0ZXJBcGlVcmwoKSwgcHJlZml4LCB1cmxUZW1wbGF0ZSk7XG4gICAgbG9nLmRlYnVnKFwiVXJsIGZvciBcIiwgdGhpbmcsIFwiOiBcIiwgdXJsKTtcbiAgICB2YXIgcmVzb3VyY2UgPSAkcmVzb3VyY2UodXJsLCBudWxsLCB7XG4gICAgICBxdWVyeTogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiBmYWxzZSwgcGFyYW1zOiBwYXJhbXN9LFxuICAgICAgY3JlYXRlOiB7IG1ldGhvZDogJ1BPU1QnLCBwYXJhbXM6IHBhcmFtc30sXG4gICAgICBzYXZlOiB7IG1ldGhvZDogJ1BVVCcsIHBhcmFtczogcGFyYW1zfSxcbiAgICAgIGRlbGV0ZTogeyBtZXRob2Q6ICdERUxFVEUnLCBwYXJhbXM6IF8uZXh0ZW5kKHtcbiAgICAgICAgaWQ6ICdAaWQnXG4gICAgICB9LCBwYXJhbXMpfVxuICAgIH0pO1xuICAgIHJldHVybiByZXNvdXJjZTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBpbWFnZVJlcG9zaXRvcmllc1Jlc3RVUkwoKSB7XG4gICAgcmV0dXJuIFVybEhlbHBlcnMuam9pbihvcGVuc2hpZnRBcGlVcmwoKSwga3ViZXJuZXRlc05hbWVzcGFjZVBhdGgoKSwgXCIvaW1hZ2VzdHJlYW1zXCIpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGRlcGxveW1lbnRDb25maWdzUmVzdFVSTCgpIHtcbiAgICByZXR1cm4gVXJsSGVscGVycy5qb2luKG9wZW5zaGlmdEFwaVVybCgpLCBrdWJlcm5ldGVzTmFtZXNwYWNlUGF0aCgpLCBcIi9kZXBsb3ltZW50Y29uZmlnc1wiKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBidWlsZHNMb2dzUmVzdFVSTCgpIHtcbiAgICByZXR1cm4gVXJsSGVscGVycy5qb2luKG9wZW5zaGlmdEFwaVVybCgpLCBrdWJlcm5ldGVzTmFtZXNwYWNlUGF0aCgpLCBcIi9wcm94eS9idWlsZGxvZ3NcIik7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gYnVpbGRzUmVzdFVSTCgpIHtcbiAgICByZXR1cm4gVXJsSGVscGVycy5qb2luKG9wZW5zaGlmdEFwaVVybCgpLCBrdWJlcm5ldGVzTmFtZXNwYWNlUGF0aCgpLCBcIi9idWlsZHNcIik7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gYnVpbGRDb25maWdIb29rc1Jlc3RVUkwoKSB7XG4gICAgcmV0dXJuIFVybEhlbHBlcnMuam9pbihvcGVuc2hpZnRBcGlVcmwoKSwga3ViZXJuZXRlc05hbWVzcGFjZVBhdGgoKSwgXCIvYnVpbGRjb25maWdob29rc1wiKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBidWlsZENvbmZpZ3NSZXN0VVJMKCkge1xuICAgIHJldHVybiBVcmxIZWxwZXJzLmpvaW4ob3BlbnNoaWZ0QXBpVXJsKCksIGt1YmVybmV0ZXNOYW1lc3BhY2VQYXRoKCksIFwiL2J1aWxkY29uZmlnc1wiKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiByb3V0ZXNSZXN0VVJMKCkge1xuICAgIHJldHVybiBVcmxIZWxwZXJzLmpvaW4ob3BlbnNoaWZ0QXBpVXJsKCksIGt1YmVybmV0ZXNOYW1lc3BhY2VQYXRoKCksIFwiL3JvdXRlc1wiKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiB0ZW1wbGF0ZXNSZXN0VVJMKCkge1xuICAgIHJldHVybiBVcmxIZWxwZXJzLmpvaW4ob3BlbnNoaWZ0QXBpVXJsKCksIGt1YmVybmV0ZXNOYW1lc3BhY2VQYXRoKCksIFwiL3RlbXBsYXRlc1wiKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBnZXROYW1lc3BhY2UoZW50aXR5KSB7XG4gICAgdmFyIGFuc3dlciA9IENvcmUucGF0aEdldChlbnRpdHksIFtcIm1ldGFkYXRhXCIsIFwibmFtZXNwYWNlXCJdKTtcbiAgICByZXR1cm4gYW5zd2VyID8gYW5zd2VyIDogZGVmYXVsdE5hbWVzcGFjZTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBnZXRMYWJlbHMoZW50aXR5KSB7XG4gICAgdmFyIGFuc3dlciA9IENvcmUucGF0aEdldChlbnRpdHksIFtcIm1ldGFkYXRhXCIsIFwibGFiZWxzXCJdKTtcbiAgICByZXR1cm4gYW5zd2VyID8gYW5zd2VyIDoge307XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gZ2V0TmFtZShlbnRpdHkpIHtcbiAgICByZXR1cm4gQ29yZS5wYXRoR2V0KGVudGl0eSwgW1wibWV0YWRhdGFcIiwgXCJuYW1lXCJdKSB8fCBDb3JlLnBhdGhHZXQoZW50aXR5LCBcIm5hbWVcIikgfHwgQ29yZS5wYXRoR2V0KGVudGl0eSwgXCJpZFwiKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBnZXRLaW5kKGVudGl0eSkge1xuICAgIHJldHVybiBDb3JlLnBhdGhHZXQoZW50aXR5LCBbXCJtZXRhZGF0YVwiLCBcImtpbmRcIl0pIHx8IENvcmUucGF0aEdldChlbnRpdHksIFwia2luZFwiKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBnZXRTZWxlY3RvcihlbnRpdHkpIHtcbiAgICByZXR1cm4gQ29yZS5wYXRoR2V0KGVudGl0eSwgW1wic3BlY1wiLCBcInNlbGVjdG9yXCJdKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBnZXRIb3N0KHBvZCkge1xuICAgIHJldHVybiBDb3JlLnBhdGhHZXQocG9kLCBbXCJzcGVjXCIsIFwiaG9zdFwiXSk7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gZ2V0U3RhdHVzKHBvZCkge1xuICAgIHJldHVybiBDb3JlLnBhdGhHZXQocG9kLCBbXCJzdGF0dXNcIiwgXCJwaGFzZVwiXSk7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gZ2V0UG9ydHMoc2VydmljZSkge1xuICAgIHJldHVybiBDb3JlLnBhdGhHZXQoc2VydmljZSwgW1wic3BlY1wiLCBcInBvcnRzXCJdKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBnZXRDcmVhdGlvblRpbWVzdGFtcChlbnRpdHkpIHtcbiAgICByZXR1cm4gQ29yZS5wYXRoR2V0KGVudGl0eSwgW1wibWV0YWRhdGFcIiwgXCJjcmVhdGlvblRpbWVzdGFtcFwiXSk7XG4gIH07XG5cbiAgLy92YXIgZmFicmljRG9tYWluID0gRmFicmljLmpteERvbWFpbjtcbiAgdmFyIGZhYnJpY0RvbWFpbiA9IFwiaW8uZmFicmljOFwiO1xuICBleHBvcnQgdmFyIG1iZWFuID0gZmFicmljRG9tYWluICsgXCI6dHlwZT1LdWJlcm5ldGVzXCI7XG4gIGV4cG9ydCB2YXIgbWFuYWdlck1CZWFuID0gZmFicmljRG9tYWluICsgXCI6dHlwZT1LdWJlcm5ldGVzTWFuYWdlclwiO1xuICBleHBvcnQgdmFyIGFwcFZpZXdNQmVhbiA9IGZhYnJpY0RvbWFpbiArIFwiOnR5cGU9QXBwVmlld1wiO1xuXG4gIGV4cG9ydCBmdW5jdGlvbiBpc0t1YmVybmV0ZXMod29ya3NwYWNlKSB7XG4gICAgLy8gcmV0dXJuIHdvcmtzcGFjZS50cmVlQ29udGFpbnNEb21haW5BbmRQcm9wZXJ0aWVzKGZhYnJpY0RvbWFpbiwge3R5cGU6IFwiS3ViZXJuZXRlc1wifSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gaXNLdWJlcm5ldGVzVGVtcGxhdGVNYW5hZ2VyKHdvcmtzcGFjZSkge1xuICAgIC8vIHJldHVybiB3b3Jrc3BhY2UudHJlZUNvbnRhaW5zRG9tYWluQW5kUHJvcGVydGllcyhmYWJyaWNEb21haW4sIHt0eXBlOiBcIkt1YmVybmV0ZXNUZW1wbGF0ZU1hbmFnZXJcIn0pO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGlzQXBwVmlldyh3b3Jrc3BhY2UpIHtcbiAgICAvLyByZXR1cm4gd29ya3NwYWNlLnRyZWVDb250YWluc0RvbWFpbkFuZFByb3BlcnRpZXMoZmFicmljRG9tYWluLCB7dHlwZTogXCJBcHBWaWV3XCJ9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBzZXRKc29uKCRzY29wZSwgaWQsIGNvbGxlY3Rpb24pIHtcbiAgICAkc2NvcGUuaWQgPSBpZDtcbiAgICBpZiAoISRzY29wZS5mZXRjaGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghaWQpIHtcbiAgICAgICRzY29wZS5qc29uID0gJyc7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgaXRlbSA9IGNvbGxlY3Rpb24uZmluZCgoaXRlbSkgPT4geyByZXR1cm4gZ2V0TmFtZShpdGVtKSA9PT0gaWQ7IH0pO1xuICAgIGlmIChpdGVtKSB7XG4gICAgICAkc2NvcGUuanNvbiA9IGFuZ3VsYXIudG9Kc29uKGl0ZW0sIHRydWUpO1xuICAgICAgJHNjb3BlLml0ZW0gPSBpdGVtO1xuICAgIH0gZWxzZSB7XG4gICAgICAkc2NvcGUuaWQgPSB1bmRlZmluZWQ7XG4gICAgICAkc2NvcGUuanNvbiA9ICcnO1xuICAgICAgJHNjb3BlLml0ZW0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGxhYmVscyB0ZXh0IHN0cmluZyB1c2luZyB0aGUgPGNvZGU+a2V5MT12YWx1ZTEsa2V5Mj12YWx1ZTIsLi4uLjwvY29kZT4gZm9ybWF0XG4gICAqL1xuICBleHBvcnQgZnVuY3Rpb24gbGFiZWxzVG9TdHJpbmcobGFiZWxzLCBzZXBlcmF0b3JUZXh0ID0gbGFiZWxGaWx0ZXJUZXh0U2VwYXJhdG9yKSB7XG4gICAgdmFyIGFuc3dlciA9IFwiXCI7XG4gICAgYW5ndWxhci5mb3JFYWNoKGxhYmVscywgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgIHZhciBzZXBhcmF0b3IgPSBhbnN3ZXIgPyBzZXBlcmF0b3JUZXh0IDogXCJcIjtcbiAgICAgIGFuc3dlciArPSBzZXBhcmF0b3IgKyBrZXkgKyBcIj1cIiArIHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiBhbnN3ZXI7XG4gIH1cblxuXG4gIGV4cG9ydCBmdW5jdGlvbiBpbml0U2hhcmVkKCRzY29wZSwgJGxvY2F0aW9uLCAkaHR0cCwgJHRpbWVvdXQsICRyb3V0ZVBhcmFtcywgS3ViZXJuZXRlc01vZGVsLCBLdWJlcm5ldGVzU3RhdGUsIEt1YmVybmV0ZXNBcGlVUkwpIHtcblxuICAgIHZhciBpbmplY3RvciA9IEhhd3Rpb0NvcmUuaW5qZWN0b3I7XG5cbiAgICBmdW5jdGlvbiBoYXNTZXJ2aWNlKG5hbWUpIHtcbiAgICAgIGlmIChpbmplY3Rvcikge1xuICAgICAgICB2YXIgU2VydmljZVJlZ2lzdHJ5ID0gaW5qZWN0b3IuZ2V0KFwiU2VydmljZVJlZ2lzdHJ5XCIpO1xuICAgICAgICBpZiAoU2VydmljZVJlZ2lzdHJ5KSB7XG4gICAgICAgICAgcmV0dXJuIFNlcnZpY2VSZWdpc3RyeS5oYXNTZXJ2aWNlKG5hbWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgJHNjb3BlLmhhc1NlcnZpY2VLaWJhbmEgPSAoKSA9PiBoYXNTZXJ2aWNlKGtpYmFuYVNlcnZpY2VOYW1lKTtcbiAgICAkc2NvcGUuaGFzU2VydmljZUdvZ3MgPSAoKSA9PiBoYXNTZXJ2aWNlKGdvZ3NTZXJ2aWNlTmFtZSk7XG4gICAgJHNjb3BlLmhhc1NlcnZpY2VGb3JnZSA9ICgpID0+IGhhc1NlcnZpY2UoZmFicmljOEZvcmdlU2VydmljZU5hbWUpO1xuICAgICRzY29wZS52aWV3VGVtcGxhdGVzID0gKCkgPT4ge1xuICAgICAgJGxvY2F0aW9uLnBhdGgoJy9rdWJlcm5ldGVzL3RlbXBsYXRlcycpO1xuICAgIH1cblxuICAgICRzY29wZS5uYW1lc3BhY2UgPSBLdWJlcm5ldGVzU3RhdGUuc2VsZWN0ZWROYW1lc3BhY2UgfHwgZGVmYXVsdE5hbWVzcGFjZTtcbiAgICAkc2NvcGUuZm9yZ2VFbmFibGVkID0gaXNGb3JnZUVuYWJsZWQoKTtcblxuICAgICRzY29wZS5jb2RlTWlycm9yT3B0aW9ucyA9IHtcbiAgICAgIGxpbmVXcmFwcGluZyA6IHRydWUsXG4gICAgICBsaW5lTnVtYmVyczogdHJ1ZSxcbiAgICAgIHJlYWRPbmx5OiAnbm9jdXJzb3InLFxuICAgICAgbW9kZToge25hbWU6IFwiamF2YXNjcmlwdFwiLCBqc29uOiB0cnVlfVxuICAgIH07XG5cbiAgICAkc2NvcGUucmVzaXplRGlhbG9nID0ge1xuICAgICAgY29udHJvbGxlcjogbnVsbCxcbiAgICAgIG5ld1JlcGxpY2FzOiAwLFxuICAgICAgZGlhbG9nOiBuZXcgVUkuRGlhbG9nKCksXG4gICAgICBvbk9rOiAoKSA9PiB7XG4gICAgICAgIHZhciByZXNpemVEaWFsb2cgPSAkc2NvcGUucmVzaXplRGlhbG9nO1xuICAgICAgICByZXNpemVEaWFsb2cuZGlhbG9nLmNsb3NlKCk7XG4gICAgICAgIHJlc2l6ZUNvbnRyb2xsZXIoJGh0dHAsIEt1YmVybmV0ZXNBcGlVUkwsIHJlc2l6ZURpYWxvZy5jb250cm9sbGVyLCByZXNpemVEaWFsb2cubmV3UmVwbGljYXMsICgpID0+IHsgbG9nLmRlYnVnKFwidXBkYXRlZCBudW1iZXIgb2YgcmVwbGljYXNcIik7IH0pXG4gICAgICB9LFxuICAgICAgb3BlbjogKGNvbnRyb2xsZXIpID0+IHtcbiAgICAgICAgdmFyIHJlc2l6ZURpYWxvZyA9ICRzY29wZS5yZXNpemVEaWFsb2c7XG4gICAgICAgIHJlc2l6ZURpYWxvZy5jb250cm9sbGVyID0gY29udHJvbGxlcjtcbiAgICAgICAgcmVzaXplRGlhbG9nLm5ld1JlcGxpY2FzID0gQ29yZS5wYXRoR2V0KGNvbnRyb2xsZXIsIFtcInN0YXR1c1wiLCBcInJlcGxpY2FzXCJdKTtcbiAgICAgICAgcmVzaXplRGlhbG9nLmRpYWxvZy5vcGVuKCk7XG5cbiAgICAgICAgJHRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICQoJyNyZXBsaWNhcycpLmZvY3VzKCk7XG4gICAgICAgIH0sIDUwKTtcbiAgICAgIH0sXG4gICAgICBjbG9zZTogKCkgPT4ge1xuICAgICAgICAkc2NvcGUucmVzaXplRGlhbG9nLmRpYWxvZy5jbG9zZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAkc2NvcGUudHJpZ2dlckJ1aWxkID0gKGJ1aWxkQ29uZmlnKSA9PiB7XG4gICAgICB2YXIgdXJsID0gYnVpbGRDb25maWcuJHRyaWdnZXJVcmw7XG4gICAgICBjb25zb2xlLmxvZyhcInRyaWdnZXJpbmcgYnVpbGQgYXQgdXJsOiBcIiArIHVybCk7XG4gICAgICBpZiAodXJsKSB7XG4gICAgICAgIC8vdmFyIGRhdGEgPSB7fTtcbiAgICAgICAgdmFyIGRhdGEgPSBudWxsO1xuICAgICAgICB2YXIgY29uZmlnID0ge1xuICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIG5hbWUgPSBDb3JlLnBhdGhHZXQoYnVpbGRDb25maWcsIFtcIm1ldGFkYXRhXCIsIFwibmFtZVwiXSk7XG4gICAgICAgIENvcmUubm90aWZpY2F0aW9uKCdpbmZvJywgXCJUcmlnZ2VyaW5nIGJ1aWxkIFwiICsgbmFtZSk7XG4gICAgICAgICRodHRwLnBvc3QodXJsLCBkYXRhLCBjb25maWcpLlxuICAgICAgICAgIHN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInRyaWdnZXIgd29ya2VkISBnb3QgZGF0YSBcIiArIGFuZ3VsYXIudG9Kc29uKGRhdGEsIHRydWUpKTtcbiAgICAgICAgICAgIC8vIFRPRE8gc2hvdWxkIHdlIHNob3cgc29tZSBsaW5rIHRvIHRoZSBidWlsZFxuICAgICAgICAgICAgQ29yZS5ub3RpZmljYXRpb24oJ2luZm8nLCBcIkJ1aWxkaW5nIFwiICsgbmFtZSk7XG4gICAgICAgICAgfSkuXG4gICAgICAgICAgZXJyb3IoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICBsb2cud2FybihcIkZhaWxlZCB0byBsb2FkIFwiICsgdXJsICsgXCIgXCIgKyBkYXRhICsgXCIgXCIgKyBzdGF0dXMpO1xuICAgICAgICAgICAgQ29yZS5ub3RpZmljYXRpb24oJ2Vycm9yJywgXCJGYWlsZWQgdG8gdHJpZ2dlciBidWlsZCBmb3IgXCIgKyBuYW1lICsgXCIuIFJldHVybmVkIGNvZGU6IFwiICsgc3RhdHVzICsgXCIgXCIgKyBkYXRhKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gdXBkYXRlIHRoZSBVUkwgaWYgdGhlIGZpbHRlciBpcyBjaGFuZ2VkXG4gICAgJHNjb3BlLiR3YXRjaChcInRhYmxlQ29uZmlnLmZpbHRlck9wdGlvbnMuZmlsdGVyVGV4dFwiLCAodGV4dCkgPT4ge1xuICAgICAgJGxvY2F0aW9uLnNlYXJjaChcInFcIiwgdGV4dCk7XG4gICAgfSk7XG5cbiAgICAkc2NvcGUuJG9uKFwibGFiZWxGaWx0ZXJVcGRhdGVcIiwgKCRldmVudCwgdGV4dCkgPT4ge1xuICAgICAgdmFyIGZpbHRlck9wdGlvbnMgPSAoJHNjb3BlLnRhYmxlQ29uZmlnIHx8IHt9KS5maWx0ZXJPcHRpb25zIHx8IHt9O1xuICAgICAgdmFyIGN1cnJlbnRGaWx0ZXIgPSBmaWx0ZXJPcHRpb25zLmZpbHRlclRleHQ7XG4gICAgICBpZiAoQ29yZS5pc0JsYW5rKGN1cnJlbnRGaWx0ZXIpKSB7XG4gICAgICAgIGZpbHRlck9wdGlvbnMuZmlsdGVyVGV4dCA9IHRleHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZXhwcmVzc2lvbnMgPSBjdXJyZW50RmlsdGVyLnNwbGl0KC9cXHMrLyk7XG4gICAgICAgIGlmIChleHByZXNzaW9ucy5hbnkodGV4dCkpIHtcbiAgICAgICAgICAvLyBsZXRzIGV4Y2x1ZGUgdGhpcyBmaWx0ZXIgZXhwcmVzc2lvblxuICAgICAgICAgIGV4cHJlc3Npb25zID0gZXhwcmVzc2lvbnMucmVtb3ZlKHRleHQpO1xuICAgICAgICAgIGZpbHRlck9wdGlvbnMuZmlsdGVyVGV4dCA9IGV4cHJlc3Npb25zLmpvaW4oXCIgXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZpbHRlck9wdGlvbnMuZmlsdGVyVGV4dCA9IGN1cnJlbnRGaWx0ZXIgKyBcIiBcIiArIHRleHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgICRzY29wZS5pZCA9IHVuZGVmaW5lZDtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzZXJ2aWNlIGxpbmsgVVJMIGZvciBlaXRoZXIgdGhlIHNlcnZpY2UgbmFtZSBvciB0aGUgc2VydmljZSBvYmplY3RcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiBzZXJ2aWNlTGlua1VybChzZXJ2aWNlKSB7XG4gICAgaWYgKGFuZ3VsYXIuaXNPYmplY3Qoc2VydmljZSkpIHtcbiAgICAgIHZhciBwb3J0YWxJUCA9IHNlcnZpY2UuJGhvc3Q7XG4gICAgICAvLyBsZXRzIGFzc3VtZSBubyBjdXN0b20gcG9ydCBmb3Igbm93IGZvciBleHRlcm5hbCByb3V0ZXNcbiAgICAgIHZhciBwb3J0ID0gbnVsbDtcbiAgICAgIHZhciBwcm90b2NvbCA9IFwiaHR0cDovL1wiO1xuICAgICAgdmFyIHNwZWMgPSBzZXJ2aWNlLnNwZWM7XG4gICAgICBpZiAoc3BlYykge1xuICAgICAgICBpZiAoIXBvcnRhbElQKSB7XG4gICAgICAgICAgcG9ydGFsSVAgPSBzcGVjLnBvcnRhbElQO1xuICAgICAgICB9XG4gICAgICAgIHZhciBoYXNIdHRwcyA9IGZhbHNlO1xuICAgICAgICB2YXIgaGFzSHR0cCA9IGZhbHNlO1xuICAgICAgICBhbmd1bGFyLmZvckVhY2goc3BlYy5wb3J0cywgKHBvcnRTcGVjKSA9PiB7XG4gICAgICAgICAgdmFyIHAgPSBwb3J0U3BlYy5wb3J0O1xuICAgICAgICAgIGlmIChwKSB7XG4gICAgICAgICAgICBpZiAocCA9PT0gNDQzKSB7XG4gICAgICAgICAgICAgIGhhc0h0dHBzID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gODApIHtcbiAgICAgICAgICAgICAgaGFzSHR0cCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXBvcnQpIHtcbiAgICAgICAgICAgICAgcG9ydCA9IHA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChwb3J0YWxJUCkge1xuICAgICAgICBpZiAoaGFzSHR0cHMpIHtcbiAgICAgICAgICByZXR1cm4gXCJodHRwczovL1wiICsgcG9ydGFsSVA7XG4gICAgICAgIH0gZWxzZSBpZiAoaGFzSHR0cCkge1xuICAgICAgICAgIHJldHVybiBcImh0dHA6Ly9cIiArIHBvcnRhbElQO1xuICAgICAgICB9IGVsc2UgaWYgKHBvcnQpIHtcbiAgICAgICAgICByZXR1cm4gcHJvdG9jb2wgKyBwb3J0YWxJUCArIFwiOlwiICsgcG9ydCArIFwiL1wiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBwcm90b2NvbCArIHBvcnRhbElQO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzZXJ2aWNlKSB7XG4gICAgICB2YXIgc2VydmljZUlkID0gc2VydmljZS50b1N0cmluZygpO1xuICAgICAgaWYgKHNlcnZpY2VJZCkge1xuICAgICAgICB2YXIgU2VydmljZVJlZ2lzdHJ5ID0gZ2V0U2VydmljZVJlZ2lzdHJ5KCk7XG4gICAgICAgIGlmIChTZXJ2aWNlUmVnaXN0cnkpIHtcbiAgICAgICAgICByZXR1cm4gU2VydmljZVJlZ2lzdHJ5LnNlcnZpY2VMaW5rKHNlcnZpY2VJZCkgfHwgXCJcIjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHaXZlbiB0aGUgbGlzdCBvZiBwb2RzIGxldHMgaXRlcmF0ZSB0aHJvdWdoIHRoZW0gYW5kIGZpbmQgYWxsIHBvZHMgbWF0Y2hpbmcgdGhlIHNlbGVjdG9yXG4gICAqIGFuZCByZXR1cm4gY291bnRlcnMgYmFzZWQgb24gdGhlIHN0YXR1cyBvZiB0aGUgcG9kXG4gICAqL1xuICBleHBvcnQgZnVuY3Rpb24gY3JlYXRlUG9kQ291bnRlcnMoc2VsZWN0b3IsIHBvZHMsIG91dHB1dFBvZHMgPSBbXSwgcG9kTGlua1F1ZXJ5ID0gbnVsbCkge1xuICAgIHZhciBmaWx0ZXJGbjtcbiAgICBpZiAoYW5ndWxhci5pc0Z1bmN0aW9uKHNlbGVjdG9yKSkge1xuICAgICAgZmlsdGVyRm4gPSBzZWxlY3RvcjtcbiAgICB9IGVsc2Uge1xuICAgICAgZmlsdGVyRm4gPSAocG9kKSA9PiBzZWxlY3Rvck1hdGNoZXMoc2VsZWN0b3IsIGdldExhYmVscyhwb2QpKTtcbiAgICB9XG4gICAgdmFyIGFuc3dlciA9IHtcbiAgICAgIHBvZHNMaW5rOiBcIlwiLFxuICAgICAgdmFsaWQ6IDAsXG4gICAgICB3YWl0aW5nOiAwLFxuICAgICAgZXJyb3I6IDBcbiAgICB9O1xuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKCFwb2RMaW5rUXVlcnkpIHtcbiAgICAgICAgcG9kTGlua1F1ZXJ5ID0gS3ViZXJuZXRlcy5sYWJlbHNUb1N0cmluZyhzZWxlY3RvciwgXCIgXCIpO1xuICAgICAgfVxuICAgICAgYW5zd2VyLnBvZHNMaW5rID0gQ29yZS51cmwoXCIva3ViZXJuZXRlcy9wb2RzP3E9XCIgKyBlbmNvZGVVUklDb21wb25lbnQocG9kTGlua1F1ZXJ5KSk7XG4gICAgICBhbmd1bGFyLmZvckVhY2gocG9kcywgcG9kID0+IHtcbiAgICAgICAgaWYgKGZpbHRlckZuKHBvZCkpIHtcbiAgICAgICAgICBvdXRwdXRQb2RzLnB1c2gocG9kKTtcbiAgICAgICAgICB2YXIgc3RhdHVzID0gZ2V0U3RhdHVzKHBvZCk7XG4gICAgICAgICAgaWYgKHN0YXR1cykge1xuICAgICAgICAgICAgdmFyIGxvd2VyID0gc3RhdHVzLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBpZiAobG93ZXIuc3RhcnRzV2l0aChcInJ1blwiKSkge1xuICAgICAgICAgICAgICBhbnN3ZXIudmFsaWQgKz0gMTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobG93ZXIuc3RhcnRzV2l0aChcIndhaXRcIikgfHwgbG93ZXIuc3RhcnRzV2l0aChcInBlbmRcIikpIHtcbiAgICAgICAgICAgICAgYW5zd2VyLndhaXRpbmcgKz0gMTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobG93ZXIuc3RhcnRzV2l0aChcInRlcm1cIikgfHwgbG93ZXIuc3RhcnRzV2l0aChcImVycm9yXCIpIHx8IGxvd2VyLnN0YXJ0c1dpdGgoXCJmYWlsXCIpKSB7XG4gICAgICAgICAgICAgIGFuc3dlci5lcnJvciArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhbnN3ZXIuZXJyb3IgKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYW5zd2VyO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoZSBnaXZlbiBqc29uIGludG8gYW4gYXJyYXkgb2YgaXRlbXMuIElmIHRoZSBqc29uIGNvbnRhaW5zIGEgbmVzdGVkIHNldCBvZiBpdGVtcyB0aGVuIHRoYXQgaXMgc29ydGVkOyBzbyB0aGF0IHNlcnZpY2VzXG4gICAqIGFyZSBwcm9jZXNzZWQgZmlyc3Q7IHRoZW4gdHVybmVkIGludG8gYW4gYXJyYXkuIE90aGVyd2lzZSB0aGUganNvbiBpcyBwdXQgaW50byBhbiBhcnJheSBzbyBpdCBjYW4gYmUgcHJvY2Vzc2VkIHBvbHltb3JwaGljYWxseVxuICAgKi9cbiAgZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRLdWJlcm5ldGVzSnNvblRvSXRlbXMoanNvbikge1xuICAgIHZhciBpdGVtcyA9IGpzb24uaXRlbXM7XG4gICAgaWYgKGFuZ3VsYXIuaXNBcnJheShpdGVtcykpIHtcbiAgICAgIC8vIFRPRE8gd2UgY291bGQgY2hlY2sgZm9yIExpc3Qgb3IgQ29uZmlnIHR5cGVzIGhlcmUgYW5kIHdhcm4gaWYgbm90XG5cbiAgICAgIC8vIHNvcnQgdGhlIHNlcnZpY2VzIGZpcnN0XG4gICAgICB2YXIgYW5zd2VyID0gW107XG4gICAgICBpdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIGlmIChpdGVtLmtpbmQgPT09IFwiU2VydmljZVwiKSB7XG4gICAgICAgICAgYW5zd2VyLnB1c2goaXRlbSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBpZiAoaXRlbS5raW5kICE9PSBcIlNlcnZpY2VcIikge1xuICAgICAgICAgIGFuc3dlci5wdXNoKGl0ZW0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhbnN3ZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbanNvbl07XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGlzVjFiZXRhMU9yMigpIHtcbiAgICByZXR1cm4gZGVmYXVsdEFwaVZlcnNpb24gPT09IFwidjFiZXRhMVwiIHx8IGRlZmF1bHRBcGlWZXJzaW9uID09PSBcInYxYmV0YTJcIjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbGluayB0byB0aGUgZGV0YWlsIHBhZ2UgZm9yIHRoZSBnaXZlbiBlbnRpdHlcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiBlbnRpdHlQYWdlTGluayhlbnRpdHkpIHtcbiAgICBpZiAoZW50aXR5KSB7XG4gICAgICB2YXIgaWQgPSBnZXROYW1lKGVudGl0eSk7XG4gICAgICB2YXIga2luZCA9IGdldEtpbmQoZW50aXR5KTtcbiAgICAgIGlmIChraW5kICYmIGlkKSB7XG4gICAgICAgIHZhciBwYXRoID0ga2luZC5zdWJzdHJpbmcoMCwgMSkudG9Mb3dlckNhc2UoKSArIGtpbmQuc3Vic3RyaW5nKDEpICsgXCJzXCI7XG4gICAgICAgIHZhciBuYW1lc3BhY2UgPSBnZXROYW1lc3BhY2UoZW50aXR5KTtcbiAgICAgICAgaWYgKG5hbWVzcGFjZSAmJiAhaXNJZ25vcmVOYW1lc3BhY2VLaW5kKGtpbmQpKSB7XG4gICAgICAgICAgcmV0dXJuIFVybEhlbHBlcnMuam9pbignL2t1YmVybmV0ZXMvbmFtZXNwYWNlJywgbmFtZXNwYWNlLCBwYXRoLCBpZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFVybEhlbHBlcnMuam9pbignL2t1YmVybmV0ZXMnLCBwYXRoLCBpZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuXG4gIGV4cG9ydCBmdW5jdGlvbiByZXNvdXJjZUtpbmRUb1VyaVBhdGgoa2luZCkge1xuICAgIHZhciBraW5kUGF0aCA9IGtpbmQudG9Mb3dlckNhc2UoKSArIFwic1wiO1xuICAgIGlmIChraW5kUGF0aCA9PT0gXCJyZXBsaWNhdGlvbkNvbnRyb2xsZXJzXCIgJiYgIWlzVjFiZXRhMU9yMigpKSB7XG4gICAgICBraW5kUGF0aCA9IFwicmVwbGljYXRpb25jb250cm9sbGVyc1wiO1xuICAgIH1cbiAgICByZXR1cm4ga2luZFBhdGg7XG4gIH1cblxuICBmdW5jdGlvbiBpc0lnbm9yZU5hbWVzcGFjZUtpbmQoa2luZCkge1xuICAgIHJldHVybiBraW5kID09PSBcIkhvc3RcIiB8fCBraW5kID09PSBcIk1pbmlvblwiO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHJvb3QgVVJMIGZvciB0aGUga2luZFxuICAgKi9cbiAgZXhwb3J0IGZ1bmN0aW9uIGt1YmVybmV0ZXNVcmxGb3JLaW5kKEt1YmVybmV0ZXNBcGlVUkwsIGtpbmQsIG5hbWVzcGFjZSA9IG51bGwsIHBhdGggPSBudWxsKSB7XG4gICAgdmFyIHBhdGhTZWdtZW50ID0gXCJcIjtcbiAgICBpZiAocGF0aCkge1xuICAgICAgcGF0aFNlZ21lbnQgPSBcIi9cIiArIENvcmUudHJpbUxlYWRpbmcocGF0aCwgXCIvXCIpO1xuICAgIH1cbiAgICB2YXIga2luZFBhdGggPSByZXNvdXJjZUtpbmRUb1VyaVBhdGgoa2luZCk7XG4gICAgdmFyIGlnbm9yZU5hbWVzcGFjZSA9IGlzSWdub3JlTmFtZXNwYWNlS2luZChraW5kKTtcbiAgICBpZiAoaXNWMWJldGExT3IyKCkgfHwgaWdub3JlTmFtZXNwYWNlKSB7XG4gICAgICB2YXIgcG9zdGZpeCA9IFwiXCI7XG4gICAgICBpZiAobmFtZXNwYWNlICYmICFpZ25vcmVOYW1lc3BhY2UpIHtcbiAgICAgICAgcG9zdGZpeCA9IFwiP25hbWVzcGFjZT1cIiArIG5hbWVzcGFjZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBVcmxIZWxwZXJzLmpvaW4oS3ViZXJuZXRlc0FwaVVSTCwga2luZFBhdGgsIHBhdGhTZWdtZW50LCBwb3N0Zml4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFVybEhlbHBlcnMuam9pbihLdWJlcm5ldGVzQXBpVVJMLCBcIi9uYW1lc3BhY2VzL1wiLCBuYW1lc3BhY2UgLCBraW5kUGF0aCwgcGF0aFNlZ21lbnQpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYmFzZSBVUkwgZm9yIHRoZSBraW5kIG9mIGt1YmVybmV0ZXMgcmVzb3VyY2Ugb3IgbnVsbCBpZiBpdCBjYW5ub3QgYmUgZm91bmRcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiBrdWJlcm5ldGVzVXJsRm9ySXRlbUtpbmQoS3ViZXJuZXRlc0FwaVVSTCwganNvbikge1xuICAgIHZhciBraW5kID0ganNvbi5raW5kO1xuICAgIGlmIChraW5kKSB7XG4gICAgICByZXR1cm4ga3ViZXJuZXRlc1VybEZvcktpbmQoS3ViZXJuZXRlc0FwaVVSTCwga2luZCwganNvbi5uYW1lc3BhY2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2cud2FybihcIklnbm9yaW5nIG1pc3Npbmcga2luZCBcIiArIGtpbmQgKyBcIiBmb3Iga3ViZXJuZXRlcyBqc29uOiBcIiArIGFuZ3VsYXIudG9Kc29uKGpzb24pKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBrdWJlcm5ldGVzUHJveHlVcmxGb3JTZXJ2aWNlKEt1YmVybmV0ZXNBcGlVUkwsIHNlcnZpY2UsIHBhdGggPSBudWxsKSB7XG4gICAgdmFyIHBhdGhTZWdtZW50ID0gXCJcIjtcbiAgICBpZiAocGF0aCkge1xuICAgICAgcGF0aFNlZ21lbnQgPSBcIi9cIiArIENvcmUudHJpbUxlYWRpbmcocGF0aCwgXCIvXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXRoU2VnbWVudCA9IFwiL1wiO1xuICAgIH1cbiAgICB2YXIgbmFtZXNwYWNlID0gZ2V0TmFtZXNwYWNlKHNlcnZpY2UpO1xuICAgIGlmIChpc1YxYmV0YTFPcjIoKSkge1xuICAgICAgdmFyIHBvc3RmaXggPSBcIj9uYW1lc3BhY2U9XCIgKyBuYW1lc3BhY2U7XG4gICAgICByZXR1cm4gVXJsSGVscGVycy5qb2luKEt1YmVybmV0ZXNBcGlVUkwsIFwiL2FwaS9cIiArIGRlZmF1bHRBcGlWZXJzaW9uICsgXCIvcHJveHlcIiArIGt1YmVybmV0ZXNOYW1lc3BhY2VQYXRoKCkgKyBcIi9zZXJ2aWNlcy9cIiArIGdldE5hbWUoc2VydmljZSkgKyBwYXRoU2VnbWVudCArIHBvc3RmaXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gVXJsSGVscGVycy5qb2luKEt1YmVybmV0ZXNBcGlVUkwsIFwiL2FwaS9cIiArIGRlZmF1bHRBcGlWZXJzaW9uICsgXCIvcHJveHkvbmFtZXNwYWNlcy9cIiArIG5hbWVzcGFjZSArIFwiL3NlcnZpY2VzL1wiICsgZ2V0TmFtZShzZXJ2aWNlKSArIHBhdGhTZWdtZW50KTtcbiAgICB9XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gYnVpbGRDb25maWdSZXN0VXJsKGlkKSB7XG4gICAgcmV0dXJuIFVybEhlbHBlcnMuam9pbihidWlsZENvbmZpZ3NSZXN0VVJMKCksIGlkKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBkZXBsb3ltZW50Q29uZmlnUmVzdFVybChpZCkge1xuICAgIHJldHVybiBVcmxIZWxwZXJzLmpvaW4oZGVwbG95bWVudENvbmZpZ3NSZXN0VVJMKCksIGlkKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBpbWFnZVJlcG9zaXRvcnlSZXN0VXJsKGlkKSB7XG4gICAgcmV0dXJuIFVybEhlbHBlcnMuam9pbihpbWFnZVJlcG9zaXRvcmllc1Jlc3RVUkwoKSwgaWQpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkUmVzdFVybChpZCkge1xuICAgIHJldHVybiBVcmxIZWxwZXJzLmpvaW4oYnVpbGRzUmVzdFVSTCgpLCBpZCk7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gYnVpbGRMb2dzUmVzdFVybChpZCkge1xuICAgIHJldHVybiBVcmxIZWxwZXJzLmpvaW4oYnVpbGRzTG9nc1Jlc3RVUkwoKSwgaWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJ1bnMgdGhlIGdpdmVuIGFwcGxpY2F0aW9uIEpTT05cbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiBydW5BcHAoJGxvY2F0aW9uLCAkc2NvcGUsICRodHRwLCBLdWJlcm5ldGVzQXBpVVJMLCBqc29uLCBuYW1lID0gXCJBcHBcIiwgb25TdWNjZXNzRm4gPSBudWxsLCBuYW1lc3BhY2UgPSBudWxsLCBvbkNvbXBsZXRlRm4gPSBudWxsKSB7XG4gICAgaWYgKGpzb24pIHtcbiAgICAgIGlmIChhbmd1bGFyLmlzU3RyaW5nKGpzb24pKSB7XG4gICAgICAgIGpzb24gPSBhbmd1bGFyLmZyb21Kc29uKGpzb24pO1xuICAgICAgfVxuICAgICAgbmFtZSA9IG5hbWUgfHwgXCJBcHBcIjtcbiAgICAgIHZhciBwb3N0Zml4ID0gbmFtZXNwYWNlID8gXCIgaW4gbmFtZXNwYWNlIFwiICsgbmFtZXNwYWNlIDogXCJcIjtcbiAgICAgIENvcmUubm90aWZpY2F0aW9uKCdpbmZvJywgXCJSdW5uaW5nIFwiICsgbmFtZSArIHBvc3RmaXgpO1xuXG4gICAgICB2YXIgaXRlbXMgPSBjb252ZXJ0S3ViZXJuZXRlc0pzb25Ub0l0ZW1zKGpzb24pO1xuICAgICAgYW5ndWxhci5mb3JFYWNoKGl0ZW1zLCAoaXRlbSkgPT4ge1xuICAgICAgICB2YXIgdXJsID0ga3ViZXJuZXRlc1VybEZvckl0ZW1LaW5kKEt1YmVybmV0ZXNBcGlVUkwsIGl0ZW0pO1xuICAgICAgICBpZiAodXJsKSB7XG4gICAgICAgICAgJGh0dHAucG9zdCh1cmwsIGl0ZW0pLlxuICAgICAgICAgICAgc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgICAgbG9nLmRlYnVnKFwiR290IHN0YXR1czogXCIgKyBzdGF0dXMgKyBcIiBvbiB1cmw6IFwiICsgdXJsICsgXCIgZGF0YTogXCIgKyBkYXRhICsgXCIgYWZ0ZXIgcG9zdGluZzogXCIgKyBhbmd1bGFyLnRvSnNvbihpdGVtKSk7XG4gICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzRnVuY3Rpb24ob25Db21wbGV0ZUZuKSkge1xuICAgICAgICAgICAgICAgIG9uQ29tcGxldGVGbigpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgICAgICAgICB9KS5cbiAgICAgICAgICBlcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICAgICAgICAgIG1lc3NhZ2UgPSBkYXRhLm1lc3NhZ2U7XG4gICAgICAgICAgICAgIHZhciByZWFzb24gPSBkYXRhLnJlYXNvbjtcbiAgICAgICAgICAgICAgaWYgKHJlYXNvbiA9PT0gXCJBbHJlYWR5RXhpc3RzXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBsZXRzIGlnbm9yZSBkdXBsaWNhdGVzXG4gICAgICAgICAgICAgICAgbG9nLmRlYnVnKFwiZW50aXR5IGFscmVhZHkgZXhpc3RzIGF0IFwiICsgdXJsKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghbWVzc2FnZSkge1xuICAgICAgICAgICAgICBtZXNzYWdlID0gXCJGYWlsZWQgdG8gUE9TVCB0byBcIiArIHVybCArIFwiIGdvdCBzdGF0dXM6IFwiICsgc3RhdHVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9nLndhcm4oXCJGYWlsZWQgdG8gc2F2ZSBcIiArIHVybCArIFwiIHN0YXR1czogXCIgKyBzdGF0dXMgKyBcIiByZXNwb25zZTogXCIgKyBhbmd1bGFyLnRvSnNvbihkYXRhLCB0cnVlKSk7XG4gICAgICAgICAgICBDb3JlLm5vdGlmaWNhdGlvbignZXJyb3InLCBtZXNzYWdlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBjdXJyZW50IHN0YXR1cyBvZiB0aGUgcG9kIGlzIHJ1bm5pbmdcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiBpc1J1bm5pbmcocG9kQ3VycmVudFN0YXRlKSB7XG4gICAgdmFyIHN0YXR1cyA9IChwb2RDdXJyZW50U3RhdGUgfHwge30pLnBoYXNlO1xuICAgIGlmIChzdGF0dXMpIHtcbiAgICAgIHZhciBsb3dlciA9IHN0YXR1cy50b0xvd2VyQ2FzZSgpO1xuICAgICAgcmV0dXJuIGxvd2VyLnN0YXJ0c1dpdGgoXCJydW5cIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBsYWJlbHMgb2JqZWN0IGhhcyBhbGwgb2YgdGhlIGtleS92YWx1ZSBwYWlycyBmcm9tIHRoZSBzZWxlY3RvclxuICAgKi9cbiAgZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdG9yTWF0Y2hlcyhzZWxlY3RvciwgbGFiZWxzKSB7XG4gICAgaWYgKGFuZ3VsYXIuaXNPYmplY3QobGFiZWxzKSkge1xuICAgICAgdmFyIGFuc3dlciA9IHRydWU7XG4gICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgYW5ndWxhci5mb3JFYWNoKHNlbGVjdG9yLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICBjb3VudCsrO1xuICAgICAgICBpZiAoYW5zd2VyICYmIGxhYmVsc1trZXldICE9PSB2YWx1ZSkge1xuICAgICAgICAgIGFuc3dlciA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhbnN3ZXIgJiYgY291bnQgPiAwO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHNlcnZpY2UgcmVnaXN0cnlcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiBnZXRTZXJ2aWNlUmVnaXN0cnkoKSB7XG4gICAgdmFyIGluamVjdG9yID0gSGF3dGlvQ29yZS5pbmplY3RvcjtcbiAgICByZXR1cm4gaW5qZWN0b3IgPyBpbmplY3Rvci5nZXQoXCJTZXJ2aWNlUmVnaXN0cnlcIikgOiBudWxsO1xuICB9XG5cblxuICAvKipcbiAgICogUmV0dXJucyBhIGxpbmsgdG8gdGhlIGtpYmFuYSBsb2dzIHdlYiBhcHBsaWNhdGlvblxuICAgKi9cbiAgZXhwb3J0IGZ1bmN0aW9uIGtpYmFuYUxvZ3NMaW5rKFNlcnZpY2VSZWdpc3RyeSkge1xuICAgIHZhciBsaW5rID0gU2VydmljZVJlZ2lzdHJ5LnNlcnZpY2VMaW5rKGtpYmFuYVNlcnZpY2VOYW1lKTtcbiAgICBpZiAobGluaykge1xuICAgICAgaWYgKCFsaW5rLmVuZHNXaXRoKFwiL1wiKSkge1xuICAgICAgICBsaW5rICs9IFwiL1wiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxpbmsgKyBcIiMvZGFzaGJvYXJkL0ZhYnJpYzhcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIG9wZW5Mb2dzRm9yUG9kcyhTZXJ2aWNlUmVnaXN0cnksICR3aW5kb3csIG5hbWVzcGFjZSwgcG9kcykge1xuICAgIHZhciBsaW5rID0ga2liYW5hTG9nc0xpbmsoU2VydmljZVJlZ2lzdHJ5KTtcbiAgICBpZiAobGluaykge1xuICAgICAgdmFyIHF1ZXJ5ID0gXCJcIjtcbiAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICBhbmd1bGFyLmZvckVhY2gocG9kcywgKGl0ZW0pID0+IHtcbiAgICAgICAgdmFyIGlkID0gZ2V0TmFtZShpdGVtKTtcbiAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgdmFyIHNwYWNlID0gcXVlcnkgPyBcIiBPUiBcIiA6IFwiXCI7XG4gICAgICAgICAgY291bnQrKztcbiAgICAgICAgICBxdWVyeSArPSBzcGFjZSArICdcIicgKyBpZCArICdcIic7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKHF1ZXJ5KSB7XG4gICAgICAgIGlmIChjb3VudCA+IDEpIHtcbiAgICAgICAgICBxdWVyeSA9IFwiKFwiICsgcXVlcnkgKyBcIilcIjtcbiAgICAgICAgfVxuICAgICAgICBxdWVyeSA9ICdwb2RfbmFtZXNwYWNlOlwiJyArIG5hbWVzcGFjZSArICdcIiBBTkQgcG9kOicgKyBxdWVyeTtcbiAgICAgICAgbGluayArPSBcIj9fYT0ocXVlcnk6KHF1ZXJ5X3N0cmluZzoocXVlcnk6J1wiICsgcXVlcnkgKyBcIicpKSlcIjtcbiAgICAgICAgdmFyIG5ld1dpbmRvdyA9ICR3aW5kb3cub3BlbihsaW5rLCBcInZpZXdMb2dzXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiByZXNpemVDb250cm9sbGVyKCRodHRwLCBLdWJlcm5ldGVzQXBpVVJMLCByZXBsaWNhdGlvbkNvbnRyb2xsZXIsIG5ld1JlcGxpY2FzLCBvbkNvbXBsZXRlRm4gPSBudWxsKSB7XG4gICAgdmFyIGlkID0gZ2V0TmFtZShyZXBsaWNhdGlvbkNvbnRyb2xsZXIpO1xuICAgIHZhciBuYW1lc3BhY2UgPSBnZXROYW1lc3BhY2UocmVwbGljYXRpb25Db250cm9sbGVyKSB8fCBcIlwiO1xuICAgIHZhciB1cmwgPSBrdWJlcm5ldGVzVXJsRm9yS2luZChLdWJlcm5ldGVzQXBpVVJMLCBcIlJlcGxpY2F0aW9uQ29udHJvbGxlclwiLCBuYW1lc3BhY2UsIGlkKTtcbiAgICAkaHR0cC5nZXQodXJsKS5cbiAgICAgIHN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgdmFyIGRlc2lyZWRTdGF0ZSA9IGRhdGEuc3BlYztcbiAgICAgICAgICBpZiAoIWRlc2lyZWRTdGF0ZSkge1xuICAgICAgICAgICAgZGVzaXJlZFN0YXRlID0ge307XG4gICAgICAgICAgICBkYXRhLnNwZWMgPSBkZXNpcmVkU3RhdGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRlc2lyZWRTdGF0ZS5yZXBsaWNhcyA9IG5ld1JlcGxpY2FzO1xuICAgICAgICAgICRodHRwLnB1dCh1cmwsIGRhdGEpLlxuICAgICAgICAgICAgc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgICAgbG9nLmRlYnVnKFwidXBkYXRlZCBjb250cm9sbGVyIFwiICsgdXJsKTtcbiAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNGdW5jdGlvbihvbkNvbXBsZXRlRm4pKSB7XG4gICAgICAgICAgICAgICAgb25Db21wbGV0ZUZuKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLlxuICAgICAgICAgIGVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgbG9nLndhcm4oXCJGYWlsZWQgdG8gc2F2ZSBcIiArIHVybCArIFwiIFwiICsgZGF0YSArIFwiIFwiICsgc3RhdHVzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSkuXG4gICAgICBlcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgbG9nLndhcm4oXCJGYWlsZWQgdG8gbG9hZCBcIiArIHVybCArIFwiIFwiICsgZGF0YSArIFwiIFwiICsgc3RhdHVzKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHN0YXR1c1RleHRUb0Nzc0NsYXNzKHRleHQpIHtcbiAgICBpZiAodGV4dCkge1xuICAgICAgdmFyIGxvd2VyID0gdGV4dC50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKGxvd2VyLnN0YXJ0c1dpdGgoXCJydW5cIikgfHwgbG93ZXIuc3RhcnRzV2l0aChcIm9rXCIpKSB7XG4gICAgICAgIHJldHVybiAnZmEgZmEtcGxheS1jaXJjbGUgZ3JlZW4nO1xuICAgICAgfSBlbHNlIGlmIChsb3dlci5zdGFydHNXaXRoKFwid2FpdFwiKSB8fCBsb3dlci5zdGFydHNXaXRoKFwicGVuZFwiKSkge1xuICAgICAgICByZXR1cm4gJ2ZhIGZhLWRvd25sb2FkJztcbiAgICAgIH0gZWxzZSBpZiAobG93ZXIuc3RhcnRzV2l0aChcInRlcm1cIikgfHwgbG93ZXIuc3RhcnRzV2l0aChcImVycm9yXCIpIHx8IGxvd2VyLnN0YXJ0c1dpdGgoXCJmYWlsXCIpKSB7XG4gICAgICAgIHJldHVybiAnZmEgZmEtb2ZmIG9yYW5nZSc7XG4gICAgICB9IGVsc2UgaWYgKGxvd2VyLnN0YXJ0c1dpdGgoXCJzdWNjZWVkZWRcIikpIHtcbiAgICAgICAgcmV0dXJuICdmYSBmYS1jaGVjay1jaXJjbGUtbyBncmVlbic7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnZmEgZmEtcXVlc3Rpb24gcmVkJztcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBwb2RTdGF0dXMocG9kKSB7XG4gICAgcmV0dXJuIGdldFN0YXR1cyhwb2QpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUFwcFZpZXdQb2RDb3VudGVycyhhcHBWaWV3KSB7XG4gICAgdmFyIGFycmF5ID0gW107XG4gICAgdmFyIG1hcCA9IHt9O1xuICAgIHZhciBwb2RzID0gYXBwVmlldy5wb2RzO1xuICAgIHZhciBsb3dlc3REYXRlID0gbnVsbDtcbiAgICBhbmd1bGFyLmZvckVhY2gocG9kcywgcG9kID0+IHtcbiAgICAgIHZhciBzZWxlY3RvciA9IGdldExhYmVscyhwb2QpO1xuICAgICAgdmFyIHNlbGVjdG9yVGV4dCA9IEt1YmVybmV0ZXMubGFiZWxzVG9TdHJpbmcoc2VsZWN0b3IsIFwiIFwiKTtcbiAgICAgIHZhciBhbnN3ZXIgPSBtYXBbc2VsZWN0b3JdO1xuICAgICAgaWYgKCFhbnN3ZXIpIHtcbiAgICAgICAgYW5zd2VyID0ge1xuICAgICAgICAgIGxhYmVsVGV4dDogc2VsZWN0b3JUZXh0LFxuICAgICAgICAgIHBvZHNMaW5rOiBDb3JlLnVybChcIi9rdWJlcm5ldGVzL3BvZHM/cT1cIiArIGVuY29kZVVSSUNvbXBvbmVudChzZWxlY3RvclRleHQpKSxcbiAgICAgICAgICB2YWxpZDogMCxcbiAgICAgICAgICB3YWl0aW5nOiAwLFxuICAgICAgICAgIGVycm9yOiAwXG4gICAgICAgIH07XG4gICAgICAgIG1hcFtzZWxlY3Rvcl0gPSBhbnN3ZXI7XG4gICAgICAgIGFycmF5LnB1c2goYW5zd2VyKTtcbiAgICAgIH1cbiAgICAgIHZhciBzdGF0dXMgPSAocG9kU3RhdHVzKHBvZCkgfHwgXCJFcnJvclwiKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKHN0YXR1cy5zdGFydHNXaXRoKFwicnVuXCIpIHx8IHN0YXR1cy5zdGFydHNXaXRoKFwib2tcIikpIHtcbiAgICAgICAgYW5zd2VyLnZhbGlkICs9IDE7XG4gICAgICB9IGVsc2UgaWYgKHN0YXR1cy5zdGFydHNXaXRoKFwid2FpdFwiKSB8fCBzdGF0dXMuc3RhcnRzV2l0aChcInB3bmRcIikpIHtcbiAgICAgICAgYW5zd2VyLndhaXRpbmcgKz0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFuc3dlci5lcnJvciArPSAxO1xuICAgICAgfVxuICAgICAgdmFyIGNyZWF0aW9uVGltZXN0YW1wID0gZ2V0Q3JlYXRpb25UaW1lc3RhbXAocG9kKTtcbiAgICAgIGlmIChjcmVhdGlvblRpbWVzdGFtcCkge1xuICAgICAgICB2YXIgZCA9IG5ldyBEYXRlKGNyZWF0aW9uVGltZXN0YW1wKTtcbiAgICAgICAgaWYgKCFsb3dlc3REYXRlIHx8IGQgPCBsb3dlc3REYXRlKSB7XG4gICAgICAgICAgbG93ZXN0RGF0ZSA9IGQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBhcHBWaWV3LiRjcmVhdGlvbkRhdGUgPSBsb3dlc3REYXRlO1xuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBcHBWaWV3U2VydmljZVZpZXdzKGFwcFZpZXcpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICB2YXIgcG9kcyA9IGFwcFZpZXcucG9kcztcbiAgICBhbmd1bGFyLmZvckVhY2gocG9kcywgcG9kID0+IHtcbiAgICAgIHZhciBpZCA9IGdldE5hbWUocG9kKTtcbiAgICAgIGlmIChpZCkge1xuICAgICAgICB2YXIgYWJicmV2ID0gaWQ7XG4gICAgICAgIHZhciBpZHggPSBpZC5pbmRleE9mKFwiLVwiKTtcbiAgICAgICAgaWYgKGlkeCA+IDEpIHtcbiAgICAgICAgICBhYmJyZXYgPSBpZC5zdWJzdHJpbmcoMCwgaWR4KTtcbiAgICAgICAgfVxuICAgICAgICBwb2QuaWRBYmJyZXYgPSBhYmJyZXY7XG4gICAgICB9XG4gICAgICBwb2Quc3RhdHVzQ2xhc3MgPSBzdGF0dXNUZXh0VG9Dc3NDbGFzcyhwb2RTdGF0dXMocG9kKSk7XG4gICAgfSk7XG5cbiAgICB2YXIgc2VydmljZXMgPSBhcHBWaWV3LnNlcnZpY2VzIHx8IFtdO1xuICAgIHZhciByZXBsaWNhdGlvbkNvbnRyb2xsZXJzID0gYXBwVmlldy5yZXBsaWNhdGlvbkNvbnRyb2xsZXJzIHx8IFtdO1xuICAgIHZhciBzaXplID0gTWF0aC5tYXgoc2VydmljZXMubGVuZ3RoLCByZXBsaWNhdGlvbkNvbnRyb2xsZXJzLmxlbmd0aCwgMSk7XG4gICAgdmFyIGFwcE5hbWUgPSBhcHBWaWV3LiRpbmZvLm5hbWU7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgICAgIHZhciBzZXJ2aWNlID0gc2VydmljZXNbaV07XG4gICAgICB2YXIgcmVwbGljYXRpb25Db250cm9sbGVyID0gcmVwbGljYXRpb25Db250cm9sbGVyc1tpXTtcbiAgICAgIHZhciBjb250cm9sbGVySWQgPSBnZXROYW1lKHJlcGxpY2F0aW9uQ29udHJvbGxlcik7XG4gICAgICB2YXIgbmFtZSA9IGdldE5hbWUoc2VydmljZSkgfHwgY29udHJvbGxlcklkO1xuICAgICAgdmFyIGFkZHJlc3MgPSBDb3JlLnBhdGhHZXQoc2VydmljZSwgW1wic3BlY1wiLCBcInBvcnRhbElQXCJdKTtcbiAgICAgIGlmICghbmFtZSAmJiBwb2RzLmxlbmd0aCkge1xuICAgICAgICBuYW1lID0gcG9kc1swXS5pZEFiYnJldjtcbiAgICAgIH1cbiAgICAgIGlmICghYXBwVmlldy4kaW5mby5uYW1lKSB7XG4gICAgICAgIGFwcFZpZXcuJGluZm8ubmFtZSA9IG5hbWU7XG4gICAgICB9XG4gICAgICBpZiAoIWFwcFZpZXcuaWQgJiYgcG9kcy5sZW5ndGgpIHtcbiAgICAgICAgYXBwVmlldy5pZCA9IGdldE5hbWUocG9kc1swXSk7XG4gICAgICB9XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgYXBwTmFtZSA9IG5hbWU7XG4gICAgICB9XG4gICAgICB2YXIgcG9kQ291bnQgPSBwb2RzLmxlbmd0aDtcbiAgICAgIHZhciBwb2RDb3VudFRleHQgPSBwb2RDb3VudCArIFwiIHBvZFwiICsgKHBvZENvdW50ID4gMSA/IFwic1wiIDogXCJcIik7XG4gICAgICB2YXIgdmlldyA9IHtcbiAgICAgICAgYXBwTmFtZTogYXBwTmFtZSB8fCBuYW1lLFxuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBjcmVhdGVkRGF0ZTogYXBwVmlldy4kY3JlYXRpb25EYXRlLFxuICAgICAgICBwb2RDb3VudDogcG9kQ291bnQsXG4gICAgICAgIHBvZENvdW50VGV4dDogcG9kQ291bnRUZXh0LFxuICAgICAgICBhZGRyZXNzOiBhZGRyZXNzLFxuICAgICAgICBjb250cm9sbGVySWQ6IGNvbnRyb2xsZXJJZCxcbiAgICAgICAgc2VydmljZTogc2VydmljZSxcbiAgICAgICAgcmVwbGljYXRpb25Db250cm9sbGVyOiByZXBsaWNhdGlvbkNvbnRyb2xsZXIsXG4gICAgICAgIHBvZHM6IHBvZHNcbiAgICAgIH07XG4gICAgICBhcnJheS5wdXNoKHZpZXcpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogY29udmVydHMgYSBnaXQgcGF0aCBpbnRvIGFuIGFjY2Vzc2libGUgVVJMIGZvciB0aGUgYnJvd3NlclxuICAgKi9cbiAgZXhwb3J0IGZ1bmN0aW9uIGdpdFBhdGhUb1VybChpY29uUGF0aCwgYnJhbmNoID0gXCJtYXN0ZXJcIikge1xuICAgIHJldHVybiAoSGF3dGlvQ29yZS5pbmplY3Rvci5nZXQoJ0FwcExpYnJhcnlVUkwnKSB8fCAnJykgKyBcIi9naXQvXCIgKyBicmFuY2ggKyBpY29uUGF0aDtcbiAgfVxuXG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGVucmljaEJ1aWxkQ29uZmlnKGJ1aWxkQ29uZmlnLCBzb3J0ZWRCdWlsZHMpIHtcbiAgICBpZiAoYnVpbGRDb25maWcpIHtcbiAgICAgIHZhciB0cmlnZ2VyVXJsOnN0cmluZyA9IG51bGw7XG4gICAgICB2YXIgbWV0YWRhdGEgPSBidWlsZENvbmZpZy5tZXRhZGF0YSB8fCB7fTtcbiAgICAgIHZhciBuYW1lID0gbWV0YWRhdGEubmFtZTtcbiAgICAgIGJ1aWxkQ29uZmlnLiRuYW1lID0gbmFtZTtcbiAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChbZmFsc2UsIHRydWVdLCAoZmxhZykgPT4ge1xuICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChidWlsZENvbmZpZy50cmlnZ2VycywgKHRyaWdnZXIpID0+IHtcbiAgICAgICAgICAgIGlmICghdHJpZ2dlclVybCkge1xuICAgICAgICAgICAgICB2YXIgdHlwZSA9IHRyaWdnZXIudHlwZTtcbiAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IFwiZ2VuZXJpY1wiIHx8IGZsYWcpIHtcbiAgICAgICAgICAgICAgICB2YXIgZ2VuZXJpYyA9IHRyaWdnZXJbdHlwZV07XG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgJiYgZ2VuZXJpYykge1xuICAgICAgICAgICAgICAgICAgdmFyIHNlY3JldCA9IGdlbmVyaWMuc2VjcmV0O1xuICAgICAgICAgICAgICAgICAgaWYgKHNlY3JldCkge1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyVXJsID0gVXJsSGVscGVycy5qb2luKGJ1aWxkQ29uZmlnSG9va3NSZXN0VVJMKCksIG5hbWUsIHNlY3JldCwgdHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkQ29uZmlnLiR0cmlnZ2VyVXJsID0gdHJpZ2dlclVybDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gbGV0cyBmaW5kIHRoZSBsYXRlc3QgYnVpbGQuLi5cbiAgICAgICAgaWYgKHNvcnRlZEJ1aWxkcykge1xuICAgICAgICAgIGJ1aWxkQ29uZmlnLiRsYXN0QnVpbGQgPSBfLmZpbmQoc29ydGVkQnVpbGRzLCB7XG4gICAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBidWlsZGNvbmZpZzogbmFtZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciAkZmFicmljOFZpZXdzID0ge307XG5cbiAgICAgIGZ1bmN0aW9uIGRlZmF1bHRQcm9wZXJ0aWVzSWZOb3RFeGlzdChuYW1lLCBvYmplY3QsIGF1dG9DcmVhdGUgPSBmYWxzZSkge1xuICAgICAgICB2YXIgdmlldyA9ICRmYWJyaWM4Vmlld3NbbmFtZV07XG4gICAgICAgIGlmIChhdXRvQ3JlYXRlICYmICF2aWV3KSB7XG4gICAgICAgICAgdmlldyA9IHt9XG4gICAgICAgICAgJGZhYnJpYzhWaWV3c1tuYW1lXSA9IHZpZXc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZpZXcpIHtcbiAgICAgICAgICBhbmd1bGFyLmZvckVhY2gob2JqZWN0LCAodmFsdWUsIHByb3BlcnR5KSA9PiB7XG4gICAgICAgICAgICB2YXIgY3VycmVudCA9IHZpZXdbcHJvcGVydHldO1xuICAgICAgICAgICAgaWYgKCFjdXJyZW50KSB7XG4gICAgICAgICAgICAgIHZpZXdbcHJvcGVydHldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGxhYmVscyA9IG1ldGFkYXRhLmxhYmVscyB8fCB7fTtcbiAgICAgIHZhciBhbm5vdGF0aW9ucyA9IG1ldGFkYXRhLmFubm90YXRpb25zIHx8IHt9O1xuXG4gICAgICAvLyBsZXRzIGRlZmF1bHQgdGhlIHJlcG8gYW5kIHVzZXJcbiAgICAgIGJ1aWxkQ29uZmlnLiR1c2VyID0gYW5ub3RhdGlvbnNbXCJmYWJyaWM4LmplbmtpbnMvdXNlclwiXSB8fCBsYWJlbHNbXCJ1c2VyXCJdO1xuICAgICAgYnVpbGRDb25maWcuJHJlcG8gPSBhbm5vdGF0aW9uc1tcImZhYnJpYzguamVua2lucy9yZXBvXCJdIHx8IGxhYmVsc1tcInJlcG9cIl07XG5cbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChhbm5vdGF0aW9ucywgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgdmFyIHBhcnRzID0ga2V5LnNwbGl0KCcvJywgMik7XG4gICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgdmFyIGxpbmtJZCA9IHBhcnRzWzBdO1xuICAgICAgICAgIHZhciBwcm9wZXJ0eSA9IHBhcnRzWzFdO1xuICAgICAgICAgIGlmIChsaW5rSWQgJiYgcHJvcGVydHkgJiYgbGlua0lkLnN0YXJ0c1dpdGgoXCJmYWJyaWM4LmxpbmtcIikpIHtcbiAgICAgICAgICAgIHZhciBsaW5rID0gJGZhYnJpYzhWaWV3c1tsaW5rSWRdO1xuICAgICAgICAgICAgaWYgKCFsaW5rKSB7XG4gICAgICAgICAgICAgIGxpbmsgPSB7XG4gICAgICAgICAgICAgICAgY2xhc3M6IGxpbmtJZFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAkZmFicmljOFZpZXdzW2xpbmtJZF0gPSBsaW5rO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGlua1twcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoYnVpbGRDb25maWcuJHVzZXIgJiYgYnVpbGRDb25maWcuJHJlcG8pIHtcbiAgICAgICAgLy8gYnJvd3NlIGdvZ3MgcmVwbyB2aWV3XG4gICAgICAgIHZhciBnb2dzVXJsID0gc2VydmljZUxpbmtVcmwoZ29nc1NlcnZpY2VOYW1lKTtcbiAgICAgICAgaWYgKGdvZ3NVcmwpIHtcbiAgICAgICAgICBkZWZhdWx0UHJvcGVydGllc0lmTm90RXhpc3QoXCJmYWJyaWM4LmxpbmsuYnJvd3NlR29ncy52aWV3XCIsIHtcbiAgICAgICAgICAgIGxhYmVsOiBcIkJyb3dzZS4uLlwiLFxuICAgICAgICAgICAgdXJsOiBVcmxIZWxwZXJzLmpvaW4oZ29nc1VybCwgYnVpbGRDb25maWcuJHVzZXIsIGJ1aWxkQ29uZmlnLiRyZXBvKSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkJyb3dzZSB0aGUgc291cmNlIGNvZGUgb2YgdGhpcyByZXBvc2l0b3J5XCIsXG4gICAgICAgICAgICBpY29uQ2xhc3M6IFwiZmEgZmEtZXh0ZXJuYWwtbGlua1wiXG4gICAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBydW4gZm9yZ2UgY29tbWFuZHMgdmlld1xuICAgICAgICBkZWZhdWx0UHJvcGVydGllc0lmTm90RXhpc3QoXCJmYWJyaWM4LmxpbmsuZm9yZ2VDb21tYW5kLnZpZXdcIiwge1xuICAgICAgICAgIGxhYmVsOiBcIkNvbW1hbmQuLi5cIixcbiAgICAgICAgICB1cmw6IFVybEhlbHBlcnMuam9pbihcIi9mb3JnZS9jb21tYW5kcy91c2VyXCIsIGJ1aWxkQ29uZmlnLiR1c2VyLCBidWlsZENvbmZpZy4kcmVwbyksXG4gICAgICAgICAgZGVzY3JpcHRpb246IFwiUGVyZm9ybSBhbiBhY3Rpb24gb24gdGhpcyBwcm9qZWN0XCIsXG4gICAgICAgICAgaWNvbkNsYXNzOiBcImZhIGZhLXBsYXktY2lyY2xlXCJcbiAgICAgICAgfSwgdHJ1ZSk7XG5cbiAgICAgIH1cblxuICAgICAgLy8gYWRkIHNvbWUgaWNvbnMgYW5kIGRlc2NyaXB0aW9uc1xuICAgICAgZGVmYXVsdFByb3BlcnRpZXNJZk5vdEV4aXN0KFwiZmFicmljOC5saW5rLmplbmtpbnMuam9iXCIsIHtcbiAgICAgICAgaWNvbkNsYXNzOiBcImZhIGZhLXRhc2tzXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIlZpZXcgdGhlIEplbmtpbnMgSm9iIGZvciB0aGlzIGJ1aWxkXCJcbiAgICAgIH0pO1xuICAgICAgZGVmYXVsdFByb3BlcnRpZXNJZk5vdEV4aXN0KFwiZmFicmljOC5saW5rLmplbmtpbnMubW9uaXRvclwiLCB7XG4gICAgICAgIGljb25DbGFzczogXCJmYSBmYS10YWNob21ldGVyXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIlZpZXcgdGhlIEplbmtpbnMgTW9uaXRvciBkYXNoYm9hcmQgZm9yIHRoaXMgcHJvamVjdFwiXG4gICAgICB9KTtcbiAgICAgIGRlZmF1bHRQcm9wZXJ0aWVzSWZOb3RFeGlzdChcImZhYnJpYzgubGluay5qZW5raW5zLnBpcGVsaW5lXCIsIHtcbiAgICAgICAgaWNvbkNsYXNzOiBcImZhIGZhLWFycm93LWNpcmNsZS1vLXJpZ2h0XCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIlZpZXcgdGhlIEplbmtpbnMgUGlwZWxpbmUgZm9yIHRoaXMgcHJvamVjdFwiXG4gICAgICB9KTtcblxuICAgICAgYnVpbGRDb25maWcuJGZhYnJpYzhWaWV3cyA9ICRmYWJyaWM4Vmlld3M7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGVucmljaEJ1aWxkQ29uZmlncyhidWlsZENvbmZpZ3MsIHNvcnRlZEJ1aWxkcykge1xuICAgIGFuZ3VsYXIuZm9yRWFjaChidWlsZENvbmZpZ3MsIChidWlsZENvbmZpZykgPT4ge1xuICAgICAgZW5yaWNoQnVpbGRDb25maWcoYnVpbGRDb25maWcsIHNvcnRlZEJ1aWxkcyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkQ29uZmlncztcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBlbnJpY2hCdWlsZHMoYnVpbGRzKSB7XG4gICAgYW5ndWxhci5mb3JFYWNoKGJ1aWxkcywgKGJ1aWxkKSA9PiB7XG4gICAgICBlbnJpY2hCdWlsZChidWlsZCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIF8uc29ydEJ5KGJ1aWxkcywgXCIkY3JlYXRpb25EYXRlXCIpLnJldmVyc2UoKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBlbnJpY2hCdWlsZChidWlsZCkge1xuICAgIGlmIChidWlsZCkge1xuICAgICAgdmFyIG1ldGFkYXRhID0gYnVpbGQubWV0YWRhdGEgfHwge307XG4gICAgICB2YXIgbmFtZSA9IGdldE5hbWUoYnVpbGQpO1xuICAgICAgdmFyIG5hbWVzcGFjZSA9IGdldE5hbWVzcGFjZShidWlsZCk7XG4gICAgICBidWlsZC4kbmFtZSA9IG5hbWU7XG4gICAgICBidWlsZC4kbmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuXG4gICAgICB2YXIgbmFtZUFycmF5ID0gbmFtZS5zcGxpdChcIi1cIik7XG4gICAgICB2YXIgbmFtZUFycmF5TGVuZ3RoID0gbmFtZUFycmF5Lmxlbmd0aDtcbiAgICAgIGJ1aWxkLiRzaG9ydE5hbWUgPSAobmFtZUFycmF5TGVuZ3RoID4gNCkgPyBuYW1lQXJyYXkuc2xpY2UoMCwgbmFtZUFycmF5TGVuZ3RoIC0gNCkuam9pbihcIi1cIikgOiBuYW1lLnN1YnN0cmluZygwLCAzMCk7XG5cbiAgICAgIHZhciBsYWJlbHMgPSBnZXRMYWJlbHMocm91dGUpO1xuICAgICAgdmFyIGNvbmZpZ0lkID0gbGFiZWxzLmJ1aWxkY29uZmlnO1xuICAgICAgYnVpbGQuJGNvbmZpZ0lkID0gY29uZmlnSWQ7XG4gICAgICBpZiAoY29uZmlnSWQpIHtcbiAgICAgICAgYnVpbGQuJGNvbmZpZ0xpbmsgPSBVcmxIZWxwZXJzLmpvaW4oXCJrdWJlcm5ldGVzL2J1aWxkQ29uZmlnc1wiLCBjb25maWdJZCk7XG4gICAgICB9XG4gICAgICB2YXIgY3JlYXRpb25UaW1lc3RhbXAgPSBnZXRDcmVhdGlvblRpbWVzdGFtcChidWlsZCk7XG4gICAgICBpZiAoY3JlYXRpb25UaW1lc3RhbXApIHtcbiAgICAgICAgdmFyIGQgPSBuZXcgRGF0ZShjcmVhdGlvblRpbWVzdGFtcCk7XG4gICAgICAgIGJ1aWxkLiRjcmVhdGlvbkRhdGUgPSBkO1xuICAgICAgfVxuICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgYnVpbGQuJHZpZXdMaW5rID0gVXJsSGVscGVycy5qb2luKFwia3ViZXJuZXRlcy9idWlsZHNcIiwgbmFtZSk7XG4gICAgICAgIGJ1aWxkLiRsb2dzTGluayA9IFVybEhlbHBlcnMuam9pbihcImt1YmVybmV0ZXMvYnVpbGRMb2dzXCIsIG5hbWUpO1xuICAgICAgfVxuICAgICAgdmFyIHBvZE5hbWUgPSBidWlsZC5wb2ROYW1lO1xuICAgICAgaWYgKHBvZE5hbWUgJiYgbmFtZXNwYWNlKSB7XG4gICAgICAgIHZhciBwb2ROYW1lQXJyYXkgPSBwb2ROYW1lLnNwbGl0KFwiLVwiKTtcbiAgICAgICAgdmFyIHBvZE5hbWVBcnJheUxlbmd0aCA9IHBvZE5hbWVBcnJheS5sZW5ndGhcbiAgICAgICAgYnVpbGQuJHBvZFNob3J0TmFtZSA9IChwb2ROYW1lQXJyYXlMZW5ndGggPiA1KSA/IHBvZE5hbWVBcnJheVtwb2ROYW1lQXJyYXlMZW5ndGggLSA1XSA6IHBvZE5hbWUuc3Vic3RyaW5nKDAsIDMwKTtcbiAgICAgICAgYnVpbGQuJHBvZExpbmsgPSBVcmxIZWxwZXJzLmpvaW4oXCJrdWJlcm5ldGVzL25hbWVzcGFjZVwiLCBuYW1lc3BhY2UsIFwicG9kc1wiLCBwb2ROYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJ1aWxkO1xuICB9XG5cblxuICBleHBvcnQgZnVuY3Rpb24gZW5yaWNoRGVwbG95bWVudENvbmZpZyhkZXBsb3ltZW50Q29uZmlnKSB7XG4gICAgaWYgKGRlcGxveW1lbnRDb25maWcpIHtcbiAgICAgIHZhciB0cmlnZ2VyVXJsOnN0cmluZyA9IG51bGw7XG4gICAgICB2YXIgbmFtZSA9IENvcmUucGF0aEdldChkZXBsb3ltZW50Q29uZmlnLCBbXCJtZXRhZGF0YVwiLCBcIm5hbWVcIl0pO1xuICAgICAgZGVwbG95bWVudENvbmZpZy4kbmFtZSA9IG5hbWU7XG4gICAgICB2YXIgZm91bmQgPSBmYWxzZTtcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChkZXBsb3ltZW50Q29uZmlnLnRyaWdnZXJzLCAodHJpZ2dlcikgPT4ge1xuICAgICAgICB2YXIgdHlwZSA9IHRyaWdnZXIudHlwZTtcbiAgICAgICAgaWYgKCFkZXBsb3ltZW50Q29uZmlnLiRpbWFnZUNoYW5nZVBhcmFtcyAmJiB0eXBlID09PSBcIkltYWdlQ2hhbmdlXCIpIHtcbiAgICAgICAgICB2YXIgaW1hZ2VDaGFuZ2VQYXJhbXMgPSB0cmlnZ2VyLmltYWdlQ2hhbmdlUGFyYW1zO1xuICAgICAgICAgIGlmIChpbWFnZUNoYW5nZVBhcmFtcykge1xuICAgICAgICAgICAgdmFyIGNvbnRhaW5lck5hbWVzID0gaW1hZ2VDaGFuZ2VQYXJhbXMuY29udGFpbmVyTmFtZXMgfHwgW107XG4gICAgICAgICAgICBpbWFnZUNoYW5nZVBhcmFtcy4kY29udGFpbmVyTmFtZXMgPSBjb250YWluZXJOYW1lcy5qb2luKFwiIFwiKTtcbiAgICAgICAgICAgIGRlcGxveW1lbnRDb25maWcuJGltYWdlQ2hhbmdlUGFyYW1zID0gaW1hZ2VDaGFuZ2VQYXJhbXM7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gZW5yaWNoRGVwbG95bWVudENvbmZpZ3MoZGVwbG95bWVudENvbmZpZ3MpIHtcbiAgICBhbmd1bGFyLmZvckVhY2goZGVwbG95bWVudENvbmZpZ3MsIChkZXBsb3ltZW50Q29uZmlnKSA9PiB7XG4gICAgICBlbnJpY2hEZXBsb3ltZW50Q29uZmlnKGRlcGxveW1lbnRDb25maWcpO1xuICAgIH0pO1xuICAgIHJldHVybiBkZXBsb3ltZW50Q29uZmlncztcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBlbnJpY2hJbWFnZVJlcG9zaXRvcnkoaW1hZ2VSZXBvc2l0b3J5KSB7XG4gICAgaWYgKGltYWdlUmVwb3NpdG9yeSkge1xuICAgICAgdmFyIHRyaWdnZXJVcmw6c3RyaW5nID0gbnVsbDtcbiAgICAgIHZhciBuYW1lID0gQ29yZS5wYXRoR2V0KGltYWdlUmVwb3NpdG9yeSwgW1wibWV0YWRhdGFcIiwgXCJuYW1lXCJdKTtcbiAgICAgIGltYWdlUmVwb3NpdG9yeS4kbmFtZSA9IG5hbWU7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGVucmljaEltYWdlUmVwb3NpdG9yaWVzKGltYWdlUmVwb3NpdG9yaWVzKSB7XG4gICAgYW5ndWxhci5mb3JFYWNoKGltYWdlUmVwb3NpdG9yaWVzLCAoaW1hZ2VSZXBvc2l0b3J5KSA9PiB7XG4gICAgICBlbnJpY2hJbWFnZVJlcG9zaXRvcnkoaW1hZ2VSZXBvc2l0b3J5KTtcbiAgICB9KTtcbiAgICByZXR1cm4gaW1hZ2VSZXBvc2l0b3JpZXM7XG4gIH1cblxuXG4gIHZhciBsYWJlbENvbG9ycyA9IHtcbiAgICAndmVyc2lvbic6ICdiYWNrZ3JvdW5kLWJsdWUnLFxuICAgICduYW1lJzogJ2JhY2tncm91bmQtbGlnaHQtZ3JlZW4nLFxuICAgICdjb250YWluZXInOiAnYmFja2dyb3VuZC1saWdodC1ncmV5J1xuICB9O1xuXG4gIGV4cG9ydCBmdW5jdGlvbiBjb250YWluZXJMYWJlbENsYXNzKGxhYmVsVHlwZTpzdHJpbmcpIHtcbiAgICBpZiAoIShsYWJlbFR5cGUgaW4gbGFiZWxDb2xvcnMpKSB7XG4gICAgICByZXR1cm4gJ21vdXNlLXBvaW50ZXInO1xuICAgIH1cbiAgICBlbHNlIHJldHVybiBsYWJlbENvbG9yc1tsYWJlbFR5cGVdICsgJyBtb3VzZS1wb2ludGVyJztcbiAgfVxuXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZmFicmljOCBmb3JnZSBwbHVnaW4gaXMgZW5hYmxlZFxuICAgKi9cbiAgZXhwb3J0IGZ1bmN0aW9uIGlzRm9yZ2VFbmFibGVkKCkge1xuICAgIC8vIFRPRE8gc2hvdWxkIHJldHVybiB0cnVlIGlmIHRoZSBzZXJ2aWNlIFwiZmFicmljOC1mb3JnZVwiIGlzIHZhbGlkXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY3VycmVudCBrdWJlcm5ldGVzIHNlbGVjdGVkIG5hbWVzcGFjZSBvciB0aGUgZGVmYXVsdCBvbmVcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiBjdXJyZW50S3ViZXJuZXRlc05hbWVzcGFjZSgpIHtcbiAgICB2YXIgaW5qZWN0b3IgPSBIYXd0aW9Db3JlLmluamVjdG9yO1xuICAgIGlmIChpbmplY3Rvcikge1xuICAgICAgdmFyIEt1YmVybmV0ZXNTdGF0ZSA9IGluamVjdG9yLmdldChcIkt1YmVybmV0ZXNTdGF0ZVwiKSB8fCB7fTtcbiAgICAgIHJldHVybiBLdWJlcm5ldGVzU3RhdGUuc2VsZWN0ZWROYW1lc3BhY2UgfHwgZGVmYXVsdE5hbWVzcGFjZTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmF1bHROYW1lc3BhY2U7XG4gIH1cblxuICAvKipcbiAgICogQ29uZmlndXJlcyB0aGUganNvbiBzY2hlbWFcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiBjb25maWd1cmVTY2hlbWEoKSB7XG4gICAgYW5ndWxhci5mb3JFYWNoKHNjaGVtYS5kZWZpbml0aW9ucywgKGRlZmluaXRpb24sIG5hbWUpID0+IHtcbiAgICAgIHZhciBwcm9wZXJ0aWVzID0gZGVmaW5pdGlvbi5wcm9wZXJ0aWVzO1xuICAgICAgaWYgKHByb3BlcnRpZXMpIHtcbiAgICAgICAgdmFyIGhpZGVQcm9wZXJ0aWVzID0gW1wiY3JlYXRpb25UaW1lc3RhbXBcIiwgXCJraW5kXCIsIFwiYXBpVmVyc2lvblwiLCBcImFubm90YXRpb25zXCIsIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIiwgXCJuYW1lc3BhY2VcIiwgXCJyZXNvdXJjZVZlcnNpb25cIiwgXCJzZWxmTGlua1wiLCBcInVpZFwiXTtcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKGhpZGVQcm9wZXJ0aWVzLCAocHJvcGVydHlOYW1lKSA9PiB7XG4gICAgICAgICAgdmFyIHByb3BlcnR5ID0gcHJvcGVydGllc1twcm9wZXJ0eU5hbWVdO1xuICAgICAgICAgIGlmIChwcm9wZXJ0eSkge1xuICAgICAgICAgICAgcHJvcGVydHlbXCJoaWRkZW5cIl0gID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBhbmd1bGFyLmZvckVhY2gocHJvcGVydGllcywgKHByb3BlcnR5LCBwcm9wZXJ0eU5hbWUpID0+IHtcbiAgICAgICAgICB2YXIgcmVmID0gcHJvcGVydHlbXCIkcmVmXCJdO1xuICAgICAgICAgIHZhciB0eXBlID0gcHJvcGVydHlbXCJ0eXBlXCJdO1xuICAgICAgICAgIGlmIChyZWYgJiYgKCF0eXBlIHx8IHR5cGUgPT09IFwib2JqZWN0XCIpKSB7XG4gICAgICAgICAgICBwcm9wZXJ0eVtcInR5cGVcIl0gPSByZWY7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlID09PSBcImFycmF5XCIpIHtcbiAgICAgICAgICAgIHZhciBpdGVtcyA9IHByb3BlcnR5W1wiaXRlbXNcIl07XG4gICAgICAgICAgICBpZiAoaXRlbXMpIHtcbiAgICAgICAgICAgICAgdmFyIHJlZiA9IGl0ZW1zW1wiJHJlZlwiXTtcbiAgICAgICAgICAgICAgdmFyIHR5cGUgPSBpdGVtc1tcInR5cGVcIl07XG4gICAgICAgICAgICAgIGlmIChyZWYgJiYgKCF0eXBlIHx8IHR5cGUgPT09IFwib2JqZWN0XCIpKSB7XG4gICAgICAgICAgICAgICAgaXRlbXNbXCJ0eXBlXCJdID0gcmVmO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgc2NoZW1hLmRlZmluaXRpb25zLm9zX2J1aWxkX1dlYkhvb2tUcmlnZ2VyLnByb3BlcnRpZXMuc2VjcmV0LnR5cGUgPSBcInBhc3N3b3JkXCI7XG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBMZXRzIHJlbW92ZSBhbnkgZW5yaWNoZWQgZGF0YSB0byBsZWF2ZSB0aGUgb3JpZ2luYWwganNvbiBpbnRhY3RcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiB0b1Jhd0pzb24oaXRlbSkge1xuICAgIHZhciBvID0gYW5ndWxhci5jb3B5KGl0ZW0pO1xuICAgIGFuZ3VsYXIuZm9yRWFjaChvLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgaWYgKGtleS5zdGFydHNXaXRoKFwiJFwiKSB8fCBrZXkuc3RhcnRzV2l0aChcIl9cIikpIHtcbiAgICAgICAgZGVsZXRlIG9ba2V5XTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkobywgbnVsbCwgMik7IC8vIHNwYWNpbmcgbGV2ZWwgPSAyXG4gIH1cblxufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2t1YmVybmV0ZXMvdHMva3ViZXJuZXRlc0hlbHBlcnMudHNcIi8+XG5cbm1vZHVsZSBQcm9qZWN0IHtcblxuICBleHBvcnQgdmFyIGNvbnRleHQgPSAnL3Byb2plY3QnO1xuICBleHBvcnQgdmFyIGhhc2ggPSAnIycgKyBjb250ZXh0O1xuICBleHBvcnQgdmFyIHBsdWdpbk5hbWUgPSAnUHJvamVjdCc7XG4gIGV4cG9ydCB2YXIgbG9nOkxvZ2dpbmcuTG9nZ2VyID0gTG9nZ2VyLmdldChwbHVnaW5OYW1lKTtcblxuICBleHBvcnQgdmFyIHBsdWdpblBhdGggPSAncGx1Z2lucy9wcm9qZWN0Lyc7XG4gIGV4cG9ydCB2YXIgdGVtcGxhdGVQYXRoID0gcGx1Z2luUGF0aCArICdodG1sLyc7XG5cblxuICBleHBvcnQgdmFyIGdvZ3NSZXN0VVJMID0gXCIva3ViZXJuZXRlcy9hcGkvXCIgKyBLdWJlcm5ldGVzLmRlZmF1bHRBcGlWZXJzaW9uICsgXCIvcHJveHkvc2VydmljZXMvZ29ncy1odHRwLXNlcnZpY2UvYXBpL3YxXCI7XG5cbiAgZXhwb3J0IHZhciBnb2dzVXNlclJlcG9SZXN0VVJMID0gZ29nc1Jlc3RVUkwgKyBcIi91c2VyL3JlcG9zXCI7XG5cbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9pbmNsdWRlcy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9rdWJlcm5ldGVzL3RzL2t1YmVybmV0ZXNIZWxwZXJzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cInByb2plY3RIZWxwZXJzLnRzXCIvPlxuXG5tb2R1bGUgUHJvamVjdCB7XG5cbiAgZXhwb3J0IHZhciBfbW9kdWxlID0gYW5ndWxhci5tb2R1bGUocGx1Z2luTmFtZSwgW0t1YmVybmV0ZXMucGx1Z2luTmFtZV0pO1xuICBleHBvcnQgdmFyIGNvbnRyb2xsZXIgPSBQbHVnaW5IZWxwZXJzLmNyZWF0ZUNvbnRyb2xsZXJGdW5jdGlvbihfbW9kdWxlLCBwbHVnaW5OYW1lKTtcbiAgZXhwb3J0IHZhciByb3V0ZSA9IFBsdWdpbkhlbHBlcnMuY3JlYXRlUm91dGluZ0Z1bmN0aW9uKHRlbXBsYXRlUGF0aCk7XG5cbiAgX21vZHVsZS5jb25maWcoWyckcm91dGVQcm92aWRlcicsICgkcm91dGVQcm92aWRlcjpuZy5yb3V0ZS5JUm91dGVQcm92aWRlcikgPT4ge1xuICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oVXJsSGVscGVycy5qb2luKGNvbnRleHQsICcvY3JlYXRlJyksIHJvdXRlKCdwcm9qZWN0Q3JlYXRlLmh0bWwnLCBmYWxzZSkpO1xuICB9XSk7XG5cbiAgX21vZHVsZS5mYWN0b3J5KCdGb3JnZUFwaVVSTCcsIFsnam9sb2tpYVVybCcsICdqb2xva2lhJywgJyRxJywgJyRyb290U2NvcGUnLCAoam9sb2tpYVVybDpzdHJpbmcsIGpvbG9raWE6Sm9sb2tpYS5JSm9sb2tpYSwgJHE6bmcuSVFTZXJ2aWNlLCAkcm9vdFNjb3BlOm5nLklSb290U2NvcGVTZXJ2aWNlKSA9PiB7XG4gICAgcmV0dXJuIEt1YmVybmV0ZXMua3ViZXJuZXRlc0FwaVVybCgpICsgXCIvcHJveHlcIiArIEt1YmVybmV0ZXMua3ViZXJuZXRlc05hbWVzcGFjZVBhdGgoKSArIFwiL3NlcnZpY2VzL2ZhYnJpYzgtZm9yZ2UvYXBpL2ZvcmdlXCI7XG4gIH1dKTtcblxuXG4gIGhhd3Rpb1BsdWdpbkxvYWRlci5hZGRNb2R1bGUocGx1Z2luTmFtZSk7XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vaW5jbHVkZXMudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwicHJvamVjdEhlbHBlcnMudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwicHJvamVjdFBsdWdpbi50c1wiLz5cblxubW9kdWxlIFByb2plY3Qge1xuXG4gIGV4cG9ydCB2YXIgUHJvamVjdENvbnRyb2xsZXIgPSBjb250cm9sbGVyKFwiUHJvamVjdENvbnRyb2xsZXJcIixcbiAgICBbXCIkc2NvcGVcIiwgXCJLdWJlcm5ldGVzTW9kZWxcIiwgXCIkdGVtcGxhdGVDYWNoZVwiLCBcIiRsb2NhdGlvblwiLCBcIiRyb3V0ZVBhcmFtc1wiLCBcIiRodHRwXCIsIFwiJHRpbWVvdXRcIiwgXCJLdWJlcm5ldGVzQXBpVVJMXCIsXG4gICAgICAoJHNjb3BlLCBLdWJlcm5ldGVzTW9kZWw6S3ViZXJuZXRlcy5LdWJlcm5ldGVzTW9kZWxTZXJ2aWNlLFxuICAgICAgICR0ZW1wbGF0ZUNhY2hlOm5nLklUZW1wbGF0ZUNhY2hlU2VydmljZSwgJGxvY2F0aW9uOm5nLklMb2NhdGlvblNlcnZpY2UsICRyb3V0ZVBhcmFtcywgJGh0dHAsICR0aW1lb3V0LCBLdWJlcm5ldGVzQXBpVVJMKSA9PiB7XG5cbiAgICAgICAgJHNjb3BlLm1vZGVsID0gS3ViZXJuZXRlc01vZGVsO1xuXG4gICAgICAgICRzY29wZS5lbnRpdHkgPSB7XG4gICAgICAgICAgbmFtZTogXCJcIlxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS4kb24oJyRyb3V0ZVVwZGF0ZScsICgkZXZlbnQpID0+IHtcbiAgICAgICAgICB1cGRhdGVEYXRhKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFRPRE8gYWRkIGFjdHVhbCBsb2dpbi9wd2Qgb3IgT0F1dGhcbiAgICAgICAgdmFyIGF1dGhvcml6YXRpb25IZWFkZXIgPSBcIkJhc2ljIFRPRE9cIjtcblxuICAgICAgICAvLyBUT0RPIHRha2UgdGhpcyBmcm9tIHRoZSBzZXJ2aWNlIGhvc3QhXG4gICAgICAgICRzY29wZS5jcmVhdGUgPSAoKSA9PiB7XG4gICAgICAgICAgdmFyIHVybCA9IGdvZ3NVc2VyUmVwb1Jlc3RVUkw7XG5cbiAgICAgICAgICBjb25zb2xlLmxvZyhcIkNyZWF0aW5nIHByb2plY3QgXCIgKyBhbmd1bGFyLnRvSnNvbigkc2NvcGUuZW50aXR5LCB0cnVlKSk7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJQb3N0aW5nIHRvIHVybDogXCIgKyB1cmwpO1xuXG4gICAgICAgICAgdmFyIGRhdGEgPSAkc2NvcGUuZW50aXR5O1xuICAgICAgICAgIHZhciBjb25maWcgPSB7XG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICd3aXRoQ3JlZGVudGlhbHMnOiB0cnVlLFxuICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IGF1dGhvcml6YXRpb25IZWFkZXIsXG4gICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgJGh0dHAucG9zdCh1cmwsIGRhdGEsIGNvbmZpZykuXG4gICAgICAgICAgICBzdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInByb2plY3QgY3JlYXRlZCEgZ290IGRhdGEgXCIgKyBhbmd1bGFyLnRvSnNvbihkYXRhLCB0cnVlKSk7XG5cbiAgICAgICAgICAgICAgY3JlYXRlUHJvamVjdChkYXRhKTtcbiAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgZXJyb3IoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICAgIGxvZy53YXJuKFwiRmFpbGVkIHRvIGxvYWQgXCIgKyB1cmwgKyBcIiBcIiArIGRhdGEgKyBcIiBcIiArIHN0YXR1cyk7XG4gICAgICAgICAgICAgIENvcmUubm90aWZpY2F0aW9uKCdlcnJvcicsIFwiRmFpbGVkIHRvIGNyZWF0ZSBnaXQgcmVwb3NpdG9yeSBcIiArIG5hbWUgKyBcIi4gUmV0dXJuZWQgY29kZTogXCIgKyBzdGF0dXMgKyBcIiBcIiArIGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdXBkYXRlRGF0YSgpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVByb2plY3QoZGF0YSkge1xuICAgICAgICAgIHZhciBmdWxsX25hbWUgPSBkYXRhLmZ1bGxfbmFtZTtcbiAgICAgICAgICBpZiAoZnVsbF9uYW1lKSB7XG4gICAgICAgICAgICB2YXIgZ2l0VXJsID0gQ29yZS51cmwoZ29nc1Jlc3RVUkwgKyBcIi9cIiArIGZ1bGxfbmFtZSArIFwiLmdpdFwiKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ3JlYXRpbmcgYSBnaXQgcmVwbyBmb3IgXCIgKyBmdWxsX25hbWUgKyBcIiBhdCA6IFwiICsgZ2l0VXJsKTtcblxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBUT0RPIGxldHMgZm9yd2FyZCB0byB0aGUgY3JlYXRlIHByb2plY3Qgd2l6YXJkLi4uXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVEYXRhKCkge1xuICAgICAgICAgICRzY29wZS5idWlsZHMgPSBbXTtcbiAgICAgICAgICB2YXIgdXJsID0gZ29nc1VzZXJSZXBvUmVzdFVSTDtcbiAgICAgICAgICB2YXIgY29uZmlnID0ge1xuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAnd2l0aENyZWRlbnRpYWxzJzogdHJ1ZSxcbiAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBhdXRob3JpemF0aW9uSGVhZGVyXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBkZWxldGUgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bXCJBY2NlcHRcIl07XG4gICAgICAgICAgJGh0dHAuZ2V0KHVybCwgY29uZmlnKS5cbiAgICAgICAgICAgIHN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJnb3QgcmVwb3M6IFwiICsgYW5ndWxhci50b0pzb24oZGF0YSwgdHJ1ZSkpO1xuICAgICAgICAgICAgICAgICRzY29wZS5idWlsZHMgPSBkYXRhO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICRzY29wZS5mZXRjaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgQ29yZS4kYXBwbHkoJHNjb3BlKTtcbiAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgZXJyb3IoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICAgICRzY29wZS5mZXRjaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgbG9nLndhcm4oXCJGYWlsZWQgdG8gbG9hZCBcIiArIHVybCArIFwiIFwiICsgZGF0YSArIFwiIFwiICsgc3RhdHVzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XSk7XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vaW5jbHVkZXMudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwia3ViZXJuZXRlc0hlbHBlcnMudHNcIi8+XG5cbmRlY2xhcmUgdmFyIE9TT0F1dGhDb25maWc7XG5cbm1vZHVsZSBLdWJlcm5ldGVzIHtcblxuICBleHBvcnQgdmFyIF9tb2R1bGUgPSBhbmd1bGFyLm1vZHVsZShwbHVnaW5OYW1lLCBbJ2hhd3Rpby1jb3JlJywgJ2hhd3Rpby11aScsICd3aWtpJywgJ3Jlc3Rtb2QnLCAndWkuY29kZW1pcnJvciddKTtcbiAgZXhwb3J0IHZhciBjb250cm9sbGVyID0gUGx1Z2luSGVscGVycy5jcmVhdGVDb250cm9sbGVyRnVuY3Rpb24oX21vZHVsZSwgcGx1Z2luTmFtZSk7XG4gIGV4cG9ydCB2YXIgcm91dGUgPSBQbHVnaW5IZWxwZXJzLmNyZWF0ZVJvdXRpbmdGdW5jdGlvbih0ZW1wbGF0ZVBhdGgpO1xuXG4gIF9tb2R1bGUuY29uZmlnKFsnJHJvdXRlUHJvdmlkZXInLCAoJHJvdXRlUHJvdmlkZXI6bmcucm91dGUuSVJvdXRlUHJvdmlkZXIpID0+IHtcbiAgICAkcm91dGVQcm92aWRlci53aGVuKFVybEhlbHBlcnMuam9pbihjb250ZXh0LCAnL3BvZHMnKSwgcm91dGUoJ3BvZHMuaHRtbCcsIGZhbHNlKSlcbiAgICAgICAgICAgICAgICAgIC53aGVuKFVybEhlbHBlcnMuam9pbihjb250ZXh0LCAnL25hbWVzcGFjZS86bmFtZXNwYWNlL3BvZENyZWF0ZScpLCByb3V0ZSgncG9kQ3JlYXRlLmh0bWwnLCBmYWxzZSkpXG4gICAgICAgICAgICAgICAgICAud2hlbihVcmxIZWxwZXJzLmpvaW4oY29udGV4dCwgJy9uYW1lc3BhY2UvOm5hbWVzcGFjZS9wb2RFZGl0LzppZCcpLCByb3V0ZSgncG9kRWRpdC5odG1sJywgZmFsc2UpKVxuICAgICAgICAgICAgICAgICAgLndoZW4oVXJsSGVscGVycy5qb2luKGNvbnRleHQsICcvbmFtZXNwYWNlLzpuYW1lc3BhY2UvcG9kcycpLCByb3V0ZSgncG9kcy5odG1sJywgZmFsc2UpKVxuICAgICAgICAgICAgICAgICAgLndoZW4oVXJsSGVscGVycy5qb2luKGNvbnRleHQsICcvbmFtZXNwYWNlLzpuYW1lc3BhY2UvcG9kcy86aWQnKSwgcm91dGUoJ3BvZC5odG1sJywgZmFsc2UpKVxuICAgICAgICAgICAgICAgICAgLndoZW4oVXJsSGVscGVycy5qb2luKGNvbnRleHQsICdyZXBsaWNhdGlvbkNvbnRyb2xsZXJzJyksIHJvdXRlKCdyZXBsaWNhdGlvbkNvbnRyb2xsZXJzLmh0bWwnLCBmYWxzZSkpXG4gICAgICAgICAgICAgICAgICAud2hlbihVcmxIZWxwZXJzLmpvaW4oY29udGV4dCwgJy9uYW1lc3BhY2UvOm5hbWVzcGFjZS9yZXBsaWNhdGlvbkNvbnRyb2xsZXJzJyksIHJvdXRlKCdyZXBsaWNhdGlvbkNvbnRyb2xsZXJzLmh0bWwnLCBmYWxzZSkpXG4gICAgICAgICAgICAgICAgICAud2hlbihVcmxIZWxwZXJzLmpvaW4oY29udGV4dCwgJy9uYW1lc3BhY2UvOm5hbWVzcGFjZS9yZXBsaWNhdGlvbkNvbnRyb2xsZXJzLzppZCcpLCByb3V0ZSgncmVwbGljYXRpb25Db250cm9sbGVyLmh0bWwnLCBmYWxzZSkpXG4gICAgICAgICAgICAgICAgICAud2hlbihVcmxIZWxwZXJzLmpvaW4oY29udGV4dCwgJy9uYW1lc3BhY2UvOm5hbWVzcGFjZS9yZXBsaWNhdGlvbkNvbnRyb2xsZXJDcmVhdGUnKSwgcm91dGUoJ3JlcGxpY2F0aW9uQ29udHJvbGxlckNyZWF0ZS5odG1sJywgZmFsc2UpKVxuICAgICAgICAgICAgICAgICAgLndoZW4oVXJsSGVscGVycy5qb2luKGNvbnRleHQsICcvbmFtZXNwYWNlLzpuYW1lc3BhY2UvcmVwbGljYXRpb25Db250cm9sbGVyRWRpdC86aWQnKSwgcm91dGUoJ3JlcGxpY2F0aW9uQ29udHJvbGxlckVkaXQuaHRtbCcsIGZhbHNlKSlcbiAgICAgICAgICAgICAgICAgIC53aGVuKFVybEhlbHBlcnMuam9pbihjb250ZXh0LCAnc2VydmljZXMnKSwgcm91dGUoJ3NlcnZpY2VzLmh0bWwnLCBmYWxzZSkpXG4gICAgICAgICAgICAgICAgICAud2hlbihVcmxIZWxwZXJzLmpvaW4oY29udGV4dCwgJy9uYW1lc3BhY2UvOm5hbWVzcGFjZS9zZXJ2aWNlcycpLCByb3V0ZSgnc2VydmljZXMuaHRtbCcsIGZhbHNlKSlcbiAgICAgICAgICAgICAgICAgIC53aGVuKFVybEhlbHBlcnMuam9pbihjb250ZXh0LCAnL25hbWVzcGFjZS86bmFtZXNwYWNlL3NlcnZpY2VzLzppZCcpLCByb3V0ZSgnc2VydmljZS5odG1sJywgZmFsc2UpKVxuICAgICAgICAgICAgICAgICAgLndoZW4oVXJsSGVscGVycy5qb2luKGNvbnRleHQsICcvbmFtZXNwYWNlLzpuYW1lc3BhY2Uvc2VydmljZUNyZWF0ZScpLCByb3V0ZSgnc2VydmljZUNyZWF0ZS5odG1sJywgZmFsc2UpKVxuICAgICAgICAgICAgICAgICAgLndoZW4oVXJsSGVscGVycy5qb2luKGNvbnRleHQsICcvbmFtZXNwYWNlLzpuYW1lc3BhY2Uvc2VydmljZUVkaXQvOmlkJyksIHJvdXRlKCdzZXJ2aWNlRWRpdC5odG1sJywgZmFsc2UpKVxuICAgICAgICAgICAgICAgICAgLndoZW4oVXJsSGVscGVycy5qb2luKGNvbnRleHQsICdhcHBzJyksIHJvdXRlKCdhcHBzLmh0bWwnLCBmYWxzZSkpXG4gICAgICAgICAgICAgICAgICAud2hlbihVcmxIZWxwZXJzLmpvaW4oY29udGV4dCwgJ2FwcHMvOm5hbWVzcGFjZScpLCByb3V0ZSgnYXBwcy5odG1sJywgZmFsc2UpKVxuICAgICAgICAgICAgICAgICAgLndoZW4oVXJsSGVscGVycy5qb2luKGNvbnRleHQsICd0ZW1wbGF0ZXMnKSwgcm91dGUoJ3RlbXBsYXRlcy5odG1sJywgZmFsc2UpKVxuICAgICAgICAgICAgICAgICAgLndoZW4oVXJsSGVscGVycy5qb2luKGNvbnRleHQsICdob3N0cycpLCByb3V0ZSgnaG9zdHMuaHRtbCcsIGZhbHNlKSlcbiAgICAgICAgICAgICAgICAgIC53aGVuKFVybEhlbHBlcnMuam9pbihjb250ZXh0LCAnaG9zdHMvOmlkJyksIHJvdXRlKCdob3N0Lmh0bWwnLCB0cnVlKSlcbiAgICAgICAgICAgICAgICAgIC53aGVuKFVybEhlbHBlcnMuam9pbihjb250ZXh0LCAnYnVpbGRzJyksIHJvdXRlKCdidWlsZHMuaHRtbCcsIGZhbHNlKSlcbiAgICAgICAgICAgICAgICAgIC53aGVuKFVybEhlbHBlcnMuam9pbihjb250ZXh0LCAnYnVpbGRzLzppZCcpLCByb3V0ZSgnYnVpbGQuaHRtbCcsIHRydWUpKVxuICAgICAgICAgICAgICAgICAgLndoZW4oVXJsSGVscGVycy5qb2luKGNvbnRleHQsICdidWlsZExvZ3MvOmlkJyksIHJvdXRlKCdidWlsZExvZ3MuaHRtbCcsIHRydWUpKVxuICAgICAgICAgICAgICAgICAgLndoZW4oVXJsSGVscGVycy5qb2luKGNvbnRleHQsICdidWlsZENvbmZpZ3MnKSwgcm91dGUoJ2J1aWxkQ29uZmlncy5odG1sJywgZmFsc2UpKVxuICAgICAgICAgICAgICAgICAgLndoZW4oVXJsSGVscGVycy5qb2luKGNvbnRleHQsICdidWlsZENvbmZpZ3MvOmlkJyksIHJvdXRlKCdidWlsZENvbmZpZy5odG1sJywgdHJ1ZSkpXG4gICAgICAgICAgICAgICAgICAud2hlbihVcmxIZWxwZXJzLmpvaW4oY29udGV4dCwgJ2J1aWxkQ29uZmlnRWRpdC86aWQnKSwgcm91dGUoJ2J1aWxkQ29uZmlnRWRpdC5odG1sJywgdHJ1ZSkpXG4gICAgICAgICAgICAgICAgICAud2hlbihVcmxIZWxwZXJzLmpvaW4oY29udGV4dCwgJ2J1aWxkQ29uZmlnQ3JlYXRlJyksIHJvdXRlKCdidWlsZENvbmZpZ0NyZWF0ZS5odG1sJywgdHJ1ZSkpXG4gICAgICAgICAgICAgICAgICAud2hlbihVcmxIZWxwZXJzLmpvaW4oY29udGV4dCwgJ2RlcGxveW1lbnRDb25maWdzJyksIHJvdXRlKCdkZXBsb3ltZW50Q29uZmlncy5odG1sJywgZmFsc2UpKVxuICAgICAgICAgICAgICAgICAgLndoZW4oVXJsSGVscGVycy5qb2luKGNvbnRleHQsICdkZXBsb3ltZW50Q29uZmlncy86aWQnKSwgcm91dGUoJ2RlcGxveW1lbnRDb25maWcuaHRtbCcsIHRydWUpKVxuICAgICAgICAgICAgICAgICAgLndoZW4oVXJsSGVscGVycy5qb2luKGNvbnRleHQsICdpbWFnZVJlcG9zaXRvcmllcycpLCByb3V0ZSgnaW1hZ2VSZXBvc2l0b3JpZXMuaHRtbCcsIGZhbHNlKSlcbiAgICAgICAgICAgICAgICAgIC53aGVuKFVybEhlbHBlcnMuam9pbihjb250ZXh0LCAncGlwZWxpbmVzJyksIHJvdXRlKCdwaXBlbGluZXMuaHRtbCcsIGZhbHNlKSlcbiAgICAgICAgICAgICAgICAgIC53aGVuKFVybEhlbHBlcnMuam9pbihjb250ZXh0LCAnb3ZlcnZpZXcnKSwgcm91dGUoJ292ZXJ2aWV3Lmh0bWwnLCB0cnVlKSlcbiAgICAgICAgICAgICAgICAgIC53aGVuKGNvbnRleHQsIHsgcmVkaXJlY3RUbzogVXJsSGVscGVycy5qb2luKGNvbnRleHQsICdhcHBzJykgfSk7XG4gIH1dKTtcbiAgXG5cbiAgX21vZHVsZS5mYWN0b3J5KCdBcHBMaWJyYXJ5VVJMJywgWyckcm9vdFNjb3BlJywgKCRyb290U2NvcGU6bmcuSVJvb3RTY29wZVNlcnZpY2UpID0+IHtcbiAgICByZXR1cm4gVXJsSGVscGVycy5qb2luKGt1YmVybmV0ZXNBcGlVcmwoKSwgXCIvcHJveHlcIiwga3ViZXJuZXRlc05hbWVzcGFjZVBhdGgoKSwgXCIvc2VydmljZXMvYXBwLWxpYnJhcnlcIik7XG4gIH1dKTtcblxuICBfbW9kdWxlLmZhY3RvcnkoJ1dpa2lHaXRVcmxQcmVmaXgnLCAoKSA9PiB7XG4gICAgcmV0dXJuIFVybEhlbHBlcnMuam9pbihrdWJlcm5ldGVzQXBpVXJsKCksIFwiL3Byb3h5XCIsIGt1YmVybmV0ZXNOYW1lc3BhY2VQYXRoKCksIFwic2VydmljZXMvYXBwLWxpYnJhcnlcIik7XG4gIH0pO1xuXG4gIF9tb2R1bGUuZmFjdG9yeSgnd2lraVJlcG9zaXRvcnknLCBbXCIkbG9jYXRpb25cIiwgXCJsb2NhbFN0b3JhZ2VcIiwgKCRsb2NhdGlvbiwgbG9jYWxTdG9yYWdlKSA9PiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XSk7XG5cbiAgX21vZHVsZS5mYWN0b3J5KCdDb25uZWN0RGlhbG9nU2VydmljZScsIFsnJHJvb3RTY29wZScsICgkcm9vdFNjb3BlOm5nLklSb290U2NvcGVTZXJ2aWNlKSA9PiB7XG4gICAgcmV0dXJuICB7XG4gICAgICAgICAgICBkaWFsb2c6IG5ldyBVSS5EaWFsb2coKSxcbiAgICAgICAgICAgIHNhdmVDcmVkZW50aWFsczogZmFsc2UsXG4gICAgICAgICAgICB1c2VyTmFtZTogbnVsbCxcbiAgICAgICAgICAgIHBhc3N3b3JkOiBudWxsLFxuICAgICAgICAgICAgam9sb2tpYVVybDogbnVsbCxcbiAgICAgICAgICAgIGNvbnRhaW5lck5hbWU6IG51bGwsXG4gICAgICAgICAgICB2aWV3OiBudWxsXG4gICAgfTtcbiAgfV0pO1xuXG4gIF9tb2R1bGUuZmlsdGVyKCdrdWJlcm5ldGVzUGFnZUxpbmsnLCAoKSA9PiBlbnRpdHlQYWdlTGluayk7XG5cbiAgX21vZHVsZS5ydW4oWyd2aWV3UmVnaXN0cnknLCAnd29ya3NwYWNlJywgJ1NlcnZpY2VSZWdpc3RyeScsICdIYXd0aW9OYXYnLCAodmlld1JlZ2lzdHJ5LCB3b3Jrc3BhY2U6Q29yZS5Xb3Jrc3BhY2UsIFNlcnZpY2VSZWdpc3RyeSwgSGF3dGlvTmF2KSA9PiB7XG4gICAgbG9nLmRlYnVnKFwiUnVubmluZ1wiKTtcbiAgICB2aWV3UmVnaXN0cnlbJ2t1YmVybmV0ZXMnXSA9IHRlbXBsYXRlUGF0aCArICdsYXlvdXRLdWJlcm5ldGVzLmh0bWwnO1xuICAgIHZhciBidWlsZGVyID0gSGF3dGlvTmF2LmJ1aWxkZXIoKTtcbiAgICB2YXIgYXBwcyA9IGJ1aWxkZXIuaWQoJ2t1YmUtYXBwcycpXG4gICAgICAgICAgICAgICAgICAgICAgLmhyZWYoKCkgPT4gVXJsSGVscGVycy5qb2luKGNvbnRleHQsICdhcHBzJykpXG4gICAgICAgICAgICAgICAgICAgICAgLnRpdGxlKCgpID0+ICdBcHBzJylcbiAgICAgICAgICAgICAgICAgICAgICAuYnVpbGQoKTtcblxuICAgIHZhciBzZXJ2aWNlcyA9IGJ1aWxkZXIuaWQoJ2t1YmUtc2VydmljZXMnKVxuICAgICAgICAgICAgICAgICAgICAgIC5ocmVmKCgpID0+IFVybEhlbHBlcnMuam9pbihjb250ZXh0LCAnc2VydmljZXMnKSlcbiAgICAgICAgICAgICAgICAgICAgICAudGl0bGUoKCkgPT4gJ1NlcnZpY2VzJylcbiAgICAgICAgICAgICAgICAgICAgICAuYnVpbGQoKTtcblxuICAgIHZhciBjb250cm9sbGVycyA9IGJ1aWxkZXIuaWQoJ2t1YmUtY29udHJvbGxlcnMnKVxuICAgICAgICAgICAgICAgICAgICAgIC5ocmVmKCgpID0+IFVybEhlbHBlcnMuam9pbihjb250ZXh0LCAncmVwbGljYXRpb25Db250cm9sbGVycycpKVxuICAgICAgICAgICAgICAgICAgICAgIC50aXRsZSgoKSA9PiAnQ29udHJvbGxlcnMnKVxuICAgICAgICAgICAgICAgICAgICAgIC5idWlsZCgpO1xuXG4gICAgdmFyIHBvZHMgPSBidWlsZGVyLmlkKCdrdWJlLXBvZHMnKVxuICAgICAgICAgICAgICAgICAgICAgIC5ocmVmKCgpID0+IFVybEhlbHBlcnMuam9pbihjb250ZXh0LCAncG9kcycpKVxuICAgICAgICAgICAgICAgICAgICAgIC50aXRsZSgoKSA9PiAnUG9kcycpXG4gICAgICAgICAgICAgICAgICAgICAgLmJ1aWxkKCk7XG5cbiAgICB2YXIgaG9zdHMgPSBidWlsZGVyLmlkKCdrdWJlLWhvc3RzJylcbiAgICAgICAgICAgICAgICAgICAgICAuaHJlZigoKSA9PiBVcmxIZWxwZXJzLmpvaW4oY29udGV4dCwgJ2hvc3RzJykpXG4gICAgICAgICAgICAgICAgICAgICAgLnRpdGxlKCgpID0+ICdIb3N0cycpXG4gICAgICAgICAgICAgICAgICAgICAgLmJ1aWxkKCk7XG5cbiAgICB2YXIgb3ZlcnZpZXcgPSBidWlsZGVyLmlkKCdrdWJlLW92ZXJ2aWV3JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLmhyZWYoKCkgPT4gVXJsSGVscGVycy5qb2luKGNvbnRleHQsICdvdmVydmlldycpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAudGl0bGUoKCkgPT4gJ0RpYWdyYW0nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAuYnVpbGQoKTtcblxuICAgIHZhciBidWlsZHMgPSBidWlsZGVyLmlkKCdrdWJlLWJ1aWxkcycpXG4gICAgICAgICAgICAgICAgICAgICAgLmhyZWYoKCkgPT4gVXJsSGVscGVycy5qb2luKGNvbnRleHQsICdidWlsZHMnKSlcbiAgICAgICAgICAgICAgICAgICAgICAudGl0bGUoKCkgPT4gJ0J1aWxkcycpXG4gICAgICAgICAgICAgICAgICAgICAgLmJ1aWxkKCk7XG5cbiAgICB2YXIgYnVpbGRDb25maWdzID0gYnVpbGRlci5pZCgna3ViZS1idWlsZENvbmZpZ3MnKVxuICAgICAgICAgICAgICAgICAgICAgIC5ocmVmKCgpID0+IFVybEhlbHBlcnMuam9pbihjb250ZXh0LCAnYnVpbGRDb25maWdzJykpXG4gICAgICAgICAgICAgICAgICAgICAgLnRpdGxlKCgpID0+ICdCdWlsZCBDb25maWdzJylcbiAgICAgICAgICAgICAgICAgICAgICAuYnVpbGQoKTtcblxuICAgIHZhciBkZXBsb3lzID0gYnVpbGRlci5pZCgna3ViZS1kZXBsb3lzJylcbiAgICAgICAgICAgICAgICAgICAgICAuaHJlZigoKSA9PiBVcmxIZWxwZXJzLmpvaW4oY29udGV4dCwgJ2RlcGxveW1lbnRDb25maWdzJykpXG4gICAgICAgICAgICAgICAgICAgICAgLnRpdGxlKCgpID0+ICdEZXBsb3lzJylcbiAgICAgICAgICAgICAgICAgICAgICAuYnVpbGQoKTtcblxuICAgIHZhciBpbWFnZVJlcG9zaXRvcmllcyA9IGJ1aWxkZXIuaWQoJ2t1YmUtaW1hZ2VSZXBvc2l0b3JpZXMnKVxuICAgICAgICAgICAgICAgICAgICAgIC5ocmVmKCgpID0+IFVybEhlbHBlcnMuam9pbihjb250ZXh0LCAnaW1hZ2VSZXBvc2l0b3JpZXMnKSlcbiAgICAgICAgICAgICAgICAgICAgICAudGl0bGUoKCkgPT4gJ1JlZ2lzdHJpZXMnKVxuICAgICAgICAgICAgICAgICAgICAgIC5idWlsZCgpO1xuXG4gICAgdmFyIHBpcGVsaW5lcyA9IGJ1aWxkZXIuaWQoJ2t1YmUtcGlwZWxpbmVzJylcbiAgICAgICAgICAgICAgICAgICAgICAuaHJlZigoKSA9PiBVcmxIZWxwZXJzLmpvaW4oY29udGV4dCwgJ3BpcGVsaW5lcycpKVxuICAgICAgICAgICAgICAgICAgICAgIC50aXRsZSgoKSA9PiAnUGlwZWxpbmVzJylcbiAgICAgICAgICAgICAgICAgICAgICAuYnVpbGQoKTtcblxuICAgIHZhciByZXBvcyA9IGJ1aWxkZXIuaWQoJ2t1YmUtcmVwb3MnKVxuICAgICAgICAgICAgICAgICAgICAgIC5ocmVmKCgpID0+IFwiL2ZvcmdlL3JlcG9zXCIpXG4gICAgICAgICAgICAgICAgICAgICAgLmlzVmFsaWQoKCkgPT4gU2VydmljZVJlZ2lzdHJ5Lmhhc1NlcnZpY2UoZmFicmljOEZvcmdlU2VydmljZU5hbWUpICYmIFNlcnZpY2VSZWdpc3RyeS5oYXNTZXJ2aWNlKGdvZ3NTZXJ2aWNlTmFtZSkgJiYgIUNvcmUuaXNSZW1vdGVDb25uZWN0aW9uKCkpXG4gICAgICAgICAgICAgICAgICAgICAgLnRpdGxlKCgpID0+ICdSZXBvc2l0b3JpZXMnKVxuICAgICAgICAgICAgICAgICAgICAgIC5idWlsZCgpO1xuXG4gICAgdmFyIG1haW5UYWIgPSBidWlsZGVyLmlkKCdrdWJlcm5ldGVzJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAucmFuaygyMDApXG4gICAgICAgICAgICAgICAgICAgICAgICAgLmRlZmF1bHRQYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbms6IDIwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZDogKHllcywgbm8pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFDb3JlLmlzUmVtb3RlQ29ubmVjdGlvbigpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeWVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgLmhyZWYoKCkgPT4gY29udGV4dClcbiAgICAgICAgICAgICAgICAgICAgICAgICAudGl0bGUoKCkgPT4gJ0t1YmVybmV0ZXMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgIC5pc1ZhbGlkKCgpID0+ICFDb3JlLmlzUmVtb3RlQ29ubmVjdGlvbigpKVxuICAgICAgICAgICAgICAgICAgICAgICAgIC50YWJzKGFwcHMsIHNlcnZpY2VzLCBjb250cm9sbGVycywgcG9kcywgaG9zdHMsIG92ZXJ2aWV3KVxuICAgICAgICAgICAgICAgICAgICAgICAgIC5idWlsZCgpO1xuICAgIEhhd3Rpb05hdi5hZGQobWFpblRhYik7XG5cblxuICAgIHZhciBwcm9qZWN0c1RhYiA9IGJ1aWxkZXIuaWQoJ29wZW5zaGlmdCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgLnJhbmsoMTAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgIC5ocmVmKCgpID0+IFVybEhlbHBlcnMuam9pbihjb250ZXh0LCAnYnVpbGRDb25maWdzJykgKyAnP3N1Yi10YWI9a3ViZS1idWlsZENvbmZpZ3MnKVxuICAgICAgICAgICAgICAgICAgICAgICAgIC50aXRsZSgoKSA9PiAnUHJvamVjdHMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgIC5pc1ZhbGlkKCgpID0+ICFDb3JlLmlzUmVtb3RlQ29ubmVjdGlvbigpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsZXRzIGRpc2FibGUgdGhlIHBpcGVsaW5lcyB2aWV3IGZvciBub3dcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcGlwZWxpbmVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgIC50YWJzKHJlcG9zLCBidWlsZENvbmZpZ3MsIGJ1aWxkcywgIGRlcGxveXMsIGltYWdlUmVwb3NpdG9yaWVzKVxuICAgICAgICAgICAgICAgICAgICAgICAgIC5idWlsZCgpO1xuXG4gICAgSGF3dGlvTmF2LmFkZChwcm9qZWN0c1RhYik7XG4gIH1dKTtcblxuICBoYXd0aW9QbHVnaW5Mb2FkZXIucmVnaXN0ZXJQcmVCb290c3RyYXBUYXNrKChuZXh0KSA9PiB7XG4gICAgJC5nZXRTY3JpcHQoJ29zY29uc29sZS9jb25maWcuanMnKVxuICAgICAgLmRvbmUoKHNjcmlwdCwgdGV4dFN0YXR1cykgPT4ge1xuICAgICAgICB2YXIgY29uZmlnOk9wZW5zaGlmdENvbmZpZyA9IEt1YmVybmV0ZXMub3NDb25maWcgPSB3aW5kb3dbJ09QRU5TSElGVF9DT05GSUcnXTtcbiAgICAgICAgbG9nLmRlYnVnKFwiRmV0Y2hlZCBvcGVuc2hpZnQgY29uZmlnOiBcIiwgY29uZmlnKTtcbiAgICAgICAgdmFyIG1hc3RlcjpzdHJpbmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChjb25maWcuYXBpICYmIGNvbmZpZy5hcGkuazhzKSB7XG4gICAgICAgICAgdmFyIG1hc3RlclVyaSA9IG5ldyBVUkkoKS5ob3N0KGNvbmZpZy5hcGkuazhzLmhvc3RQb3J0KS5wYXRoKGNvbmZpZy5hcGkuazhzLnByZWZpeCk7XG4gICAgICAgICAgaWYgKGNvbmZpZy5hcGkuazhzLnByb3RvKSB7XG4gICAgICAgICAgICBtYXN0ZXJVcmkucHJvdG9jb2woY29uZmlnLmFwaS5rOHMucHJvdG8pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtYXN0ZXIgPSBtYXN0ZXJVcmkudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBPU09BdXRoQ29uZmlnID0gY29uZmlnWydhdXRoJ107XG4gICAgICAgIGlmICghT1NPQXV0aENvbmZpZykge1xuICAgICAgICAgIEt1YmVybmV0ZXMubWFzdGVyVXJsID0gbWFzdGVyO1xuICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbWFzdGVyID0gT1NPQXV0aENvbmZpZy5tYXN0ZXJfdXJpO1xuICAgICAgICBpZiAoIW1hc3Rlcikge1xuICAgICAgICAgIHZhciBvYXV0aF9hdXRob3JpemVfdXJpID0gT1NPQXV0aENvbmZpZy5vYXV0aF9hdXRob3JpemVfdXJpO1xuICAgICAgICAgIGlmIChvYXV0aF9hdXRob3JpemVfdXJpKSB7XG4gICAgICAgICAgICB2YXIgdGV4dCA9IG9hdXRoX2F1dGhvcml6ZV91cmk7XG4gICAgICAgICAgICB2YXIgaWR4ID0gdGV4dC5pbmRleE9mKFwiOi8vXCIpO1xuICAgICAgICAgICAgaWYgKGlkeCA+IDApIHtcbiAgICAgICAgICAgICAgaWR4ICs9IDM7XG4gICAgICAgICAgICAgIGlkeCA9IHRleHQuaW5kZXhPZihcIi9cIiwgaWR4KTtcbiAgICAgICAgICAgICAgaWYgKGlkeCA+IDApIHtcbiAgICAgICAgICAgICAgICBtYXN0ZXIgPSB0ZXh0LnN1YnN0cmluZygwLCArK2lkeCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hc3Rlcikge1xuICAgICAgICAgIEt1YmVybmV0ZXMubWFzdGVyVXJsID0gbWFzdGVyO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLmZhaWwoKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIGxvZy5kZWJ1ZyhcIkVycm9yIGZldGNoaW5nIE9BVVRIIGNvbmZpZzogXCIsIHJlc3BvbnNlKTtcbiAgICAgIH0pXG4gICAgICAuYWx3YXlzKCgpID0+IHtcbiAgICAgICAgbmV4dCgpO1xuICAgICAgfSk7XG4gIH0sIHRydWUpO1xuXG4gIGhhd3Rpb1BsdWdpbkxvYWRlci5hZGRNb2R1bGUocGx1Z2luTmFtZSk7XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vaW5jbHVkZXMudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwia3ViZXJuZXRlc1BsdWdpbi50c1wiLz5cblxubW9kdWxlIEt1YmVybmV0ZXMge1xuICBcbiAgZXhwb3J0IHZhciBBcHBzID0gY29udHJvbGxlcihcIkFwcHNcIixcbiAgICBbXCIkc2NvcGVcIiwgXCJLdWJlcm5ldGVzTW9kZWxcIiwgXCJLdWJlcm5ldGVzU2VydmljZXNcIiwgXCJLdWJlcm5ldGVzUmVwbGljYXRpb25Db250cm9sbGVyc1wiLCBcIkt1YmVybmV0ZXNQb2RzXCIsIFwiS3ViZXJuZXRlc1N0YXRlXCIsIFwiS3ViZXJuZXRlc0FwaVVSTFwiLCBcIiR0ZW1wbGF0ZUNhY2hlXCIsIFwiJGxvY2F0aW9uXCIsIFwiJHJvdXRlUGFyYW1zXCIsIFwiJGh0dHBcIiwgXCIkZGlhbG9nXCIsIFwiJHRpbWVvdXRcIiwgXCJ3b3Jrc3BhY2VcIiwgXCJqb2xva2lhXCIsXG4gICAgICAoJHNjb3BlLCBLdWJlcm5ldGVzTW9kZWw6IEt1YmVybmV0ZXMuS3ViZXJuZXRlc01vZGVsU2VydmljZSwgS3ViZXJuZXRlc1NlcnZpY2VzOm5nLnJlc291cmNlLklSZXNvdXJjZUNsYXNzLCBLdWJlcm5ldGVzUmVwbGljYXRpb25Db250cm9sbGVyczpuZy5yZXNvdXJjZS5JUmVzb3VyY2VDbGFzcywgS3ViZXJuZXRlc1BvZHM6bmcucmVzb3VyY2UuSVJlc291cmNlQ2xhc3MsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc0FwaVVSTCxcbiAgICAgICAkdGVtcGxhdGVDYWNoZTpuZy5JVGVtcGxhdGVDYWNoZVNlcnZpY2UsICRsb2NhdGlvbjpuZy5JTG9jYXRpb25TZXJ2aWNlLCAkcm91dGVQYXJhbXMsICRodHRwLCAkZGlhbG9nLCAkdGltZW91dCwgd29ya3NwYWNlLCBqb2xva2lhOkpvbG9raWEuSUpvbG9raWEpID0+IHtcblxuICAgICRzY29wZS5tb2RlbCA9IEt1YmVybmV0ZXNNb2RlbDtcblxuICAgICRzY29wZS5hcHBzID0gW107XG4gICAgJHNjb3BlLmFsbEFwcHMgPSBbXTtcbiAgICAkc2NvcGUua3ViZXJuZXRlcyA9IEt1YmVybmV0ZXNTdGF0ZTtcbiAgICAkc2NvcGUuZmV0Y2hlZCA9IGZhbHNlO1xuICAgICRzY29wZS5qc29uID0gJyc7XG4gICAgQ29udHJvbGxlckhlbHBlcnMuYmluZE1vZGVsVG9TZWFyY2hQYXJhbSgkc2NvcGUsICRsb2NhdGlvbiwgJ2lkJywgJ19pZCcsIHVuZGVmaW5lZCk7XG4gICAgQ29udHJvbGxlckhlbHBlcnMuYmluZE1vZGVsVG9TZWFyY2hQYXJhbSgkc2NvcGUsICRsb2NhdGlvbiwgJ2FwcFNlbGVjdG9yU2hvdycsICdvcGVuQXBwJywgdW5kZWZpbmVkKTtcbiAgICBDb250cm9sbGVySGVscGVycy5iaW5kTW9kZWxUb1NlYXJjaFBhcmFtKCRzY29wZSwgJGxvY2F0aW9uLCAnbW9kZScsICdtb2RlJywgJ2RldGFpbCcpO1xuXG4gICAgdmFyIGJyYW5jaCA9ICRzY29wZS5icmFuY2ggfHwgXCJtYXN0ZXJcIjtcbiAgICB2YXIgbmFtZXNwYWNlID0gbnVsbDtcblxuICAgIGZ1bmN0aW9uIGFwcE1hdGNoZXMoYXBwKSB7XG4gICAgICB2YXIgZmlsdGVyVGV4dCA9ICRzY29wZS5hcHBTZWxlY3Rvci5maWx0ZXJUZXh0O1xuICAgICAgaWYgKGZpbHRlclRleHQpIHtcbiAgICAgICAgcmV0dXJuIENvcmUubWF0Y2hGaWx0ZXJJZ25vcmVDYXNlKGFwcC5ncm91cElkLCBmaWx0ZXJUZXh0KSB8fFxuICAgICAgICAgIENvcmUubWF0Y2hGaWx0ZXJJZ25vcmVDYXNlKGFwcC5hcnRpZmFjdElkLCBmaWx0ZXJUZXh0KSB8fFxuICAgICAgICAgIENvcmUubWF0Y2hGaWx0ZXJJZ25vcmVDYXNlKGFwcC5uYW1lLCBmaWx0ZXJUZXh0KSB8fFxuICAgICAgICAgIENvcmUubWF0Y2hGaWx0ZXJJZ25vcmVDYXNlKGFwcC5kZXNjcmlwdGlvbiwgZmlsdGVyVGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHBSdW5uaW5nKGFwcCkge1xuICAgICAgcmV0dXJuICRzY29wZS5tb2RlbC5hcHBzLmFueSgocnVubmluZykgPT4gcnVubmluZy5hcHBQYXRoID09PSBhcHAuYXBwUGF0aCk7XG4gICAgfVxuXG4gICAgJHNjb3BlLnRhYmxlQ29uZmlnID0ge1xuICAgICAgZGF0YTogJ21vZGVsLmFwcHMnLFxuICAgICAgc2hvd1NlbGVjdGlvbkNoZWNrYm94OiB0cnVlLFxuICAgICAgZW5hYmxlUm93Q2xpY2tTZWxlY3Rpb246IGZhbHNlLFxuICAgICAgbXVsdGlTZWxlY3Q6IHRydWUsXG4gICAgICBzZWxlY3RlZEl0ZW1zOiBbXSxcbiAgICAgIGZpbHRlck9wdGlvbnM6IHtcbiAgICAgICAgZmlsdGVyVGV4dDogJGxvY2F0aW9uLnNlYXJjaCgpW1wicVwiXSB8fCAnJ1xuICAgICAgfSxcbiAgICAgIGNvbHVtbkRlZnM6IFtcbiAgICAgICAgeyBmaWVsZDogJ2ljb24nLCBkaXNwbGF5TmFtZTogJ0FwcCcsIGNlbGxUZW1wbGF0ZTogJHRlbXBsYXRlQ2FjaGUuZ2V0KFwiYXBwSWNvblRlbXBsYXRlLmh0bWxcIikgfSxcbiAgICAgICAgeyBmaWVsZDogJ3NlcnZpY2VzJywgZGlzcGxheU5hbWU6ICdTZXJ2aWNlcycsIGNlbGxUZW1wbGF0ZTogJHRlbXBsYXRlQ2FjaGUuZ2V0KFwiYXBwU2VydmljZXNUZW1wbGF0ZS5odG1sXCIpIH0sXG4gICAgICAgIHsgZmllbGQ6ICdyZXBsaWNhdGlvbkNvbnRyb2xsZXJzJywgZGlzcGxheU5hbWU6ICdDb250cm9sbGVycycsIGNlbGxUZW1wbGF0ZTogJHRlbXBsYXRlQ2FjaGUuZ2V0KFwiYXBwUmVwbGljYXRpb25Db250cm9sbGVyVGVtcGxhdGUuaHRtbFwiKSB9LFxuICAgICAgICB7IGZpZWxkOiAnJHBvZHNMaW5rJywgZGlzcGxheU5hbWU6ICdQb2RzJywgY2VsbFRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoXCJhcHBQb2RDb3VudHNBbmRMaW5rVGVtcGxhdGUuaHRtbFwiKSB9LFxuICAgICAgICB7IGZpZWxkOiAnJGRlcGxveWVkVGV4dCcsIGRpc3BsYXlOYW1lOiAnRGVwbG95ZWQnLCBjZWxsVGVtcGxhdGU6ICR0ZW1wbGF0ZUNhY2hlLmdldChcImFwcERlcGxveWVkVGVtcGxhdGUuaHRtbFwiKSB9XG4gICAgICBdXG4gICAgfTtcblxuICAgIEt1YmVybmV0ZXMuaW5pdFNoYXJlZCgkc2NvcGUsICRsb2NhdGlvbiwgJGh0dHAsICR0aW1lb3V0LCAkcm91dGVQYXJhbXMsIEt1YmVybmV0ZXNNb2RlbCwgS3ViZXJuZXRlc1N0YXRlLCBLdWJlcm5ldGVzQXBpVVJMKTtcblxuXG4gICAgJHNjb3BlLmV4cGFuZGVkUG9kcyA9IFtdO1xuXG4gICAgJHNjb3BlLiRvbignZG8tcmVzaXplJywgKCRldmVudCwgY29udHJvbGxlcikgPT4ge1xuICAgICAgJHNjb3BlLnJlc2l6ZURpYWxvZy5vcGVuKGNvbnRyb2xsZXIpO1xuICAgIH0pO1xuXG4gICAgICAgIFxuICAgICRzY29wZS5wb2RFeHBhbmRlZCA9IChwb2QpID0+IHtcbiAgICAgIHZhciBpZCA9IGdldE5hbWUocG9kKVxuICAgICAgcmV0dXJuIGlkICYmICgkc2NvcGUuZXhwYW5kZWRQb2RzIHx8IFtdKS5pbmRleE9mKGlkKSA+PSAwO1xuICAgIH07XG5cbiAgICAkc2NvcGUuZXhwYW5kUG9kID0gKHBvZCkgPT4ge1xuICAgICAgdmFyIGlkID0gZ2V0TmFtZShwb2QpO1xuICAgICAgaWYgKGlkKSB7XG4gICAgICAgICRzY29wZS5leHBhbmRlZFBvZHMucHVzaChpZCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgICRzY29wZS5jb2xsYXBzZVBvZCA9IChwb2QpID0+IHtcbiAgICAgIHZhciBpZCA9IGdldE5hbWUocG9kKTtcbiAgICAgIGlmIChpZCkge1xuICAgICAgICAkc2NvcGUuZXhwYW5kZWRQb2RzID0gJHNjb3BlLmV4cGFuZGVkUG9kcy5yZW1vdmUoKHYpID0+IGlkID09PSB2KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgJHNjb3BlLiRvbignJHJvdXRlVXBkYXRlJywgKCRldmVudCkgPT4ge1xuICAgICAgS3ViZXJuZXRlcy5zZXRKc29uKCRzY29wZSwgJGxvY2F0aW9uLnNlYXJjaCgpWydfaWQnXSwgJHNjb3BlLm1vZGVsLmFwcHMpO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gZGVsZXRlQXBwKGFwcCwgb25Db21wbGV0ZUZuKSB7XG4gICAgICBmdW5jdGlvbiBkZWxldGVTZXJ2aWNlcyhzZXJ2aWNlcywgc2VydmljZSwgb25Db21wbGV0ZWRGbikge1xuICAgICAgICBpZiAoIXNlcnZpY2UgfHwgIXNlcnZpY2VzKSB7XG4gICAgICAgICAgcmV0dXJuIG9uQ29tcGxldGVkRm4oKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaWQgPSBnZXROYW1lKHNlcnZpY2UpO1xuICAgICAgICBpZiAoIWlkKSB7XG4gICAgICAgICAgbG9nLndhcm4oXCJObyBJRCBmb3Igc2VydmljZSBcIiArIGFuZ3VsYXIudG9Kc29uKHNlcnZpY2UpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBLdWJlcm5ldGVzU2VydmljZXMuZGVsZXRlKHtcbiAgICAgICAgICAgIGlkOiBpZFxuICAgICAgICAgIH0sIHVuZGVmaW5lZCwgKCkgPT4ge1xuICAgICAgICAgICAgbG9nLmRlYnVnKFwiRGVsZXRlZCBzZXJ2aWNlOiBcIiwgaWQpO1xuICAgICAgICAgICAgZGVsZXRlU2VydmljZXMoc2VydmljZXMsIHNlcnZpY2VzLnNoaWZ0KCksIG9uQ29tcGxldGVkRm4pO1xuICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgbG9nLmRlYnVnKFwiRXJyb3IgZGVsZXRpbmcgc2VydmljZTogXCIsIGVycm9yKTtcbiAgICAgICAgICAgIGRlbGV0ZVNlcnZpY2VzKHNlcnZpY2VzLCBzZXJ2aWNlcy5zaGlmdCgpLCBvbkNvbXBsZXRlZEZuKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBkZWxldGVSZXBsaWNhdGlvbkNvbnRyb2xsZXJzKHJlcGxpY2F0aW9uQ29udHJvbGxlcnMsIHJlcGxpY2F0aW9uQ29udHJvbGxlciwgb25Db21wbGV0ZWRGbikge1xuICAgICAgICBpZiAoIXJlcGxpY2F0aW9uQ29udHJvbGxlciB8fCAhcmVwbGljYXRpb25Db250cm9sbGVycykge1xuICAgICAgICAgIHJldHVybiBvbkNvbXBsZXRlZEZuKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGlkID0gZ2V0TmFtZShyZXBsaWNhdGlvbkNvbnRyb2xsZXIpO1xuICAgICAgICBpZiAoIWlkKSB7XG4gICAgICAgICAgbG9nLndhcm4oXCJObyBJRCBmb3IgcmVwbGljYXRpb25Db250cm9sbGVyIFwiICsgYW5ndWxhci50b0pzb24ocmVwbGljYXRpb25Db250cm9sbGVyKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgS3ViZXJuZXRlc1JlcGxpY2F0aW9uQ29udHJvbGxlcnMuZGVsZXRlKHtcbiAgICAgICAgICAgIGlkOiBpZFxuICAgICAgICAgIH0sIHVuZGVmaW5lZCwgKCkgPT4ge1xuICAgICAgICAgICAgbG9nLmRlYnVnKFwiRGVsZXRlZCByZXBsaWNhdGlvbkNvbnRyb2xsZXI6IFwiLCBpZCk7XG4gICAgICAgICAgICBkZWxldGVSZXBsaWNhdGlvbkNvbnRyb2xsZXJzKHJlcGxpY2F0aW9uQ29udHJvbGxlcnMsIHJlcGxpY2F0aW9uQ29udHJvbGxlcnMuc2hpZnQoKSwgb25Db21wbGV0ZWRGbik7XG4gICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBsb2cuZGVidWcoXCJFcnJvciBkZWxldGluZyByZXBsaWNhdGlvbkNvbnRyb2xsZXI6IFwiLCBlcnJvcik7XG4gICAgICAgICAgICBkZWxldGVSZXBsaWNhdGlvbkNvbnRyb2xsZXJzKHJlcGxpY2F0aW9uQ29udHJvbGxlcnMsIHJlcGxpY2F0aW9uQ29udHJvbGxlcnMuc2hpZnQoKSwgb25Db21wbGV0ZWRGbik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZGVsZXRlUG9kcyhwb2RzLCBwb2QsIG9uQ29tcGxldGVkRm4pIHtcbiAgICAgICAgaWYgKCFwb2QgfHwgIXBvZHMpIHtcbiAgICAgICAgICByZXR1cm4gb25Db21wbGV0ZWRGbigpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpZCA9IGdldE5hbWUocG9kKTtcbiAgICAgICAgaWYgKCFpZCkge1xuICAgICAgICAgIGxvZy53YXJuKFwiTm8gSUQgZm9yIHBvZCBcIiArIGFuZ3VsYXIudG9Kc29uKHBvZCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIEt1YmVybmV0ZXNQb2RzLmRlbGV0ZSh7XG4gICAgICAgICAgICBpZDogaWRcbiAgICAgICAgICB9LCB1bmRlZmluZWQsICgpID0+IHtcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyhcIkRlbGV0ZWQgcG9kOiBcIiwgaWQpO1xuICAgICAgICAgICAgZGVsZXRlUG9kcyhwb2RzLCBwb2RzLnNoaWZ0KCksIG9uQ29tcGxldGVkRm4pO1xuICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgbG9nLmRlYnVnKFwiRXJyb3IgZGVsZXRpbmcgcG9kOiBcIiwgZXJyb3IpO1xuICAgICAgICAgICAgZGVsZXRlUG9kcyhwb2RzLCBwb2RzLnNoaWZ0KCksIG9uQ29tcGxldGVkRm4pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBzZXJ2aWNlcyA9IFtdLmNvbmNhdChhcHAuc2VydmljZXMpO1xuICAgICAgZGVsZXRlU2VydmljZXMoc2VydmljZXMsIHNlcnZpY2VzLnNoaWZ0KCksICgpID0+IHtcblxuICAgICAgICB2YXIgcmVwbGljYXRpb25Db250cm9sbGVycyA9IFtdLmNvbmNhdChhcHAucmVwbGljYXRpb25Db250cm9sbGVycyk7XG4gICAgICAgIGRlbGV0ZVJlcGxpY2F0aW9uQ29udHJvbGxlcnMocmVwbGljYXRpb25Db250cm9sbGVycywgcmVwbGljYXRpb25Db250cm9sbGVycy5zaGlmdCgpLCAoKSA9PiB7XG5cbiAgICAgICAgICB2YXIgcG9kcyA9IFtdLmNvbmNhdChhcHAucG9kcyk7XG4gICAgICAgICAgZGVsZXRlUG9kcyhwb2RzLCBwb2RzLnNoaWZ0KCksIG9uQ29tcGxldGVGbik7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgJHNjb3BlLmRlbGV0ZVNpbmdsZUFwcCA9IChhcHApID0+IHtcbiAgICAgICRzY29wZS5kZWxldGVQcm9tcHQoW2FwcF0pO1xuICAgIH1cblxuICAgICRzY29wZS5kZWxldGVQcm9tcHQgPSAoc2VsZWN0ZWQpID0+IHtcbiAgICAgIGlmIChhbmd1bGFyLmlzU3RyaW5nKHNlbGVjdGVkKSkge1xuICAgICAgICBzZWxlY3RlZCA9IFt7XG4gICAgICAgICAgaWQ6IHNlbGVjdGVkXG4gICAgICAgIH1dO1xuICAgICAgfVxuICAgICAgVUkubXVsdGlJdGVtQ29uZmlybUFjdGlvbkRpYWxvZyg8VUkuTXVsdGlJdGVtQ29uZmlybUFjdGlvbk9wdGlvbnM+e1xuICAgICAgICBjb2xsZWN0aW9uOiBzZWxlY3RlZCxcbiAgICAgICAgaW5kZXg6ICckbmFtZScsXG4gICAgICAgIG9uQ2xvc2U6IChyZXN1bHQ6Ym9vbGVhbikgPT4ge1xuICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGRlbGV0ZVNlbGVjdGVkKHNlbGVjdGVkLCBuZXh0KSB7XG4gICAgICAgICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGlkID0gbmV4dC5uYW1lO1xuICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyhcImRlbGV0aW5nOiBcIiwgaWQpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZUFwcChuZXh0LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBsb2cuZGVidWcoXCJkZWxldGVkOiBcIiwgaWQpO1xuICAgICAgICAgICAgICAgICAgZGVsZXRlU2VsZWN0ZWQoc2VsZWN0ZWQsIHNlbGVjdGVkLnNoaWZ0KCkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlbGV0ZVNlbGVjdGVkKHNlbGVjdGVkLCBzZWxlY3RlZC5zaGlmdCgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHRpdGxlOiAnRGVsZXRlIEFwcHM/JyxcbiAgICAgICAgYWN0aW9uOiAnVGhlIGZvbGxvd2luZyBBcHBzIHdpbGwgYmUgZGVsZXRlZDonLFxuICAgICAgICBva1RleHQ6ICdEZWxldGUnLFxuICAgICAgICBva0NsYXNzOiAnYnRuLWRhbmdlcicsXG4gICAgICAgIGN1c3RvbTogXCJUaGlzIG9wZXJhdGlvbiBpcyBwZXJtYW5lbnQgb25jZSBjb21wbGV0ZWQhXCIsXG4gICAgICAgIGN1c3RvbUNsYXNzOiBcImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIlxuICAgICAgfSkub3BlbigpO1xuICAgIH07XG5cbiAgICAkc2NvcGUuYXBwU2VsZWN0b3IgPSB7XG4gICAgICBmaWx0ZXJUZXh0OiBcIlwiLFxuICAgICAgZm9sZGVyczogW10sXG4gICAgICBzZWxlY3RlZEFwcHM6IFtdLFxuXG4gICAgICBpc09wZW46IChmb2xkZXIpID0+IHtcbiAgICAgICAgaWYgKCRzY29wZS5hcHBTZWxlY3Rvci5maWx0ZXJUZXh0ICE9PSAnJyB8fCBmb2xkZXIuZXhwYW5kZWQpIHtcbiAgICAgICAgICByZXR1cm4gXCJvcGVuZWRcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJjbG9zZWRcIjtcbiAgICAgIH0sXG5cbiAgICAgIGdldFNlbGVjdGVkQ2xhc3M6IChhcHApID0+IHtcbiAgICAgICAgaWYgKGFwcC5hYnN0cmFjdCkge1xuICAgICAgICAgIHJldHVybiBcImFic3RyYWN0XCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFwcC5zZWxlY3RlZCkge1xuICAgICAgICAgIHJldHVybiBcInNlbGVjdGVkXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICB9LFxuXG4gICAgICBzaG93QXBwOiAoYXBwKSA9PiB7XG4gICAgICAgIHJldHVybiBhcHBNYXRjaGVzKGFwcCkgJiYgIWFwcFJ1bm5pbmcoYXBwKTtcbiAgICAgIH0sXG5cbiAgICAgIHNob3dGb2xkZXI6IChmb2xkZXIpID0+IHtcbiAgICAgICAgcmV0dXJuICEkc2NvcGUuYXBwU2VsZWN0b3IuZmlsdGVyVGV4dCB8fCBmb2xkZXIuYXBwcy5zb21lKChhcHApID0+IGFwcE1hdGNoZXMoYXBwKSAmJiAhYXBwUnVubmluZyhhcHApKTtcbiAgICAgIH0sXG5cbiAgICAgIGNsZWFyU2VsZWN0ZWQ6ICgpID0+IHtcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5tb2RlbC5hcHBGb2xkZXJzLCAoZm9sZGVyKSA9PiB7XG4gICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGZvbGRlci5hcHBzLCAoYXBwKSA9PiB7XG4gICAgICAgICAgICBhcHAuc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgICRzY29wZS5hcHBTZWxlY3Rvci5zZWxlY3RlZEFwcHMgPSBbXTtcbiAgICAgICAgQ29yZS4kYXBwbHkoJHNjb3BlKTtcbiAgICAgIH0sXG5cbiAgICAgIHVwZGF0ZVNlbGVjdGVkOiAoKSA9PiB7XG4gICAgICAgIC8vIGxldHMgdXBkYXRlIHRoZSBzZWxlY3RlZCBhcHBzXG4gICAgICAgIHZhciBzZWxlY3RlZEFwcHMgPSBbXTtcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5tb2RlbC5hcHBGb2xkZXJzLCAoZm9sZGVyKSA9PiB7XG4gICAgICAgICAgdmFyIGFwcHMgPSBmb2xkZXIuYXBwcy5maWx0ZXIoKGFwcCkgPT4gYXBwLnNlbGVjdGVkKTtcbiAgICAgICAgICBpZiAoYXBwcykge1xuICAgICAgICAgICAgc2VsZWN0ZWRBcHBzID0gc2VsZWN0ZWRBcHBzLmNvbmNhdChhcHBzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAkc2NvcGUuYXBwU2VsZWN0b3Iuc2VsZWN0ZWRBcHBzID0gc2VsZWN0ZWRBcHBzLnNvcnRCeShcIm5hbWVcIik7XG4gICAgICB9LFxuXG4gICAgICBzZWxlY3Q6IChhcHAsIGZsYWcpID0+IHtcbiAgICAgICAgYXBwLnNlbGVjdGVkID0gZmxhZztcbiAgICAgICAgJHNjb3BlLmFwcFNlbGVjdG9yLnVwZGF0ZVNlbGVjdGVkKCk7XG4gICAgICB9LFxuXG4gICAgICBoYXNTZWxlY3Rpb246ICgpID0+IHtcbiAgICAgICAgcmV0dXJuICRzY29wZS5tb2RlbC5hcHBGb2xkZXJzLmFueSgoZm9sZGVyKSA9PiBmb2xkZXIuYXBwcy5hbnkoKGFwcCkgPT4gYXBwLnNlbGVjdGVkKSk7XG4gICAgICB9LFxuXG5cbiAgICAgIHJ1blNlbGVjdGVkQXBwczogKCkgPT4ge1xuICAgICAgICAvLyBsZXRzIHJ1biBhbGwgdGhlIHNlbGVjdGVkIGFwcHNcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5hcHBTZWxlY3Rvci5zZWxlY3RlZEFwcHMsIChhcHApID0+IHtcbiAgICAgICAgICB2YXIgbmFtZSA9IGFwcC5uYW1lO1xuICAgICAgICAgIHZhciBtZXRhZGF0YVBhdGggPSBhcHAubWV0YWRhdGFQYXRoO1xuICAgICAgICAgIGlmIChtZXRhZGF0YVBhdGgpIHtcbiAgICAgICAgICAgIC8vIGxldHMgbG9hZCB0aGUganNvbi95YW1sXG4gICAgICAgICAgICAvL3ZhciB1cmwgPSBnaXRQYXRoVG9VcmwoV2lraS5naXRSZWxhdGl2ZVVSTChicmFuY2gsIG1ldGFkYXRhUGF0aCkpO1xuICAgICAgICAgICAgdmFyIHVybCA9IGdpdFBhdGhUb1VybChtZXRhZGF0YVBhdGgsIGJyYW5jaCk7XG4gICAgICAgICAgICBpZiAodXJsKSB7XG4gICAgICAgICAgICAgICRodHRwLmdldCh1cmwpLlxuICAgICAgICAgICAgICAgIHN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBsZXRzIGNvbnZlcnQgdGhlIGpzb24gb2JqZWN0IHN0cnVjdHVyZSBpbnRvIGEgc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgIHZhciBqc29uID0gYW5ndWxhci50b0pzb24oZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmbiA9ICgpID0+IHt9O1xuICAgICAgICAgICAgICAgICAgICBLdWJlcm5ldGVzLnJ1bkFwcCgkbG9jYXRpb24sICRzY29wZSwgJGh0dHAsIEt1YmVybmV0ZXNBcGlVUkwsIGpzb24sIG5hbWUsIGZuLCBuYW1lc3BhY2UpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgICAgIGVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgICAgICAgJHNjb3BlLnN1bW1hcnlIdG1sID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgIGxvZy53YXJuKFwiRmFpbGVkIHRvIGxvYWQgXCIgKyB1cmwgKyBcIiBcIiArIGRhdGEgKyBcIiBcIiArIHN0YXR1cyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gbGV0cyBnbyBiYWNrIHRvIHRoZSBhcHBzIHZpZXdcbiAgICAgICAgJHNjb3BlLmFwcFNlbGVjdG9yLmNsZWFyU2VsZWN0ZWQoKTtcbiAgICAgICAgJHNjb3BlLmFwcFNlbGVjdG9yU2hvdyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH07XG5cbiAgfV0pO1xufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNIZWxwZXJzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNQbHVnaW4udHNcIi8+XG5cbm1vZHVsZSBLdWJlcm5ldGVzIHtcblxuICBleHBvcnQgdmFyIEJ1aWxkQ29udHJvbGxlciA9IGNvbnRyb2xsZXIoXCJCdWlsZENvbnRyb2xsZXJcIixcbiAgICBbXCIkc2NvcGVcIiwgXCJLdWJlcm5ldGVzTW9kZWxcIiwgXCJLdWJlcm5ldGVzU3RhdGVcIiwgXCJLdWJlcm5ldGVzU2NoZW1hXCIsIFwiJHRlbXBsYXRlQ2FjaGVcIiwgXCIkbG9jYXRpb25cIiwgXCIkcm91dGVQYXJhbXNcIiwgXCIkaHR0cFwiLCBcIiR0aW1lb3V0XCIsIFwiS3ViZXJuZXRlc0FwaVVSTFwiLFxuICAgICAgKCRzY29wZSwgS3ViZXJuZXRlc01vZGVsOkt1YmVybmV0ZXMuS3ViZXJuZXRlc01vZGVsU2VydmljZSwgS3ViZXJuZXRlc1N0YXRlLCBLdWJlcm5ldGVzU2NoZW1hLFxuICAgICAgICR0ZW1wbGF0ZUNhY2hlOm5nLklUZW1wbGF0ZUNhY2hlU2VydmljZSwgJGxvY2F0aW9uOm5nLklMb2NhdGlvblNlcnZpY2UsICRyb3V0ZVBhcmFtcywgJGh0dHAsICR0aW1lb3V0LCBLdWJlcm5ldGVzQXBpVVJMKSA9PiB7XG5cbiAgICAgICAgJHNjb3BlLmt1YmVybmV0ZXMgPSBLdWJlcm5ldGVzU3RhdGU7XG4gICAgICAgICRzY29wZS5tb2RlbCA9IEt1YmVybmV0ZXNNb2RlbDtcbiAgICAgICAgJHNjb3BlLmlkID0gJHJvdXRlUGFyYW1zW1wiaWRcIl07XG4gICAgICAgICRzY29wZS5zY2hlbWEgPSBLdWJlcm5ldGVzU2NoZW1hO1xuICAgICAgICAkc2NvcGUuY29uZmlnID0gS3ViZXJuZXRlc1NjaGVtYS5kZWZpbml0aW9ucy5vc19idWlsZF9CdWlsZDtcblxuICAgICAgICBLdWJlcm5ldGVzLmluaXRTaGFyZWQoJHNjb3BlLCAkbG9jYXRpb24sICRodHRwLCAkdGltZW91dCwgJHJvdXRlUGFyYW1zLCBLdWJlcm5ldGVzTW9kZWwsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc0FwaVVSTCk7XG5cbiAgICAgICAgJHNjb3BlLiRvbigna3ViZXJuZXRlc01vZGVsVXBkYXRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB1cGRhdGVEYXRhKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRzY29wZS4kb24oJyRyb3V0ZVVwZGF0ZScsICgkZXZlbnQpID0+IHtcbiAgICAgICAgICB1cGRhdGVEYXRhKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHVwZGF0ZURhdGEoKTtcblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVEYXRhKCkge1xuICAgICAgICAgICRzY29wZS5pdGVtID0gbnVsbDtcbiAgICAgICAgICBpZiAoJHNjb3BlLmlkKSB7XG4gICAgICAgICAgICB2YXIgdXJsID0gYnVpbGRSZXN0VXJsKCRzY29wZS5pZCk7XG4gICAgICAgICAgICAkaHR0cC5nZXQodXJsKS5cbiAgICAgICAgICAgICAgc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgJHNjb3BlLmVudGl0eSA9IGVucmljaEJ1aWxkKGRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkc2NvcGUuZmV0Y2hlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgQ29yZS4kYXBwbHkoJHNjb3BlKTtcbiAgICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICAgIGVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgICAgIGxvZy53YXJuKFwiRmFpbGVkIHRvIGxvYWQgXCIgKyB1cmwgKyBcIiBcIiArIGRhdGEgKyBcIiBcIiArIHN0YXR1cyk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkc2NvcGUuZmV0Y2hlZCA9IHRydWU7XG4gICAgICAgICAgICBDb3JlLiRhcHBseSgkc2NvcGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfV0pO1xufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNIZWxwZXJzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNQbHVnaW4udHNcIi8+XG5cbm1vZHVsZSBLdWJlcm5ldGVzIHtcblxuICBleHBvcnQgdmFyIEJ1aWxkQ29uZmlnQ29udHJvbGxlciA9IGNvbnRyb2xsZXIoXCJCdWlsZENvbmZpZ0NvbnRyb2xsZXJcIixcbiAgICBbXCIkc2NvcGVcIiwgXCJLdWJlcm5ldGVzTW9kZWxcIiwgXCJLdWJlcm5ldGVzU3RhdGVcIiwgXCJLdWJlcm5ldGVzU2NoZW1hXCIsIFwiJHRlbXBsYXRlQ2FjaGVcIiwgXCIkbG9jYXRpb25cIiwgXCIkcm91dGVQYXJhbXNcIiwgXCIkaHR0cFwiLCBcIiR0aW1lb3V0XCIsIFwiS3ViZXJuZXRlc0FwaVVSTFwiLFxuICAgICAgKCRzY29wZSwgS3ViZXJuZXRlc01vZGVsOkt1YmVybmV0ZXMuS3ViZXJuZXRlc01vZGVsU2VydmljZSwgS3ViZXJuZXRlc1N0YXRlLCBLdWJlcm5ldGVzU2NoZW1hLFxuICAgICAgICR0ZW1wbGF0ZUNhY2hlOm5nLklUZW1wbGF0ZUNhY2hlU2VydmljZSwgJGxvY2F0aW9uOm5nLklMb2NhdGlvblNlcnZpY2UsICRyb3V0ZVBhcmFtcywgJGh0dHAsICR0aW1lb3V0LCBLdWJlcm5ldGVzQXBpVVJMKSA9PiB7XG5cbiAgICAgICAgJHNjb3BlLmt1YmVybmV0ZXMgPSBLdWJlcm5ldGVzU3RhdGU7XG4gICAgICAgICRzY29wZS5tb2RlbCA9IEt1YmVybmV0ZXNNb2RlbDtcbiAgICAgICAgJHNjb3BlLmlkID0gJHJvdXRlUGFyYW1zW1wiaWRcIl07XG4gICAgICAgICRzY29wZS5zY2hlbWEgPSBLdWJlcm5ldGVzU2NoZW1hO1xuICAgICAgICAkc2NvcGUuY29uZmlnID0gS3ViZXJuZXRlc1NjaGVtYS5kZWZpbml0aW9ucy5vc19idWlsZF9CdWlsZENvbmZpZztcblxuICAgICAgICBLdWJlcm5ldGVzLmluaXRTaGFyZWQoJHNjb3BlLCAkbG9jYXRpb24sICRodHRwLCAkdGltZW91dCwgJHJvdXRlUGFyYW1zLCBLdWJlcm5ldGVzTW9kZWwsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc0FwaVVSTCk7XG5cbiAgICAgICAgJHNjb3BlLiRvbigna3ViZXJuZXRlc01vZGVsVXBkYXRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB1cGRhdGVEYXRhKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRzY29wZS4kb24oJyRyb3V0ZVVwZGF0ZScsICgkZXZlbnQpID0+IHtcbiAgICAgICAgICB1cGRhdGVEYXRhKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHVwZGF0ZURhdGEoKTtcblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVEYXRhKCkge1xuICAgICAgICAgICRzY29wZS5pdGVtID0gbnVsbDtcbiAgICAgICAgICBpZiAoJHNjb3BlLmlkKSB7XG4gICAgICAgICAgICB2YXIgdXJsID0gYnVpbGRDb25maWdSZXN0VXJsKCRzY29wZS5pZCk7XG4gICAgICAgICAgICAkaHR0cC5nZXQodXJsKS5cbiAgICAgICAgICAgICAgc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgJHNjb3BlLmVudGl0eSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICB2YXIgc29ydGVkQnVpbGRzID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgIGVucmljaEJ1aWxkQ29uZmlnKGRhdGEsIHNvcnRlZEJ1aWxkcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICRzY29wZS5mZXRjaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBDb3JlLiRhcHBseSgkc2NvcGUpO1xuICAgICAgICAgICAgICB9KS5cbiAgICAgICAgICAgICAgZXJyb3IoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgbG9nLndhcm4oXCJGYWlsZWQgdG8gbG9hZCBcIiArIHVybCArIFwiIFwiICsgZGF0YSArIFwiIFwiICsgc3RhdHVzKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRzY29wZS5mZXRjaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XSk7XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vaW5jbHVkZXMudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwia3ViZXJuZXRlc0hlbHBlcnMudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwia3ViZXJuZXRlc1BsdWdpbi50c1wiLz5cblxubW9kdWxlIEt1YmVybmV0ZXMge1xuXG4gIGV4cG9ydCB2YXIgQnVpbGRDb25maWdFZGl0Q29udHJvbGxlciA9IGNvbnRyb2xsZXIoXCJCdWlsZENvbmZpZ0VkaXRDb250cm9sbGVyXCIsXG4gICAgW1wiJHNjb3BlXCIsIFwiS3ViZXJuZXRlc01vZGVsXCIsIFwiS3ViZXJuZXRlc1N0YXRlXCIsIFwiS3ViZXJuZXRlc1NjaGVtYVwiLCBcIiR0ZW1wbGF0ZUNhY2hlXCIsIFwiJGxvY2F0aW9uXCIsIFwiJHJvdXRlUGFyYW1zXCIsIFwiJGh0dHBcIiwgXCIkdGltZW91dFwiLCBcIkt1YmVybmV0ZXNBcGlVUkxcIixcbiAgICAgICgkc2NvcGUsIEt1YmVybmV0ZXNNb2RlbDpLdWJlcm5ldGVzLkt1YmVybmV0ZXNNb2RlbFNlcnZpY2UsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc1NjaGVtYSxcbiAgICAgICAkdGVtcGxhdGVDYWNoZTpuZy5JVGVtcGxhdGVDYWNoZVNlcnZpY2UsICRsb2NhdGlvbjpuZy5JTG9jYXRpb25TZXJ2aWNlLCAkcm91dGVQYXJhbXMsICRodHRwLCAkdGltZW91dCwgS3ViZXJuZXRlc0FwaVVSTCkgPT4ge1xuXG4gICAgICAgICRzY29wZS5rdWJlcm5ldGVzID0gS3ViZXJuZXRlc1N0YXRlO1xuICAgICAgICAkc2NvcGUubW9kZWwgPSBLdWJlcm5ldGVzTW9kZWw7XG4gICAgICAgICRzY29wZS5pZCA9ICRyb3V0ZVBhcmFtc1tcImlkXCJdO1xuICAgICAgICAkc2NvcGUuc2NoZW1hID0gS3ViZXJuZXRlc1NjaGVtYTtcbiAgICAgICAgJHNjb3BlLmNvbmZpZyA9IEt1YmVybmV0ZXNTY2hlbWEuZGVmaW5pdGlvbnMub3NfYnVpbGRfQnVpbGRDb25maWc7XG5cbiAgICAgICAgS3ViZXJuZXRlcy5pbml0U2hhcmVkKCRzY29wZSwgJGxvY2F0aW9uLCAkaHR0cCwgJHRpbWVvdXQsICRyb3V0ZVBhcmFtcywgS3ViZXJuZXRlc01vZGVsLCBLdWJlcm5ldGVzU3RhdGUsIEt1YmVybmV0ZXNBcGlVUkwpO1xuXG4gICAgICAgICRzY29wZS4kb24oJ2t1YmVybmV0ZXNNb2RlbFVwZGF0ZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdXBkYXRlRGF0YSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICAkc2NvcGUuJG9uKCckcm91dGVVcGRhdGUnLCAoJGV2ZW50KSA9PiB7XG4gICAgICAgICAgdXBkYXRlRGF0YSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICB1cGRhdGVEYXRhKCk7XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlRGF0YSgpIHtcbiAgICAgICAgICAkc2NvcGUuaXRlbSA9IG51bGw7XG4gICAgICAgICAgaWYgKCRzY29wZS5pZCkge1xuICAgICAgICAgICAgdmFyIHVybCA9IGJ1aWxkQ29uZmlnUmVzdFVybDtcbiAgICAgICAgICAgICRodHRwLmdldCh1cmwpLlxuICAgICAgICAgICAgICBzdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAkc2NvcGUuZW50aXR5ID0gZGF0YTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJHNjb3BlLmZldGNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgICBlcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgICAgICBsb2cud2FybihcIkZhaWxlZCB0byBsb2FkIFwiICsgdXJsICsgXCIgXCIgKyBkYXRhICsgXCIgXCIgKyBzdGF0dXMpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJHNjb3BlLmZldGNoZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAvLyBUT0RPIGRlZmF1bHQgdG8gdGhlIHJpZ2h0IHJlZ2lzdHJ5IFVSTC4uLlxuICAgICAgICAgICAgdmFyIGRlZmF1bHRSZWdpc3RyeSA9IFwiMTcyLjMwLjE3LjE4OTo1MDAwXCI7XG5cbiAgICAgICAgICAgICRzY29wZS5lbnRpdHkgPSB7XG4gICAgICAgICAgICAgIFwiYXBpVmVyc2lvblwiOiBcInYxXCIsXG4gICAgICAgICAgICAgIFwia2luZFwiOiBcIkJ1aWxkQ29uZmlnXCIsXG4gICAgICAgICAgICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgIFwibGFiZWxzXCI6IHtcbiAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcInBhcmFtZXRlcnNcIjoge1xuICAgICAgICAgICAgICAgIFwib3V0cHV0XCI6IHtcbiAgICAgICAgICAgICAgICAgIFwiaW1hZ2VUYWdcIjogXCJcIixcbiAgICAgICAgICAgICAgICAgIFwicmVnaXN0cnlcIjogZGVmYXVsdFJlZ2lzdHJ5XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcInNvdXJjZVwiOiB7XG4gICAgICAgICAgICAgICAgICBcImdpdFwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwidXJpXCI6IFwiXCJcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJHaXRcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJzdHJhdGVneVwiOiB7XG4gICAgICAgICAgICAgICAgICBcInN0aVN0cmF0ZWd5XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJidWlsZGVySW1hZ2VcIjogXCJmYWJyaWM4L2Jhc2Utc3RpXCJcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJTVElcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJ0cmlnZ2Vyc1wiOiBbXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XSk7XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vaW5jbHVkZXMudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwia3ViZXJuZXRlc1BsdWdpbi50c1wiLz5cblxubW9kdWxlIEt1YmVybmV0ZXMge1xuXG4gIGV4cG9ydCB2YXIgQnVpbGRDb25maWdzQ29udHJvbGxlciA9IGNvbnRyb2xsZXIoXCJCdWlsZENvbmZpZ3NDb250cm9sbGVyXCIsIFtcIiRzY29wZVwiLCBcIkt1YmVybmV0ZXNNb2RlbFwiLCBcIkt1YmVybmV0ZXNCdWlsZHNcIiwgXCJLdWJlcm5ldGVzU3RhdGVcIiwgXCIkZGlhbG9nXCIsIFwiJHdpbmRvd1wiLCBcIiR0ZW1wbGF0ZUNhY2hlXCIsIFwiJHJvdXRlUGFyYW1zXCIsIFwiJGxvY2F0aW9uXCIsIFwibG9jYWxTdG9yYWdlXCIsIFwiJGh0dHBcIiwgXCIkdGltZW91dFwiLCBcIkt1YmVybmV0ZXNBcGlVUkxcIixcbiAgICAoJHNjb3BlLCBLdWJlcm5ldGVzTW9kZWw6S3ViZXJuZXRlcy5LdWJlcm5ldGVzTW9kZWxTZXJ2aWNlLCBLdWJlcm5ldGVzQnVpbGRzLCBLdWJlcm5ldGVzU3RhdGUsICRkaWFsb2csICR3aW5kb3csICR0ZW1wbGF0ZUNhY2hlLCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbjpuZy5JTG9jYXRpb25TZXJ2aWNlLCBsb2NhbFN0b3JhZ2UsICRodHRwLCAkdGltZW91dCwgS3ViZXJuZXRlc0FwaVVSTCkgPT4ge1xuXG4gICAgICAkc2NvcGUua3ViZXJuZXRlcyA9IEt1YmVybmV0ZXNTdGF0ZTtcbiAgICAgICRzY29wZS5tb2RlbCA9IEt1YmVybmV0ZXNNb2RlbDtcbiAgICAgICRzY29wZS5LdWJlcm5ldGVzQnVpbGRzID0gS3ViZXJuZXRlc0J1aWxkcztcbiAgICAgICRzY29wZS4kb24oJ2t1YmVybmV0ZXNNb2RlbFVwZGF0ZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgICB9KTtcblxuICAgICAgJHNjb3BlLnRhYmxlQ29uZmlnID0ge1xuICAgICAgICBkYXRhOiAnYnVpbGRDb25maWdzJyxcbiAgICAgICAgc2hvd1NlbGVjdGlvbkNoZWNrYm94OiB0cnVlLFxuICAgICAgICBlbmFibGVSb3dDbGlja1NlbGVjdGlvbjogZmFsc2UsXG4gICAgICAgIG11bHRpU2VsZWN0OiB0cnVlLFxuICAgICAgICBzZWxlY3RlZEl0ZW1zOiBbXSxcbiAgICAgICAgZmlsdGVyT3B0aW9uczoge1xuICAgICAgICAgIGZpbHRlclRleHQ6ICRsb2NhdGlvbi5zZWFyY2goKVtcInFcIl0gfHwgJydcbiAgICAgICAgfSxcbiAgICAgICAgY29sdW1uRGVmczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGZpZWxkOiAnbWV0YWRhdGEubmFtZScsXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogJ05hbWUnLFxuICAgICAgICAgICAgY2VsbFRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoXCJidWlsZENvbmZpZ0xpbmtUZW1wbGF0ZS5odG1sXCIpXG4gICAgICAgICAgfSxcbi8qXG4gICAgICAgICAge1xuICAgICAgICAgICAgZmllbGQ6ICdzcGVjLnNvdXJjZS50eXBlJyxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnU291cmNlJ1xuICAgICAgICAgIH0sXG4qL1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGZpZWxkOiAnc3BlYy5zb3VyY2UuZ2l0LnVyaScsXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogJ1JlcG9zaXRvcnknXG4gICAgICAgICAgfSxcbi8qXG4gICAgICAgICAge1xuICAgICAgICAgICAgZmllbGQ6ICdzcGVjLnN0cmF0ZWd5LnR5cGUnLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6ICdTdHJhdGVneSdcbiAgICAgICAgICB9LFxuKi9cbiAgICAgICAgICB7XG4gICAgICAgICAgICBmaWVsZDogJ3NwZWMuc3RyYXRlZ3kuc3RpU3RyYXRlZ3kuaW1hZ2UnLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6ICdTb3VyY2UgSW1hZ2UnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBmaWVsZDogJ3NwZWMub3V0cHV0LmltYWdlVGFnJyxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnT3V0cHV0IEltYWdlJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgZmllbGQ6ICckZmFicmljOFZpZXdzJyxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnVmlld3MnLFxuICAgICAgICAgICAgd2lkdGg6IFwiKioqXCIsXG4gICAgICAgICAgICBtaW5XaWR0aDogNTAwLFxuICAgICAgICAgICAgY2VsbFRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoXCJidWlsZENvbmZpZ1ZpZXdzVGVtcGxhdGUuaHRtbFwiKVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfTtcblxuICAgICAgS3ViZXJuZXRlcy5pbml0U2hhcmVkKCRzY29wZSwgJGxvY2F0aW9uLCAkaHR0cCwgJHRpbWVvdXQsICRyb3V0ZVBhcmFtcywgS3ViZXJuZXRlc01vZGVsLCBLdWJlcm5ldGVzU3RhdGUsIEt1YmVybmV0ZXNBcGlVUkwpO1xuXG4gICAgICAkc2NvcGUuaXNMb2dnZWRJbnRvR29ncyA9IEZvcmdlLmlzTG9nZ2VkSW50b0dvZ3M7XG5cbiAgICAgICRzY29wZS5kZWxldGVQcm9tcHQgPSAoc2VsZWN0ZWQpID0+IHtcbiAgICAgICAgVUkubXVsdGlJdGVtQ29uZmlybUFjdGlvbkRpYWxvZyg8VUkuTXVsdGlJdGVtQ29uZmlybUFjdGlvbk9wdGlvbnM+e1xuICAgICAgICAgIGNvbGxlY3Rpb246IHNlbGVjdGVkLFxuICAgICAgICAgIGluZGV4OiAnJG5hbWUnLFxuICAgICAgICAgIG9uQ2xvc2U6IChyZXN1bHQ6Ym9vbGVhbikgPT4ge1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICBmdW5jdGlvbiBkZWxldGVTZWxlY3RlZChzZWxlY3RlZCwgbmV4dCkge1xuICAgICAgICAgICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgICAgICAgICBkZWxldGVFbnRpdHkobmV4dCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGVTZWxlY3RlZChzZWxlY3RlZCwgc2VsZWN0ZWQuc2hpZnQoKSk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdXBkYXRlRGF0YSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGRlbGV0ZVNlbGVjdGVkKHNlbGVjdGVkLCBzZWxlY3RlZC5zaGlmdCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHRpdGxlOiAnRGVsZXRlIEJ1aWxkIENvbmZpZ3M/JyxcbiAgICAgICAgICBhY3Rpb246ICdUaGUgZm9sbG93aW5nIEJ1aWxkIENvbmZpZ3Mgd2lsbCBiZSBkZWxldGVkOicsXG4gICAgICAgICAgb2tUZXh0OiAnRGVsZXRlJyxcbiAgICAgICAgICBva0NsYXNzOiAnYnRuLWRhbmdlcicsXG4gICAgICAgICAgY3VzdG9tOiBcIlRoaXMgb3BlcmF0aW9uIGlzIHBlcm1hbmVudCBvbmNlIGNvbXBsZXRlZCFcIixcbiAgICAgICAgICBjdXN0b21DbGFzczogXCJhbGVydCBhbGVydC13YXJuaW5nXCJcbiAgICAgICAgfSkub3BlbigpO1xuICAgICAgfTtcblxuICAgICAgZnVuY3Rpb24gZGVsZXRlRW50aXR5KHNlbGVjdGlvbiwgbmV4dENhbGxiYWNrKSB7XG4gICAgICAgIHZhciBuYW1lID0gKHNlbGVjdGlvbiB8fCB7fSkuJG5hbWU7XG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJBYm91dCB0byBkZWxldGUgYnVpbGQgY29uZmlnOiBcIiArIG5hbWUpO1xuICAgICAgICAgIHZhciB1cmwgPSBidWlsZENvbmZpZ1Jlc3RVcmwobmFtZSk7XG4gICAgICAgICAgJGh0dHAuZGVsZXRlKHVybCkuXG4gICAgICAgICAgICBzdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgICBuZXh0Q2FsbGJhY2soKTtcbiAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgZXJyb3IoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICAgIGxvZy53YXJuKFwiRmFpbGVkIHRvIGRlbGV0ZSBidWlsZCBjb25maWcgb24gXCIgKyB1cmwgKyBcIiBcIiArIGRhdGEgKyBcIiBcIiArIHN0YXR1cyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIndhcm5pbmc6IG5vIG5hbWUgZm9yIHNlbGVjdGlvbjogXCIgKyBhbmd1bGFyLnRvSnNvbihzZWxlY3Rpb24pKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB1cGRhdGVEYXRhKCkge1xuICAgICAgICB2YXIgdXJsID0gYnVpbGRDb25maWdzUmVzdFVSTCgpO1xuICAgICAgICAkaHR0cC5nZXQodXJsKS5cbiAgICAgICAgICBzdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcImdvdCBkYXRhIFwiICsgYW5ndWxhci50b0pzb24oZGF0YSwgdHJ1ZSkpO1xuICAgICAgICAgICAgICB2YXIgc29ydGVkQnVpbGRzID0gbnVsbDtcbiAgICAgICAgICAgICAgJHNjb3BlLmJ1aWxkQ29uZmlncyA9IGVucmljaEJ1aWxkQ29uZmlncyhkYXRhLml0ZW1zLCBzb3J0ZWRCdWlsZHMpO1xuICAgICAgICAgICAgICAkc2NvcGUuZmV0Y2hlZCA9IHRydWU7XG4gICAgICAgICAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkuXG4gICAgICAgICAgZXJyb3IoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICBsb2cud2FybihcIkZhaWxlZCB0byBsb2FkIFwiICsgdXJsICsgXCIgXCIgKyBkYXRhICsgXCIgXCIgKyBzdGF0dXMpO1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGVEYXRhKCk7XG4gICAgfV0pO1xufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNIZWxwZXJzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNQbHVnaW4udHNcIi8+XG5cbm1vZHVsZSBLdWJlcm5ldGVzIHtcblxuICBleHBvcnQgdmFyIEJ1aWxkTG9nc0NvbnRyb2xsZXIgPSBjb250cm9sbGVyKFwiQnVpbGRMb2dzQ29udHJvbGxlclwiLFxuICAgIFtcIiRzY29wZVwiLCBcIkt1YmVybmV0ZXNNb2RlbFwiLCBcIkt1YmVybmV0ZXNTdGF0ZVwiLCBcIkt1YmVybmV0ZXNTY2hlbWFcIiwgXCIkdGVtcGxhdGVDYWNoZVwiLCBcIiRsb2NhdGlvblwiLCBcIiRyb3V0ZVBhcmFtc1wiLCBcIiRodHRwXCIsIFwiJHRpbWVvdXRcIiwgXCJLdWJlcm5ldGVzQXBpVVJMXCIsXG4gICAgICAoJHNjb3BlLCBLdWJlcm5ldGVzTW9kZWw6S3ViZXJuZXRlcy5LdWJlcm5ldGVzTW9kZWxTZXJ2aWNlLCBLdWJlcm5ldGVzU3RhdGUsIEt1YmVybmV0ZXNTY2hlbWEsXG4gICAgICAgJHRlbXBsYXRlQ2FjaGU6bmcuSVRlbXBsYXRlQ2FjaGVTZXJ2aWNlLCAkbG9jYXRpb246bmcuSUxvY2F0aW9uU2VydmljZSwgJHJvdXRlUGFyYW1zLCAkaHR0cCwgJHRpbWVvdXQsIEt1YmVybmV0ZXNBcGlVUkwpID0+IHtcblxuICAgICAgICAkc2NvcGUua3ViZXJuZXRlcyA9IEt1YmVybmV0ZXNTdGF0ZTtcbiAgICAgICAgJHNjb3BlLm1vZGVsID0gS3ViZXJuZXRlc01vZGVsO1xuICAgICAgICAkc2NvcGUuaWQgPSAkcm91dGVQYXJhbXNbXCJpZFwiXTtcbiAgICAgICAgJHNjb3BlLnNjaGVtYSA9IEt1YmVybmV0ZXNTY2hlbWE7XG4gICAgICAgICRzY29wZS5jb25maWcgPSBLdWJlcm5ldGVzU2NoZW1hLmRlZmluaXRpb25zLm9zX2J1aWxkX0J1aWxkO1xuXG4gICAgICAgIEt1YmVybmV0ZXMuaW5pdFNoYXJlZCgkc2NvcGUsICRsb2NhdGlvbiwgJGh0dHAsICR0aW1lb3V0LCAkcm91dGVQYXJhbXMsIEt1YmVybmV0ZXNNb2RlbCwgS3ViZXJuZXRlc1N0YXRlLCBLdWJlcm5ldGVzQXBpVVJMKTtcblxuICAgICAgICAkc2NvcGUuJG9uKCdrdWJlcm5ldGVzTW9kZWxVcGRhdGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHVwZGF0ZURhdGEoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHNjb3BlLiRvbignJHJvdXRlVXBkYXRlJywgKCRldmVudCkgPT4ge1xuICAgICAgICAgIHVwZGF0ZURhdGEoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHNjb3BlLmxvZ3NUZXh0ID0gXCJMb2FkaW5nIGxvZ3MuLi5cIjtcblxuICAgICAgICB1cGRhdGVEYXRhKCk7XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlRGF0YSgpIHtcbiAgICAgICAgICAkc2NvcGUuaXRlbSA9IG51bGw7XG4gICAgICAgICAgaWYgKCRzY29wZS5pZCkge1xuICAgICAgICAgICAgdmFyIHVybCA9IGJ1aWxkUmVzdFVybCgkc2NvcGUuaWQpO1xuICAgICAgICAgICAgJGh0dHAuZ2V0KHVybCkuXG4gICAgICAgICAgICAgIHN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICRzY29wZS5lbnRpdHkgPSBlbnJpY2hCdWlsZChkYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJHNjb3BlLmZldGNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgICBlcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgICAgICBsb2cud2FybihcIkZhaWxlZCB0byBsb2FkIFwiICsgdXJsICsgXCIgXCIgKyBkYXRhICsgXCIgXCIgKyBzdGF0dXMpO1xuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdXJsID0gYnVpbGRMb2dzUmVzdFVybCgkc2NvcGUuaWQpO1xuICAgICAgICAgICAgJGh0dHAuZ2V0KHVybCkuXG4gICAgICAgICAgICAgIHN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgICAgICRzY29wZS5sb2dzVGV4dCA9IGRhdGE7XG4gICAgICAgICAgICAgICAgQ29yZS4kYXBwbHkoJHNjb3BlKTtcbiAgICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICAgIGVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubG9nc1RleHQgPSBcIkZhaWxlZCB0byBsb2FkIGxvZ3MgZnJvbTogXCIgKyB1cmwgKyBcIiBcIiArIGRhdGEgKyBcIiBzdGF0dXM6IFwiICsgc3RhdHVzO1xuICAgICAgICAgICAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgICBjYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubG9nc1RleHQgPSBcIkZhaWxlZCB0byBsb2FkIGxvZ3M6IFwiICsgYW5ndWxhci50b0pzb24oZXJyb3IsIHRydWUpO1xuICAgICAgICAgICAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkc2NvcGUuZmV0Y2hlZCA9IHRydWU7XG4gICAgICAgICAgICBDb3JlLiRhcHBseSgkc2NvcGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfV0pO1xufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNQbHVnaW4udHNcIi8+XG5cbm1vZHVsZSBLdWJlcm5ldGVzIHtcblxuICBleHBvcnQgdmFyIEJ1aWxkc0NvbnRyb2xsZXIgPSBjb250cm9sbGVyKFwiQnVpbGRzQ29udHJvbGxlclwiLCBbXCIkc2NvcGVcIiwgXCJLdWJlcm5ldGVzTW9kZWxcIiwgXCJLdWJlcm5ldGVzQnVpbGRzXCIsIFwiS3ViZXJuZXRlc1N0YXRlXCIsIFwiJGRpYWxvZ1wiLCBcIiR3aW5kb3dcIiwgXCIkdGVtcGxhdGVDYWNoZVwiLCBcIiRyb3V0ZVBhcmFtc1wiLCBcIiRsb2NhdGlvblwiLCBcImxvY2FsU3RvcmFnZVwiLCBcIiRodHRwXCIsIFwiJHRpbWVvdXRcIiwgXCJLdWJlcm5ldGVzQXBpVVJMXCIsXG4gICAgKCRzY29wZSwgS3ViZXJuZXRlc01vZGVsOkt1YmVybmV0ZXMuS3ViZXJuZXRlc01vZGVsU2VydmljZSwgS3ViZXJuZXRlc0J1aWxkcywgS3ViZXJuZXRlc1N0YXRlLCAkZGlhbG9nLCAkd2luZG93LCAkdGVtcGxhdGVDYWNoZSwgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb246bmcuSUxvY2F0aW9uU2VydmljZSwgbG9jYWxTdG9yYWdlLCAkaHR0cCwgJHRpbWVvdXQsIEt1YmVybmV0ZXNBcGlVUkwpID0+IHtcblxuICAgICAgJHNjb3BlLmt1YmVybmV0ZXMgPSBLdWJlcm5ldGVzU3RhdGU7XG4gICAgICAkc2NvcGUubW9kZWwgPSBLdWJlcm5ldGVzTW9kZWw7XG4gICAgICAkc2NvcGUuS3ViZXJuZXRlc0J1aWxkcyA9IEt1YmVybmV0ZXNCdWlsZHM7XG4gICAgICAkc2NvcGUuJG9uKCdrdWJlcm5ldGVzTW9kZWxVcGRhdGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBDb3JlLiRhcHBseSgkc2NvcGUpO1xuICAgICAgfSk7XG5cbiAgICAgICRzY29wZS50YWJsZUNvbmZpZyA9IHtcbiAgICAgICAgZGF0YTogJ2J1aWxkcycsXG4gICAgICAgIHNob3dTZWxlY3Rpb25DaGVja2JveDogdHJ1ZSxcbiAgICAgICAgZW5hYmxlUm93Q2xpY2tTZWxlY3Rpb246IGZhbHNlLFxuICAgICAgICBtdWx0aVNlbGVjdDogdHJ1ZSxcbiAgICAgICAgc2VsZWN0ZWRJdGVtczogW10sXG4gICAgICAgIGZpbHRlck9wdGlvbnM6IHtcbiAgICAgICAgICBmaWx0ZXJUZXh0OiAkbG9jYXRpb24uc2VhcmNoKClbXCJxXCJdIHx8ICcnXG4gICAgICAgIH0sXG4gICAgICAgIGNvbHVtbkRlZnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBmaWVsZDogJ21ldGFkYXRhLm5hbWUnLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6ICdOYW1lJyxcbiAgICAgICAgICAgIGNlbGxUZW1wbGF0ZTogJHRlbXBsYXRlQ2FjaGUuZ2V0KFwiYnVpbGRMaW5rVGVtcGxhdGUuaHRtbFwiKVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgZmllbGQ6ICckY3JlYXRpb25EYXRlJyxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnVGltZScsXG4gICAgICAgICAgICBkZWZhdWx0U29ydDogdHJ1ZSxcbiAgICAgICAgICAgIGNlbGxUZW1wbGF0ZTogJHRlbXBsYXRlQ2FjaGUuZ2V0KFwiYnVpbGRUaW1lVGVtcGxhdGUuaHRtbFwiKVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgZmllbGQ6ICdzdGF0dXMnLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6ICdTdGF0dXMnLFxuICAgICAgICAgICAgY2VsbFRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoXCJidWlsZFN0YXR1c1RlbXBsYXRlLmh0bWxcIilcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGZpZWxkOiAnJGxvZ3NMaW5rJyxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnTG9ncycsXG4gICAgICAgICAgICBjZWxsVGVtcGxhdGU6ICR0ZW1wbGF0ZUNhY2hlLmdldChcImJ1aWxkTG9nc1RlbXBsYXRlLmh0bWxcIilcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGZpZWxkOiAnJHBvZExpbmsnLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6ICdCdWlsZCBQb2QnLFxuICAgICAgICAgICAgY2VsbFRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoXCJidWlsZFBvZFRlbXBsYXRlLmh0bWxcIilcbiAgICAgICAgICB9LFxuLypcbiAgICAgICAgICB7XG4gICAgICAgICAgICBmaWVsZDogJ3BhcmFtZXRlcnMuc291cmNlLnR5cGUnLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6ICdTb3VyY2UnXG4gICAgICAgICAgfSxcbiovXG4gICAgICAgICAge1xuICAgICAgICAgICAgZmllbGQ6ICdwYXJhbWV0ZXJzLnNvdXJjZS5naXQudXJpJyxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnUmVwb3NpdG9yeScsXG4gICAgICAgICAgICBjZWxsVGVtcGxhdGU6ICR0ZW1wbGF0ZUNhY2hlLmdldChcImJ1aWxkUmVwb3NpdG9yeVRlbXBsYXRlLmh0bWxcIilcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGZpZWxkOiAncGFyYW1ldGVycy5zdHJhdGVneS50eXBlJyxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnU3RyYXRlZ3knXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBmaWVsZDogJ3BhcmFtZXRlcnMuc3RyYXRlZ3kuc3RpU3RyYXRlZ3kuaW1hZ2UnLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6ICdTb3VyY2UgSW1hZ2UnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBmaWVsZDogJ3BhcmFtZXRlcnMub3V0cHV0LmltYWdlVGFnJyxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnT3V0cHV0IEltYWdlJ1xuICAgICAgICAgIH1dXG4gICAgICB9O1xuXG4gICAgICBLdWJlcm5ldGVzLmluaXRTaGFyZWQoJHNjb3BlLCAkbG9jYXRpb24sICRodHRwLCAkdGltZW91dCwgJHJvdXRlUGFyYW1zLCBLdWJlcm5ldGVzTW9kZWwsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc0FwaVVSTCk7XG5cbiAgICAgICRzY29wZS4ka2VlcFBvbGxpbmcgPSAoKSA9PiBrZWVwUG9sbGluZ01vZGVsO1xuICAgICAgJHNjb3BlLmZldGNoID0gUG9sbEhlbHBlcnMuc2V0dXBQb2xsaW5nKCRzY29wZSwgKG5leHQ6KCkgPT4gdm9pZCkgPT4ge1xuICAgICAgICB2YXIgdXJsID0gYnVpbGRzUmVzdFVSTCgpO1xuICAgICAgICAkaHR0cC5nZXQodXJsKS5cbiAgICAgICAgICBzdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcImdvdCBkYXRhIFwiICsgYW5ndWxhci50b0pzb24oZGF0YSwgdHJ1ZSkpO1xuICAgICAgICAgICAgICAkc2NvcGUuYnVpbGRzID0gZW5yaWNoQnVpbGRzKGRhdGEuaXRlbXMpO1xuICAgICAgICAgICAgICAkc2NvcGUuZmV0Y2hlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBDb3JlLiRhcHBseSgkc2NvcGUpO1xuICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgIH0pLlxuICAgICAgICAgIGVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgbG9nLndhcm4oXCJGYWlsZWQgdG8gbG9hZCBcIiArIHVybCArIFwiIFwiICsgZGF0YSArIFwiIFwiICsgc3RhdHVzKTtcbiAgICAgICAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgJHNjb3BlLmZldGNoKCk7XG4gICAgfV0pO1xufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNIZWxwZXJzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNQbHVnaW4udHNcIi8+XG5cbm1vZHVsZSBLdWJlcm5ldGVzIHtcblxuICAvLyBjb250cm9sbGVyIGZvciBjb25uZWN0aW5nIHRvIGEgcmVtb3RlIGNvbnRhaW5lciB2aWEgam9sb2tpYVxuICBleHBvcnQgdmFyIENvbm5lY3RDb250cm9sbGVyID0gY29udHJvbGxlcihcIkNvbm5lY3RDb250cm9sbGVyXCIsIFtcbiAgICBcIiRzY29wZVwiLCBcImxvY2FsU3RvcmFnZVwiLCBcInVzZXJEZXRhaWxzXCIsIFwiQ29ubmVjdERpYWxvZ1NlcnZpY2VcIiwgXCIkYnJvd3NlclwiLFxuICAgICgkc2NvcGUsIGxvY2FsU3RvcmFnZSwgdXNlckRldGFpbHMsIENvbm5lY3REaWFsb2dTZXJ2aWNlLCAkYnJvd3NlcjpuZy5JQnJvd3NlclNlcnZpY2UpID0+IHtcblxuICAgICAgdmFyIGJhc2U6YW55ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYmFzZScpO1xuICAgICAgdmFyIGJhc2VIcmVmID0gYmFzZSAmJiBiYXNlLmhyZWYgfHwgJyc7XG5cbiAgICAgICRzY29wZS5kb0Nvbm5lY3QgPSAoZW50aXR5KSA9PiB7XG4gICAgICAgIHZhciBjb25uZWN0VXJsOmFueSA9IG5ldyBVUkkoYmFzZUhyZWYpO1xuICAgICAgICB2YXIgcmV0dXJuVG8gPSBuZXcgVVJJKCkudG9TdHJpbmcoKTtcbiAgICAgICAgdmFyIHRpdGxlID0gZW50aXR5Lm1ldGFkYXRhLm5hbWUgfHwgJ1VudGl0bGVkIENvbnRhaW5lcic7XG4gICAgICAgIHZhciB0b2tlbiA9IHVzZXJEZXRhaWxzLnRva2VuIHx8ICcnO1xuICAgICAgICBjb25uZWN0VXJsLmhhc2godG9rZW4pLnF1ZXJ5KHtcbiAgICAgICAgICBqb2xva2lhVXJsOiBlbnRpdHkuJGpvbG9raWFVcmwsXG4gICAgICAgICAgdGl0bGU6IHRpdGxlLFxuICAgICAgICAgIHJldHVyblRvOiByZXR1cm5Ub1xuICAgICAgICB9KTtcbiAgICAgICAgbG9nLmRlYnVnKFwiQ29ubmVjdCBVUkk6IFwiLCBjb25uZWN0VXJsLnRvU3RyaW5nKCkpO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGNvbm5lY3RVcmwudG9TdHJpbmcoKTtcbiAgICAgIH07XG5cbiAgICB9XSk7XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vaW5jbHVkZXMudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwia3ViZXJuZXRlc0hlbHBlcnMudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwia3ViZXJuZXRlc1BsdWdpbi50c1wiLz5cblxubW9kdWxlIEt1YmVybmV0ZXMge1xuXG4gIGV4cG9ydCB2YXIgRGVwbG95bWVudENvbmZpZ0NvbnRyb2xsZXIgPSBjb250cm9sbGVyKFwiRGVwbG95bWVudENvbmZpZ0NvbnRyb2xsZXJcIixcbiAgICBbXCIkc2NvcGVcIiwgXCJLdWJlcm5ldGVzTW9kZWxcIiwgXCJLdWJlcm5ldGVzU3RhdGVcIiwgXCJLdWJlcm5ldGVzU2NoZW1hXCIsIFwiJHRlbXBsYXRlQ2FjaGVcIiwgXCIkbG9jYXRpb25cIiwgXCIkcm91dGVQYXJhbXNcIiwgXCIkaHR0cFwiLCBcIiR0aW1lb3V0XCIsIFwiS3ViZXJuZXRlc0FwaVVSTFwiLFxuICAgICAgKCRzY29wZSwgS3ViZXJuZXRlc01vZGVsOkt1YmVybmV0ZXMuS3ViZXJuZXRlc01vZGVsU2VydmljZSwgS3ViZXJuZXRlc1N0YXRlLCBLdWJlcm5ldGVzU2NoZW1hLFxuICAgICAgICR0ZW1wbGF0ZUNhY2hlOm5nLklUZW1wbGF0ZUNhY2hlU2VydmljZSwgJGxvY2F0aW9uOm5nLklMb2NhdGlvblNlcnZpY2UsICRyb3V0ZVBhcmFtcywgJGh0dHAsICR0aW1lb3V0LCBLdWJlcm5ldGVzQXBpVVJMKSA9PiB7XG5cbiAgICAgICAgJHNjb3BlLmt1YmVybmV0ZXMgPSBLdWJlcm5ldGVzU3RhdGU7XG4gICAgICAgICRzY29wZS5tb2RlbCA9IEt1YmVybmV0ZXNNb2RlbDtcbiAgICAgICAgJHNjb3BlLmlkID0gJHJvdXRlUGFyYW1zW1wiaWRcIl07XG4gICAgICAgICRzY29wZS5zY2hlbWEgPSBLdWJlcm5ldGVzU2NoZW1hO1xuICAgICAgICAkc2NvcGUuY29uZmlnID0gS3ViZXJuZXRlc1NjaGVtYS5kZWZpbml0aW9ucy5vc19kZXBsb3lfRGVwbG95bWVudENvbmZpZztcblxuICAgICAgICBLdWJlcm5ldGVzLmluaXRTaGFyZWQoJHNjb3BlLCAkbG9jYXRpb24sICRodHRwLCAkdGltZW91dCwgJHJvdXRlUGFyYW1zLCBLdWJlcm5ldGVzTW9kZWwsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc0FwaVVSTCk7XG5cbiAgICAgICAgJHNjb3BlLiRvbigna3ViZXJuZXRlc01vZGVsVXBkYXRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB1cGRhdGVEYXRhKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRzY29wZS4kb24oJyRyb3V0ZVVwZGF0ZScsICgkZXZlbnQpID0+IHtcbiAgICAgICAgICB1cGRhdGVEYXRhKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHVwZGF0ZURhdGEoKTtcblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVEYXRhKCkge1xuICAgICAgICAgICRzY29wZS5pdGVtID0gbnVsbDtcbiAgICAgICAgICBpZiAoJHNjb3BlLmlkKSB7XG4gICAgICAgICAgICB2YXIgdXJsID0gZGVwbG95bWVudENvbmZpZ1Jlc3RVcmwoJHNjb3BlLmlkKTtcbiAgICAgICAgICAgICRodHRwLmdldCh1cmwpLlxuICAgICAgICAgICAgICBzdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAkc2NvcGUuZW50aXR5ID0gZGF0YTtcbiAgICAgICAgICAgICAgICAgIGVucmljaERlcGxveW1lbnRDb25maWcoZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICRzY29wZS5mZXRjaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBDb3JlLiRhcHBseSgkc2NvcGUpO1xuICAgICAgICAgICAgICB9KS5cbiAgICAgICAgICAgICAgZXJyb3IoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgbG9nLndhcm4oXCJGYWlsZWQgdG8gbG9hZCBcIiArIHVybCArIFwiIFwiICsgZGF0YSArIFwiIFwiICsgc3RhdHVzKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRzY29wZS5mZXRjaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XSk7XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vaW5jbHVkZXMudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwia3ViZXJuZXRlc1BsdWdpbi50c1wiLz5cblxubW9kdWxlIEt1YmVybmV0ZXMge1xuXG4gIGV4cG9ydCB2YXIgRGVwbG95bWVudENvbmZpZ3NDb250cm9sbGVyID0gY29udHJvbGxlcihcIkRlcGxveW1lbnRDb25maWdzQ29udHJvbGxlclwiLCBbXCIkc2NvcGVcIiwgXCJLdWJlcm5ldGVzTW9kZWxcIiwgXCJLdWJlcm5ldGVzQnVpbGRzXCIsIFwiS3ViZXJuZXRlc1N0YXRlXCIsIFwiJGRpYWxvZ1wiLCBcIiR3aW5kb3dcIiwgXCIkdGVtcGxhdGVDYWNoZVwiLCBcIiRyb3V0ZVBhcmFtc1wiLCBcIiRsb2NhdGlvblwiLCBcImxvY2FsU3RvcmFnZVwiLCBcIiRodHRwXCIsIFwiJHRpbWVvdXRcIiwgXCJLdWJlcm5ldGVzQXBpVVJMXCIsXG4gICAgKCRzY29wZSwgS3ViZXJuZXRlc01vZGVsOkt1YmVybmV0ZXMuS3ViZXJuZXRlc01vZGVsU2VydmljZSwgS3ViZXJuZXRlc0J1aWxkcywgS3ViZXJuZXRlc1N0YXRlLCAkZGlhbG9nLCAkd2luZG93LCAkdGVtcGxhdGVDYWNoZSwgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb246bmcuSUxvY2F0aW9uU2VydmljZSwgbG9jYWxTdG9yYWdlLCAkaHR0cCwgJHRpbWVvdXQsIEt1YmVybmV0ZXNBcGlVUkwpID0+IHtcblxuICAgICAgJHNjb3BlLmt1YmVybmV0ZXMgPSBLdWJlcm5ldGVzU3RhdGU7XG4gICAgICAkc2NvcGUubW9kZWwgPSBLdWJlcm5ldGVzTW9kZWw7XG4gICAgICAkc2NvcGUuS3ViZXJuZXRlc0J1aWxkcyA9IEt1YmVybmV0ZXNCdWlsZHM7XG4gICAgICAkc2NvcGUuJG9uKCdrdWJlcm5ldGVzTW9kZWxVcGRhdGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBDb3JlLiRhcHBseSgkc2NvcGUpO1xuICAgICAgfSk7XG4gICAgICAkc2NvcGUubGFiZWxDbGFzcyA9IGNvbnRhaW5lckxhYmVsQ2xhc3M7XG5cbiAgICAgICRzY29wZS50YWJsZUNvbmZpZyA9IHtcbiAgICAgICAgZGF0YTogJ2RlcGxveW1lbnRDb25maWdzJyxcbiAgICAgICAgc2hvd1NlbGVjdGlvbkNoZWNrYm94OiB0cnVlLFxuICAgICAgICBlbmFibGVSb3dDbGlja1NlbGVjdGlvbjogZmFsc2UsXG4gICAgICAgIG11bHRpU2VsZWN0OiB0cnVlLFxuICAgICAgICBzZWxlY3RlZEl0ZW1zOiBbXSxcbiAgICAgICAgZmlsdGVyT3B0aW9uczoge1xuICAgICAgICAgIGZpbHRlclRleHQ6ICRsb2NhdGlvbi5zZWFyY2goKVtcInFcIl0gfHwgJydcbiAgICAgICAgfSxcbiAgICAgICAgY29sdW1uRGVmczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGZpZWxkOiAnbWV0YWRhdGEubmFtZScsXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogJ05hbWUnLFxuICAgICAgICAgICAgY2VsbFRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoXCJkZXBsb3ltZW50Q29uZmlnTGlua1RlbXBsYXRlLmh0bWxcIilcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGZpZWxkOiAnbWV0YWRhdGEubmFtZXNwYWNlJyxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnTmFtZXNwYWNlJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgZmllbGQ6ICckaW1hZ2VDaGFuZ2VQYXJhbXMuYXV0b21hdGljJyxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnQXV0b21hdGljJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgZmllbGQ6ICckaW1hZ2VDaGFuZ2VQYXJhbXMuJGNvbnRhaW5lck5hbWVzJyxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnQ29udGFpbmVyIE5hbWVzJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgZmllbGQ6ICckaW1hZ2VDaGFuZ2VQYXJhbXMuZnJvbS5uYW1lJyxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnRnJvbSBpbWFnZSdcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGZpZWxkOiAnJGltYWdlQ2hhbmdlUGFyYW1zLnRhZycsXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogJ1RhZydcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGZpZWxkOiAndGVtcGxhdGUuY29udHJvbGxlclRlbXBsYXRlLnBvZFRlbXBsYXRlLnRhZ3MnLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6ICdMYWJlbHMnLFxuICAgICAgICAgICAgY2VsbFRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoXCJkZXBsb3ltZW50Q29uZmlnTGFiZWxUZW1wbGF0ZS5odG1sXCIpXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9O1xuXG4gICAgICBLdWJlcm5ldGVzLmluaXRTaGFyZWQoJHNjb3BlLCAkbG9jYXRpb24sICRodHRwLCAkdGltZW91dCwgJHJvdXRlUGFyYW1zLCBLdWJlcm5ldGVzTW9kZWwsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc0FwaVVSTCk7XG5cbiAgICAgICRzY29wZS5kZWxldGVQcm9tcHQgPSAoc2VsZWN0ZWQpID0+IHtcbiAgICAgICAgVUkubXVsdGlJdGVtQ29uZmlybUFjdGlvbkRpYWxvZyg8VUkuTXVsdGlJdGVtQ29uZmlybUFjdGlvbk9wdGlvbnM+e1xuICAgICAgICAgIGNvbGxlY3Rpb246IHNlbGVjdGVkLFxuICAgICAgICAgIGluZGV4OiAnJG5hbWUnLFxuICAgICAgICAgIG9uQ2xvc2U6IChyZXN1bHQ6Ym9vbGVhbikgPT4ge1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICBmdW5jdGlvbiBkZWxldGVTZWxlY3RlZChzZWxlY3RlZCwgbmV4dCkge1xuICAgICAgICAgICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgICAgICAgICBkZWxldGVFbnRpdHkobmV4dCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGVTZWxlY3RlZChzZWxlY3RlZCwgc2VsZWN0ZWQuc2hpZnQoKSk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdXBkYXRlRGF0YSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGRlbGV0ZVNlbGVjdGVkKHNlbGVjdGVkLCBzZWxlY3RlZC5zaGlmdCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHRpdGxlOiAnRGVsZXRlIERlcGxveW1lbnQ/JyxcbiAgICAgICAgICBhY3Rpb246ICdUaGUgZm9sbG93aW5nIERlcGxveW1lbnRzIHdpbGwgYmUgZGVsZXRlZDonLFxuICAgICAgICAgIG9rVGV4dDogJ0RlbGV0ZScsXG4gICAgICAgICAgb2tDbGFzczogJ2J0bi1kYW5nZXInLFxuICAgICAgICAgIGN1c3RvbTogXCJUaGlzIG9wZXJhdGlvbiBpcyBwZXJtYW5lbnQgb25jZSBjb21wbGV0ZWQhXCIsXG4gICAgICAgICAgY3VzdG9tQ2xhc3M6IFwiYWxlcnQgYWxlcnQtd2FybmluZ1wiXG4gICAgICAgIH0pLm9wZW4oKTtcbiAgICAgIH07XG5cbiAgICAgIGZ1bmN0aW9uIGRlbGV0ZUVudGl0eShzZWxlY3Rpb24sIG5leHRDYWxsYmFjaykge1xuICAgICAgICB2YXIgbmFtZSA9IChzZWxlY3Rpb24gfHwge30pLiRuYW1lO1xuICAgICAgICBpZiAobmFtZSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiQWJvdXQgdG8gZGVsZXRlIGRlcGxveW1lbnQgY29uZmlnOiBcIiArIG5hbWUpO1xuICAgICAgICAgIHZhciB1cmwgPSBkZXBsb3ltZW50Q29uZmlnUmVzdFVybChuYW1lKTtcbiAgICAgICAgICAkaHR0cC5kZWxldGUodXJsKS5cbiAgICAgICAgICAgIHN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICAgIG5leHRDYWxsYmFjaygpO1xuICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICBlcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgICAgbG9nLndhcm4oXCJGYWlsZWQgdG8gZGVsZXRlIGRlcGxveW1lbnQgY29uZmlnIG9uIFwiICsgdXJsICsgXCIgXCIgKyBkYXRhICsgXCIgXCIgKyBzdGF0dXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJ3YXJuaW5nOiBubyBuYW1lIGZvciBzZWxlY3Rpb246IFwiICsgYW5ndWxhci50b0pzb24oc2VsZWN0aW9uKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdXBkYXRlRGF0YSgpIHtcbiAgICAgICAgdmFyIHVybCA9IGRlcGxveW1lbnRDb25maWdzUmVzdFVSTCgpO1xuICAgICAgICAkaHR0cC5nZXQodXJsKS5cbiAgICAgICAgICBzdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcImdvdCBkYXRhIFwiICsgYW5ndWxhci50b0pzb24oZGF0YSwgdHJ1ZSkpO1xuICAgICAgICAgICAgICAkc2NvcGUuZGVwbG95bWVudENvbmZpZ3MgPSBlbnJpY2hEZXBsb3ltZW50Q29uZmlncyhkYXRhLml0ZW1zKTtcbiAgICAgICAgICAgICAgJHNjb3BlLmZldGNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgICBDb3JlLiRhcHBseSgkc2NvcGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLlxuICAgICAgICAgIGVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgbG9nLndhcm4oXCJGYWlsZWQgdG8gbG9hZCBcIiArIHVybCArIFwiIFwiICsgZGF0YSArIFwiIFwiICsgc3RhdHVzKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlRGF0YSgpO1xuICAgIH1dKTtcbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9pbmNsdWRlcy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzUGx1Z2luLnRzXCIvPlxuXG5tb2R1bGUgS3ViZXJuZXRlcyB7XG5cbiAgZnVuY3Rpb24gYnlJZCh0aGluZykge1xuICAgIHJldHVybiB0aGluZy5pZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleShuYW1lc3BhY2UsIGlkKSB7XG4gICAgcmV0dXJuIChuYW1lc3BhY2UgfHwgXCJcIikgKyBcIi1cIiArIGlkO1xuICB9XG5cbiAgZnVuY3Rpb24gcG9wdWxhdGVLZXkoaXRlbSkge1xuICAgIHZhciByZXN1bHQgPSBpdGVtO1xuICAgIHJlc3VsdFsnX2tleSddID0gY3JlYXRlS2V5KGdldE5hbWVzcGFjZShpdGVtKSwgZ2V0TmFtZShpdGVtKSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvcHVsYXRlS2V5cyhpdGVtczpBcnJheTxhbnk+KSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIGFuZ3VsYXIuZm9yRWFjaChpdGVtcywgKGl0ZW0pID0+IHtcbiAgICAgIHJlc3VsdC5wdXNoKHBvcHVsYXRlS2V5KGl0ZW0pKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0UG9kcyhwb2RzLCBuYW1lc3BhY2UsIGxhYmVscykge1xuICAgIHJldHVybiBwb2RzLmZpbHRlcigocG9kKSA9PiB7XG4gICAgICByZXR1cm4gZ2V0TmFtZXNwYWNlKHBvZCkgPT09IG5hbWVzcGFjZSAmJiBzZWxlY3Rvck1hdGNoZXMobGFiZWxzLCBnZXRMYWJlbHMocG9kKSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIG9iamVjdCB3aGljaCBrZWVwcyB0cmFjayBvZiBhbGwgdGhlIHBvZHMsIHJlcGxpY2F0aW9uIGNvbnRyb2xsZXJzLCBzZXJ2aWNlcyBhbmQgdGhlaXIgYXNzb2NpYXRpb25zXG4gICAqL1xuICBleHBvcnQgY2xhc3MgS3ViZXJuZXRlc01vZGVsU2VydmljZSB7XG4gICAgcHVibGljIGt1YmVybmV0ZXMgPSA8S3ViZXJuZXRlc1N0YXRlPiBudWxsO1xuICAgIHB1YmxpYyBhcHBzID0gW107XG4gICAgcHVibGljIHNlcnZpY2VzID0gW107XG4gICAgcHVibGljIHJlcGxpY2F0aW9uY29udHJvbGxlcnMgPSBbXTtcbiAgICBwdWJsaWMgZ2V0IHJlcGxpY2F0aW9uQ29udHJvbGxlcnMoKTpBcnJheTxhbnk+IHtcbiAgICAgIHJldHVybiB0aGlzLnJlcGxpY2F0aW9uY29udHJvbGxlcnM7XG4gICAgfVxuICAgIHB1YmxpYyBzZXQgcmVwbGljYXRpb25Db250cm9sbGVycyhyZXBsaWNhdGlvbkNvbnRyb2xsZXJzOkFycmF5PGFueT4pIHtcbiAgICAgIHRoaXMucmVwbGljYXRpb25jb250cm9sbGVycyA9IHJlcGxpY2F0aW9uQ29udHJvbGxlcnM7XG4gICAgfVxuICAgIHB1YmxpYyBwb2RzID0gW107XG4gICAgcHVibGljIGhvc3RzID0gW107XG4gICAgcHVibGljIGdldCBuYW1lc3BhY2VzKCk6QXJyYXk8c3RyaW5nPiB7XG4gICAgICByZXR1cm4gdGhpcy5rdWJlcm5ldGVzLm5hbWVzcGFjZXM7XG4gICAgfVxuICAgIC8vcHVibGljIG5hbWVzcGFjZXMgPSBbXTtcbiAgICBwdWJsaWMgcm91dGVzID0gW107XG4gICAgcHVibGljIHRlbXBsYXRlcyA9IFtdO1xuICAgIHB1YmxpYyByZWRyYXcgPSBmYWxzZTtcbiAgICBwdWJsaWMgcmVzb3VyY2VWZXJzaW9ucyA9IHt9O1xuXG4gICAgLy8gdmFyaW91cyB2aWV3cyBvbiB0aGUgZGF0YVxuICAgIHB1YmxpYyBwb2RzQnlIb3N0ID0ge307XG4gICAgcHVibGljIHNlcnZpY2VzQnlLZXkgPSB7fTtcbiAgICBwdWJsaWMgcmVwbGljYXRpb25Db250cm9sbGVyc0J5S2V5ID0ge307XG4gICAgcHVibGljIHBvZHNCeUtleSA9IHt9O1xuXG4gICAgcHVibGljIGFwcEluZm9zID0gW107XG4gICAgcHVibGljIGFwcFZpZXdzID0gW107XG4gICAgcHVibGljIGFwcEZvbGRlcnMgPSBbXTtcblxuICAgIHB1YmxpYyBmZXRjaGVkID0gZmFsc2U7XG4gICAgcHVibGljIGlzT3BlblNoaWZ0ID0gZmFsc2U7XG5cbiAgICBwdWJsaWMgZmV0Y2ggPSAoKSA9PiB7XG4gICAgfTtcblxuICAgIHB1YmxpYyAka2VlcFBvbGxpbmcoKSB7XG4gICAgICByZXR1cm4ga2VlcFBvbGxpbmdNb2RlbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgb3JSZWRyYXcoZmxhZykge1xuICAgICAgdGhpcy5yZWRyYXcgPSB0aGlzLnJlZHJhdyB8fCBmbGFnO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRTZXJ2aWNlKG5hbWVzcGFjZSwgaWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnNlcnZpY2VzQnlLZXlbY3JlYXRlS2V5KG5hbWVzcGFjZSAsaWQpXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0UmVwbGljYXRpb25Db250cm9sbGVyKG5hbWVzcGFjZSwgaWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcGxpY2F0aW9uQ29udHJvbGxlcnNCeUtleVtjcmVhdGVLZXkobmFtZXNwYWNlICxpZCldO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRQb2QobmFtZXNwYWNlLCBpZCkge1xuICAgICAgcmV0dXJuIHRoaXMucG9kc0J5S2V5W2NyZWF0ZUtleShuYW1lc3BhY2UgLGlkKV07XG4gICAgfVxuXG4gICAgcHVibGljIHBvZHNGb3JOYW1lc3BhY2UobmFtZXNwYWNlID0gdGhpcy5jdXJyZW50TmFtZXNwYWNlKCkpIHtcbiAgICAgIHJldHVybiBfLmZpbHRlcih0aGlzLnBvZHMsIHsgbmFtZXNwYWNlOiBuYW1lc3BhY2UgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCBzZWxlY3RlZCBuYW1lc3BhY2Ugb3IgdGhlIGRlZmF1bHQgbmFtZXNwYWNlXG4gICAgICovXG4gICAgcHVibGljIGN1cnJlbnROYW1lc3BhY2UoKSB7XG4gICAgICB2YXIgYW5zd2VyID0gbnVsbDtcbiAgICAgIGlmICh0aGlzLmt1YmVybmV0ZXMpIHtcbiAgICAgICAgYW5zd2VyID0gdGhpcy5rdWJlcm5ldGVzLnNlbGVjdGVkTmFtZXNwYWNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFuc3dlciB8fCBkZWZhdWx0TmFtZXNwYWNlO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCB1cGRhdGVJY29uVXJsQW5kQXBwSW5mbyhlbnRpdHksIG5hbWVGaWVsZDogc3RyaW5nKSB7XG4gICAgICB2YXIgYW5zd2VyID0gbnVsbDtcbiAgICAgIHZhciBpZCA9IGdldE5hbWUoZW50aXR5KTtcbiAgICAgIGlmIChpZCAmJiBuYW1lRmllbGQpIHtcbiAgICAgICAgKHRoaXMudGVtcGxhdGVzIHx8IFtdKS5mb3JFYWNoKCh0ZW1wbGF0ZSkgPT4ge1xuICAgICAgICAgIHZhciBtZXRhZGF0YSA9IHRlbXBsYXRlLm1ldGFkYXRhO1xuICAgICAgICAgIGlmIChtZXRhZGF0YSkge1xuICAgICAgICAgICAgdmFyIGFubm90YXRpb25zID0gbWV0YWRhdGEuYW5ub3RhdGlvbnMgfHwge307XG4gICAgICAgICAgICB2YXIgaWNvblVybCA9IGFubm90YXRpb25zW1wiZmFicmljOC5cIiArIGlkICsgXCIvaWNvblVybFwiXSB8fCBhbm5vdGF0aW9uc1tcImZhYnJpYzgvaWNvblVybFwiXTtcbiAgICAgICAgICAgIGlmIChpY29uVXJsKSB7XG4gICAgICAgICAgICAgICh0ZW1wbGF0ZS5vYmplY3RzIHx8IFtdKS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIGVudGl0eU5hbWUgPSBnZXROYW1lKGl0ZW0pO1xuICAgICAgICAgICAgICAgIGlmIChpZCA9PT0gZW50aXR5TmFtZSkge1xuICAgICAgICAgICAgICAgICAgZW50aXR5LiRpY29uVXJsID0gaWNvblVybDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgICh0aGlzLmFwcEluZm9zIHx8IFtdKS5mb3JFYWNoKChhcHBJbmZvKSA9PiB7XG4gICAgICAgICAgdmFyIGljb25QYXRoID0gYXBwSW5mby5pY29uUGF0aDtcbiAgICAgICAgICBpZiAoaWNvblBhdGggJiYgIWFuc3dlciAmJiBpY29uUGF0aCAhPT0gXCJudWxsXCIpIHtcbiAgICAgICAgICAgIHZhciBpY29uVXJsID0gZ2l0UGF0aFRvVXJsKGljb25QYXRoKTtcbiAgICAgICAgICAgIHZhciBpZHMgPSBDb3JlLnBhdGhHZXQoYXBwSW5mbywgW1wibmFtZXNcIiwgbmFtZUZpZWxkXSk7XG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goaWRzLCAoYXBwSWQpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGFwcElkID09PSBpZCkge1xuICAgICAgICAgICAgICAgIGVudGl0eS4kaWNvblVybCA9IGljb25Vcmw7XG4gICAgICAgICAgICAgICAgZW50aXR5LmFwcFBhdGggPSBhcHBJbmZvLmFwcFBhdGg7XG4gICAgICAgICAgICAgICAgZW50aXR5LiRpbmZvID0gYXBwSW5mbztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICghZW50aXR5LiRpY29uVXJsKSB7XG4gICAgICAgIGVudGl0eS4kaWNvblVybCA9IGRlZmF1bHRJY29uVXJsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBtYXliZUluaXQoKSB7XG4gICAgICB0aGlzLmZldGNoZWQgPSB0cnVlO1xuICAgICAgaWYgKHRoaXMuc2VydmljZXMgJiYgdGhpcy5yZXBsaWNhdGlvbkNvbnRyb2xsZXJzICYmIHRoaXMucG9kcykge1xuICAgICAgICB0aGlzLnNlcnZpY2VzQnlLZXkgPSB7fTtcbiAgICAgICAgdGhpcy5wb2RzQnlLZXkgPSB7fTtcbiAgICAgICAgdGhpcy5yZXBsaWNhdGlvbkNvbnRyb2xsZXJzQnlLZXkgPSB7fTtcblxuICAgICAgICB0aGlzLnBvZHMuZm9yRWFjaCgocG9kKSA9PiB7XG4gICAgICAgICAgaWYgKCFwb2Qua2luZCkgcG9kLmtpbmQgPSBcIlBvZFwiO1xuICAgICAgICAgIHRoaXMucG9kc0J5S2V5W3BvZC5fa2V5XSA9IHBvZDtcbiAgICAgICAgICB2YXIgaG9zdCA9IGdldEhvc3QocG9kKTtcbiAgICAgICAgICBwb2QuJGxhYmVsc1RleHQgPSBLdWJlcm5ldGVzLmxhYmVsc1RvU3RyaW5nKGdldExhYmVscyhwb2QpKTtcbiAgICAgICAgICBpZiAoaG9zdCkge1xuICAgICAgICAgICAgcG9kLiRsYWJlbHNUZXh0ICs9IGxhYmVsRmlsdGVyVGV4dFNlcGFyYXRvciArIFwiaG9zdD1cIiArIGhvc3Q7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBvZC4kaWNvblVybCA9IGRlZmF1bHRJY29uVXJsO1xuICAgICAgICAgIHRoaXMuZGlzY292ZXJQb2RDb25uZWN0aW9ucyhwb2QpO1xuICAgICAgICAgIHBvZC4kY29udGFpbmVyUG9ydHMgPSBbXTtcbiAgICAgICAgICBhbmd1bGFyLmZvckVhY2goQ29yZS5wYXRoR2V0KHBvZCwgW1wic3BlY1wiLCBcImNvbnRhaW5lcnNcIl0pLCAoY29udGFpbmVyKSA9PiB7XG4gICAgICAgICAgICB2YXIgaW1hZ2UgPSBjb250YWluZXIuaW1hZ2U7XG4gICAgICAgICAgICBpZiAoaW1hZ2UpIHtcbiAgICAgICAgICAgICAgdmFyIGlkeCA9IGltYWdlLmxhc3RJbmRleE9mKFwiOlwiKTtcbiAgICAgICAgICAgICAgaWYgKGlkeCA+IDApIHtcbiAgICAgICAgICAgICAgICBpbWFnZSA9IGltYWdlLnN1YnN0cmluZygwLCBpZHgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciBwYXRocyA9IGltYWdlLnNwbGl0KFwiL1wiLCAzKTtcbiAgICAgICAgICAgICAgaWYgKHBhdGhzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHZhciBhbnN3ZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChwYXRocy5sZW5ndGggPT0gMykge1xuICAgICAgICAgICAgICAgICAgYW5zd2VyID0gcGF0aHNbMV0gKyBcIi9cIiArIHBhdGhzWzJdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGF0aHMubGVuZ3RoID09IDIpIHtcbiAgICAgICAgICAgICAgICAgIGFuc3dlciA9IHBhdGhzWzBdICsgXCIvXCIgKyBwYXRoc1sxXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgYW5zd2VyID0gcGF0aHNbMF0gKyBcIi9cIiArIHBhdGhzWzFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250YWluZXIuJGltYWdlTGluayA9IFVybEhlbHBlcnMuam9pbihcImh0dHBzOi8vcmVnaXN0cnkuaHViLmRvY2tlci5jb20vdS9cIiwgYW5zd2VyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGNvbnRhaW5lci5wb3J0cywgKHBvcnQpID0+IHtcbiAgICAgICAgICAgICAgdmFyIGNvbnRhaW5lclBvcnQgPSBwb3J0LmNvbnRhaW5lclBvcnQ7XG4gICAgICAgICAgICAgIGlmIChjb250YWluZXJQb3J0KSB7XG4gICAgICAgICAgICAgICAgcG9kLiRjb250YWluZXJQb3J0cy5wdXNoKGNvbnRhaW5lclBvcnQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5zZXJ2aWNlcy5mb3JFYWNoKChzZXJ2aWNlKSA9PiB7XG4gICAgICAgICAgaWYgKCFzZXJ2aWNlLmtpbmQpIHNlcnZpY2Uua2luZCA9IFwiU2VydmljZVwiO1xuICAgICAgICAgIHRoaXMuc2VydmljZXNCeUtleVtzZXJ2aWNlLl9rZXldID0gc2VydmljZTtcbiAgICAgICAgICB2YXIgc2VsZWN0b3IgPSBnZXRTZWxlY3RvcihzZXJ2aWNlKTtcbiAgICAgICAgICBzZXJ2aWNlLiRwb2RzID0gW107XG4gICAgICAgICAgaWYgKCFzZXJ2aWNlLiRwb2RDb3VudGVycykge1xuICAgICAgICAgICAgc2VydmljZS4kcG9kQ291bnRlcnMgPSB7fTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXy5hc3NpZ24oc2VydmljZS4kcG9kQ291bnRlcnMsIHNlbGVjdG9yID8gY3JlYXRlUG9kQ291bnRlcnMoc2VsZWN0b3IsIHRoaXMucG9kcywgc2VydmljZS4kcG9kcykgOiB7fSk7XG4gICAgICAgICAgdmFyIHNlbGVjdGVkUG9kcyA9IHNlcnZpY2UuJHBvZHM7XG4gICAgICAgICAgc2VydmljZS5jb25uZWN0VG8gPSBzZWxlY3RlZFBvZHMubWFwKChwb2QpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBwb2QuX2tleTtcbiAgICAgICAgICB9KS5qb2luKCcsJyk7XG4gICAgICAgICAgc2VydmljZS4kbGFiZWxzVGV4dCA9IEt1YmVybmV0ZXMubGFiZWxzVG9TdHJpbmcoZ2V0TGFiZWxzKHNlcnZpY2UpKTtcbiAgICAgICAgICB0aGlzLnVwZGF0ZUljb25VcmxBbmRBcHBJbmZvKHNlcnZpY2UsIFwic2VydmljZU5hbWVzXCIpO1xuICAgICAgICAgIHZhciBzcGVjID0gc2VydmljZS5zcGVjO1xuICAgICAgICAgIGlmIChzcGVjKSB7XG4gICAgICAgICAgICB2YXIgcG9ydHMgPSBfLm1hcChzcGVjLnBvcnRzLCBcInBvcnRcIik7XG4gICAgICAgICAgICBzZXJ2aWNlLiRwb3J0cyA9IHBvcnRzO1xuICAgICAgICAgICAgc2VydmljZS4kcG9ydHNUZXh0ID0gcG9ydHMuam9pbihcIiwgXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgaWNvblVybCA9IHNlcnZpY2UuJGljb25Vcmw7XG4gICAgICAgICAgaWYgKGljb25VcmwgJiYgc2VsZWN0ZWRQb2RzKSB7XG4gICAgICAgICAgICBzZWxlY3RlZFBvZHMuZm9yRWFjaCgocG9kKSA9PiB7XG4gICAgICAgICAgICAgIHBvZC4kaWNvblVybCA9IGljb25Vcmw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VydmljZS4kc2VydmljZVVybCA9IHNlcnZpY2VMaW5rVXJsKHNlcnZpY2UpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnJlcGxpY2F0aW9uQ29udHJvbGxlcnMuZm9yRWFjaCgocmVwbGljYXRpb25Db250cm9sbGVyKSA9PiB7XG4gICAgICAgICAgaWYgKCFyZXBsaWNhdGlvbkNvbnRyb2xsZXIua2luZCkgcmVwbGljYXRpb25Db250cm9sbGVyLmtpbmQgPSBcIlJlcGxpY2F0aW9uQ29udHJvbGxlclwiO1xuICAgICAgICAgIHRoaXMucmVwbGljYXRpb25Db250cm9sbGVyc0J5S2V5W3JlcGxpY2F0aW9uQ29udHJvbGxlci5fa2V5XSA9IHJlcGxpY2F0aW9uQ29udHJvbGxlclxuICAgICAgICAgIHZhciBzZWxlY3RvciA9IGdldFNlbGVjdG9yKHJlcGxpY2F0aW9uQ29udHJvbGxlcik7XG4gICAgICAgICAgcmVwbGljYXRpb25Db250cm9sbGVyLiRwb2RzID0gW107XG4gICAgICAgICAgcmVwbGljYXRpb25Db250cm9sbGVyLiRwb2RDb3VudGVycyA9IHNlbGVjdG9yID8gY3JlYXRlUG9kQ291bnRlcnMoc2VsZWN0b3IsIHRoaXMucG9kcywgcmVwbGljYXRpb25Db250cm9sbGVyLiRwb2RzKSA6IG51bGw7XG4gICAgICAgICAgdmFyIHNlbGVjdGVkUG9kcyA9IHJlcGxpY2F0aW9uQ29udHJvbGxlci4kcG9kcztcbiAgICAgICAgICByZXBsaWNhdGlvbkNvbnRyb2xsZXIuY29ubmVjdFRvID0gc2VsZWN0ZWRQb2RzLm1hcCgocG9kKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcG9kLl9rZXk7XG4gICAgICAgICAgfSkuam9pbignLCcpO1xuICAgICAgICAgIHJlcGxpY2F0aW9uQ29udHJvbGxlci4kbGFiZWxzVGV4dCA9IEt1YmVybmV0ZXMubGFiZWxzVG9TdHJpbmcoZ2V0TGFiZWxzKHJlcGxpY2F0aW9uQ29udHJvbGxlcikpO1xuICAgICAgICAgIHRoaXMudXBkYXRlSWNvblVybEFuZEFwcEluZm8ocmVwbGljYXRpb25Db250cm9sbGVyLCBcInJlcGxpY2F0aW9uQ29udHJvbGxlck5hbWVzXCIpO1xuICAgICAgICAgIHZhciBpY29uVXJsID0gIHJlcGxpY2F0aW9uQ29udHJvbGxlci4kaWNvblVybDtcbiAgICAgICAgICBpZiAoaWNvblVybCAmJiBzZWxlY3RlZFBvZHMpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkUG9kcy5mb3JFYWNoKChwb2QpID0+IHtcbiAgICAgICAgICAgICAgcG9kLiRpY29uVXJsID0gaWNvblVybDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gc2VydmljZXMgbWF5IG5vdCBtYXAgdG8gYW4gaWNvbiBidXQgdGhlaXIgcG9kcyBtYXkgZG8gdmlhIHRoZSBSQ1xuICAgICAgICAvLyBzbyBsZXRzIGRlZmF1bHQgaXQuLi5cbiAgICAgICAgdGhpcy5zZXJ2aWNlcy5mb3JFYWNoKChzZXJ2aWNlKSA9PiB7XG4gICAgICAgICAgdmFyIGljb25VcmwgPSBzZXJ2aWNlLiRpY29uVXJsO1xuICAgICAgICAgIHZhciBzZWxlY3RlZFBvZHMgPSBzZXJ2aWNlLiRwb2RzO1xuICAgICAgICAgIGlmIChzZWxlY3RlZFBvZHMpIHtcbiAgICAgICAgICAgIGlmICghaWNvblVybCB8fCBpY29uVXJsID09PSBkZWZhdWx0SWNvblVybCkge1xuICAgICAgICAgICAgICBpY29uVXJsID0gbnVsbDtcbiAgICAgICAgICAgICAgc2VsZWN0ZWRQb2RzLmZvckVhY2goKHBvZCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghaWNvblVybCkge1xuICAgICAgICAgICAgICAgICAgaWNvblVybCA9IHBvZC4kaWNvblVybDtcbiAgICAgICAgICAgICAgICAgIGlmIChpY29uVXJsKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlcnZpY2UuJGljb25VcmwgPSBpY29uVXJsO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnVwZGF0ZUFwcHMoKTtcblxuICAgICAgICAvL3VwZGF0ZU5hbWVzcGFjZXModGhpcy5rdWJlcm5ldGVzLCB0aGlzLnBvZHMsIHRoaXMucmVwbGljYXRpb25Db250cm9sbGVycywgdGhpcy5zZXJ2aWNlcyk7XG5cbiAgICAgICAgdmFyIHBvZHNCeUhvc3QgPSB7fTtcbiAgICAgICAgdGhpcy5wb2RzLmZvckVhY2goKHBvZCkgPT4ge1xuICAgICAgICAgIHZhciBob3N0ID0gZ2V0SG9zdChwb2QpO1xuICAgICAgICAgIHZhciBwb2RzRm9ySG9zdCA9IHBvZHNCeUhvc3RbaG9zdF07XG4gICAgICAgICAgaWYgKCFwb2RzRm9ySG9zdCkge1xuICAgICAgICAgICAgcG9kc0Zvckhvc3QgPSBbXTtcbiAgICAgICAgICAgIHBvZHNCeUhvc3RbaG9zdF0gPSBwb2RzRm9ySG9zdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcG9kc0Zvckhvc3QucHVzaChwb2QpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5wb2RzQnlIb3N0ID0gcG9kc0J5SG9zdDtcblxuICAgICAgICB2YXIgdG1wSG9zdHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaG9zdEtleSBpbiBwb2RzQnlIb3N0KSB7XG4gICAgICAgICAgdmFyIGhvc3RQb2RzID0gW107XG4gICAgICAgICAgdmFyIHBvZENvdW50ZXJzID0gY3JlYXRlUG9kQ291bnRlcnMoKHBvZCkgPT4gZ2V0SG9zdChwb2QpID09PSBob3N0S2V5LCB0aGlzLnBvZHMsIGhvc3RQb2RzLCBcImhvc3Q9XCIgKyBob3N0S2V5KTtcbiAgICAgICAgICB2YXIgaG9zdElQID0gbnVsbDtcbiAgICAgICAgICBpZiAoaG9zdFBvZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgcG9kID0gaG9zdFBvZHNbMF07XG4gICAgICAgICAgICB2YXIgY3VycmVudFN0YXRlID0gcG9kLnN0YXR1cztcbiAgICAgICAgICAgIGlmIChjdXJyZW50U3RhdGUpIHtcbiAgICAgICAgICAgICAgaG9zdElQID0gY3VycmVudFN0YXRlLmhvc3RJUDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGhvc3REZXRhaWxzID0ge1xuICAgICAgICAgICAgbmFtZTogaG9zdEtleSxcbiAgICAgICAgICAgIGlkOiBob3N0S2V5LFxuICAgICAgICAgICAgZWxlbWVudElkOiBob3N0S2V5LnJlcGxhY2UoL1xcLi9nLCAnXycpLFxuICAgICAgICAgICAgaG9zdElQOiBob3N0SVAsXG4gICAgICAgICAgICBwb2RzOiBob3N0UG9kcyxcbiAgICAgICAgICAgIGtpbmQ6IFwiSG9zdFwiLFxuICAgICAgICAgICAgJHBvZENvdW50ZXJzOiBwb2RDb3VudGVycyxcbiAgICAgICAgICAgICRpY29uVXJsOiBob3N0SWNvblVybFxuICAgICAgICAgIH07XG4gICAgICAgICAgdG1wSG9zdHMucHVzaChob3N0RGV0YWlscyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmhvc3RzID0gdG1wSG9zdHM7XG4vKlxuICAgICAgICB0bXBIb3N0cy5mb3JFYWNoKChuZXdIb3N0KSA9PiB7XG4gICAgICAgICAgdmFyIG9sZEhvc3Q6YW55ID0gdGhpcy5ob3N0cy5maW5kKChoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gaC5pZCA9PT0gbmV3SG9zdC5pZFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmICghb2xkSG9zdCkge1xuICAgICAgICAgICAgdGhpcy5yZWRyYXcgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5ob3N0cy5wdXNoKG5ld0hvc3QpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm9yUmVkcmF3KEFycmF5SGVscGVycy5zeW5jKG9sZEhvc3QucG9kcywgbmV3SG9zdC5wb2RzKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiovXG4gICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHVwZGF0ZUFwcHMoKSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBsZXRzIGNyZWF0ZSB0aGUgYXBwIHZpZXdzIGJ5IHRyeWluZyB0byBqb2luIGNvbnRyb2xsZXJzIC8gc2VydmljZXMgLyBwb2RzIHRoYXQgYXJlIHJlbGF0ZWRcbiAgICAgICAgdmFyIGFwcFZpZXdzID0gW107XG5cbiAgICAgICAgdGhpcy5yZXBsaWNhdGlvbkNvbnRyb2xsZXJzLmZvckVhY2goKHJlcGxpY2F0aW9uQ29udHJvbGxlcikgPT4ge1xuICAgICAgICAgIHZhciBuYW1lID0gZ2V0TmFtZShyZXBsaWNhdGlvbkNvbnRyb2xsZXIpO1xuICAgICAgICAgIHZhciAkaWNvblVybCA9IHJlcGxpY2F0aW9uQ29udHJvbGxlci4kaWNvblVybDtcbiAgICAgICAgICBhcHBWaWV3cy5wdXNoKHtcbiAgICAgICAgICAgIGFwcFBhdGg6IFwiL2R1bW15UGF0aC9cIiArIG5hbWUsXG4gICAgICAgICAgICAkbmFtZTogbmFtZSxcbiAgICAgICAgICAgICRpbmZvOiB7XG4gICAgICAgICAgICAgICRpY29uVXJsOiAkaWNvblVybFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICRpY29uVXJsOiAkaWNvblVybCxcbiAgICAgICAgICAgIHJlcGxpY2F0aW9uQ29udHJvbGxlcnM6IFtyZXBsaWNhdGlvbkNvbnRyb2xsZXJdLFxuICAgICAgICAgICAgcG9kczogcmVwbGljYXRpb25Db250cm9sbGVyLiRwb2RzIHx8IFtdLFxuICAgICAgICAgICAgc2VydmljZXM6IFtdXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuc2VydmljZXMuZm9yRWFjaCgoc2VydmljZSkgPT4ge1xuICAgICAgICAgIC8vIG5vdyBsZXRzIHNlZSBpZiB3ZSBjYW4gZmluZCBhbiBhcHAgd2l0aCBhbiBSQyBvZiB0aGUgc2FtZSBzZWxlY3RvclxuICAgICAgICAgIHZhciBtYXRjaGVzQXBwID0gbnVsbDtcbiAgICAgICAgICBhcHBWaWV3cy5mb3JFYWNoKChhcHBWaWV3KSA9PiB7XG4gICAgICAgICAgICBhcHBWaWV3LnJlcGxpY2F0aW9uQ29udHJvbGxlcnMuZm9yRWFjaCgocmVwbGljYXRpb25Db250cm9sbGVyKSA9PiB7XG4gICAgICAgICAgICAgIHZhciByZXBTZWxlY3RvciA9IGdldFNlbGVjdG9yKHJlcGxpY2F0aW9uQ29udHJvbGxlcik7XG4gICAgICAgICAgICAgIGlmIChyZXBTZWxlY3RvciAmJiBzZWxlY3Rvck1hdGNoZXMocmVwU2VsZWN0b3IsIGdldFNlbGVjdG9yKHNlcnZpY2UpKSAmJiBnZXROYW1lc3BhY2Uoc2VydmljZSkgPT0gZ2V0TmFtZXNwYWNlKHJlcGxpY2F0aW9uQ29udHJvbGxlcikpIHtcbiAgICAgICAgICAgICAgICBtYXRjaGVzQXBwID0gYXBwVmlldztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAobWF0Y2hlc0FwcCkge1xuICAgICAgICAgICAgbWF0Y2hlc0FwcC5zZXJ2aWNlcy5wdXNoKHNlcnZpY2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IGdldE5hbWUoc2VydmljZSk7XG4gICAgICAgICAgICB2YXIgJGljb25VcmwgPSBzZXJ2aWNlLiRpY29uVXJsO1xuICAgICAgICAgICAgYXBwVmlld3MucHVzaCh7XG4gICAgICAgICAgICAgIGFwcFBhdGg6IFwiL2R1bW15UGF0aC9cIiArIG5hbWUsXG4gICAgICAgICAgICAgICRuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAkaW5mbzoge1xuICAgICAgICAgICAgICAgICRpY29uVXJsOiAkaWNvblVybFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAkaWNvblVybDogJGljb25VcmwsXG4gICAgICAgICAgICAgIHJlcGxpY2F0aW9uQ29udHJvbGxlcnM6IFtdLFxuICAgICAgICAgICAgICBwb2RzOiBzZXJ2aWNlLiRwb2RzIHx8IFtdLFxuICAgICAgICAgICAgICBzZXJ2aWNlczogW3NlcnZpY2VdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBhbmd1bGFyLmZvckVhY2godGhpcy5yb3V0ZXMsIChyb3V0ZSkgPT4ge1xuICAgICAgICAgIHZhciBtZXRhZGF0YSA9IHJvdXRlLm1ldGFkYXRhIHx8IHt9O1xuICAgICAgICAgIHZhciBzcGVjID0gcm91dGUuc3BlYyB8fCB7fTtcbiAgICAgICAgICB2YXIgc2VydmljZU5hbWUgPSBDb3JlLnBhdGhHZXQoc3BlYywgW1widG9cIiwgXCJuYW1lXCJdKTtcbiAgICAgICAgICB2YXIgaG9zdCA9IHNwZWMuaG9zdDtcbiAgICAgICAgICB2YXIgbmFtZXNwYWNlID0gZ2V0TmFtZXNwYWNlKHJvdXRlKTtcbiAgICAgICAgICBpZiAoc2VydmljZU5hbWUgJiYgaG9zdCkge1xuICAgICAgICAgICAgdmFyIHNlcnZpY2UgPSB0aGlzLmdldFNlcnZpY2UobmFtZXNwYWNlLCBzZXJ2aWNlTmFtZSk7XG4gICAgICAgICAgICBpZiAoc2VydmljZSkge1xuICAgICAgICAgICAgICBzZXJ2aWNlLiRob3N0ID0gaG9zdDtcblxuICAgICAgICAgICAgICAvLyBUT0RPIHdlIGNvdWxkIHVzZSBzb21lIGFubm90YXRpb25zIC8gbWV0YWRhdGEgdG8gZGVkdWNlIHdoYXQgVVJMIHdlIHNob3VsZCB1c2UgdG8gb3BlbiB0aGlzXG4gICAgICAgICAgICAgIC8vIHNlcnZpY2UgaW4gdGhlIGNvbnNvbGUuIEZvciBub3cganVzdCBhc3N1bWUgaXRzIGh0dHA6XG5cbiAgICAgICAgICAgICAgaWYgKGhvc3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgaG9zdFVybCA9ICBob3N0O1xuICAgICAgICAgICAgICAgIGlmIChob3N0VXJsLmluZGV4T2YoXCI6Ly9cIikgPCAwKSB7XG4gICAgICAgICAgICAgICAgICBob3N0VXJsID0gXCJodHRwOi8vXCIgKyBob3N0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZXJ2aWNlLiRjb25uZWN0VXJsID0gVXJsSGVscGVycy5qb2luKGhvc3RVcmwsICBcIi9cIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGxvZy5kZWJ1ZyhcIkNvdWxkIG5vdCBmaW5kIHNlcnZpY2UgXCIgKyBzZXJ2aWNlTmFtZSArIFwiIG5hbWVzcGFjZSBcIiArIG5hbWVzcGFjZSArIFwiIGZvciByb3V0ZTogXCIgKyBtZXRhZGF0YS5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGFwcFZpZXdzID0gcG9wdWxhdGVLZXlzKGFwcFZpZXdzKS5zb3J0QnkoKGFwcFZpZXcpID0+IGFwcFZpZXcuX2tleSk7XG5cbiAgICAgICAgQXJyYXlIZWxwZXJzLnN5bmModGhpcy5hcHBWaWV3cywgYXBwVmlld3MsICckbmFtZScpO1xuXG4gICAgICAgIGlmICh0aGlzLmFwcEluZm9zICYmIHRoaXMuYXBwVmlld3MpIHtcbiAgICAgICAgICB2YXIgZm9sZGVyTWFwID0ge307XG4gICAgICAgICAgdmFyIGZvbGRlcnMgPSBbXTtcbiAgICAgICAgICB2YXIgYXBwTWFwID0ge307XG4gICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHRoaXMuYXBwSW5mb3MsIChhcHBJbmZvKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWFwcEluZm8uJGljb25VcmwgJiYgYXBwSW5mby5pY29uUGF0aCAmJiBhcHBJbmZvLmljb25QYXRoICE9PSBcIm51bGxcIikge1xuICAgICAgICAgICAgICBhcHBJbmZvLiRpY29uVXJsID0gZ2l0UGF0aFRvVXJsKGFwcEluZm8uaWNvblBhdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGFwcFBhdGggPSBhcHBJbmZvLmFwcFBhdGg7XG4gICAgICAgICAgICBpZiAoYXBwUGF0aCkge1xuICAgICAgICAgICAgICBhcHBNYXBbYXBwUGF0aF0gPSBhcHBJbmZvO1xuICAgICAgICAgICAgICB2YXIgaWR4ID0gYXBwUGF0aC5sYXN0SW5kZXhPZihcIi9cIik7XG4gICAgICAgICAgICAgIHZhciBmb2xkZXJQYXRoID0gXCJcIjtcbiAgICAgICAgICAgICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgZm9sZGVyUGF0aCA9IGFwcFBhdGguc3Vic3RyaW5nKDAsIGlkeCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZm9sZGVyUGF0aCA9IENvcmUudHJpbUxlYWRpbmcoZm9sZGVyUGF0aCwgXCIvXCIpO1xuICAgICAgICAgICAgICB2YXIgZm9sZGVyID0gZm9sZGVyTWFwW2ZvbGRlclBhdGhdO1xuICAgICAgICAgICAgICBpZiAoIWZvbGRlcikge1xuICAgICAgICAgICAgICAgIGZvbGRlciA9IHtcbiAgICAgICAgICAgICAgICAgIHBhdGg6IGZvbGRlclBhdGgsXG4gICAgICAgICAgICAgICAgICBleHBhbmRlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIGFwcHM6IFtdXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBmb2xkZXJzLnB1c2goZm9sZGVyKTtcbiAgICAgICAgICAgICAgICBmb2xkZXJNYXBbZm9sZGVyUGF0aF0gPSBmb2xkZXI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZm9sZGVyLmFwcHMucHVzaChhcHBJbmZvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLmFwcEZvbGRlcnMgPSBmb2xkZXJzLnNvcnRCeShcInBhdGhcIik7XG5cbiAgICAgICAgICB2YXIgYXBwcyA9IFtdO1xuICAgICAgICAgIHZhciBkZWZhdWx0SW5mbyA9IHtcbiAgICAgICAgICAgICRpY29uVXJsOiBkZWZhdWx0SWNvblVybFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBhbmd1bGFyLmZvckVhY2godGhpcy5hcHBWaWV3cywgKGFwcFZpZXcpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHZhciBhcHBQYXRoID0gYXBwVmlldy5hcHBQYXRoO1xuXG4gICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICBUT0RPXG4gICAgICAgICAgICAgICBhcHBWaWV3LiRzZWxlY3QgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICBLdWJlcm5ldGVzLnNldEpzb24oJHNjb3BlLCBhcHBWaWV3LmlkLCAkc2NvcGUubW9kZWwuYXBwcyk7XG4gICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgICB2YXIgYXBwSW5mbyA9IGFuZ3VsYXIuY29weShkZWZhdWx0SW5mbyk7XG4gICAgICAgICAgICAgIGlmIChhcHBQYXRoKSB7XG4gICAgICAgICAgICAgICAgYXBwSW5mbyA9IGFwcE1hcFthcHBQYXRoXSB8fCBhcHBJbmZvO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICghYXBwVmlldy4kaW5mbykge1xuICAgICAgICAgICAgICAgIGFwcFZpZXcuJGluZm8gPSBkZWZhdWx0SW5mbztcbiAgICAgICAgICAgICAgICBhcHBWaWV3LiRpbmZvID0gYXBwSW5mbztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBhcHBWaWV3LmlkID0gYXBwUGF0aDtcbiAgICAgICAgICAgICAgaWYgKCFhcHBWaWV3LiRuYW1lKSB7XG4gICAgICAgICAgICAgICAgYXBwVmlldy4kbmFtZSA9IGFwcEluZm8ubmFtZSB8fCBhcHBWaWV3LiRuYW1lO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICghYXBwVmlldy4kaWNvblVybCkge1xuICAgICAgICAgICAgICAgIGFwcFZpZXcuJGljb25VcmwgPSBhcHBJbmZvLiRpY29uVXJsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGFwcHMucHVzaChhcHBWaWV3KTtcbiAgICAgICAgICAgICAgYXBwVmlldy4kcG9kQ291bnRlcnMgPSBjcmVhdGVBcHBWaWV3UG9kQ291bnRlcnMoYXBwVmlldyk7XG4gICAgICAgICAgICAgIGFwcFZpZXcuJHNlcnZpY2VWaWV3cyA9IGNyZWF0ZUFwcFZpZXdTZXJ2aWNlVmlld3MoYXBwVmlldyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGxvZy53YXJuKFwiRmFpbGVkIHRvIHVwZGF0ZSBhcHBWaWV3czogXCIgKyBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvL3RoaXMuYXBwcyA9IGFwcHM7XG4gICAgICAgICAgdGhpcy5hcHBzID0gdGhpcy5hcHBWaWV3cztcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsb2cud2FybihcIkNhdWdodCBlcnJvcjogXCIgKyBlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZGlzY292ZXJQb2RDb25uZWN0aW9ucyhlbnRpdHkpIHtcbiAgICAgIHZhciBpbmZvID0gQ29yZS5wYXRoR2V0KGVudGl0eSwgW1wic3RhdHVzXCIsIFwiaW5mb1wiXSk7XG4gICAgICB2YXIgaG9zdFBvcnQgPSBudWxsO1xuICAgICAgdmFyIGN1cnJlbnRTdGF0ZSA9IGVudGl0eS5zdGF0dXMgfHwge307XG4gICAgICB2YXIgZGVzaXJlZFN0YXRlID0gZW50aXR5LnNwZWMgfHwge307XG4gICAgICB2YXIgcG9kSWQgPSBnZXROYW1lKGVudGl0eSk7XG4gICAgICB2YXIgaG9zdCA9IGN1cnJlbnRTdGF0ZVtcImhvc3RJUFwiXTtcbiAgICAgIHZhciBwb2RJUCA9IGN1cnJlbnRTdGF0ZVtcInBvZElQXCJdO1xuICAgICAgdmFyIGhhc0RvY2tlciA9IGZhbHNlO1xuICAgICAgdmFyIGZvdW5kQ29udGFpbmVyUG9ydCA9IG51bGw7XG4gICAgICBpZiAoZGVzaXJlZFN0YXRlKSB7XG4gICAgICAgIHZhciBjb250YWluZXJzID0gZGVzaXJlZFN0YXRlLmNvbnRhaW5lcnM7XG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChjb250YWluZXJzLCAoY29udGFpbmVyKSA9PiB7XG4gICAgICAgICAgaWYgKCFob3N0UG9ydCkge1xuICAgICAgICAgICAgdmFyIHBvcnRzID0gY29udGFpbmVyLnBvcnRzO1xuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHBvcnRzLCAocG9ydCkgPT4ge1xuICAgICAgICAgICAgICBpZiAoIWhvc3RQb3J0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5lclBvcnQgPSBwb3J0LmNvbnRhaW5lclBvcnQ7XG4gICAgICAgICAgICAgICAgdmFyIHBvcnROYW1lID0gcG9ydC5uYW1lO1xuICAgICAgICAgICAgICAgIHZhciBjb250YWluZXJIb3N0UG9ydCA9IHBvcnQuaG9zdFBvcnQ7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRhaW5lclBvcnQgPT09IDg3NzggfHwgXCJqb2xva2lhXCIgPT09IHBvcnROYW1lKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoY29udGFpbmVyUG9ydCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocG9kSVApIHtcbiAgICAgICAgICAgICAgICAgICAgICBmb3VuZENvbnRhaW5lclBvcnQgPSBjb250YWluZXJQb3J0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250YWluZXJIb3N0UG9ydCkge1xuICAgICAgICAgICAgICAgICAgICAgIGhvc3RQb3J0ID0gY29udGFpbmVySG9zdFBvcnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoZm91bmRDb250YWluZXJQb3J0ICYmIHBvZElkICYmIGlzUnVubmluZyhjdXJyZW50U3RhdGUpKSB7XG4gICAgICAgIGVudGl0eS4kam9sb2tpYVVybCA9IFVybEhlbHBlcnMuam9pbihLdWJlcm5ldGVzLm1hc3RlckFwaVVybCgpLCBcIi9hcGkvXCIsIEt1YmVybmV0ZXMuZGVmYXVsdEFwaVZlcnNpb24sIFwibmFtZXNwYWNlc1wiLCBlbnRpdHkubWV0YWRhdGEubmFtZXNwYWNlICwgXCIvcG9kcy9cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2RJZCArIFwiOlwiICsgZm91bmRDb250YWluZXJQb3J0LCBcIi9wcm94eS9qb2xva2lhL1wiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG1vZGVsIHNlcnZpY2Ugd2hpY2gga2VlcHMgdHJhY2sgb2YgYWxsIHRoZSBwb2RzLCByZXBsaWNhdGlvbiBjb250cm9sbGVycyBhbmQgc2VydmljZXMgYWxvbmdcbiAgICogd2l0aCB0aGVpciBhc3NvY2lhdGlvbnMgYW5kIHN0YXR1c1xuICAgKi9cbiAgX21vZHVsZS5mYWN0b3J5KCdLdWJlcm5ldGVzTW9kZWwnLCBbJyRyb290U2NvcGUnLCAnJGh0dHAnLCAnS3ViZXJuZXRlc0FwaVVSTCcsICdLdWJlcm5ldGVzU3RhdGUnLCAnV2F0Y2hlclNlcnZpY2UnLCAnJGxvY2F0aW9uJywgJyRyZXNvdXJjZScsICgkcm9vdFNjb3BlLCAkaHR0cCwgQXBwTGlicmFyeVVSTCwgS3ViZXJuZXRlc1N0YXRlLCB3YXRjaGVyOldhdGNoZXJTZXJ2aWNlLCAkbG9jYXRpb246bmcuSUxvY2F0aW9uU2VydmljZSwgJHJlc291cmNlOm5nLnJlc291cmNlLklSZXNvdXJjZVNlcnZpY2UpID0+IHtcblxuICAgIHZhciAkc2NvcGUgPSBuZXcgS3ViZXJuZXRlc01vZGVsU2VydmljZSgpO1xuICAgICRzY29wZS5rdWJlcm5ldGVzID0gS3ViZXJuZXRlc1N0YXRlO1xuXG4gICAgLy8gY3JlYXRlIGFsbCBvZiBvdXIgcmVzb3VyY2UgY2xhc3Nlc1xuICAgIHZhciB0eXBlTmFtZXMgPSB3YXRjaGVyLmdldFR5cGVzKCk7XG4gICAgXy5mb3JFYWNoKHR5cGVOYW1lcywgKHR5cGU6c3RyaW5nKSA9PiB7XG4gICAgICB2YXIgdXJsVGVtcGxhdGUgPSAnJztcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFdhdGNoVHlwZXMuTkFNRVNQQUNFUzpcbiAgICAgICAgICB1cmxUZW1wbGF0ZSA9IFVybEhlbHBlcnMuam9pbignbmFtZXNwYWNlcycpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHVybFRlbXBsYXRlID0gVXJsSGVscGVycy5qb2luKCduYW1lc3BhY2VzLzpuYW1lc3BhY2UnLCB0eXBlLCAnOmlkJyk7XG4gICAgICB9XG4gICAgICAkc2NvcGVbdHlwZSArICdSZXNvdXJjZSddID0gY3JlYXRlUmVzb3VyY2UodHlwZSwgdXJsVGVtcGxhdGUsICRyZXNvdXJjZSwgJHNjb3BlKTtcbiAgICB9KTtcblxuICAgIC8vIHJlZ2lzdGVyIGZvciBhbGwgdXBkYXRlcyBvbiBvYmplY3RzXG5cdFx0d2F0Y2hlci5yZWdpc3Rlckxpc3RlbmVyKChvYmplY3RzOk9iamVjdE1hcCkgPT4ge1xuXHRcdFx0dmFyIHR5cGVzID0gd2F0Y2hlci5nZXRUeXBlcygpO1xuXHRcdFx0Xy5mb3JFYWNoKHR5cGVzLCAodHlwZTpzdHJpbmcpID0+IHtcblx0XHRcdFx0c3dpdGNoICh0eXBlKSB7XG5cdFx0XHRcdFx0Y2FzZSBXYXRjaFR5cGVzLlNFUlZJQ0VTOlxuXHRcdFx0XHRcdFx0dmFyIGl0ZW1zID0gcG9wdWxhdGVLZXlzKG9iamVjdHNbdHlwZV0pO1xuXHRcdFx0XHRcdFx0YW5ndWxhci5mb3JFYWNoKGl0ZW1zLCAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICBpdGVtLnByb3h5VXJsID0ga3ViZXJuZXRlc1Byb3h5VXJsRm9yU2VydmljZShrdWJlcm5ldGVzQXBpVXJsKCksIGl0ZW0pO1xuICAgICAgICAgICAgfSk7XG5cdFx0XHRcdFx0XHQkc2NvcGVbdHlwZV0gPSBpdGVtcztcblx0XHRcdFx0XHRcdGJyZWFrO1xuICAgICAgICAgIGNhc2UgV2F0Y2hUeXBlcy5URU1QTEFURVM6XG4gICAgICAgICAgY2FzZSBXYXRjaFR5cGVzLlJPVVRFUzpcbiAgICAgICAgICBjYXNlIFdhdGNoVHlwZXMuQlVJTERTOlxuICAgICAgICAgIGNhc2UgV2F0Y2hUeXBlcy5CVUlMRF9DT05GSUdTOlxuICAgICAgICAgIGNhc2UgV2F0Y2hUeXBlcy5JTUFHRV9TVFJFQU1TOlxuICAgICAgICAgICAgJHNjb3BlLmlzT3BlblNoaWZ0ID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIGRvbid0IHB1dCBhIGJyZWFrIGhlcmUgOi0pXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdCRzY29wZVt0eXBlXSA9IHBvcHVsYXRlS2V5cyhvYmplY3RzW3R5cGVdKTtcblx0XHRcdFx0fVxuICAgICAgICBsb2cuZGVidWcoXCJUeXBlOiBcIiwgdHlwZSwgXCIgb2JqZWN0OiBcIiwgJHNjb3BlW3R5cGVdKTtcblx0XHRcdH0pO1xuXHRcdFx0JHNjb3BlLm1heWJlSW5pdCgpO1xuICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdrdWJlcm5ldGVzTW9kZWxVcGRhdGVkJyk7XG4gICAgICBDb3JlLiRhcHBseSgkcm9vdFNjb3BlKTtcblx0XHR9KTtcblxuICAgIC8vIHNldCB0aGUgc2VsZWN0ZWQgbmFtZXNwYWNlIGlmIHNldCBpbiB0aGUgbG9jYXRpb24gYmFyXG4gICAgLy8gb3RoZXJ3aXNlIHVzZSB3aGF0ZXZlciBwcmV2aW91c2x5IHNlbGVjdGVkIG5hbWVzcGFjZSBpc1xuICAgIC8vIGF2YWlsYWJsZVxuICAgIHZhciBzZWFyY2ggPSAkbG9jYXRpb24uc2VhcmNoKCk7XG4gICAgaWYgKCduYW1lc3BhY2UnIGluIHNlYXJjaCkge1xuICAgICAgd2F0Y2hlci5zZXROYW1lc3BhY2Uoc2VhcmNoWyduYW1lc3BhY2UnXSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2VsZWN0UG9kcyhwb2RzLCBuYW1lc3BhY2UsIGxhYmVscykge1xuICAgICAgcmV0dXJuIHBvZHMuZmlsdGVyKChwb2QpID0+IHtcbiAgICAgICAgcmV0dXJuIGdldE5hbWVzcGFjZShwb2QpID09PSBuYW1lc3BhY2UgJiYgc2VsZWN0b3JNYXRjaGVzKGxhYmVscywgZ2V0TGFiZWxzKHBvZCkpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiAkc2NvcGU7XG4gIH1dKTtcblxufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNIZWxwZXJzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNQbHVnaW4udHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwia3ViZXJuZXRlc01vZGVsLnRzXCIvPlxuXG5tb2R1bGUgS3ViZXJuZXRlcyB7XG5cbiAgZXhwb3J0IHZhciBIb3N0Q29udHJvbGxlciA9IGNvbnRyb2xsZXIoXCJIb3N0Q29udHJvbGxlclwiLFxuICAgIFtcIiRzY29wZVwiLCBcIkt1YmVybmV0ZXNNb2RlbFwiLCBcIkt1YmVybmV0ZXNTdGF0ZVwiLCBcIiR0ZW1wbGF0ZUNhY2hlXCIsIFwiJGxvY2F0aW9uXCIsIFwiJHJvdXRlUGFyYW1zXCIsIFwiJGh0dHBcIiwgXCIkdGltZW91dFwiLCBcIkt1YmVybmV0ZXNBcGlVUkxcIixcbiAgICAgICgkc2NvcGUsIEt1YmVybmV0ZXNNb2RlbDpLdWJlcm5ldGVzLkt1YmVybmV0ZXNNb2RlbFNlcnZpY2UsIEt1YmVybmV0ZXNTdGF0ZSxcbiAgICAgICAkdGVtcGxhdGVDYWNoZTpuZy5JVGVtcGxhdGVDYWNoZVNlcnZpY2UsICRsb2NhdGlvbjpuZy5JTG9jYXRpb25TZXJ2aWNlLCAkcm91dGVQYXJhbXMsICRodHRwLCAkdGltZW91dCwgS3ViZXJuZXRlc0FwaVVSTCkgPT4ge1xuXG4gICAgICAgICRzY29wZS5rdWJlcm5ldGVzID0gS3ViZXJuZXRlc1N0YXRlO1xuICAgICAgICAkc2NvcGUubW9kZWwgPSBLdWJlcm5ldGVzTW9kZWw7XG4gICAgICAgICRzY29wZS5yYXdNb2RlID0gZmFsc2U7XG4gICAgICAgICRzY29wZS5yYXdNb2RlbCA9IG51bGw7XG5cbiAgICAgICAgJHNjb3BlLml0ZW1Db25maWcgPSB7XG4gICAgICAgICAgcHJvcGVydGllczoge31cbiAgICAgICAgfTtcblxuICAgICAgICBLdWJlcm5ldGVzLmluaXRTaGFyZWQoJHNjb3BlLCAkbG9jYXRpb24sICRodHRwLCAkdGltZW91dCwgJHJvdXRlUGFyYW1zLCBLdWJlcm5ldGVzTW9kZWwsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc0FwaVVSTCk7XG5cbiAgICAgICAgJHNjb3BlLiRvbigna3ViZXJuZXRlc01vZGVsVXBkYXRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB1cGRhdGVEYXRhKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRzY29wZS4kb24oJyRyb3V0ZVVwZGF0ZScsICgkZXZlbnQpID0+IHtcbiAgICAgICAgICB1cGRhdGVEYXRhKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRzY29wZS5mbGlwUmF3ID0gKCkgPT4ge1xuICAgICAgICAgICRzY29wZS5yYXdNb2RlID0gISRzY29wZS5yYXdNb2RlO1xuICAgICAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdXBkYXRlRGF0YSgpO1xuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZURhdGEoKSB7XG4gICAgICAgICAgJHNjb3BlLmlkID0gJHJvdXRlUGFyYW1zW1wiaWRcIl07XG4gICAgICAgICAgJHNjb3BlLml0ZW0gPSBudWxsO1xuICAgICAgICAgIGlmICgkc2NvcGUuaWQpIHtcbiAgICAgICAgICAgIHZhciB1cmwgPSBVcmxIZWxwZXJzLmpvaW4oS3ViZXJuZXRlc0FwaVVSTCwgXCJub2Rlc1wiLCAkc2NvcGUuaWQpO1xuICAgICAgICAgICAgJGh0dHAuZ2V0KHVybCkuXG4gICAgICAgICAgICAgIHN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICRzY29wZS5pdGVtID0gZGF0YTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5pdGVtKSB7XG4gICAgICAgICAgICAgICAgICAkc2NvcGUucmF3TW9kZWwgPSBKU09OLnN0cmluZ2lmeSgkc2NvcGUuaXRlbSwgbnVsbCwgMik7IC8vIHNwYWNpbmcgbGV2ZWwgPSAyXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgZXJyb3IoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICAgIGxvZy53YXJuKFwiRmFpbGVkIHRvIGxvYWQgXCIgKyB1cmwgKyBcIiBcIiArIGRhdGEgKyBcIiBcIiArIHN0YXR1cyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJHNjb3BlLnJhd01vZGVsID0gbnVsbDtcbiAgICAgICAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XSk7XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vaW5jbHVkZXMudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwia3ViZXJuZXRlc1BsdWdpbi50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzTW9kZWwudHNcIi8+XG5cbm1vZHVsZSBLdWJlcm5ldGVzIHtcblxuICBleHBvcnQgdmFyIEhvc3RzQ29udHJvbGxlciA9IGNvbnRyb2xsZXIoXCJIb3N0c0NvbnRyb2xsZXJcIiwgW1wiJHNjb3BlXCIsIFwiS3ViZXJuZXRlc01vZGVsXCIsIFwiS3ViZXJuZXRlc1BvZHNcIiwgXCJLdWJlcm5ldGVzU3RhdGVcIiwgXCJTZXJ2aWNlUmVnaXN0cnlcIiwgXCIkZGlhbG9nXCIsIFwiJHdpbmRvd1wiLCBcIiR0ZW1wbGF0ZUNhY2hlXCIsIFwiJHJvdXRlUGFyYW1zXCIsIFwiJGxvY2F0aW9uXCIsIFwibG9jYWxTdG9yYWdlXCIsIFwiJGh0dHBcIiwgXCIkdGltZW91dFwiLCBcIkt1YmVybmV0ZXNBcGlVUkxcIixcbiAgICAoJHNjb3BlLCBLdWJlcm5ldGVzTW9kZWw6IEt1YmVybmV0ZXMuS3ViZXJuZXRlc01vZGVsU2VydmljZSwgS3ViZXJuZXRlc1BvZHM6bmcuSVByb21pc2U8bmcucmVzb3VyY2UuSVJlc291cmNlQ2xhc3M+LCBLdWJlcm5ldGVzU3RhdGUsIFNlcnZpY2VSZWdpc3RyeSwgJGRpYWxvZywgJHdpbmRvdywgJHRlbXBsYXRlQ2FjaGUsICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uOm5nLklMb2NhdGlvblNlcnZpY2UsIGxvY2FsU3RvcmFnZSwgJGh0dHAsICR0aW1lb3V0LCBLdWJlcm5ldGVzQXBpVVJMKSA9PiB7XG5cbiAgICAkc2NvcGUua3ViZXJuZXRlcyA9IEt1YmVybmV0ZXNTdGF0ZTtcbiAgICAkc2NvcGUubW9kZWwgPSBLdWJlcm5ldGVzTW9kZWw7XG5cbiAgICAkc2NvcGUudGFibGVDb25maWcgPSB7XG4gICAgICBkYXRhOiAnbW9kZWwuaG9zdHMnLFxuICAgICAgc2hvd1NlbGVjdGlvbkNoZWNrYm94OiB0cnVlLFxuICAgICAgZW5hYmxlUm93Q2xpY2tTZWxlY3Rpb246IGZhbHNlLFxuICAgICAgbXVsdGlTZWxlY3Q6IHRydWUsXG4gICAgICBzZWxlY3RlZEl0ZW1zOiBbXSxcbiAgICAgIGZpbHRlck9wdGlvbnM6IHtcbiAgICAgICAgZmlsdGVyVGV4dDogJGxvY2F0aW9uLnNlYXJjaCgpW1wicVwiXSB8fCAnJ1xuICAgICAgfSxcbiAgICAgIGNvbHVtbkRlZnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGZpZWxkOiAnaWQnLFxuICAgICAgICAgIGRpc3BsYXlOYW1lOiAnTmFtZScsXG4gICAgICAgICAgZGVmYXVsdFNvcnQ6IHRydWUsXG4gICAgICAgICAgY2VsbFRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoXCJpZFRlbXBsYXRlLmh0bWxcIilcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGZpZWxkOiAnaG9zdElQJyxcbiAgICAgICAgICBkaXNwbGF5TmFtZTogJ0lQJ1xuICAgICAgICB9LFxuICAgICAgICB7IGZpZWxkOiAnJHBvZHNMaW5rJyxcbiAgICAgICAgICBkaXNwbGF5TmFtZTogJ1BvZHMnLFxuICAgICAgICAgIGNlbGxUZW1wbGF0ZTogJHRlbXBsYXRlQ2FjaGUuZ2V0KFwicG9kQ291bnRzQW5kTGlua1RlbXBsYXRlLmh0bWxcIilcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH07XG5cbiAgICBLdWJlcm5ldGVzLmluaXRTaGFyZWQoJHNjb3BlLCAkbG9jYXRpb24sICRodHRwLCAkdGltZW91dCwgJHJvdXRlUGFyYW1zLCBLdWJlcm5ldGVzTW9kZWwsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc0FwaVVSTCk7XG4gIH1dKTtcbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9pbmNsdWRlcy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzUGx1Z2luLnRzXCIvPlxuXG5tb2R1bGUgS3ViZXJuZXRlcyB7XG5cbiAgZXhwb3J0IHZhciBJbWFnZVJlcG9zaXRvcmllc0NvbnRyb2xsZXIgPSBjb250cm9sbGVyKFwiSW1hZ2VSZXBvc2l0b3JpZXNDb250cm9sbGVyXCIsIFtcIiRzY29wZVwiLCBcIkt1YmVybmV0ZXNNb2RlbFwiLCBcIkt1YmVybmV0ZXNCdWlsZHNcIiwgXCJLdWJlcm5ldGVzU3RhdGVcIiwgXCIkZGlhbG9nXCIsIFwiJHdpbmRvd1wiLCBcIiR0ZW1wbGF0ZUNhY2hlXCIsIFwiJHJvdXRlUGFyYW1zXCIsIFwiJGxvY2F0aW9uXCIsIFwibG9jYWxTdG9yYWdlXCIsIFwiJGh0dHBcIiwgXCIkdGltZW91dFwiLCBcIkt1YmVybmV0ZXNBcGlVUkxcIixcbiAgICAoJHNjb3BlLCBLdWJlcm5ldGVzTW9kZWw6S3ViZXJuZXRlcy5LdWJlcm5ldGVzTW9kZWxTZXJ2aWNlLCBLdWJlcm5ldGVzQnVpbGRzLCBLdWJlcm5ldGVzU3RhdGUsICRkaWFsb2csICR3aW5kb3csICR0ZW1wbGF0ZUNhY2hlLCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbjpuZy5JTG9jYXRpb25TZXJ2aWNlLCBsb2NhbFN0b3JhZ2UsICRodHRwLCAkdGltZW91dCwgS3ViZXJuZXRlc0FwaVVSTCkgPT4ge1xuXG4gICAgICAkc2NvcGUua3ViZXJuZXRlcyA9IEt1YmVybmV0ZXNTdGF0ZTtcbiAgICAgICRzY29wZS5tb2RlbCA9IEt1YmVybmV0ZXNNb2RlbDtcbiAgICAgICRzY29wZS5LdWJlcm5ldGVzQnVpbGRzID0gS3ViZXJuZXRlc0J1aWxkcztcbiAgICAgICRzY29wZS4kb24oJ2t1YmVybmV0ZXNNb2RlbFVwZGF0ZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgICB9KTtcblxuICAgICAgJHNjb3BlLnRhYmxlQ29uZmlnID0ge1xuICAgICAgICBkYXRhOiAnaW1hZ2VSZXBvc2l0b3JpZXMnLFxuICAgICAgICBzaG93U2VsZWN0aW9uQ2hlY2tib3g6IHRydWUsXG4gICAgICAgIGVuYWJsZVJvd0NsaWNrU2VsZWN0aW9uOiBmYWxzZSxcbiAgICAgICAgbXVsdGlTZWxlY3Q6IHRydWUsXG4gICAgICAgIHNlbGVjdGVkSXRlbXM6IFtdLFxuICAgICAgICBmaWx0ZXJPcHRpb25zOiB7XG4gICAgICAgICAgZmlsdGVyVGV4dDogJGxvY2F0aW9uLnNlYXJjaCgpW1wicVwiXSB8fCAnJ1xuICAgICAgICB9LFxuICAgICAgICBjb2x1bW5EZWZzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZmllbGQ6ICdtZXRhZGF0YS5uYW1lJyxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnTmFtZSdcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGZpZWxkOiAnbWV0YWRhdGEubmFtZXNwYWNlJyxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnTmFtZXNwYWNlJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgZmllbGQ6ICdzdGF0dXMuZG9ja2VySW1hZ2VSZXBvc2l0b3J5JyxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnRG9ja2VyIFJlZ2lzdHJ5J1xuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgZmllbGQ6ICd0YWdzJyxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnVGFncycsXG4gICAgICAgICAgICBjZWxsVGVtcGxhdGU6ICR0ZW1wbGF0ZUNhY2hlLmdldCgnaW1hZ2VSZWdpc3RyeUxhYmVsVGVtcGxhdGUuaHRtbCcpXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9O1xuXG4gICAgICB2YXIgbGFiZWxDb2xvcnMgPSB7XG4gICAgICAgICdwcm9kJzogJ2JhY2tncm91bmQtYmx1ZScsXG4gICAgICAgICd2YWxpZCc6ICdiYWNrZ3JvdW5kLWxpZ2h0LWdyZWVuJyxcbiAgICAgICAgJ3Rlc3QnOiAnYmFja2dyb3VuZC1saWdodC1ncmV5J1xuICAgICAgfTtcbiAgICAgICRzY29wZS5sYWJlbENsYXNzID0gKGxhYmVsVHlwZTpzdHJpbmcpID0+IHtcbiAgICAgICAgaWYgKCEobGFiZWxUeXBlIGluIGxhYmVsQ29sb3JzKSkge1xuICAgICAgICAgIHJldHVybiAnbW91c2UtcG9pbnRlcic7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSByZXR1cm4gbGFiZWxDb2xvcnNbbGFiZWxUeXBlXSArICcgbW91c2UtcG9pbnRlcic7XG4gICAgICB9XG5cbiAgICAgIEt1YmVybmV0ZXMuaW5pdFNoYXJlZCgkc2NvcGUsICRsb2NhdGlvbiwgJGh0dHAsICR0aW1lb3V0LCAkcm91dGVQYXJhbXMsIEt1YmVybmV0ZXNNb2RlbCwgS3ViZXJuZXRlc1N0YXRlLCBLdWJlcm5ldGVzQXBpVVJMKTtcblxuICAgICAgJHNjb3BlLmRlbGV0ZVByb21wdCA9IChzZWxlY3RlZCkgPT4ge1xuICAgICAgICBVSS5tdWx0aUl0ZW1Db25maXJtQWN0aW9uRGlhbG9nKDxVSS5NdWx0aUl0ZW1Db25maXJtQWN0aW9uT3B0aW9ucz57XG4gICAgICAgICAgY29sbGVjdGlvbjogc2VsZWN0ZWQsXG4gICAgICAgICAgaW5kZXg6ICckbmFtZScsXG4gICAgICAgICAgb25DbG9zZTogKHJlc3VsdDpib29sZWFuKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgIGZ1bmN0aW9uIGRlbGV0ZVNlbGVjdGVkKHNlbGVjdGVkLCBuZXh0KSB7XG4gICAgICAgICAgICAgICAgaWYgKG5leHQpIHtcbiAgICAgICAgICAgICAgICAgIGRlbGV0ZUVudGl0eShuZXh0LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZVNlbGVjdGVkKHNlbGVjdGVkLCBzZWxlY3RlZC5zaGlmdCgpKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB1cGRhdGVEYXRhKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZGVsZXRlU2VsZWN0ZWQoc2VsZWN0ZWQsIHNlbGVjdGVkLnNoaWZ0KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgdGl0bGU6ICdEZWxldGUgSW1hZ2UgUmVwb3NpdG9yeT8nLFxuICAgICAgICAgIGFjdGlvbjogJ1RoZSBmb2xsb3dpbmcgSW1hZ2UgUmVwb3NpdG9yaWVzIHdpbGwgYmUgZGVsZXRlZDonLFxuICAgICAgICAgIG9rVGV4dDogJ0RlbGV0ZScsXG4gICAgICAgICAgb2tDbGFzczogJ2J0bi1kYW5nZXInLFxuICAgICAgICAgIGN1c3RvbTogXCJUaGlzIG9wZXJhdGlvbiBpcyBwZXJtYW5lbnQgb25jZSBjb21wbGV0ZWQhXCIsXG4gICAgICAgICAgY3VzdG9tQ2xhc3M6IFwiYWxlcnQgYWxlcnQtd2FybmluZ1wiXG4gICAgICAgIH0pLm9wZW4oKTtcbiAgICAgIH07XG5cbiAgICAgIGZ1bmN0aW9uIGRlbGV0ZUVudGl0eShzZWxlY3Rpb24sIG5leHRDYWxsYmFjaykge1xuICAgICAgICB2YXIgbmFtZSA9IChzZWxlY3Rpb24gfHwge30pLiRuYW1lO1xuICAgICAgICBpZiAobmFtZSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiQWJvdXQgdG8gZGVsZXRlIGltYWdlIHJlcG9zaXRvcnk6IFwiICsgbmFtZSk7XG4gICAgICAgICAgdmFyIHVybCA9IGltYWdlUmVwb3NpdG9yeVJlc3RVcmwobmFtZSk7XG4gICAgICAgICAgJGh0dHAuZGVsZXRlKHVybCkuXG4gICAgICAgICAgICBzdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgICBuZXh0Q2FsbGJhY2soKTtcbiAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgZXJyb3IoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICAgIGxvZy53YXJuKFwiRmFpbGVkIHRvIGRlbGV0ZSBpbWFnZSByZXBvc2l0b3J5IG9uIFwiICsgdXJsICsgXCIgXCIgKyBkYXRhICsgXCIgXCIgKyBzdGF0dXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJ3YXJuaW5nOiBubyBuYW1lIGZvciBzZWxlY3Rpb246IFwiICsgYW5ndWxhci50b0pzb24oc2VsZWN0aW9uKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdXBkYXRlRGF0YSgpIHtcbiAgICAgICAgdmFyIHVybCA9IGltYWdlUmVwb3NpdG9yaWVzUmVzdFVSTCgpO1xuICAgICAgICAkaHR0cC5nZXQodXJsKS5cbiAgICAgICAgICBzdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcImdvdCBkYXRhIFwiICsgYW5ndWxhci50b0pzb24oZGF0YSwgdHJ1ZSkpO1xuICAgICAgICAgICAgICAkc2NvcGUuaW1hZ2VSZXBvc2l0b3JpZXMgPSBlbnJpY2hJbWFnZVJlcG9zaXRvcmllcyhkYXRhLml0ZW1zKTtcbiAgICAgICAgICAgICAgJHNjb3BlLmZldGNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgICBDb3JlLiRhcHBseSgkc2NvcGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLlxuICAgICAgICAgIGVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgbG9nLndhcm4oXCJGYWlsZWQgdG8gbG9hZCBcIiArIHVybCArIFwiIFwiICsgZGF0YSArIFwiIFwiICsgc3RhdHVzKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlRGF0YSgpO1xuICAgIH1dKTtcbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9pbmNsdWRlcy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzSGVscGVycy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzUGx1Z2luLnRzXCIvPlxuXG5tb2R1bGUgS3ViZXJuZXRlcyB7XG5cbiAgZXhwb3J0IHZhciBLdWJlcm5ldGVzSnNvbkRpcmVjdGl2ZSA9IF9tb2R1bGUuZGlyZWN0aXZlKFwia3ViZXJuZXRlc0pzb25cIiwgWygpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICB0ZW1wbGF0ZVVybDogS3ViZXJuZXRlcy50ZW1wbGF0ZVBhdGggKyAna3ViZXJuZXRlc0pzb25EaXJlY3RpdmUuaHRtbCcsXG4gICAgICBzY29wZToge1xuICAgICAgICBjb25maWc6ICc9a3ViZXJuZXRlc0pzb24nXG4gICAgICB9LFxuICAgICAgY29udHJvbGxlcjogW1wiJHNjb3BlXCIsIFwiJGxvY2F0aW9uXCIsIFwiJGh0dHBcIiwgXCJLdWJlcm5ldGVzQXBpVVJMXCIsIFwibWFya2VkXCIsICgkc2NvcGUsICRsb2NhdGlvbiwgJGh0dHAsIEt1YmVybmV0ZXNBcGlVUkwsIG1hcmtlZCkgPT4ge1xuXG4gICAgICAgICRzY29wZS4kd2F0Y2goJ2NvbmZpZycsIChjb25maWcpID0+IHtcbiAgICAgICAgICBpZiAoY29uZmlnKSB7XG4gICAgICAgICAgICBpZiAoY29uZmlnLmVycm9yKSB7XG4gICAgICAgICAgICAgIGxvZy5kZWJ1ZyhcIkVycm9yIHBhcnNpbmcga3ViZXJuZXRlcyBjb25maWc6IFwiLCBjb25maWcuZXJyb3IpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbG9nLmRlYnVnKFwiR290IGt1YmVybmV0ZXMgY29uZmlndXJhdGlvbjogXCIsIGNvbmZpZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyhcIkt1YmVybmV0ZXMgY29uZmlnIHVuc2V0XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHNjb3BlLiRvbignV2lraS5WaWV3UGFnZS5DaGlsZHJlbicsICgkZXZlbnQsIHBhZ2VJZCwgY2hpbGRyZW4pID0+IHtcbiAgICAgICAgICAvLyBsb2cuZGVidWcoXCJHb3QgYnJvYWRjYXN0LCBwYWdlSWQ6IFwiLCBwYWdlSWQsIFwiIGNoaWxkcmVuOiBcIiwgY2hpbGRyZW4pO1xuICAgICAgICAgICRzY29wZS5hcHBUaXRsZSA9IHBhZ2VJZDtcbiAgICAgICAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIHZhciBzdW1tYXJ5RmlsZSA9IGNoaWxkcmVuLmZpbmQoKGNoaWxkKSA9PiB7IHJldHVybiBjaGlsZC5uYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwic3VtbWFyeS5tZFwiO30pO1xuICAgICAgICAgICAgdmFyIHN1bW1hcnlVUkw6c3RyaW5nID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChzdW1tYXJ5RmlsZSkge1xuICAgICAgICAgICAgICBzdW1tYXJ5VVJMID0gV2lraS5naXRSZXN0VVJMKHN1bW1hcnlGaWxlLmJyYW5jaCwgc3VtbWFyeUZpbGUucGF0aCk7XG4gICAgICAgICAgICAgICRodHRwLmdldChzdW1tYXJ5VVJMKS5cbiAgICAgICAgICAgICAgICBzdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgICAgICAgdmFyIHN1bW1hcnlNYXJrZG93biA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICBpZiAoc3VtbWFyeU1hcmtkb3duKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zdW1tYXJ5SHRtbCA9IG1hcmtlZChzdW1tYXJ5TWFya2Rvd24pO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN1bW1hcnlIdG1sID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KS5cbiAgICAgICAgICAgICAgICBlcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgICAgICAgICRzY29wZS5zdW1tYXJ5SHRtbCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICBsb2cud2FybihcIkZhaWxlZCB0byBsb2FkIFwiICsgc3VtbWFyeVVSTCArIFwiIFwiICsgZGF0YSArIFwiIFwiICsgc3RhdHVzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpY29uRmlsZSA9IGNoaWxkcmVuLmZpbmQoKGNoaWxkKSA9PiB7IHJldHVybiBjaGlsZC5uYW1lLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChcImljb25cIik7IH0pO1xuICAgICAgICAgICAgaWYgKGljb25GaWxlKSB7XG4gICAgICAgICAgICAgICRzY29wZS5pY29uVVJMID0gV2lraS5naXRSZXN0VVJMKGljb25GaWxlLmJyYW5jaCwgaWNvbkZpbGUucGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZmFicmljOFByb3BlcnRpZXNGaWxlID0gY2hpbGRyZW4uZmluZCgoY2hpbGQpID0+IHsgcmV0dXJuIGNoaWxkLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmYWJyaWM4LnByb3BlcnRpZXNcIjt9KTtcbiAgICAgICAgICAgIHZhciBmYWJyaWM4UHJvcGVydGllc1VSTDpzdHJpbmcgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGZhYnJpYzhQcm9wZXJ0aWVzRmlsZSkge1xuICAgICAgICAgICAgICBmYWJyaWM4UHJvcGVydGllc1VSTCA9IFdpa2kuZ2l0UmVzdFVSTChmYWJyaWM4UHJvcGVydGllc0ZpbGUuYnJhbmNoLCBmYWJyaWM4UHJvcGVydGllc0ZpbGUucGF0aCk7XG4gICAgICAgICAgICAgICRodHRwLmdldChmYWJyaWM4UHJvcGVydGllc1VSTCkuXG4gICAgICAgICAgICAgICAgc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBmYWJyaWM4UHJvcGVydGllcyA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICBpZiAoZmFicmljOFByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWVSRSA9IC8oPzpuYW1lKVxccyo9XFxzKiguKylbXFxufCRdLztcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSBmYWJyaWM4UHJvcGVydGllcy5tYXRjaChuYW1lUkUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hlc1sxXSkge1xuICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5TmFtZSA9IG1hdGNoZXNbMV0ucmVwbGFjZSgvXFxcXC9nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KS5cbiAgICAgICAgICAgICAgICBlcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgICAgICAgIGxvZy53YXJuKFwiRmFpbGVkIHRvIGxvYWQgXCIgKyBmYWJyaWM4UHJvcGVydGllc1VSTCArIFwiIFwiICsgZGF0YSArIFwiIFwiICsgc3RhdHVzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRzY29wZS5hcHBseSA9ICgpID0+IHtcbiAgICAgICAgICB2YXIganNvbiA9IGFuZ3VsYXIudG9Kc29uKCRzY29wZS5jb25maWcpO1xuICAgICAgICAgIHZhciBuYW1lID0gJHNjb3BlLmFwcFRpdGxlIHx8IFwiQXBwXCI7XG4gICAgICAgICAgcnVuQXBwKCRsb2NhdGlvbiwgJHNjb3BlLCAkaHR0cCwgS3ViZXJuZXRlc0FwaVVSTCwganNvbiwgbmFtZSwgKCkgPT4ge1xuICAgICAgICAgICAgLy8gbm93IGxldHMgbmF2aWdhdGUgdG8gdGhlIGFwcHMgcGFnZSBzbyBmb2xrcyBzZWUgdGhpbmdzIGhhcHBlblxuICAgICAgICAgICAgJGxvY2F0aW9uLnVybChcIi9rdWJlcm5ldGVzL2FwcHNcIik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICB9XVxuICAgIH07XG4gIH1dKTtcbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9pbmNsdWRlcy50c1wiLz5cblxubW9kdWxlIEt1YmVybmV0ZXMge1xuIFxuICBleHBvcnQgdmFyIHNjaGVtYSA9IFxue1xuICBcImlkXCI6IFwiaHR0cDovL2ZhYnJpYzguaW8vZmFicmljOC92Mi9TY2hlbWEjXCIsXG4gIFwiJHNjaGVtYVwiOiBcImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvc2NoZW1hI1wiLFxuICBcImRlZmluaXRpb25zXCI6IHtcbiAgICBcImt1YmVybmV0ZXNfQVdTRWxhc3RpY0Jsb2NrU3RvcmVWb2x1bWVTb3VyY2VcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImZzVHlwZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImZpbGUgc3lzdGVtIHR5cGUgdG8gbW91bnRcIlxuICAgICAgICB9LFxuICAgICAgICBcInBhcnRpdGlvblwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJwYXJ0aXRpb24gb24gdGhlIGRpc2sgdG8gbW91bnQgKGUuZy5cIlxuICAgICAgICB9LFxuICAgICAgICBcInJlYWRPbmx5XCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInJlYWQtb25seSBpZiB0cnVlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ2b2x1bWVJRFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInVuaXF1ZSBpZCBvZiB0aGUgUEQgcmVzb3VyY2UgaW4gQVdTXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkFXU0VsYXN0aWNCbG9ja1N0b3JlVm9sdW1lU291cmNlXCJcbiAgICB9LFxuICAgIFwia3ViZXJuZXRlc19DYXBhYmlsaXRpZXNcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImFkZFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiYWRkZWQgY2FwYWJpbGl0aWVzXCIsXG4gICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJhZGRlZCBjYXBhYmlsaXRpZXNcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJkcm9wXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJkcm9wZWQgY2FwYWJpbGl0aWVzXCIsXG4gICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJkcm9wZWQgY2FwYWJpbGl0aWVzXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5DYXBhYmlsaXRpZXNcIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX0NvbnRhaW5lclwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiYXJnc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiY29tbWFuZCBhcnJheTsgdGhlIGRvY2tlciBpbWFnZSdzIGNtZCBpcyB1c2VkIGlmIHRoaXMgaXMgbm90IHByb3ZpZGVkOyBhcmd1bWVudHMgdG8gdGhlIGVudHJ5cG9pbnQ7IGNhbm5vdCBiZSB1cGRhdGVkXCIsXG4gICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJjb21tYW5kIGFycmF5OyB0aGUgZG9ja2VyIGltYWdlJ3MgY21kIGlzIHVzZWQgaWYgdGhpcyBpcyBub3QgcHJvdmlkZWQ7IGFyZ3VtZW50cyB0byB0aGUgZW50cnlwb2ludDsgY2Fubm90IGJlIHVwZGF0ZWRcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJjb21tYW5kXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJlbnRyeXBvaW50IGFycmF5OyBub3QgZXhlY3V0ZWQgd2l0aGluIGEgc2hlbGw7IHRoZSBkb2NrZXIgaW1hZ2UncyBlbnRyeXBvaW50IGlzIHVzZWQgaWYgdGhpcyBpcyBub3QgcHJvdmlkZWQ7IGNhbm5vdCBiZSB1cGRhdGVkXCIsXG4gICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJlbnRyeXBvaW50IGFycmF5OyBub3QgZXhlY3V0ZWQgd2l0aGluIGEgc2hlbGw7IHRoZSBkb2NrZXIgaW1hZ2UncyBlbnRyeXBvaW50IGlzIHVzZWQgaWYgdGhpcyBpcyBub3QgcHJvdmlkZWQ7IGNhbm5vdCBiZSB1cGRhdGVkXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiZW52XCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJsaXN0IG9mIGVudmlyb25tZW50IHZhcmlhYmxlcyB0byBzZXQgaW4gdGhlIGNvbnRhaW5lcjsgY2Fubm90IGJlIHVwZGF0ZWRcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19FbnZWYXJcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkVudlZhclwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImltYWdlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRG9ja2VyIGltYWdlIG5hbWVcIlxuICAgICAgICB9LFxuICAgICAgICBcImltYWdlUHVsbFBvbGljeVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImltYWdlIHB1bGwgcG9saWN5OyBvbmUgb2YgQWx3YXlzXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJsaWZlY3ljbGVcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19MaWZlY3ljbGVcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5MaWZlY3ljbGVcIlxuICAgICAgICB9LFxuICAgICAgICBcImxpdmVuZXNzUHJvYmVcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19Qcm9iZVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLlByb2JlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJuYW1lXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibmFtZSBvZiB0aGUgY29udGFpbmVyOyBtdXN0IGJlIGEgRE5TX0xBQkVMIGFuZCB1bmlxdWUgd2l0aGluIHRoZSBwb2Q7IGNhbm5vdCBiZSB1cGRhdGVkXCIsXG4gICAgICAgICAgXCJtYXhMZW5ndGhcIjogNjMsXG4gICAgICAgICAgXCJwYXR0ZXJuXCI6IFwiXlthLXowLTldKFstYS16MC05XSpbYS16MC05XSk/JFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicG9ydHNcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImxpc3Qgb2YgcG9ydHMgdG8gZXhwb3NlIGZyb20gdGhlIGNvbnRhaW5lcjsgY2Fubm90IGJlIHVwZGF0ZWRcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19Db250YWluZXJQb3J0XCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5Db250YWluZXJQb3J0XCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwicmVhZGluZXNzUHJvYmVcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19Qcm9iZVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLlByb2JlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJyZXNvdXJjZXNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19SZXNvdXJjZVJlcXVpcmVtZW50c1wiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLlJlc291cmNlUmVxdWlyZW1lbnRzXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzZWN1cml0eUNvbnRleHRcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19TZWN1cml0eUNvbnRleHRcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5TZWN1cml0eUNvbnRleHRcIlxuICAgICAgICB9LFxuICAgICAgICBcInRlcm1pbmF0aW9uTWVzc2FnZVBhdGhcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJwYXRoIGF0IHdoaWNoIHRoZSBmaWxlIHRvIHdoaWNoIHRoZSBjb250YWluZXIncyB0ZXJtaW5hdGlvbiBtZXNzYWdlIHdpbGwgYmUgd3JpdHRlbiBpcyBtb3VudGVkIGludG8gdGhlIGNvbnRhaW5lcidzIGZpbGVzeXN0ZW07IG1lc3NhZ2Ugd3JpdHRlbiBpcyBpbnRlbmRlZCB0byBiZSBicmllZiBmaW5hbCBzdGF0dXNcIlxuICAgICAgICB9LFxuICAgICAgICBcInZvbHVtZU1vdW50c1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwicG9kIHZvbHVtZXMgdG8gbW91bnQgaW50byB0aGUgY29udGFpbmVyJ3MgZmlsZXN5c3RlOyBjYW5ub3QgYmUgdXBkYXRlZFwiLFxuICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX1ZvbHVtZU1vdW50XCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5Wb2x1bWVNb3VudFwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIndvcmtpbmdEaXJcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJjb250YWluZXIncyB3b3JraW5nIGRpcmVjdG9yeTsgZGVmYXVsdHMgdG8gaW1hZ2UncyBkZWZhdWx0OyBjYW5ub3QgYmUgdXBkYXRlZFwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5Db250YWluZXJcIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX0NvbnRhaW5lclBvcnRcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImNvbnRhaW5lclBvcnRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibnVtYmVyIG9mIHBvcnQgdG8gZXhwb3NlIG9uIHRoZSBwb2QncyBJUCBhZGRyZXNzXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJob3N0SVBcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJob3N0IElQIHRvIGJpbmQgdGhlIHBvcnQgdG9cIlxuICAgICAgICB9LFxuICAgICAgICBcImhvc3RQb3J0XCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm51bWJlciBvZiBwb3J0IHRvIGV4cG9zZSBvbiB0aGUgaG9zdDsgbW9zdCBjb250YWluZXJzIGRvIG5vdCBuZWVkIHRoaXNcIlxuICAgICAgICB9LFxuICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJuYW1lIGZvciB0aGUgcG9ydCB0aGF0IGNhbiBiZSByZWZlcnJlZCB0byBieSBzZXJ2aWNlczsgbXVzdCBiZSBhIEROU19MQUJFTCBhbmQgdW5pcXVlIHdpdGhvdXQgdGhlIHBvZFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicHJvdG9jb2xcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJwcm90b2NvbCBmb3IgcG9ydDsgbXVzdCBiZSBVRFAgb3IgVENQOyBUQ1AgaWYgdW5zcGVjaWZpZWRcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuQ29udGFpbmVyUG9ydFwiXG4gICAgfSxcbiAgICBcImt1YmVybmV0ZXNfQ29udGFpbmVyU3RhdGVcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcInJ1bm5pbmdcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19Db250YWluZXJTdGF0ZVJ1bm5pbmdcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5Db250YWluZXJTdGF0ZVJ1bm5pbmdcIlxuICAgICAgICB9LFxuICAgICAgICBcInRlcm1pbmF0aW9uXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfQ29udGFpbmVyU3RhdGVUZXJtaW5hdGVkXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuQ29udGFpbmVyU3RhdGVUZXJtaW5hdGVkXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ3YWl0aW5nXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfQ29udGFpbmVyU3RhdGVXYWl0aW5nXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuQ29udGFpbmVyU3RhdGVXYWl0aW5nXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkNvbnRhaW5lclN0YXRlXCJcbiAgICB9LFxuICAgIFwia3ViZXJuZXRlc19Db250YWluZXJTdGF0ZVJ1bm5pbmdcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcInN0YXJ0ZWRBdFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInRpbWUgYXQgd2hpY2ggdGhlIGNvbnRhaW5lciB3YXMgbGFzdCAocmUtKXN0YXJ0ZWRcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuQ29udGFpbmVyU3RhdGVSdW5uaW5nXCJcbiAgICB9LFxuICAgIFwia3ViZXJuZXRlc19Db250YWluZXJTdGF0ZVRlcm1pbmF0ZWRcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImNvbnRhaW5lcklEXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiY29udGFpbmVyJ3MgSUQgaW4gdGhlIGZvcm1hdCAnZG9ja2VyOi8vXFx1MDAzY2NvbnRhaW5lcl9pZFxcdTAwM2UnXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJleGl0Q29kZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJleGl0IHN0YXR1cyBmcm9tIHRoZSBsYXN0IHRlcm1pbmF0aW9uIG9mIHRoZSBjb250YWluZXJcIlxuICAgICAgICB9LFxuICAgICAgICBcImZpbmlzaGVkQXRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJ0aW1lIGF0IHdoaWNoIHRoZSBjb250YWluZXIgbGFzdCB0ZXJtaW5hdGVkXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJtZXNzYWdlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibWVzc2FnZSByZWdhcmRpbmcgdGhlIGxhc3QgdGVybWluYXRpb24gb2YgdGhlIGNvbnRhaW5lclwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicmVhc29uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiKGJyaWVmKSByZWFzb24gZnJvbSB0aGUgbGFzdCB0ZXJtaW5hdGlvbiBvZiB0aGUgY29udGFpbmVyXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzaWduYWxcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwic2lnbmFsIGZyb20gdGhlIGxhc3QgdGVybWluYXRpb24gb2YgdGhlIGNvbnRhaW5lclwiXG4gICAgICAgIH0sXG4gICAgICAgIFwic3RhcnRlZEF0XCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwidGltZSBhdCB3aGljaCBwcmV2aW91cyBleGVjdXRpb24gb2YgdGhlIGNvbnRhaW5lciBzdGFydGVkXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkNvbnRhaW5lclN0YXRlVGVybWluYXRlZFwiXG4gICAgfSxcbiAgICBcImt1YmVybmV0ZXNfQ29udGFpbmVyU3RhdGVXYWl0aW5nXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJyZWFzb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCIoYnJpZWYpIHJlYXNvbiB0aGUgY29udGFpbmVyIGlzIG5vdCB5ZXQgcnVubmluZ1wiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5Db250YWluZXJTdGF0ZVdhaXRpbmdcIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX0NvbnRhaW5lclN0YXR1c1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiY29udGFpbmVySURcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJjb250YWluZXIncyBJRCBpbiB0aGUgZm9ybWF0ICdkb2NrZXI6Ly9cXHUwMDNjY29udGFpbmVyX2lkXFx1MDAzZSdcIlxuICAgICAgICB9LFxuICAgICAgICBcImltYWdlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiaW1hZ2Ugb2YgdGhlIGNvbnRhaW5lclwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiaW1hZ2VJRFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIklEIG9mIHRoZSBjb250YWluZXIncyBpbWFnZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibGFzdFN0YXRlXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfQ29udGFpbmVyU3RhdGVcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5Db250YWluZXJTdGF0ZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibmFtZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm5hbWUgb2YgdGhlIGNvbnRhaW5lcjsgbXVzdCBiZSBhIEROU19MQUJFTCBhbmQgdW5pcXVlIHdpdGhpbiB0aGUgcG9kOyBjYW5ub3QgYmUgdXBkYXRlZFwiLFxuICAgICAgICAgIFwibWF4TGVuZ3RoXCI6IDYzLFxuICAgICAgICAgIFwicGF0dGVyblwiOiBcIl5bYS16MC05XShbLWEtejAtOV0qW2EtejAtOV0pPyRcIlxuICAgICAgICB9LFxuICAgICAgICBcInJlYWR5XCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInNwZWNpZmllcyB3aGV0aGVyIHRoZSBjb250YWluZXIgaGFzIHBhc3NlZCBpdHMgcmVhZGluZXNzIHByb2JlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJyZXN0YXJ0Q291bnRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwidGhlIG51bWJlciBvZiB0aW1lcyB0aGUgY29udGFpbmVyIGhhcyBiZWVuIHJlc3RhcnRlZFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwic3RhdGVcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19Db250YWluZXJTdGF0ZVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkNvbnRhaW5lclN0YXRlXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkNvbnRhaW5lclN0YXR1c1wiXG4gICAgfSxcbiAgICBcImt1YmVybmV0ZXNfRW1wdHlEaXJWb2x1bWVTb3VyY2VcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcIm1lZGl1bVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInR5cGUgb2Ygc3RvcmFnZSB1c2VkIHRvIGJhY2sgdGhlIHZvbHVtZTsgbXVzdCBiZSBhbiBlbXB0eSBzdHJpbmcgKGRlZmF1bHQpIG9yIE1lbW9yeVwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5FbXB0eURpclZvbHVtZVNvdXJjZVwiXG4gICAgfSxcbiAgICBcImt1YmVybmV0ZXNfRW5kcG9pbnRBZGRyZXNzXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJpcFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIklQIGFkZHJlc3Mgb2YgdGhlIGVuZHBvaW50XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ0YXJnZXRSZWZcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19PYmplY3RSZWZlcmVuY2VcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5PYmplY3RSZWZlcmVuY2VcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuRW5kcG9pbnRBZGRyZXNzXCJcbiAgICB9LFxuICAgIFwia3ViZXJuZXRlc19FbmRwb2ludFBvcnRcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJuYW1lIG9mIHRoaXMgcG9ydFwiLFxuICAgICAgICAgIFwibWF4TGVuZ3RoXCI6IDYzLFxuICAgICAgICAgIFwicGF0dGVyblwiOiBcIl5bYS16MC05XShbLWEtejAtOV0qW2EtejAtOV0pPyRcIlxuICAgICAgICB9LFxuICAgICAgICBcInBvcnRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwicG9ydCBudW1iZXIgb2YgdGhlIGVuZHBvaW50XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwcm90b2NvbFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInByb3RvY29sIGZvciB0aGlzIHBvcnQ7IG11c3QgYmUgVURQIG9yIFRDUDsgVENQIGlmIHVuc3BlY2lmaWVkXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkVuZHBvaW50UG9ydFwiXG4gICAgfSxcbiAgICBcImt1YmVybmV0ZXNfRW5kcG9pbnRTdWJzZXRcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImFkZHJlc3Nlc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSVAgYWRkcmVzc2VzIHdoaWNoIG9mZmVyIHRoZSByZWxhdGVkIHBvcnRzXCIsXG4gICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfRW5kcG9pbnRBZGRyZXNzXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5FbmRwb2ludEFkZHJlc3NcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJwb3J0c1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwicG9ydCBudW1iZXJzIGF2YWlsYWJsZSBvbiB0aGUgcmVsYXRlZCBJUCBhZGRyZXNzZXNcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19FbmRwb2ludFBvcnRcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkVuZHBvaW50UG9ydFwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuRW5kcG9pbnRTdWJzZXRcIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX0VuZHBvaW50c1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiYXBpVmVyc2lvblwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiBcInYxXCIsXG4gICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlLFxuICAgICAgICAgIFwiZW51bVwiOiBbXG4gICAgICAgICAgICBcInYxXCJcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIFwia2luZFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiBcIkVuZHBvaW50c1wiLFxuICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfT2JqZWN0TWV0YVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLk9iamVjdE1ldGFcIlxuICAgICAgICB9LFxuICAgICAgICBcInN1YnNldHNcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInNldHMgb2YgYWRkcmVzc2VzIGFuZCBwb3J0cyB0aGF0IGNvbXByaXNlIGEgc2VydmljZVwiLFxuICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX0VuZHBvaW50U3Vic2V0XCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5FbmRwb2ludFN1YnNldFwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuRW5kcG9pbnRzXCIsXG4gICAgICBcImphdmFJbnRlcmZhY2VzXCI6IFtcbiAgICAgICAgXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkhhc01ldGFkYXRhXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIFwia3ViZXJuZXRlc19FbmRwb2ludHNMaXN0XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJhcGlWZXJzaW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IFwidjFcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWUsXG4gICAgICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgICAgIFwidjFcIlxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibGlzdCBvZiBlbmRwb2ludHNcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19FbmRwb2ludHNcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkVuZHBvaW50c1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImtpbmRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogXCJFbmRwb2ludHNMaXN0XCIsXG4gICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19MaXN0TWV0YVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkxpc3RNZXRhXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkVuZHBvaW50c0xpc3RcIixcbiAgICAgIFwiamF2YUludGVyZmFjZXNcIjogW1xuICAgICAgICBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuS3ViZXJuZXRlc1Jlc291cmNlXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIFwia3ViZXJuZXRlc19FbnZWYXJcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJuYW1lIG9mIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZTsgbXVzdCBiZSBhIENfSURFTlRJRklFUlwiLFxuICAgICAgICAgIFwicGF0dGVyblwiOiBcIl5bQS1aYS16X11bQS1aYS16MC05X10qJFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidmFsdWVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJ2YWx1ZSBvZiB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGU7IGRlZmF1bHRzIHRvIGVtcHR5IHN0cmluZ1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwidmFsdWVGcm9tXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfRW52VmFyU291cmNlXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuRW52VmFyU291cmNlXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkVudlZhclwiXG4gICAgfSxcbiAgICBcImt1YmVybmV0ZXNfRW52VmFyU291cmNlXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJmaWVsZFJlZlwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX09iamVjdEZpZWxkU2VsZWN0b3JcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5PYmplY3RGaWVsZFNlbGVjdG9yXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkVudlZhclNvdXJjZVwiXG4gICAgfSxcbiAgICBcImt1YmVybmV0ZXNfRXhlY0FjdGlvblwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiY29tbWFuZFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiY29tbWFuZCBsaW5lIHRvIGV4ZWN1dGUgaW5zaWRlIHRoZSBjb250YWluZXI7IHdvcmtpbmcgZGlyZWN0b3J5IGZvciB0aGUgY29tbWFuZCBpcyByb290ICgnLycpIGluIHRoZSBjb250YWluZXIncyBmaWxlIHN5c3RlbTsgdGhlIGNvbW1hbmQgaXMgZXhlYydkXCIsXG4gICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJjb21tYW5kIGxpbmUgdG8gZXhlY3V0ZSBpbnNpZGUgdGhlIGNvbnRhaW5lcjsgd29ya2luZyBkaXJlY3RvcnkgZm9yIHRoZSBjb21tYW5kIGlzIHJvb3QgKCcvJykgaW4gdGhlIGNvbnRhaW5lcidzIGZpbGUgc3lzdGVtOyB0aGUgY29tbWFuZCBpcyBleGVjJ2RcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkV4ZWNBY3Rpb25cIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX0dDRVBlcnNpc3RlbnREaXNrVm9sdW1lU291cmNlXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJmc1R5cGVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJmaWxlIHN5c3RlbSB0eXBlIHRvIG1vdW50XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwYXJ0aXRpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwicGFydGl0aW9uIG9uIHRoZSBkaXNrIHRvIG1vdW50IChlLmcuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwZE5hbWVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJ1bmlxdWUgbmFtZSBvZiB0aGUgUEQgcmVzb3VyY2UgaW4gR0NFXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJyZWFkT25seVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJyZWFkLW9ubHkgaWYgdHJ1ZVwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5HQ0VQZXJzaXN0ZW50RGlza1ZvbHVtZVNvdXJjZVwiXG4gICAgfSxcbiAgICBcImt1YmVybmV0ZXNfR2l0UmVwb1ZvbHVtZVNvdXJjZVwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwicmVwb3NpdG9yeVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInJlcG9zaXRvcnkgVVJMXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJyZXZpc2lvblwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImNvbW1pdCBoYXNoIGZvciB0aGUgc3BlY2lmaWVkIHJldmlzaW9uXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkdpdFJlcG9Wb2x1bWVTb3VyY2VcIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX0dsdXN0ZXJmc1ZvbHVtZVNvdXJjZVwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiZW5kcG9pbnRzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiZ2x1c3RlciBob3N0cyBlbmRwb2ludHMgbmFtZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicGF0aFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInBhdGggdG8gZ2x1c3RlciB2b2x1bWVcIlxuICAgICAgICB9LFxuICAgICAgICBcInJlYWRPbmx5XCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImdsdXN0ZXJmcyB2b2x1bWUgdG8gYmUgbW91bnRlZCB3aXRoIHJlYWQtb25seSBwZXJtaXNzaW9uc1wiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5HbHVzdGVyZnNWb2x1bWVTb3VyY2VcIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX0hUVFBHZXRBY3Rpb25cIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImhvc3RcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJob3N0bmFtZSB0byBjb25uZWN0IHRvOyBkZWZhdWx0cyB0byBwb2QgSVBcIlxuICAgICAgICB9LFxuICAgICAgICBcInBhdGhcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJwYXRoIHRvIGFjY2VzcyBvbiB0aGUgSFRUUCBzZXJ2ZXJcIlxuICAgICAgICB9LFxuICAgICAgICBcInBvcnRcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc191dGlsX0ludE9yU3RyaW5nXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudXRpbC5JbnRPclN0cmluZ1wiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5IVFRQR2V0QWN0aW9uXCJcbiAgICB9LFxuICAgIFwia3ViZXJuZXRlc19IYW5kbGVyXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJleGVjXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfRXhlY0FjdGlvblwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkV4ZWNBY3Rpb25cIlxuICAgICAgICB9LFxuICAgICAgICBcImh0dHBHZXRcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19IVFRQR2V0QWN0aW9uXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuSFRUUEdldEFjdGlvblwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidGNwU29ja2V0XCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfVENQU29ja2V0QWN0aW9uXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuVENQU29ja2V0QWN0aW9uXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkhhbmRsZXJcIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX0hvc3RQYXRoVm9sdW1lU291cmNlXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJwYXRoXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwicGF0aCBvZiB0aGUgZGlyZWN0b3J5IG9uIHRoZSBob3N0XCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkhvc3RQYXRoVm9sdW1lU291cmNlXCJcbiAgICB9LFxuICAgIFwia3ViZXJuZXRlc19JU0NTSVZvbHVtZVNvdXJjZVwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiZnNUeXBlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiZmlsZSBzeXN0ZW0gdHlwZSB0byBtb3VudFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiaXFuXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiaVNDU0kgUXVhbGlmaWVkIE5hbWVcIlxuICAgICAgICB9LFxuICAgICAgICBcImx1blwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJpc2NzaSB0YXJnZXQgbHVuIG51bWJlclwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicmVhZE9ubHlcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwicmVhZC1vbmx5IGlmIHRydWVcIlxuICAgICAgICB9LFxuICAgICAgICBcInRhcmdldFBvcnRhbFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImlTQ1NJIHRhcmdldCBwb3J0YWxcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuSVNDU0lWb2x1bWVTb3VyY2VcIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX0xpZmVjeWNsZVwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwicG9zdFN0YXJ0XCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfSGFuZGxlclwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkhhbmRsZXJcIlxuICAgICAgICB9LFxuICAgICAgICBcInByZVN0b3BcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19IYW5kbGVyXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuSGFuZGxlclwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5MaWZlY3ljbGVcIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX0xpc3RcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImFwaVZlcnNpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MVwiLFxuICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZSxcbiAgICAgICAgICBcImVudW1cIjogW1xuICAgICAgICAgICAgXCJ2MVwiXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJsaXN0IG9mIG9iamVjdHNcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19ydW50aW1lX1Jhd0V4dGVuc2lvblwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuSGFzTWV0YWRhdGFcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJraW5kXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IFwiTGlzdFwiLFxuICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfTGlzdE1ldGFcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5MaXN0TWV0YVwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5CYXNlS3ViZXJuZXRlc0xpc3RcIixcbiAgICAgIFwiamF2YUludGVyZmFjZXNcIjogW1xuICAgICAgICBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuS3ViZXJuZXRlc1Jlc291cmNlXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIFwia3ViZXJuZXRlc19MaXN0TWV0YVwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwicmVzb3VyY2VWZXJzaW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwic3RyaW5nIHRoYXQgaWRlbnRpZmllcyB0aGUgaW50ZXJuYWwgdmVyc2lvbiBvZiB0aGlzIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGJ5IGNsaWVudHMgdG8gZGV0ZXJtaW5lIHdoZW4gb2JqZWN0cyBoYXZlIGNoYW5nZWQ7IHBvcHVsYXRlZCBieSB0aGUgc3lzdGVtXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzZWxmTGlua1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlVSTCBmb3IgdGhlIG9iamVjdDsgcG9wdWxhdGVkIGJ5IHRoZSBzeXN0ZW1cIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuTGlzdE1ldGFcIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX0xvYWRCYWxhbmNlckluZ3Jlc3NcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImhvc3RuYW1lXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiaG9zdG5hbWUgb2YgaW5ncmVzcyBwb2ludFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiaXBcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJJUCBhZGRyZXNzIG9mIGluZ3Jlc3MgcG9pbnRcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuTG9hZEJhbGFuY2VySW5ncmVzc1wiXG4gICAgfSxcbiAgICBcImt1YmVybmV0ZXNfTG9hZEJhbGFuY2VyU3RhdHVzXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJpbmdyZXNzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJsb2FkLWJhbGFuY2VyIGluZ3Jlc3MgcG9pbnRzXCIsXG4gICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfTG9hZEJhbGFuY2VySW5ncmVzc1wiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuTG9hZEJhbGFuY2VySW5ncmVzc1wiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuTG9hZEJhbGFuY2VyU3RhdHVzXCJcbiAgICB9LFxuICAgIFwia3ViZXJuZXRlc19Mb2NhbE9iamVjdFJlZmVyZW5jZVwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwibmFtZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm5hbWUgb2YgdGhlIHJlZmVyZW50XCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkxvY2FsT2JqZWN0UmVmZXJlbmNlXCJcbiAgICB9LFxuICAgIFwia3ViZXJuZXRlc19ORlNWb2x1bWVTb3VyY2VcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcInBhdGhcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJ0aGUgcGF0aCB0aGF0IGlzIGV4cG9ydGVkIGJ5IHRoZSBORlMgc2VydmVyXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJyZWFkT25seVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJmb3JjZXMgdGhlIE5GUyBleHBvcnQgdG8gYmUgbW91bnRlZCB3aXRoIHJlYWQtb25seSBwZXJtaXNzaW9uc1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwic2VydmVyXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwidGhlIGhvc3RuYW1lIG9yIElQIGFkZHJlc3Mgb2YgdGhlIE5GUyBzZXJ2ZXJcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuTkZTVm9sdW1lU291cmNlXCJcbiAgICB9LFxuICAgIFwia3ViZXJuZXRlc19OYW1lc3BhY2VcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImFwaVZlcnNpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MVwiLFxuICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZSxcbiAgICAgICAgICBcImVudW1cIjogW1xuICAgICAgICAgICAgXCJ2MVwiXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBcImtpbmRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogXCJOYW1lc3BhY2VcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX09iamVjdE1ldGFcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5PYmplY3RNZXRhXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzcGVjXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfTmFtZXNwYWNlU3BlY1wiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLk5hbWVzcGFjZVNwZWNcIlxuICAgICAgICB9LFxuICAgICAgICBcInN0YXR1c1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX05hbWVzcGFjZVN0YXR1c1wiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLk5hbWVzcGFjZVN0YXR1c1wiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5OYW1lc3BhY2VcIixcbiAgICAgIFwiamF2YUludGVyZmFjZXNcIjogW1xuICAgICAgICBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuSGFzTWV0YWRhdGFcIlxuICAgICAgXVxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX05hbWVzcGFjZUxpc3RcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImFwaVZlcnNpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MVwiLFxuICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZSxcbiAgICAgICAgICBcImVudW1cIjogW1xuICAgICAgICAgICAgXCJ2MVwiXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJpdGVtcyBpcyB0aGUgbGlzdCBvZiBOYW1lc3BhY2Ugb2JqZWN0cyBpbiB0aGUgbGlzdFwiLFxuICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX05hbWVzcGFjZVwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuTmFtZXNwYWNlXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwia2luZFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiBcIk5hbWVzcGFjZUxpc3RcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX0xpc3RNZXRhXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuTGlzdE1ldGFcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuTmFtZXNwYWNlTGlzdFwiLFxuICAgICAgXCJqYXZhSW50ZXJmYWNlc1wiOiBbXG4gICAgICAgIFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5LdWJlcm5ldGVzUmVzb3VyY2VcIlxuICAgICAgXVxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX05hbWVzcGFjZVNwZWNcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImZpbmFsaXplcnNcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImFuIG9wYXF1ZSBsaXN0IG9mIHZhbHVlcyB0aGF0IG11c3QgYmUgZW1wdHkgdG8gcGVybWFuZW50bHkgcmVtb3ZlIG9iamVjdCBmcm9tIHN0b3JhZ2VcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImFuIG9wYXF1ZSBsaXN0IG9mIHZhbHVlcyB0aGF0IG11c3QgYmUgZW1wdHkgdG8gcGVybWFuZW50bHkgcmVtb3ZlIG9iamVjdCBmcm9tIHN0b3JhZ2VcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLk5hbWVzcGFjZVNwZWNcIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX05hbWVzcGFjZVN0YXR1c1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwicGhhc2VcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJwaGFzZSBpcyB0aGUgY3VycmVudCBsaWZlY3ljbGUgcGhhc2Ugb2YgdGhlIG5hbWVzcGFjZVwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5OYW1lc3BhY2VTdGF0dXNcIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX05vZGVcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImFwaVZlcnNpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MVwiLFxuICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZSxcbiAgICAgICAgICBcImVudW1cIjogW1xuICAgICAgICAgICAgXCJ2MVwiXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBcImtpbmRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogXCJOb2RlXCIsXG4gICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19PYmplY3RNZXRhXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuT2JqZWN0TWV0YVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwic3BlY1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX05vZGVTcGVjXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuTm9kZVNwZWNcIlxuICAgICAgICB9LFxuICAgICAgICBcInN0YXR1c1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX05vZGVTdGF0dXNcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5Ob2RlU3RhdHVzXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLk5vZGVcIixcbiAgICAgIFwiamF2YUludGVyZmFjZXNcIjogW1xuICAgICAgICBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuSGFzTWV0YWRhdGFcIlxuICAgICAgXVxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX05vZGVBZGRyZXNzXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJhZGRyZXNzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwidGhlIG5vZGUgYWRkcmVzc1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm5vZGUgYWRkcmVzcyB0eXBlXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLk5vZGVBZGRyZXNzXCJcbiAgICB9LFxuICAgIFwia3ViZXJuZXRlc19Ob2RlQ29uZGl0aW9uXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJsYXN0SGVhcnRiZWF0VGltZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImxhc3QgdGltZSB3ZSBnb3QgYW4gdXBkYXRlIG9uIGEgZ2l2ZW4gY29uZGl0aW9uXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJsYXN0VHJhbnNpdGlvblRpbWVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJsYXN0IHRpbWUgdGhlIGNvbmRpdGlvbiB0cmFuc2l0IGZyb20gb25lIHN0YXR1cyB0byBhbm90aGVyXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJtZXNzYWdlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiaHVtYW4gcmVhZGFibGUgbWVzc2FnZSBpbmRpY2F0aW5nIGRldGFpbHMgYWJvdXQgbGFzdCB0cmFuc2l0aW9uXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJyZWFzb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCIoYnJpZWYpIHJlYXNvbiBmb3IgdGhlIGNvbmRpdGlvbidzIGxhc3QgdHJhbnNpdGlvblwiXG4gICAgICAgIH0sXG4gICAgICAgIFwic3RhdHVzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwic3RhdHVzIG9mIHRoZSBjb25kaXRpb25cIlxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJ0eXBlIG9mIG5vZGUgY29uZGl0aW9uXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLk5vZGVDb25kaXRpb25cIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX05vZGVMaXN0XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJhcGlWZXJzaW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IFwidjFcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWUsXG4gICAgICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgICAgIFwidjFcIlxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibGlzdCBvZiBub2Rlc1wiLFxuICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX05vZGVcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLk5vZGVcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJraW5kXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IFwiTm9kZUxpc3RcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX0xpc3RNZXRhXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuTGlzdE1ldGFcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuTm9kZUxpc3RcIixcbiAgICAgIFwiamF2YUludGVyZmFjZXNcIjogW1xuICAgICAgICBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuS3ViZXJuZXRlc1Jlc291cmNlXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIFwia3ViZXJuZXRlc19Ob2RlU3BlY1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiZXh0ZXJuYWxJRFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImV4dGVybmFsIElEIGFzc2lnbmVkIHRvIHRoZSBub2RlIGJ5IHNvbWUgbWFjaGluZSBkYXRhYmFzZSAoZS5nLiBhIGNsb3VkIHByb3ZpZGVyKS4gRGVmYXVsdHMgdG8gbm9kZSBuYW1lIHdoZW4gZW1wdHkuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwb2RDSURSXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwicG9kIElQIHJhbmdlIGFzc2lnbmVkIHRvIHRoZSBub2RlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ1bnNjaGVkdWxhYmxlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImRpc2FibGUgcG9kIHNjaGVkdWxpbmcgb24gdGhlIG5vZGVcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuTm9kZVNwZWNcIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX05vZGVTdGF0dXNcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImFkZHJlc3Nlc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibGlzdCBvZiBhZGRyZXNzZXMgcmVhY2hhYmxlIHRvIHRoZSBub2RlXCIsXG4gICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfTm9kZUFkZHJlc3NcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLk5vZGVBZGRyZXNzXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiY2FwYWNpdHlcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJjb21wdXRlIHJlc291cmNlIGNhcGFjaXR5IG9mIHRoZSBub2RlOyBodHRwOi8vZG9jcy5rOHMuaW8vcmVzb3VyY2VzLm1kXCIsXG4gICAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfcmVzb3VyY2VfUXVhbnRpdHlcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnJlc291cmNlLlF1YW50aXR5XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJqYXZhLnV0aWwuTWFwXFx1MDAzY1N0cmluZyxpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnJlc291cmNlLlF1YW50aXR5XFx1MDAzZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiY29uZGl0aW9uc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibGlzdCBvZiBub2RlIGNvbmRpdGlvbnMgb2JzZXJ2ZWRcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19Ob2RlQ29uZGl0aW9uXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5Ob2RlQ29uZGl0aW9uXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwibm9kZUluZm9cIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19Ob2RlU3lzdGVtSW5mb1wiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLk5vZGVTeXN0ZW1JbmZvXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwaGFzZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm1vc3QgcmVjZW50bHkgb2JzZXJ2ZWQgbGlmZWN5Y2xlIHBoYXNlIG9mIHRoZSBub2RlXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLk5vZGVTdGF0dXNcIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX05vZGVTeXN0ZW1JbmZvXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJib290SURcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJib290IGlkIGlzIHRoZSBib290LWlkIHJlcG9ydGVkIGJ5IHRoZSBub2RlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJjb250YWluZXJSdW50aW1lVmVyc2lvblwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkNvbnRhaW5lciBydW50aW1lIHZlcnNpb24gcmVwb3J0ZWQgYnkgdGhlIG5vZGUgdGhyb3VnaCBydW50aW1lIHJlbW90ZSBBUEkgKGUuZy4gZG9ja2VyOi8vMS41LjApXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJrZXJuZWxWZXJzaW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiS2VybmVsIHZlcnNpb24gcmVwb3J0ZWQgYnkgdGhlIG5vZGUgZnJvbSAndW5hbWUgLXInIChlLmcuIDMuMTYuMC0wLmJwby40LWFtZDY0KVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwia3ViZVByb3h5VmVyc2lvblwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkt1YmUtcHJveHkgdmVyc2lvbiByZXBvcnRlZCBieSB0aGUgbm9kZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwia3ViZWxldFZlcnNpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJLdWJlbGV0IHZlcnNpb24gcmVwb3J0ZWQgYnkgdGhlIG5vZGVcIlxuICAgICAgICB9LFxuICAgICAgICBcIm1hY2hpbmVJRFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm1hY2hpbmUtaWQgcmVwb3J0ZWQgYnkgdGhlIG5vZGVcIlxuICAgICAgICB9LFxuICAgICAgICBcIm9zSW1hZ2VcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJPUyBpbWFnZSB1c2VkIHJlcG9ydGVkIGJ5IHRoZSBub2RlIGZyb20gL2V0Yy9vcy1yZWxlYXNlIChlLmcuIERlYmlhbiBHTlUvTGludXggNyAod2hlZXp5KSlcIlxuICAgICAgICB9LFxuICAgICAgICBcInN5c3RlbVVVSURcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJzeXN0ZW0tdXVpZCByZXBvcnRlZCBieSB0aGUgbm9kZVwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5Ob2RlU3lzdGVtSW5mb1wiXG4gICAgfSxcbiAgICBcImt1YmVybmV0ZXNfT2JqZWN0RmllbGRTZWxlY3RvclwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiYXBpVmVyc2lvblwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInZlcnNpb24gb2YgdGhlIHNjaGVtYSB0aGF0IGZpZWxkUGF0aCBpcyB3cml0dGVuIGluIHRlcm1zIG9mOyBkZWZhdWx0cyB0byB2MVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZmllbGRQYXRoXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwicGF0aCBvZiB0aGUgZmllbGQgdG8gc2VsZWN0IGluIHRoZSBzcGVjaWZpZWQgQVBJIHZlcnNpb25cIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuT2JqZWN0RmllbGRTZWxlY3RvclwiXG4gICAgfSxcbiAgICBcImt1YmVybmV0ZXNfT2JqZWN0TWV0YVwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiYW5ub3RhdGlvbnNcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJtYXAgb2Ygc3RyaW5nIGtleXMgYW5kIHZhbHVlcyB0aGF0IGNhbiBiZSB1c2VkIGJ5IGV4dGVybmFsIHRvb2xpbmcgdG8gc3RvcmUgYW5kIHJldHJpZXZlIGFyYml0cmFyeSBtZXRhZGF0YSBhYm91dCBvYmplY3RzXCIsXG4gICAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJtYXAgb2Ygc3RyaW5nIGtleXMgYW5kIHZhbHVlcyB0aGF0IGNhbiBiZSB1c2VkIGJ5IGV4dGVybmFsIHRvb2xpbmcgdG8gc3RvcmUgYW5kIHJldHJpZXZlIGFyYml0cmFyeSBtZXRhZGF0YSBhYm91dCBvYmplY3RzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJqYXZhLnV0aWwuTWFwXFx1MDAzY1N0cmluZyxTdHJpbmdcXHUwMDNlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJjcmVhdGlvblRpbWVzdGFtcFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlJGQyAzMzM5IGRhdGUgYW5kIHRpbWUgYXQgd2hpY2ggdGhlIG9iamVjdCB3YXMgY3JlYXRlZDsgcG9wdWxhdGVkIGJ5IHRoZSBzeXN0ZW1cIlxuICAgICAgICB9LFxuICAgICAgICBcImRlbGV0aW9uVGltZXN0YW1wXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUkZDIDMzMzkgZGF0ZSBhbmQgdGltZSBhdCB3aGljaCB0aGUgb2JqZWN0IHdpbGwgYmUgZGVsZXRlZDsgcG9wdWxhdGVkIGJ5IHRoZSBzeXN0ZW0gd2hlbiBhIGdyYWNlZnVsIGRlbGV0aW9uIGlzIHJlcXVlc3RlZFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZ2VuZXJhdGVOYW1lXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiYW4gb3B0aW9uYWwgcHJlZml4IHRvIHVzZSB0byBnZW5lcmF0ZSBhIHVuaXF1ZSBuYW1lOyBoYXMgdGhlIHNhbWUgdmFsaWRhdGlvbiBydWxlcyBhcyBuYW1lOyBvcHRpb25hbFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibGFiZWxzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibWFwIG9mIHN0cmluZyBrZXlzIGFuZCB2YWx1ZXMgdGhhdCBjYW4gYmUgdXNlZCB0byBvcmdhbml6ZSBhbmQgY2F0ZWdvcml6ZSBvYmplY3RzOyBtYXkgbWF0Y2ggc2VsZWN0b3JzIG9mIHJlcGxpY2F0aW9uIGNvbnRyb2xsZXJzIGFuZCBzZXJ2aWNlc1wiLFxuICAgICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibWFwIG9mIHN0cmluZyBrZXlzIGFuZCB2YWx1ZXMgdGhhdCBjYW4gYmUgdXNlZCB0byBvcmdhbml6ZSBhbmQgY2F0ZWdvcml6ZSBvYmplY3RzOyBtYXkgbWF0Y2ggc2VsZWN0b3JzIG9mIHJlcGxpY2F0aW9uIGNvbnRyb2xsZXJzIGFuZCBzZXJ2aWNlc1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiamF2YS51dGlsLk1hcFxcdTAwM2NTdHJpbmcsU3RyaW5nXFx1MDAzZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibmFtZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInN0cmluZyB0aGF0IGlkZW50aWZpZXMgYW4gb2JqZWN0LiBNdXN0IGJlIHVuaXF1ZSB3aXRoaW4gYSBuYW1lc3BhY2U7IGNhbm5vdCBiZSB1cGRhdGVkXCIsXG4gICAgICAgICAgXCJtYXhMZW5ndGhcIjogNjMsXG4gICAgICAgICAgXCJwYXR0ZXJuXCI6IFwiXlthLXowLTldKFstYS16MC05XSpbYS16MC05XSk/JFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibmFtZXNwYWNlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibmFtZXNwYWNlIG9mIHRoZSBvYmplY3Q7IG11c3QgYmUgYSBETlNfTEFCRUw7IGNhbm5vdCBiZSB1cGRhdGVkXCIsXG4gICAgICAgICAgXCJtYXhMZW5ndGhcIjogMjUzLFxuICAgICAgICAgIFwicGF0dGVyblwiOiBcIl5bYS16MC05XShbLWEtejAtOV0qW2EtejAtOV0pPyhcXFxcLlthLXowLTldKFstYS16MC05XSpbYS16MC05XSk/KSokXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJyZXNvdXJjZVZlcnNpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJzdHJpbmcgdGhhdCBpZGVudGlmaWVzIHRoZSBpbnRlcm5hbCB2ZXJzaW9uIG9mIHRoaXMgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgYnkgY2xpZW50cyB0byBkZXRlcm1pbmUgd2hlbiBvYmplY3RzIGhhdmUgY2hhbmdlZDsgcG9wdWxhdGVkIGJ5IHRoZSBzeXN0ZW1cIlxuICAgICAgICB9LFxuICAgICAgICBcInNlbGZMaW5rXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVVJMIGZvciB0aGUgb2JqZWN0OyBwb3B1bGF0ZWQgYnkgdGhlIHN5c3RlbVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidWlkXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwidW5pcXVlIFVVSUQgYWNyb3NzIHNwYWNlIGFuZCB0aW1lOyBwb3B1bGF0ZWQgYnkgdGhlIHN5c3RlbTsgcmVhZC1vbmx5XCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLk9iamVjdE1ldGFcIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX09iamVjdFJlZmVyZW5jZVwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiYXBpVmVyc2lvblwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkFQSSB2ZXJzaW9uIG9mIHRoZSByZWZlcmVudFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZmllbGRQYXRoXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiaWYgcmVmZXJyaW5nIHRvIGEgcGllY2Ugb2YgYW4gb2JqZWN0IGluc3RlYWQgb2YgYW4gZW50aXJlIG9iamVjdFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwia2luZFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImtpbmQgb2YgdGhlIHJlZmVyZW50XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJuYW1lXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibmFtZSBvZiB0aGUgcmVmZXJlbnRcIlxuICAgICAgICB9LFxuICAgICAgICBcIm5hbWVzcGFjZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm5hbWVzcGFjZSBvZiB0aGUgcmVmZXJlbnRcIlxuICAgICAgICB9LFxuICAgICAgICBcInJlc291cmNlVmVyc2lvblwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInNwZWNpZmljIHJlc291cmNlVmVyc2lvbiB0byB3aGljaCB0aGlzIHJlZmVyZW5jZSBpcyBtYWRlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ1aWRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJ1aWQgb2YgdGhlIHJlZmVyZW50XCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLk9iamVjdFJlZmVyZW5jZVwiXG4gICAgfSxcbiAgICBcImt1YmVybmV0ZXNfUGVyc2lzdGVudFZvbHVtZUNsYWltVm9sdW1lU291cmNlXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJjbGFpbU5hbWVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJ0aGUgbmFtZSBvZiB0aGUgY2xhaW0gaW4gdGhlIHNhbWUgbmFtZXNwYWNlIHRvIGJlIG1vdW50ZWQgYXMgYSB2b2x1bWVcIlxuICAgICAgICB9LFxuICAgICAgICBcInJlYWRPbmx5XCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm1vdW50IHZvbHVtZSBhcyByZWFkLW9ubHkgd2hlbiB0cnVlOyBkZWZhdWx0IGZhbHNlXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLlBlcnNpc3RlbnRWb2x1bWVDbGFpbVZvbHVtZVNvdXJjZVwiXG4gICAgfSxcbiAgICBcImt1YmVybmV0ZXNfUG9kXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJhcGlWZXJzaW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IFwidjFcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWUsXG4gICAgICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgICAgIFwidjFcIlxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJraW5kXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IFwiUG9kXCIsXG4gICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19PYmplY3RNZXRhXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuT2JqZWN0TWV0YVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwic3BlY1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX1BvZFNwZWNcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5Qb2RTcGVjXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzdGF0dXNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19Qb2RTdGF0dXNcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5Qb2RTdGF0dXNcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuUG9kXCIsXG4gICAgICBcImphdmFJbnRlcmZhY2VzXCI6IFtcbiAgICAgICAgXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkhhc01ldGFkYXRhXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIFwia3ViZXJuZXRlc19Qb2RDb25kaXRpb25cIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcInN0YXR1c1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInN0YXR1cyBvZiB0aGUgY29uZGl0aW9uXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwia2luZCBvZiB0aGUgY29uZGl0aW9uXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLlBvZENvbmRpdGlvblwiXG4gICAgfSxcbiAgICBcImt1YmVybmV0ZXNfUG9kTGlzdFwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiYXBpVmVyc2lvblwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiBcInYxXCIsXG4gICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlLFxuICAgICAgICAgIFwiZW51bVwiOiBbXG4gICAgICAgICAgICBcInYxXCJcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImxpc3Qgb2YgcG9kc1wiLFxuICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX1BvZFwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuUG9kXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwia2luZFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiBcIlBvZExpc3RcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX0xpc3RNZXRhXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuTGlzdE1ldGFcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuUG9kTGlzdFwiLFxuICAgICAgXCJqYXZhSW50ZXJmYWNlc1wiOiBbXG4gICAgICAgIFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5LdWJlcm5ldGVzUmVzb3VyY2VcIlxuICAgICAgXVxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX1BvZFNwZWNcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImFjdGl2ZURlYWRsaW5lU2Vjb25kc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiTG9uZ1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiY29udGFpbmVyc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibGlzdCBvZiBjb250YWluZXJzIGJlbG9uZ2luZyB0byB0aGUgcG9kOyBjYW5ub3QgYmUgdXBkYXRlZDsgY29udGFpbmVycyBjYW5ub3QgY3VycmVudGx5IGJlIGFkZGVkIG9yIHJlbW92ZWQ7IHRoZXJlIG11c3QgYmUgYXQgbGVhc3Qgb25lIGNvbnRhaW5lciBpbiBhIFBvZFwiLFxuICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX0NvbnRhaW5lclwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuQ29udGFpbmVyXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiZG5zUG9saWN5XCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRE5TIHBvbGljeSBmb3IgY29udGFpbmVycyB3aXRoaW4gdGhlIHBvZDsgb25lIG9mICdDbHVzdGVyRmlyc3QnIG9yICdEZWZhdWx0J1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiaG9zdFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImhvc3QgcmVxdWVzdGVkIGZvciB0aGlzIHBvZFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiaG9zdE5ldHdvcmtcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiaG9zdCBuZXR3b3JraW5nIHJlcXVlc3RlZCBmb3IgdGhpcyBwb2RcIlxuICAgICAgICB9LFxuICAgICAgICBcImltYWdlUHVsbFNlY3JldHNcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImxpc3Qgb2YgcmVmZXJlbmNlcyB0byBzZWNyZXRzIGluIHRoZSBzYW1lIG5hbWVzcGFjZSBhdmFpbGFibGUgZm9yIHB1bGxpbmcgdGhlIGNvbnRhaW5lciBpbWFnZXNcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19Mb2NhbE9iamVjdFJlZmVyZW5jZVwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuTG9jYWxPYmplY3RSZWZlcmVuY2VcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJub2RlU2VsZWN0b3JcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJzZWxlY3RvciB3aGljaCBtdXN0IG1hdGNoIGEgbm9kZSdzIGxhYmVscyBmb3IgdGhlIHBvZCB0byBiZSBzY2hlZHVsZWQgb24gdGhhdCBub2RlXCIsXG4gICAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJzZWxlY3RvciB3aGljaCBtdXN0IG1hdGNoIGEgbm9kZSdzIGxhYmVscyBmb3IgdGhlIHBvZCB0byBiZSBzY2hlZHVsZWQgb24gdGhhdCBub2RlXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJqYXZhLnV0aWwuTWFwXFx1MDAzY1N0cmluZyxTdHJpbmdcXHUwMDNlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJyZXN0YXJ0UG9saWN5XCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwicmVzdGFydCBwb2xpY3kgZm9yIGFsbCBjb250YWluZXJzIHdpdGhpbiB0aGUgcG9kOyBvbmUgb2YgUmVzdGFydFBvbGljeUFsd2F5c1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwic2VydmljZUFjY291bnRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJuYW1lIG9mIHRoZSBTZXJ2aWNlQWNjb3VudCB0byB1c2UgdG8gcnVuIHRoaXMgcG9kXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ0ZXJtaW5hdGlvbkdyYWNlUGVyaW9kU2Vjb25kc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJvcHRpb25hbCBkdXJhdGlvbiBpbiBzZWNvbmRzIHRoZSBwb2QgbmVlZHMgdG8gdGVybWluYXRlIGdyYWNlZnVsbHk7IG1heSBiZSBkZWNyZWFzZWQgaW4gZGVsZXRlIHJlcXVlc3Q7IHZhbHVlIG11c3QgYmUgbm9uLW5lZ2F0aXZlIGludGVnZXI7IHRoZSB2YWx1ZSB6ZXJvIGluZGljYXRlcyBkZWxldGUgaW1tZWRpYXRlbHk7IGlmIHRoaXMgdmFsdWUgaXMgbm90IHNldFwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJMb25nXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ2b2x1bWVzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJsaXN0IG9mIHZvbHVtZXMgdGhhdCBjYW4gYmUgbW91bnRlZCBieSBjb250YWluZXJzIGJlbG9uZ2luZyB0byB0aGUgcG9kXCIsXG4gICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfVm9sdW1lXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5Wb2x1bWVcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLlBvZFNwZWNcIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX1BvZFN0YXR1c1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiY29uZGl0aW9uc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiY3VycmVudCBzZXJ2aWNlIHN0YXRlIG9mIHBvZFwiLFxuICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX1BvZENvbmRpdGlvblwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuUG9kQ29uZGl0aW9uXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiY29udGFpbmVyU3RhdHVzZXNcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImxpc3Qgb2YgY29udGFpbmVyIHN0YXR1c2VzXCIsXG4gICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfQ29udGFpbmVyU3RhdHVzXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5Db250YWluZXJTdGF0dXNcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJob3N0SVBcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJJUCBhZGRyZXNzIG9mIHRoZSBob3N0IHRvIHdoaWNoIHRoZSBwb2QgaXMgYXNzaWduZWQ7IGVtcHR5IGlmIG5vdCB5ZXQgc2NoZWR1bGVkXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJtZXNzYWdlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiaHVtYW4gcmVhZGFibGUgbWVzc2FnZSBpbmRpY2F0aW5nIGRldGFpbHMgYWJvdXQgd2h5IHRoZSBwb2QgaXMgaW4gdGhpcyBjb25kaXRpb25cIlxuICAgICAgICB9LFxuICAgICAgICBcInBoYXNlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiY3VycmVudCBjb25kaXRpb24gb2YgdGhlIHBvZC5cIlxuICAgICAgICB9LFxuICAgICAgICBcInBvZElQXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSVAgYWRkcmVzcyBhbGxvY2F0ZWQgdG8gdGhlIHBvZDsgcm91dGFibGUgYXQgbGVhc3Qgd2l0aGluIHRoZSBjbHVzdGVyOyBlbXB0eSBpZiBub3QgeWV0IGFsbG9jYXRlZFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwic3RhcnRUaW1lXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUkZDIDMzMzkgZGF0ZSBhbmQgdGltZSBhdCB3aGljaCB0aGUgb2JqZWN0IHdhcyBhY2tub3dsZWRnZWQgYnkgdGhlIEt1YmVsZXQuICBUaGlzIGlzIGJlZm9yZSB0aGUgS3ViZWxldCBwdWxsZWQgdGhlIGNvbnRhaW5lciBpbWFnZShzKSBmb3IgdGhlIHBvZC5cIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuUG9kU3RhdHVzXCJcbiAgICB9LFxuICAgIFwia3ViZXJuZXRlc19Qb2RUZW1wbGF0ZVNwZWNcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfT2JqZWN0TWV0YVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLk9iamVjdE1ldGFcIlxuICAgICAgICB9LFxuICAgICAgICBcInNwZWNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19Qb2RTcGVjXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuUG9kU3BlY1wiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5Qb2RUZW1wbGF0ZVNwZWNcIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX1Byb2JlXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJleGVjXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfRXhlY0FjdGlvblwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkV4ZWNBY3Rpb25cIlxuICAgICAgICB9LFxuICAgICAgICBcImh0dHBHZXRcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19IVFRQR2V0QWN0aW9uXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuSFRUUEdldEFjdGlvblwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiaW5pdGlhbERlbGF5U2Vjb25kc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJudW1iZXIgb2Ygc2Vjb25kcyBhZnRlciB0aGUgY29udGFpbmVyIGhhcyBzdGFydGVkIGJlZm9yZSBsaXZlbmVzcyBwcm9iZXMgYXJlIGluaXRpYXRlZFwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJMb25nXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ0Y3BTb2NrZXRcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19UQ1BTb2NrZXRBY3Rpb25cIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5UQ1BTb2NrZXRBY3Rpb25cIlxuICAgICAgICB9LFxuICAgICAgICBcInRpbWVvdXRTZWNvbmRzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm51bWJlciBvZiBzZWNvbmRzIGFmdGVyIHdoaWNoIGxpdmVuZXNzIHByb2JlcyB0aW1lb3V0OyBkZWZhdWx0cyB0byAxIHNlY29uZFwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJMb25nXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLlByb2JlXCJcbiAgICB9LFxuICAgIFwia3ViZXJuZXRlc19SQkRWb2x1bWVTb3VyY2VcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImZzVHlwZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImZpbGUgc3lzdGVtIHR5cGUgdG8gbW91bnRcIlxuICAgICAgICB9LFxuICAgICAgICBcImltYWdlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwicmFkb3MgaW1hZ2UgbmFtZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwia2V5cmluZ1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImtleXJpbmcgaXMgdGhlIHBhdGggdG8ga2V5IHJpbmcgZm9yIHJhZG9zIHVzZXI7IGRlZmF1bHQgaXMgL2V0Yy9jZXBoL2tleXJpbmc7IG9wdGlvbmFsXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJtb25pdG9yc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiYSBjb2xsZWN0aW9uIG9mIENlcGggbW9uaXRvcnNcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImEgY29sbGVjdGlvbiBvZiBDZXBoIG1vbml0b3JzXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwicG9vbFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInJhZG9zIHBvb2wgbmFtZTsgZGVmYXVsdCBpcyByYmQ7IG9wdGlvbmFsXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJyZWFkT25seVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJyYmQgdm9sdW1lIHRvIGJlIG1vdW50ZWQgd2l0aCByZWFkLW9ubHkgcGVybWlzc2lvbnNcIlxuICAgICAgICB9LFxuICAgICAgICBcInNlY3JldFJlZlwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX0xvY2FsT2JqZWN0UmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuTG9jYWxPYmplY3RSZWZlcmVuY2VcIlxuICAgICAgICB9LFxuICAgICAgICBcInVzZXJcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJyYWRvcyB1c2VyIG5hbWU7IGRlZmF1bHQgaXMgYWRtaW47IG9wdGlvbmFsXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLlJCRFZvbHVtZVNvdXJjZVwiXG4gICAgfSxcbiAgICBcImt1YmVybmV0ZXNfUmVwbGljYXRpb25Db250cm9sbGVyXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJhcGlWZXJzaW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IFwidjFcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWUsXG4gICAgICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgICAgIFwidjFcIlxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJraW5kXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IFwiUmVwbGljYXRpb25Db250cm9sbGVyXCIsXG4gICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19PYmplY3RNZXRhXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuT2JqZWN0TWV0YVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwic3BlY1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX1JlcGxpY2F0aW9uQ29udHJvbGxlclNwZWNcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5SZXBsaWNhdGlvbkNvbnRyb2xsZXJTcGVjXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzdGF0dXNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19SZXBsaWNhdGlvbkNvbnRyb2xsZXJTdGF0dXNcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5SZXBsaWNhdGlvbkNvbnRyb2xsZXJTdGF0dXNcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuUmVwbGljYXRpb25Db250cm9sbGVyXCIsXG4gICAgICBcImphdmFJbnRlcmZhY2VzXCI6IFtcbiAgICAgICAgXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkhhc01ldGFkYXRhXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIFwia3ViZXJuZXRlc19SZXBsaWNhdGlvbkNvbnRyb2xsZXJMaXN0XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJhcGlWZXJzaW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IFwidjFcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWUsXG4gICAgICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgICAgIFwidjFcIlxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibGlzdCBvZiByZXBsaWNhdGlvbiBjb250cm9sbGVyc1wiLFxuICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX1JlcGxpY2F0aW9uQ29udHJvbGxlclwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuUmVwbGljYXRpb25Db250cm9sbGVyXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwia2luZFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiBcIlJlcGxpY2F0aW9uQ29udHJvbGxlckxpc3RcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX0xpc3RNZXRhXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuTGlzdE1ldGFcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuUmVwbGljYXRpb25Db250cm9sbGVyTGlzdFwiLFxuICAgICAgXCJqYXZhSW50ZXJmYWNlc1wiOiBbXG4gICAgICAgIFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5LdWJlcm5ldGVzUmVzb3VyY2VcIlxuICAgICAgXVxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX1JlcGxpY2F0aW9uQ29udHJvbGxlclNwZWNcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcInJlcGxpY2FzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm51bWJlciBvZiByZXBsaWNhcyBkZXNpcmVkOyBkZWZhdWx0cyB0byAxXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzZWxlY3RvclwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImxhYmVsIGtleXMgYW5kIHZhbHVlcyB0aGF0IG11c3QgbWF0Y2ggaW4gb3JkZXIgdG8gYmUgY29udHJvbGxlZCBieSB0aGlzIHJlcGxpY2F0aW9uIGNvbnRyb2xsZXJcIixcbiAgICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImxhYmVsIGtleXMgYW5kIHZhbHVlcyB0aGF0IG11c3QgbWF0Y2ggaW4gb3JkZXIgdG8gYmUgY29udHJvbGxlZCBieSB0aGlzIHJlcGxpY2F0aW9uIGNvbnRyb2xsZXJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImphdmEudXRpbC5NYXBcXHUwMDNjU3RyaW5nLFN0cmluZ1xcdTAwM2VcIlxuICAgICAgICB9LFxuICAgICAgICBcInRlbXBsYXRlXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfUG9kVGVtcGxhdGVTcGVjXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuUG9kVGVtcGxhdGVTcGVjXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVJlZlwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX09iamVjdFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLk9iamVjdFJlZmVyZW5jZVwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5SZXBsaWNhdGlvbkNvbnRyb2xsZXJTcGVjXCJcbiAgICB9LFxuICAgIFwia3ViZXJuZXRlc19SZXBsaWNhdGlvbkNvbnRyb2xsZXJTdGF0dXNcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcInJlcGxpY2FzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm1vc3QgcmVjZW50bHkgb2JlcnZlZCBudW1iZXIgb2YgcmVwbGljYXNcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuUmVwbGljYXRpb25Db250cm9sbGVyU3RhdHVzXCJcbiAgICB9LFxuICAgIFwia3ViZXJuZXRlc19SZXNvdXJjZVJlcXVpcmVtZW50c1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwibGltaXRzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiTWF4aW11bSBhbW91bnQgb2YgY29tcHV0ZSByZXNvdXJjZXMgYWxsb3dlZFwiLFxuICAgICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX3Jlc291cmNlX1F1YW50aXR5XCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5yZXNvdXJjZS5RdWFudGl0eVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiamF2YS51dGlsLk1hcFxcdTAwM2NTdHJpbmcsaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5yZXNvdXJjZS5RdWFudGl0eVxcdTAwM2VcIlxuICAgICAgICB9LFxuICAgICAgICBcInJlcXVlc3RzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiTWluaW11bSBhbW91bnQgb2YgcmVzb3VyY2VzIHJlcXVlc3RlZDsgcmVxdWVzdHMgYXJlIGhvbm9yZWQgb25seSBmb3IgcGVyc2lzdGVudCB2b2x1bWVzIGFzIG9mIG5vd1wiLFxuICAgICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX3Jlc291cmNlX1F1YW50aXR5XCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5yZXNvdXJjZS5RdWFudGl0eVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiamF2YS51dGlsLk1hcFxcdTAwM2NTdHJpbmcsaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5yZXNvdXJjZS5RdWFudGl0eVxcdTAwM2VcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuUmVzb3VyY2VSZXF1aXJlbWVudHNcIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX1NFTGludXhPcHRpb25zXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJsZXZlbFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInRoZSBsZXZlbCBsYWJlbCB0byBhcHBseSB0byB0aGUgY29udGFpbmVyXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJyb2xlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwidGhlIHJvbGUgbGFiZWwgdG8gYXBwbHkgdG8gdGhlIGNvbnRhaW5lclwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInRoZSB0eXBlIGxhYmVsIHRvIGFwcGx5IHRvIHRoZSBjb250YWluZXJcIlxuICAgICAgICB9LFxuICAgICAgICBcInVzZXJcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJ0aGUgdXNlciBsYWJlbCB0byBhcHBseSB0byB0aGUgY29udGFpbmVyXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLlNFTGludXhPcHRpb25zXCJcbiAgICB9LFxuICAgIFwia3ViZXJuZXRlc19TZWNyZXRcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImFwaVZlcnNpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MVwiLFxuICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZSxcbiAgICAgICAgICBcImVudW1cIjogW1xuICAgICAgICAgICAgXCJ2MVwiXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBcImRhdGFcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJkYXRhIGNvbnRhaW5zIHRoZSBzZWNyZXQgZGF0YS4gIEVhY2gga2V5IG11c3QgYmUgYSB2YWxpZCBETlNfU1VCRE9NQUlOIG9yIGxlYWRpbmcgZG90IGZvbGxvd2VkIGJ5IHZhbGlkIEROU19TVUJET01BSU4uICBFYWNoIHZhbHVlIG11c3QgYmUgYSBiYXNlNjQgZW5jb2RlZCBzdHJpbmcgYXMgZGVzY3JpYmVkIGluIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM0NjQ4I3NlY3Rpb24tNFwiLFxuICAgICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiZGF0YSBjb250YWlucyB0aGUgc2VjcmV0IGRhdGEuICBFYWNoIGtleSBtdXN0IGJlIGEgdmFsaWQgRE5TX1NVQkRPTUFJTiBvciBsZWFkaW5nIGRvdCBmb2xsb3dlZCBieSB2YWxpZCBETlNfU1VCRE9NQUlOLiAgRWFjaCB2YWx1ZSBtdXN0IGJlIGEgYmFzZTY0IGVuY29kZWQgc3RyaW5nIGFzIGRlc2NyaWJlZCBpbiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNDY0OCNzZWN0aW9uLTRcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImphdmEudXRpbC5NYXBcXHUwMDNjU3RyaW5nLFN0cmluZ1xcdTAwM2VcIlxuICAgICAgICB9LFxuICAgICAgICBcImtpbmRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogXCJTZWNyZXRcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX09iamVjdE1ldGFcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5PYmplY3RNZXRhXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwidHlwZSBmYWNpbGl0YXRlcyBwcm9ncmFtbWF0aWMgaGFuZGxpbmcgb2Ygc2VjcmV0IGRhdGFcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuU2VjcmV0XCIsXG4gICAgICBcImphdmFJbnRlcmZhY2VzXCI6IFtcbiAgICAgICAgXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkhhc01ldGFkYXRhXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIFwia3ViZXJuZXRlc19TZWNyZXRMaXN0XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJhcGlWZXJzaW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IFwidjFcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWUsXG4gICAgICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgICAgIFwidjFcIlxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiaXRlbXMgaXMgYSBsaXN0IG9mIHNlY3JldCBvYmplY3RzXCIsXG4gICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfU2VjcmV0XCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5TZWNyZXRcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJraW5kXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IFwiU2VjcmV0TGlzdFwiLFxuICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfTGlzdE1ldGFcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5MaXN0TWV0YVwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5TZWNyZXRMaXN0XCIsXG4gICAgICBcImphdmFJbnRlcmZhY2VzXCI6IFtcbiAgICAgICAgXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkt1YmVybmV0ZXNSZXNvdXJjZVwiXG4gICAgICBdXG4gICAgfSxcbiAgICBcImt1YmVybmV0ZXNfU2VjcmV0Vm9sdW1lU291cmNlXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJzZWNyZXROYW1lXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwic2VjcmV0TmFtZSBpcyB0aGUgbmFtZSBvZiBhIHNlY3JldCBpbiB0aGUgcG9kJ3MgbmFtZXNwYWNlXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLlNlY3JldFZvbHVtZVNvdXJjZVwiXG4gICAgfSxcbiAgICBcImt1YmVybmV0ZXNfU2VjdXJpdHlDb250ZXh0XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJjYXBhYmlsaXRpZXNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19DYXBhYmlsaXRpZXNcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5DYXBhYmlsaXRpZXNcIlxuICAgICAgICB9LFxuICAgICAgICBcInByaXZpbGVnZWRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwicnVuIHRoZSBjb250YWluZXIgaW4gcHJpdmlsZWdlZCBtb2RlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJydW5Bc1VzZXJcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwidGhlIHVzZXIgaWQgdGhhdCBydW5zIHRoZSBmaXJzdCBwcm9jZXNzIGluIHRoZSBjb250YWluZXJcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiTG9uZ1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwic2VMaW51eE9wdGlvbnNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19TRUxpbnV4T3B0aW9uc1wiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLlNFTGludXhPcHRpb25zXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLlNlY3VyaXR5Q29udGV4dFwiXG4gICAgfSxcbiAgICBcImt1YmVybmV0ZXNfU2VydmljZVwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiYXBpVmVyc2lvblwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiBcInYxXCIsXG4gICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlLFxuICAgICAgICAgIFwiZW51bVwiOiBbXG4gICAgICAgICAgICBcInYxXCJcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIFwia2luZFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiBcIlNlcnZpY2VcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX09iamVjdE1ldGFcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5PYmplY3RNZXRhXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzcGVjXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfU2VydmljZVNwZWNcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5TZXJ2aWNlU3BlY1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwic3RhdHVzXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfU2VydmljZVN0YXR1c1wiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLlNlcnZpY2VTdGF0dXNcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuU2VydmljZVwiLFxuICAgICAgXCJqYXZhSW50ZXJmYWNlc1wiOiBbXG4gICAgICAgIFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5IYXNNZXRhZGF0YVwiXG4gICAgICBdXG4gICAgfSxcbiAgICBcImt1YmVybmV0ZXNfU2VydmljZUFjY291bnRcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImFwaVZlcnNpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MVwiLFxuICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZSxcbiAgICAgICAgICBcImVudW1cIjogW1xuICAgICAgICAgICAgXCJ2MVwiXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBcImtpbmRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogXCJTZXJ2aWNlQWNjb3VudFwiLFxuICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfT2JqZWN0TWV0YVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLk9iamVjdE1ldGFcIlxuICAgICAgICB9LFxuICAgICAgICBcInNlY3JldHNcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImxpc3Qgb2Ygc2VjcmV0cyB0aGF0IGNhbiBiZSB1c2VkIGJ5IHBvZHMgcnVubmluZyBhcyB0aGlzIHNlcnZpY2UgYWNjb3VudFwiLFxuICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX09iamVjdFJlZmVyZW5jZVwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuT2JqZWN0UmVmZXJlbmNlXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5TZXJ2aWNlQWNjb3VudFwiLFxuICAgICAgXCJqYXZhSW50ZXJmYWNlc1wiOiBbXG4gICAgICAgIFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5IYXNNZXRhZGF0YVwiXG4gICAgICBdXG4gICAgfSxcbiAgICBcImt1YmVybmV0ZXNfU2VydmljZUFjY291bnRMaXN0XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJhcGlWZXJzaW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IFwidjFcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWUsXG4gICAgICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgICAgIFwidjFcIlxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibGlzdCBvZiBTZXJ2aWNlQWNjb3VudHNcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19TZXJ2aWNlQWNjb3VudFwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuU2VydmljZUFjY291bnRcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJraW5kXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IFwiU2VydmljZUFjY291bnRMaXN0XCIsXG4gICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19MaXN0TWV0YVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkxpc3RNZXRhXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLlNlcnZpY2VBY2NvdW50TGlzdFwiLFxuICAgICAgXCJqYXZhSW50ZXJmYWNlc1wiOiBbXG4gICAgICAgIFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5LdWJlcm5ldGVzUmVzb3VyY2VcIlxuICAgICAgXVxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX1NlcnZpY2VMaXN0XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJhcGlWZXJzaW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IFwidjFcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWUsXG4gICAgICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgICAgIFwidjFcIlxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibGlzdCBvZiBzZXJ2aWNlc1wiLFxuICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX1NlcnZpY2VcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLlNlcnZpY2VcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJraW5kXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IFwiU2VydmljZUxpc3RcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX0xpc3RNZXRhXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuTGlzdE1ldGFcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuU2VydmljZUxpc3RcIixcbiAgICAgIFwiamF2YUludGVyZmFjZXNcIjogW1xuICAgICAgICBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuS3ViZXJuZXRlc1Jlc291cmNlXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIFwia3ViZXJuZXRlc19TZXJ2aWNlUG9ydFwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwibmFtZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInRoZSBuYW1lIG9mIHRoaXMgcG9ydDsgb3B0aW9uYWwgaWYgb25seSBvbmUgcG9ydCBpcyBkZWZpbmVkXCIsXG4gICAgICAgICAgXCJtYXhMZW5ndGhcIjogNjMsXG4gICAgICAgICAgXCJwYXR0ZXJuXCI6IFwiXlthLXowLTldKFstYS16MC05XSpbYS16MC05XSk/JFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibm9kZVBvcnRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwidGhlIHBvcnQgb24gZWFjaCBub2RlIG9uIHdoaWNoIHRoaXMgc2VydmljZSBpcyBleHBvc2VkXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwb3J0XCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInRoZSBwb3J0IG51bWJlciB0aGF0IGlzIGV4cG9zZWRcIlxuICAgICAgICB9LFxuICAgICAgICBcInByb3RvY29sXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwidGhlIHByb3RvY29sIHVzZWQgYnkgdGhpcyBwb3J0OyBtdXN0IGJlIFVEUCBvciBUQ1A7IFRDUCBpZiB1bnNwZWNpZmllZFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidGFyZ2V0UG9ydFwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX3V0aWxfSW50T3JTdHJpbmdcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC51dGlsLkludE9yU3RyaW5nXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLlNlcnZpY2VQb3J0XCJcbiAgICB9LFxuICAgIFwia3ViZXJuZXRlc19TZXJ2aWNlU3BlY1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiZGVwcmVjYXRlZFB1YmxpY0lQc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiZGVwcmVjYXRlZC4gZXh0ZXJuYWxseSB2aXNpYmxlIElQcyAoZS5nLiBsb2FkIGJhbGFuY2VycykgdGhhdCBzaG91bGQgYmUgcHJveGllZCB0byB0aGlzIHNlcnZpY2VcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImRlcHJlY2F0ZWQuIGV4dGVybmFsbHkgdmlzaWJsZSBJUHMgKGUuZy4gbG9hZCBiYWxhbmNlcnMpIHRoYXQgc2hvdWxkIGJlIHByb3hpZWQgdG8gdGhpcyBzZXJ2aWNlXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwicG9ydGFsSVBcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIlxuICAgICAgICB9LFxuICAgICAgICBcInBvcnRzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJwb3J0cyBleHBvc2VkIGJ5IHRoZSBzZXJ2aWNlXCIsXG4gICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfU2VydmljZVBvcnRcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLlNlcnZpY2VQb3J0XCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwic2VsZWN0b3JcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJsYWJlbCBrZXlzIGFuZCB2YWx1ZXMgdGhhdCBtdXN0IG1hdGNoIGluIG9yZGVyIHRvIHJlY2VpdmUgdHJhZmZpYyBmb3IgdGhpcyBzZXJ2aWNlOyBpZiBlbXB0eVwiLFxuICAgICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibGFiZWwga2V5cyBhbmQgdmFsdWVzIHRoYXQgbXVzdCBtYXRjaCBpbiBvcmRlciB0byByZWNlaXZlIHRyYWZmaWMgZm9yIHRoaXMgc2VydmljZTsgaWYgZW1wdHlcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImphdmEudXRpbC5NYXBcXHUwMDNjU3RyaW5nLFN0cmluZ1xcdTAwM2VcIlxuICAgICAgICB9LFxuICAgICAgICBcInNlc3Npb25BZmZpbml0eVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImVuYWJsZSBjbGllbnQgSVAgYmFzZWQgc2Vzc2lvbiBhZmZpbml0eTsgbXVzdCBiZSBDbGllbnRJUCBvciBOb25lOyBkZWZhdWx0cyB0byBOb25lXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwidHlwZSBvZiB0aGlzIHNlcnZpY2U7IG11c3QgYmUgQ2x1c3RlcklQXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLlNlcnZpY2VTcGVjXCJcbiAgICB9LFxuICAgIFwia3ViZXJuZXRlc19TZXJ2aWNlU3RhdHVzXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJsb2FkQmFsYW5jZXJcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19Mb2FkQmFsYW5jZXJTdGF0dXNcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5Mb2FkQmFsYW5jZXJTdGF0dXNcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuU2VydmljZVN0YXR1c1wiXG4gICAgfSxcbiAgICBcImt1YmVybmV0ZXNfVENQU29ja2V0QWN0aW9uXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJwb3J0XCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfdXRpbF9JbnRPclN0cmluZ1wiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnV0aWwuSW50T3JTdHJpbmdcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuVENQU29ja2V0QWN0aW9uXCJcbiAgICB9LFxuICAgIFwia3ViZXJuZXRlc19UeXBlTWV0YVwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiYXBpVmVyc2lvblwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInZlcnNpb24gb2YgdGhlIHNjaGVtYSB0aGUgb2JqZWN0IHNob3VsZCBoYXZlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJraW5kXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwia2luZCBvZiBvYmplY3RcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuVHlwZU1ldGFcIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX1ZvbHVtZVwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiYXdzRWxhc3RpY0Jsb2NrU3RvcmVcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19BV1NFbGFzdGljQmxvY2tTdG9yZVZvbHVtZVNvdXJjZVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkFXU0VsYXN0aWNCbG9ja1N0b3JlVm9sdW1lU291cmNlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJlbXB0eURpclwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX0VtcHR5RGlyVm9sdW1lU291cmNlXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuRW1wdHlEaXJWb2x1bWVTb3VyY2VcIlxuICAgICAgICB9LFxuICAgICAgICBcImdjZVBlcnNpc3RlbnREaXNrXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfR0NFUGVyc2lzdGVudERpc2tWb2x1bWVTb3VyY2VcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5HQ0VQZXJzaXN0ZW50RGlza1ZvbHVtZVNvdXJjZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZ2l0UmVwb1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX0dpdFJlcG9Wb2x1bWVTb3VyY2VcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5HaXRSZXBvVm9sdW1lU291cmNlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJnbHVzdGVyZnNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19HbHVzdGVyZnNWb2x1bWVTb3VyY2VcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5HbHVzdGVyZnNWb2x1bWVTb3VyY2VcIlxuICAgICAgICB9LFxuICAgICAgICBcImhvc3RQYXRoXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfSG9zdFBhdGhWb2x1bWVTb3VyY2VcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5Ib3N0UGF0aFZvbHVtZVNvdXJjZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiaXNjc2lcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19JU0NTSVZvbHVtZVNvdXJjZVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLklTQ1NJVm9sdW1lU291cmNlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJuYW1lXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwidm9sdW1lIG5hbWU7IG11c3QgYmUgYSBETlNfTEFCRUwgYW5kIHVuaXF1ZSB3aXRoaW4gdGhlIHBvZFwiLFxuICAgICAgICAgIFwibWF4TGVuZ3RoXCI6IDYzLFxuICAgICAgICAgIFwicGF0dGVyblwiOiBcIl5bYS16MC05XShbLWEtejAtOV0qW2EtejAtOV0pPyRcIlxuICAgICAgICB9LFxuICAgICAgICBcIm5mc1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX05GU1ZvbHVtZVNvdXJjZVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLk5GU1ZvbHVtZVNvdXJjZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicGVyc2lzdGVudFZvbHVtZUNsYWltXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfUGVyc2lzdGVudFZvbHVtZUNsYWltVm9sdW1lU291cmNlXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuUGVyc2lzdGVudFZvbHVtZUNsYWltVm9sdW1lU291cmNlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJyYmRcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19SQkRWb2x1bWVTb3VyY2VcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5SQkRWb2x1bWVTb3VyY2VcIlxuICAgICAgICB9LFxuICAgICAgICBcInNlY3JldFwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX1NlY3JldFZvbHVtZVNvdXJjZVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLlNlY3JldFZvbHVtZVNvdXJjZVwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5Wb2x1bWVcIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX1ZvbHVtZU1vdW50XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJtb3VudFBhdGhcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJwYXRoIHdpdGhpbiB0aGUgY29udGFpbmVyIGF0IHdoaWNoIHRoZSB2b2x1bWUgc2hvdWxkIGJlIG1vdW50ZWRcIlxuICAgICAgICB9LFxuICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJuYW1lIG9mIHRoZSB2b2x1bWUgdG8gbW91bnRcIlxuICAgICAgICB9LFxuICAgICAgICBcInJlYWRPbmx5XCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm1vdW50ZWQgcmVhZC1vbmx5IGlmIHRydWVcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuVm9sdW1lTW91bnRcIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX1ZvbHVtZVNvdXJjZVwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiYXdzRWxhc3RpY0Jsb2NrU3RvcmVcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19BV1NFbGFzdGljQmxvY2tTdG9yZVZvbHVtZVNvdXJjZVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkFXU0VsYXN0aWNCbG9ja1N0b3JlVm9sdW1lU291cmNlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJlbXB0eURpclwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX0VtcHR5RGlyVm9sdW1lU291cmNlXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuRW1wdHlEaXJWb2x1bWVTb3VyY2VcIlxuICAgICAgICB9LFxuICAgICAgICBcImdjZVBlcnNpc3RlbnREaXNrXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfR0NFUGVyc2lzdGVudERpc2tWb2x1bWVTb3VyY2VcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5HQ0VQZXJzaXN0ZW50RGlza1ZvbHVtZVNvdXJjZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZ2l0UmVwb1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX0dpdFJlcG9Wb2x1bWVTb3VyY2VcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5HaXRSZXBvVm9sdW1lU291cmNlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJnbHVzdGVyZnNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19HbHVzdGVyZnNWb2x1bWVTb3VyY2VcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5HbHVzdGVyZnNWb2x1bWVTb3VyY2VcIlxuICAgICAgICB9LFxuICAgICAgICBcImhvc3RQYXRoXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfSG9zdFBhdGhWb2x1bWVTb3VyY2VcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5Ib3N0UGF0aFZvbHVtZVNvdXJjZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiaXNjc2lcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19JU0NTSVZvbHVtZVNvdXJjZVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLklTQ1NJVm9sdW1lU291cmNlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJuZnNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19ORlNWb2x1bWVTb3VyY2VcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5ORlNWb2x1bWVTb3VyY2VcIlxuICAgICAgICB9LFxuICAgICAgICBcInBlcnNpc3RlbnRWb2x1bWVDbGFpbVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX1BlcnNpc3RlbnRWb2x1bWVDbGFpbVZvbHVtZVNvdXJjZVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLlBlcnNpc3RlbnRWb2x1bWVDbGFpbVZvbHVtZVNvdXJjZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicmJkXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfUkJEVm9sdW1lU291cmNlXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuUkJEVm9sdW1lU291cmNlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzZWNyZXRcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19TZWNyZXRWb2x1bWVTb3VyY2VcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5TZWNyZXRWb2x1bWVTb3VyY2VcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuVm9sdW1lU291cmNlXCJcbiAgICB9LFxuICAgIFwia3ViZXJuZXRlc19iYXNlX0xpc3RNZXRhXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJyZXNvdXJjZVZlcnNpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIlxuICAgICAgICB9LFxuICAgICAgICBcInNlbGZMaW5rXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmJhc2UuTGlzdE1ldGFcIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX2Jhc2VfU3RhdHVzXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJhcGlWZXJzaW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IFwidjFcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWUsXG4gICAgICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgICAgIFwidjFcIlxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJjb2RlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZGV0YWlsc1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX2Jhc2VfU3RhdHVzRGV0YWlsc1wiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmJhc2UuU3RhdHVzRGV0YWlsc1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwia2luZFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiBcIlN0YXR1c1wiLFxuICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBcIm1lc3NhZ2VcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIlxuICAgICAgICB9LFxuICAgICAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfYmFzZV9MaXN0TWV0YVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmJhc2UuTGlzdE1ldGFcIlxuICAgICAgICB9LFxuICAgICAgICBcInJlYXNvblwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwic3RhdHVzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmJhc2UuU3RhdHVzXCJcbiAgICB9LFxuICAgIFwia3ViZXJuZXRlc19iYXNlX1N0YXR1c0NhdXNlXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJmaWVsZFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibWVzc2FnZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicmVhc29uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmJhc2UuU3RhdHVzQ2F1c2VcIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX2Jhc2VfU3RhdHVzRGV0YWlsc1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiY2F1c2VzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19iYXNlX1N0YXR1c0NhdXNlXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5iYXNlLlN0YXR1c0NhdXNlXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiaWRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIlxuICAgICAgICB9LFxuICAgICAgICBcImtpbmRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIlxuICAgICAgICB9LFxuICAgICAgICBcInJldHJ5QWZ0ZXJTZWNvbmRzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5iYXNlLlN0YXR1c0RldGFpbHNcIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX2Jhc2VfVHlwZU1ldGFcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImFwaVZlcnNpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIlxuICAgICAgICB9LFxuICAgICAgICBcImtpbmRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuYmFzZS5UeXBlTWV0YVwiXG4gICAgfSxcbiAgICBcImt1YmVybmV0ZXNfY29uZmlnX0F1dGhJbmZvXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJjbGllbnQtY2VydGlmaWNhdGVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIlxuICAgICAgICB9LFxuICAgICAgICBcImNsaWVudC1jZXJ0aWZpY2F0ZS1kYXRhXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJjbGllbnQta2V5XCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJjbGllbnQta2V5LWRhdGFcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIlxuICAgICAgICB9LFxuICAgICAgICBcImV4dGVuc2lvbnNcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX2NvbmZpZ19OYW1lZEV4dGVuc2lvblwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuY29uZmlnLk5hbWVkRXh0ZW5zaW9uXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwicGFzc3dvcmRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIlxuICAgICAgICB9LFxuICAgICAgICBcInRva2VuXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ1c2VybmFtZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5jb25maWcuQXV0aEluZm9cIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX2NvbmZpZ19DbHVzdGVyXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJhcGktdmVyc2lvblwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiY2VydGlmaWNhdGUtYXV0aG9yaXR5XCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJjZXJ0aWZpY2F0ZS1hdXRob3JpdHktZGF0YVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZXh0ZW5zaW9uc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfY29uZmlnX05hbWVkRXh0ZW5zaW9uXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5jb25maWcuTmFtZWRFeHRlbnNpb25cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJpbnNlY3VyZS1za2lwLXRscy12ZXJpZnlcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzZXJ2ZXJcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuY29uZmlnLkNsdXN0ZXJcIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX2NvbmZpZ19Db25maWdcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImFwaVZlcnNpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIlxuICAgICAgICB9LFxuICAgICAgICBcImNsdXN0ZXJzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19jb25maWdfTmFtZWRDbHVzdGVyXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5jb25maWcuTmFtZWRDbHVzdGVyXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiY29udGV4dHNcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX2NvbmZpZ19OYW1lZENvbnRleHRcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmNvbmZpZy5OYW1lZENvbnRleHRcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJjdXJyZW50LWNvbnRleHRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIlxuICAgICAgICB9LFxuICAgICAgICBcImV4dGVuc2lvbnNcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX2NvbmZpZ19OYW1lZEV4dGVuc2lvblwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuY29uZmlnLk5hbWVkRXh0ZW5zaW9uXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwia2luZFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicHJlZmVyZW5jZXNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19jb25maWdfUHJlZmVyZW5jZXNcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5jb25maWcuUHJlZmVyZW5jZXNcIlxuICAgICAgICB9LFxuICAgICAgICBcInVzZXJzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19jb25maWdfTmFtZWRBdXRoSW5mb1wiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuY29uZmlnLk5hbWVkQXV0aEluZm9cIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmNvbmZpZy5Db25maWdcIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX2NvbmZpZ19Db250ZXh0XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJjbHVzdGVyXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJleHRlbnNpb25zXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19jb25maWdfTmFtZWRFeHRlbnNpb25cIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmNvbmZpZy5OYW1lZEV4dGVuc2lvblwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIm5hbWVzcGFjZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidXNlclwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5jb25maWcuQ29udGV4dFwiXG4gICAgfSxcbiAgICBcImt1YmVybmV0ZXNfY29uZmlnX05hbWVkQXV0aEluZm9cIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIlxuICAgICAgICB9LFxuICAgICAgICBcInVzZXJcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19jb25maWdfQXV0aEluZm9cIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5jb25maWcuQXV0aEluZm9cIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuY29uZmlnLk5hbWVkQXV0aEluZm9cIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX2NvbmZpZ19OYW1lZENsdXN0ZXJcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImNsdXN0ZXJcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19jb25maWdfQ2x1c3RlclwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmNvbmZpZy5DbHVzdGVyXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJuYW1lXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmNvbmZpZy5OYW1lZENsdXN0ZXJcIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX2NvbmZpZ19OYW1lZENvbnRleHRcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImNvbnRleHRcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19jb25maWdfQ29udGV4dFwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmNvbmZpZy5Db250ZXh0XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJuYW1lXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmNvbmZpZy5OYW1lZENvbnRleHRcIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX2NvbmZpZ19OYW1lZEV4dGVuc2lvblwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiZXh0ZW5zaW9uXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfcnVudGltZV9SYXdFeHRlbnNpb25cIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5IYXNNZXRhZGF0YVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibmFtZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5jb25maWcuTmFtZWRFeHRlbnNpb25cIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX2NvbmZpZ19QcmVmZXJlbmNlc1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiY29sb3JzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZXh0ZW5zaW9uc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfY29uZmlnX05hbWVkRXh0ZW5zaW9uXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5jb25maWcuTmFtZWRFeHRlbnNpb25cIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmNvbmZpZy5QcmVmZXJlbmNlc1wiXG4gICAgfSxcbiAgICBcImt1YmVybmV0ZXNfZXJyb3JzX1N0YXR1c0Vycm9yXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJFcnJTdGF0dXNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19iYXNlX1N0YXR1c1wiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmJhc2UuU3RhdHVzXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmVycm9ycy5TdGF0dXNFcnJvclwiXG4gICAgfSxcbiAgICBcImt1YmVybmV0ZXNfcmVzb3VyY2VfUXVhbnRpdHlcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcIkFtb3VudFwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9zcGV0ZXJfaW5mX0RlY1wiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5jbGllbnQudXRpbC5EZWNcIlxuICAgICAgICB9LFxuICAgICAgICBcIkZvcm1hdFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5yZXNvdXJjZS5RdWFudGl0eVwiXG4gICAgfSxcbiAgICBcImt1YmVybmV0ZXNfcnVudGltZV9SYXdFeHRlbnNpb25cIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcIlJhd0pTT05cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuSGFzTWV0YWRhdGFcIlxuICAgIH0sXG4gICAgXCJrdWJlcm5ldGVzX3V0aWxfSW50T3JTdHJpbmdcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcIkludFZhbFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIlxuICAgICAgICB9LFxuICAgICAgICBcIktpbmRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJTdHJWYWxcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudXRpbC5JbnRPclN0cmluZ1wiXG4gICAgfSxcbiAgICBcImt1YmVybmV0ZXNfd2F0Y2hfV2F0Y2hFdmVudFwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwib2JqZWN0XCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfcnVudGltZV9SYXdFeHRlbnNpb25cIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5IYXNNZXRhZGF0YVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInRoZSB0eXBlIG9mIHdhdGNoIGV2ZW50OyBtYXkgYmUgQURERURcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkud2F0Y2guV2F0Y2hFdmVudFwiXG4gICAgfSxcbiAgICBcIm9zX2J1aWxkX0J1aWxkXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJhcGlWZXJzaW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IFwidjFcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWUsXG4gICAgICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgICAgIFwidjFcIlxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJraW5kXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IFwiQnVpbGRcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX09iamVjdE1ldGFcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5PYmplY3RNZXRhXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzcGVjXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2J1aWxkX0J1aWxkU3BlY1wiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuQnVpbGRTcGVjXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzdGF0dXNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3NfYnVpbGRfQnVpbGRTdGF0dXNcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLkJ1aWxkU3RhdHVzXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuQnVpbGRcIixcbiAgICAgIFwiamF2YUludGVyZmFjZXNcIjogW1xuICAgICAgICBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuSGFzTWV0YWRhdGFcIlxuICAgICAgXVxuICAgIH0sXG4gICAgXCJvc19idWlsZF9CdWlsZENvbmZpZ1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiYXBpVmVyc2lvblwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiBcInYxXCIsXG4gICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlLFxuICAgICAgICAgIFwiZW51bVwiOiBbXG4gICAgICAgICAgICBcInYxXCJcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIFwia2luZFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiBcIkJ1aWxkQ29uZmlnXCIsXG4gICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19PYmplY3RNZXRhXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuT2JqZWN0TWV0YVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwic3BlY1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19idWlsZF9CdWlsZENvbmZpZ1NwZWNcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLkJ1aWxkQ29uZmlnU3BlY1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwic3RhdHVzXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2J1aWxkX0J1aWxkQ29uZmlnU3RhdHVzXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5CdWlsZENvbmZpZ1N0YXR1c1wiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLkJ1aWxkQ29uZmlnXCIsXG4gICAgICBcImphdmFJbnRlcmZhY2VzXCI6IFtcbiAgICAgICAgXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkhhc01ldGFkYXRhXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIFwib3NfYnVpbGRfQnVpbGRDb25maWdMaXN0XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJhcGlWZXJzaW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IFwidjFcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWUsXG4gICAgICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgICAgIFwidjFcIlxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibGlzdCBvZiBidWlsZCBjb25maWdzXCIsXG4gICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2J1aWxkX0J1aWxkQ29uZmlnXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLkJ1aWxkQ29uZmlnXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwia2luZFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiBcIkJ1aWxkQ29uZmlnTGlzdFwiLFxuICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfTGlzdE1ldGFcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5MaXN0TWV0YVwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLkJ1aWxkQ29uZmlnTGlzdFwiLFxuICAgICAgXCJqYXZhSW50ZXJmYWNlc1wiOiBbXG4gICAgICAgIFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5LdWJlcm5ldGVzUmVzb3VyY2VcIlxuICAgICAgXVxuICAgIH0sXG4gICAgXCJvc19idWlsZF9CdWlsZENvbmZpZ1NwZWNcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcIm91dHB1dFwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19idWlsZF9CdWlsZE91dHB1dFwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuQnVpbGRPdXRwdXRcIlxuICAgICAgICB9LFxuICAgICAgICBcInJlc291cmNlc1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX1Jlc291cmNlUmVxdWlyZW1lbnRzXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuUmVzb3VyY2VSZXF1aXJlbWVudHNcIlxuICAgICAgICB9LFxuICAgICAgICBcInJldmlzaW9uXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2J1aWxkX1NvdXJjZVJldmlzaW9uXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5Tb3VyY2VSZXZpc2lvblwiXG4gICAgICAgIH0sXG4gICAgICAgIFwic2VydmljZUFjY291bnRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJ0aGUgbmFtZSBvZiB0aGUgc2VydmljZSBhY2NvdW50IHRvIHVzZSB0byBydW4gcG9kcyBjcmVhdGVkIGJ5IHRoZSBidWlsZFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwic291cmNlXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2J1aWxkX0J1aWxkU291cmNlXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5CdWlsZFNvdXJjZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwic3RyYXRlZ3lcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3NfYnVpbGRfQnVpbGRTdHJhdGVneVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuQnVpbGRTdHJhdGVneVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidHJpZ2dlcnNcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImRldGVybWluZXMgaG93IG5ldyBidWlsZHMgY2FuIGJlIGxhdW5jaGVkIGZyb20gYSBidWlsZCBjb25maWcuICBpZiBubyB0cmlnZ2VycyBhcmUgZGVmaW5lZFwiLFxuICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19idWlsZF9CdWlsZFRyaWdnZXJQb2xpY3lcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuQnVpbGRUcmlnZ2VyUG9saWN5XCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLkJ1aWxkQ29uZmlnU3BlY1wiXG4gICAgfSxcbiAgICBcIm9zX2J1aWxkX0J1aWxkQ29uZmlnU3RhdHVzXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJsYXN0VmVyc2lvblwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJ1c2VkIHRvIGluZm9ybSBhYm91dCBudW1iZXIgb2YgbGFzdCB0cmlnZ2VyZWQgYnVpbGRcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5CdWlsZENvbmZpZ1N0YXR1c1wiXG4gICAgfSxcbiAgICBcIm9zX2J1aWxkX0J1aWxkTGlzdFwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiYXBpVmVyc2lvblwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiBcInYxXCIsXG4gICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlLFxuICAgICAgICAgIFwiZW51bVwiOiBbXG4gICAgICAgICAgICBcInYxXCJcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImxpc3Qgb2YgYnVpbGRzXCIsXG4gICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2J1aWxkX0J1aWxkXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLkJ1aWxkXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwia2luZFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiBcIkJ1aWxkTGlzdFwiLFxuICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfTGlzdE1ldGFcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5MaXN0TWV0YVwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLkJ1aWxkTGlzdFwiLFxuICAgICAgXCJqYXZhSW50ZXJmYWNlc1wiOiBbXG4gICAgICAgIFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5LdWJlcm5ldGVzUmVzb3VyY2VcIlxuICAgICAgXVxuICAgIH0sXG4gICAgXCJvc19idWlsZF9CdWlsZE91dHB1dFwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwicHVzaFNlY3JldFwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX0xvY2FsT2JqZWN0UmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuTG9jYWxPYmplY3RSZWZlcmVuY2VcIlxuICAgICAgICB9LFxuICAgICAgICBcInRvXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfT2JqZWN0UmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuT2JqZWN0UmVmZXJlbmNlXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuQnVpbGRPdXRwdXRcIlxuICAgIH0sXG4gICAgXCJvc19idWlsZF9CdWlsZFJlcXVlc3RcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImFwaVZlcnNpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MVwiLFxuICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZSxcbiAgICAgICAgICBcImVudW1cIjogW1xuICAgICAgICAgICAgXCJ2MVwiXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBcImtpbmRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogXCJCdWlsZFJlcXVlc3RcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX09iamVjdE1ldGFcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5PYmplY3RNZXRhXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJyZXZpc2lvblwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19idWlsZF9Tb3VyY2VSZXZpc2lvblwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuU291cmNlUmV2aXNpb25cIlxuICAgICAgICB9LFxuICAgICAgICBcInRyaWdnZXJlZEJ5SW1hZ2VcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19PYmplY3RSZWZlcmVuY2VcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5PYmplY3RSZWZlcmVuY2VcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5CdWlsZFJlcXVlc3RcIixcbiAgICAgIFwiamF2YUludGVyZmFjZXNcIjogW1xuICAgICAgICBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuSGFzTWV0YWRhdGFcIlxuICAgICAgXVxuICAgIH0sXG4gICAgXCJvc19idWlsZF9CdWlsZFNvdXJjZVwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiY29udGV4dERpclwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInNwZWNpZmllcyBzdWItZGlyZWN0b3J5IHdoZXJlIHRoZSBzb3VyY2UgY29kZSBmb3IgdGhlIGFwcGxpY2F0aW9uIGV4aXN0c1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZ2l0XCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2J1aWxkX0dpdEJ1aWxkU291cmNlXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5HaXRCdWlsZFNvdXJjZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwic291cmNlU2VjcmV0XCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfTG9jYWxPYmplY3RSZWZlcmVuY2VcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5Mb2NhbE9iamVjdFJlZmVyZW5jZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInR5cGUgb2Ygc291cmNlIGNvbnRyb2wgbWFuYWdlbWVudCBzeXN0ZW1cIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5CdWlsZFNvdXJjZVwiXG4gICAgfSxcbiAgICBcIm9zX2J1aWxkX0J1aWxkU3BlY1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwib3V0cHV0XCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2J1aWxkX0J1aWxkT3V0cHV0XCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5CdWlsZE91dHB1dFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicmVzb3VyY2VzXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfUmVzb3VyY2VSZXF1aXJlbWVudHNcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5SZXNvdXJjZVJlcXVpcmVtZW50c1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwicmV2aXNpb25cIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3NfYnVpbGRfU291cmNlUmV2aXNpb25cIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLlNvdXJjZVJldmlzaW9uXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzZXJ2aWNlQWNjb3VudFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInRoZSBuYW1lIG9mIHRoZSBzZXJ2aWNlIGFjY291bnQgdG8gdXNlIHRvIHJ1biBwb2RzIGNyZWF0ZWQgYnkgdGhlIGJ1aWxkXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzb3VyY2VcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3NfYnVpbGRfQnVpbGRTb3VyY2VcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLkJ1aWxkU291cmNlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzdHJhdGVneVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19idWlsZF9CdWlsZFN0cmF0ZWd5XCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5CdWlsZFN0cmF0ZWd5XCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuQnVpbGRTcGVjXCJcbiAgICB9LFxuICAgIFwib3NfYnVpbGRfQnVpbGRTdGF0dXNcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImNhbmNlbGxlZFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJkZXNjcmliZXMgaWYgYSBjYW5jZWxpbmcgZXZlbnQgd2FzIHRyaWdnZXJlZCBmb3IgdGhlIGJ1aWxkXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJjb21wbGV0aW9uVGltZXN0YW1wXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwic2VydmVyIHRpbWUgd2hlbiB0aGUgcG9kIHJ1bm5pbmcgdGhpcyBidWlsZCBzdG9wcGVkIHJ1bm5pbmdcIlxuICAgICAgICB9LFxuICAgICAgICBcImNvbmZpZ1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX09iamVjdFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLk9iamVjdFJlZmVyZW5jZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZHVyYXRpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiYW1vdW50IG9mIHRpbWUgdGhlIGJ1aWxkIGhhcyBiZWVuIHJ1bm5pbmdcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiTG9uZ1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwibWVzc2FnZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImh1bWFuLXJlYWRhYmxlIG1lc3NhZ2UgaW5kaWNhdGluZyBkZXRhaWxzIGFib3V0IHdoeSB0aGUgYnVpbGQgaGFzIHRoaXMgc3RhdHVzXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwaGFzZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm9ic2VydmVkIHBvaW50IGluIHRoZSBidWlsZCBsaWZlY3ljbGVcIlxuICAgICAgICB9LFxuICAgICAgICBcInN0YXJ0VGltZXN0YW1wXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwic2VydmVyIHRpbWUgd2hlbiB0aGlzIGJ1aWxkIHN0YXJ0ZWQgcnVubmluZyBpbiBhIHBvZFwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLkJ1aWxkU3RhdHVzXCJcbiAgICB9LFxuICAgIFwib3NfYnVpbGRfQnVpbGRTdHJhdGVneVwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiY3VzdG9tU3RyYXRlZ3lcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3NfYnVpbGRfQ3VzdG9tQnVpbGRTdHJhdGVneVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuQ3VzdG9tQnVpbGRTdHJhdGVneVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZG9ja2VyU3RyYXRlZ3lcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3NfYnVpbGRfRG9ja2VyQnVpbGRTdHJhdGVneVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuRG9ja2VyQnVpbGRTdHJhdGVneVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwic291cmNlU3RyYXRlZ3lcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3NfYnVpbGRfU291cmNlQnVpbGRTdHJhdGVneVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuU291cmNlQnVpbGRTdHJhdGVneVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImlkZW50aWZpZXMgdGhlIHR5cGUgb2YgYnVpbGQgc3RyYXRlZ3lcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5CdWlsZFN0cmF0ZWd5XCJcbiAgICB9LFxuICAgIFwib3NfYnVpbGRfQnVpbGRUcmlnZ2VyUG9saWN5XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJnZW5lcmljXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2J1aWxkX1dlYkhvb2tUcmlnZ2VyXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5XZWJIb29rVHJpZ2dlclwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZ2l0aHViXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2J1aWxkX1dlYkhvb2tUcmlnZ2VyXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5XZWJIb29rVHJpZ2dlclwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiaW1hZ2VDaGFuZ2VcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3NfYnVpbGRfSW1hZ2VDaGFuZ2VUcmlnZ2VyXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5JbWFnZUNoYW5nZVRyaWdnZXJcIlxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJ0eXBlIG9mIGJ1aWxkIHRyaWdnZXJcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5CdWlsZFRyaWdnZXJQb2xpY3lcIlxuICAgIH0sXG4gICAgXCJvc19idWlsZF9DdXN0b21CdWlsZFN0cmF0ZWd5XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJlbnZcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImFkZGl0aW9uYWwgZW52aXJvbm1lbnQgdmFyaWFibGVzIHlvdSB3YW50IHRvIHBhc3MgaW50byBhIGJ1aWxkZXIgY29udGFpbmVyXCIsXG4gICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfRW52VmFyXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5FbnZWYXJcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJleHBvc2VEb2NrZXJTb2NrZXRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiYWxsb3cgcnVubmluZyBEb2NrZXIgY29tbWFuZHMgKGFuZCBidWlsZCBEb2NrZXIgaW1hZ2VzKSBmcm9tIGluc2lkZSB0aGUgY29udGFpbmVyXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJmcm9tXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfT2JqZWN0UmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuT2JqZWN0UmVmZXJlbmNlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwdWxsU2VjcmV0XCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfTG9jYWxPYmplY3RSZWZlcmVuY2VcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5Mb2NhbE9iamVjdFJlZmVyZW5jZVwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLkN1c3RvbUJ1aWxkU3RyYXRlZ3lcIlxuICAgIH0sXG4gICAgXCJvc19idWlsZF9Eb2NrZXJCdWlsZFN0cmF0ZWd5XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJmcm9tXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfT2JqZWN0UmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuT2JqZWN0UmVmZXJlbmNlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJub0NhY2hlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImlmIHRydWVcIlxuICAgICAgICB9LFxuICAgICAgICBcInB1bGxTZWNyZXRcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19Mb2NhbE9iamVjdFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkxvY2FsT2JqZWN0UmVmZXJlbmNlXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuRG9ja2VyQnVpbGRTdHJhdGVneVwiXG4gICAgfSxcbiAgICBcIm9zX2J1aWxkX0dpdEJ1aWxkU291cmNlXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJyZWZcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJpZGVudGlmaWVzIHRoZSBicmFuY2gvdGFnL3JlZiB0byBidWlsZFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidXJpXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwicG9pbnRzIHRvIHRoZSBzb3VyY2UgdGhhdCB3aWxsIGJlIGJ1aWx0XCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuR2l0QnVpbGRTb3VyY2VcIlxuICAgIH0sXG4gICAgXCJvc19idWlsZF9HaXRTb3VyY2VSZXZpc2lvblwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiYXV0aG9yXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2J1aWxkX1NvdXJjZUNvbnRyb2xVc2VyXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5Tb3VyY2VDb250cm9sVXNlclwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiY29tbWl0XCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiaGFzaCBpZGVudGlmeWluZyBhIHNwZWNpZmljIGNvbW1pdFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiY29tbWl0dGVyXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2J1aWxkX1NvdXJjZUNvbnRyb2xVc2VyXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5Tb3VyY2VDb250cm9sVXNlclwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibWVzc2FnZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImRlc2NyaXB0aW9uIG9mIGEgc3BlY2lmaWMgY29tbWl0XCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuR2l0U291cmNlUmV2aXNpb25cIlxuICAgIH0sXG4gICAgXCJvc19idWlsZF9JbWFnZUNoYW5nZVRyaWdnZXJcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImxhc3RUcmlnZ2VyZWRJbWFnZUlEXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwidXNlZCBpbnRlcm5hbGx5IHRvIHNhdmUgbGFzdCB1c2VkIGltYWdlIElEIGZvciBidWlsZFwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLkltYWdlQ2hhbmdlVHJpZ2dlclwiXG4gICAgfSxcbiAgICBcIm9zX2J1aWxkX1NvdXJjZUJ1aWxkU3RyYXRlZ3lcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImVudlwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiYWRkaXRpb25hbCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgeW91IHdhbnQgdG8gcGFzcyBpbnRvIGEgYnVpbGRlciBjb250YWluZXJcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19FbnZWYXJcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkVudlZhclwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImZyb21cIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19PYmplY3RSZWZlcmVuY2VcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5PYmplY3RSZWZlcmVuY2VcIlxuICAgICAgICB9LFxuICAgICAgICBcImluY3JlbWVudGFsXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImZvcmNlcyB0aGUgc291cmNlIGJ1aWxkIHRvIGRvIGluY3JlbWVudGFsIGJ1aWxkcyBpZiB0cnVlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwdWxsU2VjcmV0XCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfTG9jYWxPYmplY3RSZWZlcmVuY2VcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5Mb2NhbE9iamVjdFJlZmVyZW5jZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwic2NyaXB0c1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImxvY2F0aW9uIG9mIHRoZSBzb3VyY2Ugc2NyaXB0c1wiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLlNvdXJjZUJ1aWxkU3RyYXRlZ3lcIlxuICAgIH0sXG4gICAgXCJvc19idWlsZF9Tb3VyY2VDb250cm9sVXNlclwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiZW1haWxcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJlLW1haWwgb2YgdGhlIHNvdXJjZSBjb250cm9sIHVzZXJcIlxuICAgICAgICB9LFxuICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJuYW1lIG9mIHRoZSBzb3VyY2UgY29udHJvbCB1c2VyXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuU291cmNlQ29udHJvbFVzZXJcIlxuICAgIH0sXG4gICAgXCJvc19idWlsZF9Tb3VyY2VSZXZpc2lvblwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiZ2l0XCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2J1aWxkX0dpdFNvdXJjZVJldmlzaW9uXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5HaXRTb3VyY2VSZXZpc2lvblwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInR5cGUgb2YgdGhlIGJ1aWxkIHNvdXJjZVwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLlNvdXJjZVJldmlzaW9uXCJcbiAgICB9LFxuICAgIFwib3NfYnVpbGRfV2ViSG9va1RyaWdnZXJcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcInNlY3JldFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInNlY3JldCB1c2VkIHRvIHZhbGlkYXRlIHJlcXVlc3RzXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuV2ViSG9va1RyaWdnZXJcIlxuICAgIH0sXG4gICAgXCJvc19kZXBsb3lfQ3VzdG9tRGVwbG95bWVudFN0cmF0ZWd5UGFyYW1zXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJjb21tYW5kXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJvcHRpb25hbGx5IG92ZXJyaWRlcyB0aGUgY29udGFpbmVyIGNvbW1hbmQgKGRlZmF1bHQgaXMgc3BlY2lmaWVkIGJ5IHRoZSBpbWFnZSlcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm9wdGlvbmFsbHkgb3ZlcnJpZGVzIHRoZSBjb250YWluZXIgY29tbWFuZCAoZGVmYXVsdCBpcyBzcGVjaWZpZWQgYnkgdGhlIGltYWdlKVwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImVudmlyb25tZW50XCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJlbnZpcm9ubWVudCB2YXJpYWJsZXMgcHJvdmlkZWQgdG8gdGhlIGRlcGxveW1lbnQgcHJvY2VzcyBjb250YWluZXJcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19FbnZWYXJcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkVudlZhclwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImltYWdlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiYSBEb2NrZXIgaW1hZ2Ugd2hpY2ggY2FuIGNhcnJ5IG91dCBhIGRlcGxveW1lbnRcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5DdXN0b21EZXBsb3ltZW50U3RyYXRlZ3lQYXJhbXNcIlxuICAgIH0sXG4gICAgXCJvc19kZXBsb3lfRGVwbG95bWVudENhdXNlXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJpbWFnZVRyaWdnZXJcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3NfZGVwbG95X0RlcGxveW1lbnRDYXVzZUltYWdlVHJpZ2dlclwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuRGVwbG95bWVudENhdXNlSW1hZ2VUcmlnZ2VyXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwidGhlIHR5cGUgb2YgdHJpZ2dlciB0aGF0IHJlc3VsdGVkIGluIGEgbmV3IGRlcGxveW1lbnRcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5EZXBsb3ltZW50Q2F1c2VcIlxuICAgIH0sXG4gICAgXCJvc19kZXBsb3lfRGVwbG95bWVudENhdXNlSW1hZ2VUcmlnZ2VyXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJmcm9tXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfT2JqZWN0UmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuT2JqZWN0UmVmZXJlbmNlXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuRGVwbG95bWVudENhdXNlSW1hZ2VUcmlnZ2VyXCJcbiAgICB9LFxuICAgIFwib3NfZGVwbG95X0RlcGxveW1lbnRDb25maWdcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImFwaVZlcnNpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MVwiLFxuICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZSxcbiAgICAgICAgICBcImVudW1cIjogW1xuICAgICAgICAgICAgXCJ2MVwiXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBcImtpbmRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogXCJEZXBsb3ltZW50Q29uZmlnXCIsXG4gICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19PYmplY3RNZXRhXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuT2JqZWN0TWV0YVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwic3BlY1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19kZXBsb3lfRGVwbG95bWVudENvbmZpZ1NwZWNcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLkRlcGxveW1lbnRDb25maWdTcGVjXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzdGF0dXNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3NfZGVwbG95X0RlcGxveW1lbnRDb25maWdTdGF0dXNcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLkRlcGxveW1lbnRDb25maWdTdGF0dXNcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5EZXBsb3ltZW50Q29uZmlnXCIsXG4gICAgICBcImphdmFJbnRlcmZhY2VzXCI6IFtcbiAgICAgICAgXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkhhc01ldGFkYXRhXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIFwib3NfZGVwbG95X0RlcGxveW1lbnRDb25maWdMaXN0XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJhcGlWZXJzaW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IFwidjFcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWUsXG4gICAgICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgICAgIFwidjFcIlxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiYSBsaXN0IG9mIGRlcGxveW1lbnQgY29uZmlnc1wiLFxuICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19kZXBsb3lfRGVwbG95bWVudENvbmZpZ1wiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5EZXBsb3ltZW50Q29uZmlnXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwia2luZFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiBcIkRlcGxveW1lbnRDb25maWdMaXN0XCIsXG4gICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19MaXN0TWV0YVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkxpc3RNZXRhXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuRGVwbG95bWVudENvbmZpZ0xpc3RcIixcbiAgICAgIFwiamF2YUludGVyZmFjZXNcIjogW1xuICAgICAgICBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuS3ViZXJuZXRlc1Jlc291cmNlXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIFwib3NfZGVwbG95X0RlcGxveW1lbnRDb25maWdTcGVjXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJyZXBsaWNhc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJ0aGUgZGVzaXJlZCBudW1iZXIgb2YgcmVwbGljYXNcIlxuICAgICAgICB9LFxuICAgICAgICBcInNlbGVjdG9yXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiYSBsYWJlbCBxdWVyeSBvdmVyIHBvZHMgdGhhdCBzaG91bGQgbWF0Y2ggdGhlIHJlcGxpY2FzIGNvdW50XCIsXG4gICAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJhIGxhYmVsIHF1ZXJ5IG92ZXIgcG9kcyB0aGF0IHNob3VsZCBtYXRjaCB0aGUgcmVwbGljYXMgY291bnRcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImphdmEudXRpbC5NYXBcXHUwMDNjU3RyaW5nLFN0cmluZ1xcdTAwM2VcIlxuICAgICAgICB9LFxuICAgICAgICBcInN0cmF0ZWd5XCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2RlcGxveV9EZXBsb3ltZW50U3RyYXRlZ3lcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLkRlcGxveW1lbnRTdHJhdGVneVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidGVtcGxhdGVcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19Qb2RUZW1wbGF0ZVNwZWNcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5Qb2RUZW1wbGF0ZVNwZWNcIlxuICAgICAgICB9LFxuICAgICAgICBcInRlbXBsYXRlUmVmXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfT2JqZWN0UmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuT2JqZWN0UmVmZXJlbmNlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ0cmlnZ2Vyc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiaG93IG5ldyBkZXBsb3ltZW50cyBhcmUgdHJpZ2dlcmVkXCIsXG4gICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2RlcGxveV9EZXBsb3ltZW50VHJpZ2dlclBvbGljeVwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5EZXBsb3ltZW50VHJpZ2dlclBvbGljeVwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5EZXBsb3ltZW50Q29uZmlnU3BlY1wiXG4gICAgfSxcbiAgICBcIm9zX2RlcGxveV9EZXBsb3ltZW50Q29uZmlnU3RhdHVzXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJkZXRhaWxzXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2RlcGxveV9EZXBsb3ltZW50RGV0YWlsc1wiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuRGVwbG95bWVudERldGFpbHNcIlxuICAgICAgICB9LFxuICAgICAgICBcImxhdGVzdFZlcnNpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwidXNlZCB0byBkZXRlcm1pbmUgd2hldGhlciB0aGUgY3VycmVudCBkZXBsb3ltZW50IGlzIG91dCBvZiBzeW5jXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuRGVwbG95bWVudENvbmZpZ1N0YXR1c1wiXG4gICAgfSxcbiAgICBcIm9zX2RlcGxveV9EZXBsb3ltZW50RGV0YWlsc1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiY2F1c2VzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJleHRlbmRlZCBkYXRhIGFzc29jaWF0ZWQgd2l0aCBhbGwgdGhlIGNhdXNlcyBmb3IgY3JlYXRpbmcgYSBuZXcgZGVwbG95bWVudFwiLFxuICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19kZXBsb3lfRGVwbG95bWVudENhdXNlXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLkRlcGxveW1lbnRDYXVzZVwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIm1lc3NhZ2VcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJhIHVzZXIgc3BlY2lmaWVkIGNoYW5nZSBtZXNzYWdlXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuRGVwbG95bWVudERldGFpbHNcIlxuICAgIH0sXG4gICAgXCJvc19kZXBsb3lfRGVwbG95bWVudFN0cmF0ZWd5XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJjdXN0b21QYXJhbXNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3NfZGVwbG95X0N1c3RvbURlcGxveW1lbnRTdHJhdGVneVBhcmFtc1wiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuQ3VzdG9tRGVwbG95bWVudFN0cmF0ZWd5UGFyYW1zXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJyZWNyZWF0ZVBhcmFtc1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19kZXBsb3lfUmVjcmVhdGVEZXBsb3ltZW50U3RyYXRlZ3lQYXJhbXNcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLlJlY3JlYXRlRGVwbG95bWVudFN0cmF0ZWd5UGFyYW1zXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJyZXNvdXJjZXNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19SZXNvdXJjZVJlcXVpcmVtZW50c1wiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLlJlc291cmNlUmVxdWlyZW1lbnRzXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJyb2xsaW5nUGFyYW1zXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2RlcGxveV9Sb2xsaW5nRGVwbG95bWVudFN0cmF0ZWd5UGFyYW1zXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5Sb2xsaW5nRGVwbG95bWVudFN0cmF0ZWd5UGFyYW1zXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwidGhlIG5hbWUgb2YgYSBkZXBsb3ltZW50IHN0cmF0ZWd5XCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuRGVwbG95bWVudFN0cmF0ZWd5XCJcbiAgICB9LFxuICAgIFwib3NfZGVwbG95X0RlcGxveW1lbnRUcmlnZ2VySW1hZ2VDaGFuZ2VQYXJhbXNcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImF1dG9tYXRpY1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJ3aGV0aGVyIGRldGVjdGlvbiBvZiBhIG5ldyB0YWcgdmFsdWUgc2hvdWxkIHRyaWdnZXIgYSBkZXBsb3ltZW50XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJjb250YWluZXJOYW1lc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwicmVzdHJpY3RzIHRhZyB1cGRhdGVzIHRvIGEgc2V0IG9mIGNvbnRhaW5lciBuYW1lcyBpbiB0aGUgcG9kXCIsXG4gICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJyZXN0cmljdHMgdGFnIHVwZGF0ZXMgdG8gYSBzZXQgb2YgY29udGFpbmVyIG5hbWVzIGluIHRoZSBwb2RcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJmcm9tXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfT2JqZWN0UmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuT2JqZWN0UmVmZXJlbmNlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJsYXN0VHJpZ2dlcmVkSW1hZ2VcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJ0aGUgbGFzdCBpbWFnZSB0byBiZSB0cmlnZ2VyZWRcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5EZXBsb3ltZW50VHJpZ2dlckltYWdlQ2hhbmdlUGFyYW1zXCJcbiAgICB9LFxuICAgIFwib3NfZGVwbG95X0RlcGxveW1lbnRUcmlnZ2VyUG9saWN5XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJpbWFnZUNoYW5nZVBhcmFtc1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19kZXBsb3lfRGVwbG95bWVudFRyaWdnZXJJbWFnZUNoYW5nZVBhcmFtc1wiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuRGVwbG95bWVudFRyaWdnZXJJbWFnZUNoYW5nZVBhcmFtc1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInRoZSB0eXBlIG9mIHRoZSB0cmlnZ2VyXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuRGVwbG95bWVudFRyaWdnZXJQb2xpY3lcIlxuICAgIH0sXG4gICAgXCJvc19kZXBsb3lfRXhlY05ld1BvZEhvb2tcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImNvbW1hbmRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInRoZSBob29rIGNvbW1hbmQgYW5kIGl0cyBhcmd1bWVudHNcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInRoZSBob29rIGNvbW1hbmQgYW5kIGl0cyBhcmd1bWVudHNcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJjb250YWluZXJOYW1lXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwidGhlIG5hbWUgb2YgYSBjb250YWluZXIgZnJvbSB0aGUgcG9kIHRlbXBsYXRlIHdob3NlIGltYWdlIHdpbGwgYmUgdXNlZCBmb3IgdGhlIGhvb2sgY29udGFpbmVyXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJlbnZcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImVudmlyb25tZW50IHZhcmlhYmxlcyBwcm92aWRlZCB0byB0aGUgaG9vayBjb250YWluZXJcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19FbnZWYXJcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkVudlZhclwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5FeGVjTmV3UG9kSG9va1wiXG4gICAgfSxcbiAgICBcIm9zX2RlcGxveV9MaWZlY3ljbGVIb29rXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJleGVjTmV3UG9kXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2RlcGxveV9FeGVjTmV3UG9kSG9va1wiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuRXhlY05ld1BvZEhvb2tcIlxuICAgICAgICB9LFxuICAgICAgICBcImZhaWx1cmVQb2xpY3lcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJ3aGF0IGFjdGlvbiB0byB0YWtlIGlmIHRoZSBob29rIGZhaWxzXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuTGlmZWN5Y2xlSG9va1wiXG4gICAgfSxcbiAgICBcIm9zX2RlcGxveV9SZWNyZWF0ZURlcGxveW1lbnRTdHJhdGVneVBhcmFtc1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwicG9zdFwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19kZXBsb3lfTGlmZWN5Y2xlSG9va1wiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuTGlmZWN5Y2xlSG9va1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwicHJlXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2RlcGxveV9MaWZlY3ljbGVIb29rXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5MaWZlY3ljbGVIb29rXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuUmVjcmVhdGVEZXBsb3ltZW50U3RyYXRlZ3lQYXJhbXNcIlxuICAgIH0sXG4gICAgXCJvc19kZXBsb3lfUm9sbGluZ0RlcGxveW1lbnRTdHJhdGVneVBhcmFtc1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiaW50ZXJ2YWxTZWNvbmRzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInRoZSB0aW1lIHRvIHdhaXQgYmV0d2VlbiBwb2xsaW5nIGRlcGxveW1lbnQgc3RhdHVzIGFmdGVyIHVwZGF0ZVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJMb25nXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwb3N0XCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2RlcGxveV9MaWZlY3ljbGVIb29rXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5MaWZlY3ljbGVIb29rXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwcmVcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3NfZGVwbG95X0xpZmVjeWNsZUhvb2tcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLkxpZmVjeWNsZUhvb2tcIlxuICAgICAgICB9LFxuICAgICAgICBcInRpbWVvdXRTZWNvbmRzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInRoZSB0aW1lIHRvIHdhaXQgZm9yIHVwZGF0ZXMgYmVmb3JlIGdpdmluZyB1cFwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJMb25nXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ1cGRhdGVQZXJpb2RTZWNvbmRzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInRoZSB0aW1lIHRvIHdhaXQgYmV0d2VlbiBpbmRpdmlkdWFsIHBvZCB1cGRhdGVzXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcIkxvbmdcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5Sb2xsaW5nRGVwbG95bWVudFN0cmF0ZWd5UGFyYW1zXCJcbiAgICB9LFxuICAgIFwib3NfaW1hZ2VfSW1hZ2VcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImFwaVZlcnNpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MVwiLFxuICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZSxcbiAgICAgICAgICBcImVudW1cIjogW1xuICAgICAgICAgICAgXCJ2MVwiXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBcImRvY2tlckltYWdlTWFuaWZlc3RcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJyYXcgSlNPTiBvZiB0aGUgbWFuaWZlc3RcIlxuICAgICAgICB9LFxuICAgICAgICBcImRvY2tlckltYWdlTWV0YWRhdGFcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19ydW50aW1lX1Jhd0V4dGVuc2lvblwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkhhc01ldGFkYXRhXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJkb2NrZXJJbWFnZU1ldGFkYXRhVmVyc2lvblwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImNvbnZleXMgdmVyc2lvbiBvZiB0aGUgb2JqZWN0XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJkb2NrZXJJbWFnZVJlZmVyZW5jZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInN0cmluZyB0aGF0IGNhbiBiZSB1c2VkIHRvIHB1bGwgdGhpcyBpbWFnZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwia2luZFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiBcIkltYWdlXCIsXG4gICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19PYmplY3RNZXRhXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuT2JqZWN0TWV0YVwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLkltYWdlXCIsXG4gICAgICBcImphdmFJbnRlcmZhY2VzXCI6IFtcbiAgICAgICAgXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkhhc01ldGFkYXRhXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIFwib3NfaW1hZ2VfSW1hZ2VMaXN0XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJhcGlWZXJzaW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IFwidjFcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWUsXG4gICAgICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgICAgIFwidjFcIlxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibGlzdCBvZiBpbWFnZSBvYmplY3RzXCIsXG4gICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2ltYWdlX0ltYWdlXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLkltYWdlXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwia2luZFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiBcIkltYWdlTGlzdFwiLFxuICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfTGlzdE1ldGFcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5MaXN0TWV0YVwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLkltYWdlTGlzdFwiLFxuICAgICAgXCJqYXZhSW50ZXJmYWNlc1wiOiBbXG4gICAgICAgIFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5LdWJlcm5ldGVzUmVzb3VyY2VcIlxuICAgICAgXVxuICAgIH0sXG4gICAgXCJvc19pbWFnZV9JbWFnZVN0cmVhbVwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiYXBpVmVyc2lvblwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiBcInYxXCIsXG4gICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlLFxuICAgICAgICAgIFwiZW51bVwiOiBbXG4gICAgICAgICAgICBcInYxXCJcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIFwia2luZFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiBcIkltYWdlU3RyZWFtXCIsXG4gICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19PYmplY3RNZXRhXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuT2JqZWN0TWV0YVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwic3BlY1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19pbWFnZV9JbWFnZVN0cmVhbVNwZWNcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLkltYWdlU3RyZWFtU3BlY1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwic3RhdHVzXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2ltYWdlX0ltYWdlU3RyZWFtU3RhdHVzXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5JbWFnZVN0cmVhbVN0YXR1c1wiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLkltYWdlU3RyZWFtXCIsXG4gICAgICBcImphdmFJbnRlcmZhY2VzXCI6IFtcbiAgICAgICAgXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkhhc01ldGFkYXRhXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIFwib3NfaW1hZ2VfSW1hZ2VTdHJlYW1MaXN0XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJhcGlWZXJzaW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IFwidjFcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWUsXG4gICAgICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgICAgIFwidjFcIlxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibGlzdCBvZiBpbWFnZSBzdHJlYW0gb2JqZWN0c1wiLFxuICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19pbWFnZV9JbWFnZVN0cmVhbVwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5JbWFnZVN0cmVhbVwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImtpbmRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogXCJJbWFnZVN0cmVhbUxpc3RcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX0xpc3RNZXRhXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuTGlzdE1ldGFcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5JbWFnZVN0cmVhbUxpc3RcIixcbiAgICAgIFwiamF2YUludGVyZmFjZXNcIjogW1xuICAgICAgICBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuS3ViZXJuZXRlc1Jlc291cmNlXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIFwib3NfaW1hZ2VfSW1hZ2VTdHJlYW1TcGVjXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJkb2NrZXJJbWFnZVJlcG9zaXRvcnlcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJvcHRpb25hbCBmaWVsZCBpZiBzcGVjaWZpZWQgdGhpcyBzdHJlYW0gaXMgYmFja2VkIGJ5IGEgRG9ja2VyIHJlcG9zaXRvcnkgb24gdGhpcyBzZXJ2ZXJcIlxuICAgICAgICB9LFxuICAgICAgICBcInRhZ3NcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm1hcCBhcmJpdHJhcnkgc3RyaW5nIHZhbHVlcyB0byBzcGVjaWZpYyBpbWFnZSBsb2NhdG9yc1wiLFxuICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19pbWFnZV9OYW1lZFRhZ1JlZmVyZW5jZVwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5OYW1lZFRhZ1JlZmVyZW5jZVwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5JbWFnZVN0cmVhbVNwZWNcIlxuICAgIH0sXG4gICAgXCJvc19pbWFnZV9JbWFnZVN0cmVhbVN0YXR1c1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiZG9ja2VySW1hZ2VSZXBvc2l0b3J5XCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwicmVwcmVzZW50cyB0aGUgZWZmZWN0aXZlIGxvY2F0aW9uIHRoaXMgc3RyZWFtIG1heSBiZSBhY2Nlc3NlZCBhdFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidGFnc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiaGlzdG9yaWNhbCByZWNvcmQgb2YgaW1hZ2VzIGFzc29jaWF0ZWQgd2l0aCBlYWNoIHRhZ1wiLFxuICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19pbWFnZV9OYW1lZFRhZ0V2ZW50TGlzdFwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5OYW1lZFRhZ0V2ZW50TGlzdFwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5JbWFnZVN0cmVhbVN0YXR1c1wiXG4gICAgfSxcbiAgICBcIm9zX2ltYWdlX05hbWVkVGFnRXZlbnRMaXN0XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibGlzdCBvZiB0YWcgZXZlbnRzIHJlbGF0ZWQgdG8gdGhlIHRhZ1wiLFxuICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19pbWFnZV9UYWdFdmVudFwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5UYWdFdmVudFwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInRhZ1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInRoZSB0YWdcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5OYW1lZFRhZ0V2ZW50TGlzdFwiLFxuICAgICAgXCJqYXZhSW50ZXJmYWNlc1wiOiBbXG4gICAgICAgIFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5LdWJlcm5ldGVzUmVzb3VyY2VcIlxuICAgICAgXVxuICAgIH0sXG4gICAgXCJvc19pbWFnZV9OYW1lZFRhZ1JlZmVyZW5jZVwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiYW5ub3RhdGlvbnNcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJhbm5vdGF0aW9ucyBhc3NvY2lhdGVkIHdpdGggaW1hZ2VzIHVzaW5nIHRoaXMgdGFnXCIsXG4gICAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJhbm5vdGF0aW9ucyBhc3NvY2lhdGVkIHdpdGggaW1hZ2VzIHVzaW5nIHRoaXMgdGFnXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJqYXZhLnV0aWwuTWFwXFx1MDAzY1N0cmluZyxTdHJpbmdcXHUwMDNlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJmcm9tXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfT2JqZWN0UmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuT2JqZWN0UmVmZXJlbmNlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJuYW1lXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibmFtZSBvZiB0YWdcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5OYW1lZFRhZ1JlZmVyZW5jZVwiXG4gICAgfSxcbiAgICBcIm9zX2ltYWdlX1RhZ0V2ZW50XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJjcmVhdGVkXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwid2hlbiB0aGUgZXZlbnQgd2FzIGNyZWF0ZWRcIlxuICAgICAgICB9LFxuICAgICAgICBcImRvY2tlckltYWdlUmVmZXJlbmNlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwidGhlIHN0cmluZyB0aGF0IGNhbiBiZSB1c2VkIHRvIHB1bGwgdGhpcyBpbWFnZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiaW1hZ2VcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJ0aGUgaW1hZ2VcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5UYWdFdmVudFwiXG4gICAgfSxcbiAgICBcIm9zX29hdXRoX09BdXRoQWNjZXNzVG9rZW5cIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImFwaVZlcnNpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MVwiLFxuICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZSxcbiAgICAgICAgICBcImVudW1cIjogW1xuICAgICAgICAgICAgXCJ2MVwiXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBcImF1dGhvcml6ZVRva2VuXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiY29udGFpbnMgdGhlIHRva2VuIHRoYXQgYXV0aG9yaXplZCB0aGlzIHRva2VuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJjbGllbnROYW1lXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwicmVmZXJlbmNlcyB0aGUgY2xpZW50IHRoYXQgY3JlYXRlZCB0aGlzIHRva2VuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJleHBpcmVzSW5cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiaXMgdGhlIHNlY29uZHMgZnJvbSBjcmVhdGlvbiB0aW1lIGJlZm9yZSB0aGlzIHRva2VuIGV4cGlyZXNcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiTG9uZ1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwia2luZFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiBcIk9BdXRoQWNjZXNzVG9rZW5cIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX09iamVjdE1ldGFcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5PYmplY3RNZXRhXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJyZWRpcmVjdFVSSVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInJlZGlyZWN0aW9uIFVSSSBhc3NvY2lhdGVkIHdpdGggdGhlIHRva2VuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJyZWZyZXNoVG9rZW5cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJvcHRpb25hbCB2YWx1ZSBieSB3aGljaCB0aGlzIHRva2VuIGNhbiBiZSByZW5ld2VkXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzY29wZXNcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImxpc3Qgb2YgcmVxdWVzdGVkIHNjb3Blc1wiLFxuICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibGlzdCBvZiByZXF1ZXN0ZWQgc2NvcGVzXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidXNlck5hbWVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJ1c2VyIG5hbWUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgdG9rZW5cIlxuICAgICAgICB9LFxuICAgICAgICBcInVzZXJVSURcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJ1bmlxdWUgVUlEIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHRva2VuXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuT0F1dGhBY2Nlc3NUb2tlblwiLFxuICAgICAgXCJqYXZhSW50ZXJmYWNlc1wiOiBbXG4gICAgICAgIFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5IYXNNZXRhZGF0YVwiXG4gICAgICBdXG4gICAgfSxcbiAgICBcIm9zX29hdXRoX09BdXRoQWNjZXNzVG9rZW5MaXN0XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJhcGlWZXJzaW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IFwidjFcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWUsXG4gICAgICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgICAgIFwidjFcIlxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibGlzdCBvZiBvYXV0aCBhY2Nlc3MgdG9rZW5zXCIsXG4gICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX29hdXRoX09BdXRoQWNjZXNzVG9rZW5cIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuT0F1dGhBY2Nlc3NUb2tlblwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImtpbmRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogXCJPQXV0aEFjY2Vzc1Rva2VuTGlzdFwiLFxuICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfTGlzdE1ldGFcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5MaXN0TWV0YVwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLk9BdXRoQWNjZXNzVG9rZW5MaXN0XCIsXG4gICAgICBcImphdmFJbnRlcmZhY2VzXCI6IFtcbiAgICAgICAgXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkt1YmVybmV0ZXNSZXNvdXJjZVwiXG4gICAgICBdXG4gICAgfSxcbiAgICBcIm9zX29hdXRoX09BdXRoQXV0aG9yaXplVG9rZW5cIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImFwaVZlcnNpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MVwiLFxuICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZSxcbiAgICAgICAgICBcImVudW1cIjogW1xuICAgICAgICAgICAgXCJ2MVwiXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBcImNsaWVudE5hbWVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJyZWZlcmVuY2VzIHRoZSBjbGllbnQgdGhhdCBjcmVhdGVkIHRoaXMgdG9rZW5cIlxuICAgICAgICB9LFxuICAgICAgICBcImV4cGlyZXNJblwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJzZWNvbmRzIGZyb20gY3JlYXRpb24gdGltZSBiZWZvcmUgdGhpcyB0b2tlbiBleHBpcmVzXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcIkxvbmdcIlxuICAgICAgICB9LFxuICAgICAgICBcImtpbmRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogXCJPQXV0aEF1dGhvcml6ZVRva2VuXCIsXG4gICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19PYmplY3RNZXRhXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuT2JqZWN0TWV0YVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicmVkaXJlY3RVUklcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJyZWRpcmVjdGlvbiBVUkkgYXNzb2NpYXRlZCB3aXRoIHRoZSB0b2tlblwiXG4gICAgICAgIH0sXG4gICAgICAgIFwic2NvcGVzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJsaXN0IG9mIHJlcXVlc3RlZCBzY29wZXNcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImxpc3Qgb2YgcmVxdWVzdGVkIHNjb3Blc1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInN0YXRlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwic3RhdGUgZGF0YSBmcm9tIHJlcXVlc3RcIlxuICAgICAgICB9LFxuICAgICAgICBcInVzZXJOYW1lXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwidXNlciBuYW1lIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHRva2VuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ1c2VyVUlEXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwidW5pcXVlIFVJRCBhc3NvY2lhdGVkIHdpdGggdGhpcyB0b2tlbi4gIHVzZXJVSUQgYW5kIHVzZXJOYW1lIG11c3QgYm90aCBtYXRjaCBmb3IgdGhpcyB0b2tlbiB0byBiZSB2YWxpZFwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLk9BdXRoQXV0aG9yaXplVG9rZW5cIixcbiAgICAgIFwiamF2YUludGVyZmFjZXNcIjogW1xuICAgICAgICBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuSGFzTWV0YWRhdGFcIlxuICAgICAgXVxuICAgIH0sXG4gICAgXCJvc19vYXV0aF9PQXV0aEF1dGhvcml6ZVRva2VuTGlzdFwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiYXBpVmVyc2lvblwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiBcInYxXCIsXG4gICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlLFxuICAgICAgICAgIFwiZW51bVwiOiBbXG4gICAgICAgICAgICBcInYxXCJcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImxpc3Qgb2Ygb2F1dGggYXV0aG9yaXphdGlvbiB0b2tlbnNcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3Nfb2F1dGhfT0F1dGhBdXRob3JpemVUb2tlblwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5PQXV0aEF1dGhvcml6ZVRva2VuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwia2luZFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiBcIk9BdXRoQXV0aG9yaXplVG9rZW5MaXN0XCIsXG4gICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19MaXN0TWV0YVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkxpc3RNZXRhXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuT0F1dGhBdXRob3JpemVUb2tlbkxpc3RcIixcbiAgICAgIFwiamF2YUludGVyZmFjZXNcIjogW1xuICAgICAgICBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuS3ViZXJuZXRlc1Jlc291cmNlXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIFwib3Nfb2F1dGhfT0F1dGhDbGllbnRcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImFwaVZlcnNpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MVwiLFxuICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZSxcbiAgICAgICAgICBcImVudW1cIjogW1xuICAgICAgICAgICAgXCJ2MVwiXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBcImtpbmRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogXCJPQXV0aENsaWVudFwiLFxuICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfT2JqZWN0TWV0YVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLk9iamVjdE1ldGFcIlxuICAgICAgICB9LFxuICAgICAgICBcInJlZGlyZWN0VVJJc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwidmFsaWQgcmVkaXJlY3Rpb24gVVJJcyBhc3NvY2lhdGVkIHdpdGggYSBjbGllbnRcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInZhbGlkIHJlZGlyZWN0aW9uIFVSSXMgYXNzb2NpYXRlZCB3aXRoIGEgY2xpZW50XCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwicmVzcG9uZFdpdGhDaGFsbGVuZ2VzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImluZGljYXRlcyB3aGV0aGVyIHRoZSBjbGllbnQgd2FudHMgYXV0aGVudGljYXRpb24gbmVlZGVkIHJlc3BvbnNlcyBtYWRlIGluIHRoZSBmb3JtIG9mIGNoYWxsZW5nZXMgaW5zdGVhZCBvZiByZWRpcmVjdHNcIlxuICAgICAgICB9LFxuICAgICAgICBcInNlY3JldFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInVuaXF1ZSBzZWNyZXQgYXNzb2NpYXRlZCB3aXRoIGEgY2xpZW50XCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuT0F1dGhDbGllbnRcIixcbiAgICAgIFwiamF2YUludGVyZmFjZXNcIjogW1xuICAgICAgICBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuSGFzTWV0YWRhdGFcIlxuICAgICAgXVxuICAgIH0sXG4gICAgXCJvc19vYXV0aF9PQXV0aENsaWVudEF1dGhvcml6YXRpb25cIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImFwaVZlcnNpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MVwiLFxuICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZSxcbiAgICAgICAgICBcImVudW1cIjogW1xuICAgICAgICAgICAgXCJ2MVwiXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBcImNsaWVudE5hbWVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJyZWZlcmVuY2VzIHRoZSBjbGllbnQgdGhhdCBjcmVhdGVkIHRoaXMgYXV0aG9yaXphdGlvblwiXG4gICAgICAgIH0sXG4gICAgICAgIFwia2luZFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiBcIk9BdXRoQ2xpZW50QXV0aG9yaXphdGlvblwiLFxuICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfT2JqZWN0TWV0YVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLk9iamVjdE1ldGFcIlxuICAgICAgICB9LFxuICAgICAgICBcInNjb3Blc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibGlzdCBvZiBncmFudGVkIHNjb3Blc1wiLFxuICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibGlzdCBvZiBncmFudGVkIHNjb3Blc1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInVzZXJOYW1lXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwidXNlciBuYW1lIHRoYXQgYXV0aG9yaXplZCB0aGlzIGNsaWVudFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidXNlclVJRFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInVuaXF1ZSBVSUQgYXNzb2NpYXRlZCB3aXRoIHRoaXMgYXV0aG9yaXphdGlvbi4gdXNlclVJRCBhbmQgdXNlck5hbWUgbXVzdCBib3RoIG1hdGNoIGZvciB0aGlzIGF1dGhvcml6YXRpb24gdG8gYmUgdmFsaWRcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5PQXV0aENsaWVudEF1dGhvcml6YXRpb25cIixcbiAgICAgIFwiamF2YUludGVyZmFjZXNcIjogW1xuICAgICAgICBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuSGFzTWV0YWRhdGFcIlxuICAgICAgXVxuICAgIH0sXG4gICAgXCJvc19vYXV0aF9PQXV0aENsaWVudEF1dGhvcml6YXRpb25MaXN0XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJhcGlWZXJzaW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IFwidjFcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWUsXG4gICAgICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgICAgIFwidjFcIlxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibGlzdCBvZiBvYXV0aCBjbGllbnQgYXV0aG9yaXphdGlvbnNcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3Nfb2F1dGhfT0F1dGhDbGllbnRBdXRob3JpemF0aW9uXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLk9BdXRoQ2xpZW50QXV0aG9yaXphdGlvblwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImtpbmRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogXCJPQXV0aENsaWVudEF1dGhvcml6YXRpb25MaXN0XCIsXG4gICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19MaXN0TWV0YVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkxpc3RNZXRhXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuT0F1dGhDbGllbnRBdXRob3JpemF0aW9uTGlzdFwiLFxuICAgICAgXCJqYXZhSW50ZXJmYWNlc1wiOiBbXG4gICAgICAgIFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5LdWJlcm5ldGVzUmVzb3VyY2VcIlxuICAgICAgXVxuICAgIH0sXG4gICAgXCJvc19vYXV0aF9PQXV0aENsaWVudExpc3RcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImFwaVZlcnNpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MVwiLFxuICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZSxcbiAgICAgICAgICBcImVudW1cIjogW1xuICAgICAgICAgICAgXCJ2MVwiXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJsaXN0IG9mIG9hdXRoIGNsaWVudHNcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3Nfb2F1dGhfT0F1dGhDbGllbnRcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuT0F1dGhDbGllbnRcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJraW5kXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IFwiT0F1dGhDbGllbnRMaXN0XCIsXG4gICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19MaXN0TWV0YVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkxpc3RNZXRhXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuT0F1dGhDbGllbnRMaXN0XCIsXG4gICAgICBcImphdmFJbnRlcmZhY2VzXCI6IFtcbiAgICAgICAgXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkt1YmVybmV0ZXNSZXNvdXJjZVwiXG4gICAgICBdXG4gICAgfSxcbiAgICBcIm9zX3JvdXRlX1JvdXRlXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJhcGlWZXJzaW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IFwidjFcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWUsXG4gICAgICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgICAgIFwidjFcIlxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJraW5kXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IFwiUm91dGVcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX09iamVjdE1ldGFcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5PYmplY3RNZXRhXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzcGVjXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX3JvdXRlX1JvdXRlU3BlY1wiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuUm91dGVTcGVjXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzdGF0dXNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3Nfcm91dGVfUm91dGVTdGF0dXNcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLlJvdXRlU3RhdHVzXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuUm91dGVcIixcbiAgICAgIFwiamF2YUludGVyZmFjZXNcIjogW1xuICAgICAgICBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuSGFzTWV0YWRhdGFcIlxuICAgICAgXVxuICAgIH0sXG4gICAgXCJvc19yb3V0ZV9Sb3V0ZUxpc3RcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImFwaVZlcnNpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MVwiLFxuICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZSxcbiAgICAgICAgICBcImVudW1cIjogW1xuICAgICAgICAgICAgXCJ2MVwiXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJsaXN0IG9mIHJvdXRlc1wiLFxuICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19yb3V0ZV9Sb3V0ZVwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5Sb3V0ZVwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImtpbmRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogXCJSb3V0ZUxpc3RcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX0xpc3RNZXRhXCIsXG4gICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuTGlzdE1ldGFcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5Sb3V0ZUxpc3RcIixcbiAgICAgIFwiamF2YUludGVyZmFjZXNcIjogW1xuICAgICAgICBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuS3ViZXJuZXRlc1Jlc291cmNlXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIFwib3Nfcm91dGVfUm91dGVTcGVjXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJob3N0XCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwib3B0aW9uYWw6IGFsaWFzL2RucyB0aGF0IHBvaW50cyB0byB0aGUgc2VydmljZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicGF0aFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm9wdGlvbmFsOiBwYXRoIHRoYXQgdGhlIHJvdXRlciB3YXRjaGVzIHRvIHJvdXRlIHRyYWZmaWMgdG8gdGhlIHNlcnZpY2VcIlxuICAgICAgICB9LFxuICAgICAgICBcInRsc1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19yb3V0ZV9UTFNDb25maWdcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLlRMU0NvbmZpZ1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwidG9cIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19PYmplY3RSZWZlcmVuY2VcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5PYmplY3RSZWZlcmVuY2VcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5Sb3V0ZVNwZWNcIlxuICAgIH0sXG4gICAgXCJvc19yb3V0ZV9Sb3V0ZVN0YXR1c1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuUm91dGVTdGF0dXNcIlxuICAgIH0sXG4gICAgXCJvc19yb3V0ZV9UTFNDb25maWdcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImNhQ2VydGlmaWNhdGVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJwcm92aWRlcyB0aGUgY2VydCBhdXRob3JpdHkgY2VydGlmaWNhdGUgY29udGVudHNcIlxuICAgICAgICB9LFxuICAgICAgICBcImNlcnRpZmljYXRlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwicHJvdmlkZXMgY2VydGlmaWNhdGUgY29udGVudHNcIlxuICAgICAgICB9LFxuICAgICAgICBcImRlc3RpbmF0aW9uQ0FDZXJ0aWZpY2F0ZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInByb3ZpZGVzIHRoZSBjb250ZW50cyBvZiB0aGUgY2EgY2VydGlmaWNhdGUgb2YgdGhlIGZpbmFsIGRlc3RpbmF0aW9uLiAgV2hlbiB1c2luZyByZS1lbmNyeXB0IHRlcm1pbmF0aW9uIHRoaXMgZmlsZSBzaG91bGQgYmUgcHJvdmlkZWQgaW4gb3JkZXIgdG8gaGF2ZSByb3V0ZXJzIHVzZSBpdCBmb3IgaGVhbHRoIGNoZWNrcyBvbiB0aGUgc2VjdXJlIGNvbm5lY3Rpb25cIlxuICAgICAgICB9LFxuICAgICAgICBcImtleVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInByb3ZpZGVzIGtleSBmaWxlIGNvbnRlbnRzXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ0ZXJtaW5hdGlvblwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImluZGljYXRlcyB0ZXJtaW5hdGlvbiB0eXBlLiAgaWYgbm90IHNldFwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLlRMU0NvbmZpZ1wiXG4gICAgfSxcbiAgICBcIm9zX3RlbXBsYXRlX1BhcmFtZXRlclwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJvcHRpb25hbDogZGVzY3JpYmVzIHRoZSBwYXJhbWV0ZXJcIlxuICAgICAgICB9LFxuICAgICAgICBcImZyb21cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJpbnB1dCB2YWx1ZSBmb3IgdGhlIGdlbmVyYXRvclwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZ2VuZXJhdGVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJvcHRpb25hbDogZ2VuZXJhdGUgc3BlY2lmaWVzIHRoZSBnZW5lcmF0b3IgdG8gYmUgdXNlZCB0byBnZW5lcmF0ZSByYW5kb20gc3RyaW5nIGZyb20gYW4gaW5wdXQgdmFsdWUgc3BlY2lmaWVkIGJ5IHRoZSBmcm9tIGZpZWxkLiAgdGhlIHJlc3VsdCBzdHJpbmcgaXMgc3RvcmVkIGluIHRoZSB2YWx1ZSBmaWVsZC4gaWYgbm90IHNwZWNpZmllZFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibmFtZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm5hbWUgb2YgdGhlIHBhcmFtZXRlclwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidmFsdWVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJvcHRpb25hbDogaG9sZHMgdGhlIHBhcmFtZXRlciBkYXRhLiAgaWYgc3BlY2lmaWVkXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwudGVtcGxhdGUuUGFyYW1ldGVyXCJcbiAgICB9LFxuICAgIFwib3NfdGVtcGxhdGVfVGVtcGxhdGVcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImFwaVZlcnNpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MVwiLFxuICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZSxcbiAgICAgICAgICBcImVudW1cIjogW1xuICAgICAgICAgICAgXCJ2MVwiXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBcImtpbmRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogXCJUZW1wbGF0ZVwiLFxuICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBcImxhYmVsc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm9wdGlvbmFsOiBsaXN0IG9mIGxhYmxlcyB0aGF0IGFyZSBhcHBsaWVkIHRvIGV2ZXJ5IG9iamVjdCBkdXJpbmcgdGhlIHRlbXBsYXRlIHRvIGNvbmZpZyB0cmFuc2Zvcm1hdGlvblwiLFxuICAgICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwib3B0aW9uYWw6IGxpc3Qgb2YgbGFibGVzIHRoYXQgYXJlIGFwcGxpZWQgdG8gZXZlcnkgb2JqZWN0IGR1cmluZyB0aGUgdGVtcGxhdGUgdG8gY29uZmlnIHRyYW5zZm9ybWF0aW9uXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJqYXZhLnV0aWwuTWFwXFx1MDAzY1N0cmluZyxTdHJpbmdcXHUwMDNlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX09iamVjdE1ldGFcIixcbiAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5PYmplY3RNZXRhXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJvYmplY3RzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJsaXN0IG9mIG9iamVjdHMgdG8gaW5jbHVkZSBpbiB0aGUgdGVtcGxhdGVcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19ydW50aW1lX1Jhd0V4dGVuc2lvblwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuSGFzTWV0YWRhdGFcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJwYXJhbWV0ZXJzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJvcHRpb25hbDogbGlzdCBvZiBwYXJhbWV0ZXJzIHVzZWQgZHVyaW5nIHRlbXBsYXRlIHRvIGNvbmZpZyB0cmFuc2Zvcm1hdGlvblwiLFxuICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc190ZW1wbGF0ZV9QYXJhbWV0ZXJcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwudGVtcGxhdGUuUGFyYW1ldGVyXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLnRlbXBsYXRlLlRlbXBsYXRlXCIsXG4gICAgICBcImphdmFJbnRlcmZhY2VzXCI6IFtcbiAgICAgICAgXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkhhc01ldGFkYXRhXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIFwib3NfdGVtcGxhdGVfVGVtcGxhdGVMaXN0XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJhcGlWZXJzaW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IFwidjFcIixcbiAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWUsXG4gICAgICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgICAgIFwidjFcIlxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibGlzdCBvZiB0ZW1wbGF0ZXNcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3NfdGVtcGxhdGVfVGVtcGxhdGVcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwudGVtcGxhdGUuVGVtcGxhdGVcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJraW5kXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IFwiVGVtcGxhdGVMaXN0XCIsXG4gICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19MaXN0TWV0YVwiLFxuICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkxpc3RNZXRhXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwudGVtcGxhdGUuVGVtcGxhdGVMaXN0XCIsXG4gICAgICBcImphdmFJbnRlcmZhY2VzXCI6IFtcbiAgICAgICAgXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkt1YmVybmV0ZXNSZXNvdXJjZVwiXG4gICAgICBdXG4gICAgfSxcbiAgICBcInNwZXRlcl9pbmZfRGVjXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmNsaWVudC51dGlsLkRlY1wiXG4gICAgfVxuICB9LFxuICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICBcIkJhc2VLdWJlcm5ldGVzTGlzdFwiOiB7XG4gICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfTGlzdFwiLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuQmFzZUt1YmVybmV0ZXNMaXN0XCJcbiAgICB9LFxuICAgIFwiQnVpbGRDb25maWdMaXN0XCI6IHtcbiAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3NfYnVpbGRfQnVpbGRDb25maWdMaXN0XCIsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLkJ1aWxkQ29uZmlnTGlzdFwiXG4gICAgfSxcbiAgICBcIkJ1aWxkTGlzdFwiOiB7XG4gICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2J1aWxkX0J1aWxkTGlzdFwiLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5CdWlsZExpc3RcIlxuICAgIH0sXG4gICAgXCJCdWlsZFJlcXVlc3RcIjoge1xuICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19idWlsZF9CdWlsZFJlcXVlc3RcIixcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuQnVpbGRSZXF1ZXN0XCJcbiAgICB9LFxuICAgIFwiQ29uZmlnXCI6IHtcbiAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19jb25maWdfQ29uZmlnXCIsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5jb25maWcuQ29uZmlnXCJcbiAgICB9LFxuICAgIFwiQ29udGFpbmVyU3RhdHVzXCI6IHtcbiAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19Db250YWluZXJTdGF0dXNcIixcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkNvbnRhaW5lclN0YXR1c1wiXG4gICAgfSxcbiAgICBcIkRlcGxveW1lbnRDb25maWdMaXN0XCI6IHtcbiAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3NfZGVwbG95X0RlcGxveW1lbnRDb25maWdMaXN0XCIsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLkRlcGxveW1lbnRDb25maWdMaXN0XCJcbiAgICB9LFxuICAgIFwiRW5kcG9pbnRzXCI6IHtcbiAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19FbmRwb2ludHNcIixcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkVuZHBvaW50c1wiXG4gICAgfSxcbiAgICBcIkVuZHBvaW50c0xpc3RcIjoge1xuICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX0VuZHBvaW50c0xpc3RcIixcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLkVuZHBvaW50c0xpc3RcIlxuICAgIH0sXG4gICAgXCJFbnZWYXJcIjoge1xuICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX0VudlZhclwiLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuRW52VmFyXCJcbiAgICB9LFxuICAgIFwiSW1hZ2VMaXN0XCI6IHtcbiAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3NfaW1hZ2VfSW1hZ2VMaXN0XCIsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLkltYWdlTGlzdFwiXG4gICAgfSxcbiAgICBcIkltYWdlU3RyZWFtTGlzdFwiOiB7XG4gICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2ltYWdlX0ltYWdlU3RyZWFtTGlzdFwiLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5JbWFnZVN0cmVhbUxpc3RcIlxuICAgIH0sXG4gICAgXCJOYW1lc3BhY2VcIjoge1xuICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX05hbWVzcGFjZVwiLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuTmFtZXNwYWNlXCJcbiAgICB9LFxuICAgIFwiTmFtZXNwYWNlTGlzdFwiOiB7XG4gICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfTmFtZXNwYWNlTGlzdFwiLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuTmFtZXNwYWNlTGlzdFwiXG4gICAgfSxcbiAgICBcIk5vZGVcIjoge1xuICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX05vZGVcIixcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLk5vZGVcIlxuICAgIH0sXG4gICAgXCJOb2RlTGlzdFwiOiB7XG4gICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfTm9kZUxpc3RcIixcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLk5vZGVMaXN0XCJcbiAgICB9LFxuICAgIFwiT0F1dGhBY2Nlc3NUb2tlblwiOiB7XG4gICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX29hdXRoX09BdXRoQWNjZXNzVG9rZW5cIixcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuT0F1dGhBY2Nlc3NUb2tlblwiXG4gICAgfSxcbiAgICBcIk9BdXRoQWNjZXNzVG9rZW5MaXN0XCI6IHtcbiAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3Nfb2F1dGhfT0F1dGhBY2Nlc3NUb2tlbkxpc3RcIixcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuT0F1dGhBY2Nlc3NUb2tlbkxpc3RcIlxuICAgIH0sXG4gICAgXCJPQXV0aEF1dGhvcml6ZVRva2VuXCI6IHtcbiAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3Nfb2F1dGhfT0F1dGhBdXRob3JpemVUb2tlblwiLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5PQXV0aEF1dGhvcml6ZVRva2VuXCJcbiAgICB9LFxuICAgIFwiT0F1dGhBdXRob3JpemVUb2tlbkxpc3RcIjoge1xuICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19vYXV0aF9PQXV0aEF1dGhvcml6ZVRva2VuTGlzdFwiLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5PQXV0aEF1dGhvcml6ZVRva2VuTGlzdFwiXG4gICAgfSxcbiAgICBcIk9BdXRoQ2xpZW50XCI6IHtcbiAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3Nfb2F1dGhfT0F1dGhDbGllbnRcIixcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuT0F1dGhDbGllbnRcIlxuICAgIH0sXG4gICAgXCJPQXV0aENsaWVudEF1dGhvcml6YXRpb25cIjoge1xuICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19vYXV0aF9PQXV0aENsaWVudEF1dGhvcml6YXRpb25cIixcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuT0F1dGhDbGllbnRBdXRob3JpemF0aW9uXCJcbiAgICB9LFxuICAgIFwiT0F1dGhDbGllbnRBdXRob3JpemF0aW9uTGlzdFwiOiB7XG4gICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX29hdXRoX09BdXRoQ2xpZW50QXV0aG9yaXphdGlvbkxpc3RcIixcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuT0F1dGhDbGllbnRBdXRob3JpemF0aW9uTGlzdFwiXG4gICAgfSxcbiAgICBcIk9BdXRoQ2xpZW50TGlzdFwiOiB7XG4gICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX29hdXRoX09BdXRoQ2xpZW50TGlzdFwiLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5PQXV0aENsaWVudExpc3RcIlxuICAgIH0sXG4gICAgXCJPYmplY3RNZXRhXCI6IHtcbiAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19PYmplY3RNZXRhXCIsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5PYmplY3RNZXRhXCJcbiAgICB9LFxuICAgIFwiUG9kTGlzdFwiOiB7XG4gICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfUG9kTGlzdFwiLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuUG9kTGlzdFwiXG4gICAgfSxcbiAgICBcIlF1YW50aXR5XCI6IHtcbiAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19yZXNvdXJjZV9RdWFudGl0eVwiLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwucmVzb3VyY2UuUXVhbnRpdHlcIlxuICAgIH0sXG4gICAgXCJSZXBsaWNhdGlvbkNvbnRyb2xsZXJMaXN0XCI6IHtcbiAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19SZXBsaWNhdGlvbkNvbnRyb2xsZXJMaXN0XCIsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5SZXBsaWNhdGlvbkNvbnRyb2xsZXJMaXN0XCJcbiAgICB9LFxuICAgIFwiUm91dGVMaXN0XCI6IHtcbiAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3Nfcm91dGVfUm91dGVMaXN0XCIsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLlJvdXRlTGlzdFwiXG4gICAgfSxcbiAgICBcIlNlY3JldFwiOiB7XG4gICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfU2VjcmV0XCIsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5TZWNyZXRcIlxuICAgIH0sXG4gICAgXCJTZWNyZXRMaXN0XCI6IHtcbiAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19TZWNyZXRMaXN0XCIsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5TZWNyZXRMaXN0XCJcbiAgICB9LFxuICAgIFwiU2VydmljZUFjY291bnRcIjoge1xuICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX1NlcnZpY2VBY2NvdW50XCIsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5TZXJ2aWNlQWNjb3VudFwiXG4gICAgfSxcbiAgICBcIlNlcnZpY2VBY2NvdW50TGlzdFwiOiB7XG4gICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfU2VydmljZUFjY291bnRMaXN0XCIsXG4gICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5TZXJ2aWNlQWNjb3VudExpc3RcIlxuICAgIH0sXG4gICAgXCJTZXJ2aWNlTGlzdFwiOiB7XG4gICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfU2VydmljZUxpc3RcIixcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLlNlcnZpY2VMaXN0XCJcbiAgICB9LFxuICAgIFwiU3RhdHVzRXJyb3JcIjoge1xuICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX2Vycm9yc19TdGF0dXNFcnJvclwiLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuZXJyb3JzLlN0YXR1c0Vycm9yXCJcbiAgICB9LFxuICAgIFwiVGFnRXZlbnRcIjoge1xuICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19pbWFnZV9UYWdFdmVudFwiLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5UYWdFdmVudFwiXG4gICAgfSxcbiAgICBcIlRlbXBsYXRlXCI6IHtcbiAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3NfdGVtcGxhdGVfVGVtcGxhdGVcIixcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwudGVtcGxhdGUuVGVtcGxhdGVcIlxuICAgIH0sXG4gICAgXCJUZW1wbGF0ZUxpc3RcIjoge1xuICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc190ZW1wbGF0ZV9UZW1wbGF0ZUxpc3RcIixcbiAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwudGVtcGxhdGUuVGVtcGxhdGVMaXN0XCJcbiAgICB9LFxuICAgIFwiV2F0Y2hFdmVudFwiOiB7XG4gICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfd2F0Y2hfV2F0Y2hFdmVudFwiLFxuICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkud2F0Y2guV2F0Y2hFdmVudFwiXG4gICAgfVxuICB9LFxuICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWVcbn1cblxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJzY2hlbWEudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwia3ViZXJuZXRlc1BsdWdpbi50c1wiLz5cbm1vZHVsZSBLdWJlcm5ldGVzIHtcbiAgXG4gIFxuICB2YXIgaGlkZGVuUHJvcGVydGllcyA9IFsnc3RhdHVzJywgJ2RlbGV0aW9uVGltZXN0YW1wJ107XG5cbiAgZnVuY3Rpb24gd2l0aFByb3BlcnR5KHNjaGVtYTphbnksIG5hbWU6c3RyaW5nLCBhY3Rpb246KGFueSkgPT4gdm9pZCkge1xuICAgIGlmIChzY2hlbWEucHJvcGVydGllc1tuYW1lXSkge1xuICAgICAgYWN0aW9uKHNjaGVtYS5wcm9wZXJ0aWVzW25hbWVdKTtcbiAgICB9XG4gIH1cbiAgXG4gIGZ1bmN0aW9uIGhpZGVQcm9wZXJ0aWVzKHNjaGVtYSkge1xuICAgIF8uZm9yRWFjaChoaWRkZW5Qcm9wZXJ0aWVzLCAocHJvcGVydHkpID0+IHtcbiAgICAgIHdpdGhQcm9wZXJ0eShzY2hlbWEsIHByb3BlcnR5LCAocHJvcGVydHkpID0+IHtcbiAgICAgICAgcHJvcGVydHkuaGlkZGVuID0gdHJ1ZTtcbiAgICAgIH0pXG4gICAgfSk7XG4gIH1cbiAgXG4gIF9tb2R1bGUuZmFjdG9yeSgnS3ViZXJuZXRlc1NjaGVtYScsIFsnU2NoZW1hUmVnaXN0cnknLCAoc2NoZW1hczpIYXd0aW9Gb3Jtcy5TY2hlbWFSZWdpc3RyeSkgPT4ge1xuICAgIGNvbmZpZ3VyZVNjaGVtYSgpO1xuICAgIFxuICAgIHNjaGVtYXMuYWRkTGlzdGVuZXIoXCJrOHMgc2NoZW1hIGN1c3RvbWl6ZXJcIiwgKG5hbWUsIHNjaGVtYSkgPT4ge1xuICAgICAgaWYgKHNjaGVtYS5wcm9wZXJ0aWVzKSB7XG4gICAgICAgIGlmIChzY2hlbWEucHJvcGVydGllcy5uYW1lKSB7XG4gICAgICAgICAgc2NoZW1hLmNvbnRyb2xzID0gWyduYW1lJywgJyonXTtcbiAgICAgICAgfVxuICAgICAgICB3aXRoUHJvcGVydHkoc2NoZW1hLCAncG9ydGFsSVAnLCAocHJvcGVydHkpID0+IHtcbiAgICAgICAgICBwcm9wZXJ0eS5sYWJlbCA9IFwiUG9ydGFsIElQXCJcbiAgICAgICAgfSk7XG4gICAgICAgIHdpdGhQcm9wZXJ0eShzY2hlbWEsICdwdWJsaWNJUHMnLCAocHJvcGVydHkpID0+IHtcbiAgICAgICAgICBwcm9wZXJ0eS5sYWJlbCA9IFwiUHVibGljIElQc1wiXG4gICAgICAgIH0pO1xuICAgICAgICB3aXRoUHJvcGVydHkoc2NoZW1hLCAnU3BlYycsIChwcm9wZXJ0eSkgPT4ge1xuICAgICAgICAgIHByb3BlcnR5LmxhYmVsID0gJ2ZhbHNlJztcbiAgICAgICAgfSk7XG4gICAgICAgIHdpdGhQcm9wZXJ0eShzY2hlbWEsICdNZXRhZGF0YScsIChwcm9wZXJ0eSkgPT4ge1xuICAgICAgICAgIHByb3BlcnR5LmxhYmVsID0gJ2ZhbHNlJztcbiAgICAgICAgfSk7XG4gICAgICAgIGhpZGVQcm9wZXJ0aWVzKHNjaGVtYSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmIChfLmVuZHNXaXRoKG5hbWUsIFwiU2VydmljZVNwZWNcIikpIHtcbiAgICAgICAgc2NoZW1hLmNvbnRyb2xzID0gW1wicG9ydGFsSVBcIiwgXCJjcmVhdGVFeHRlcm5hbExvYWRCYWxhbmNlclwiLCBcInNlc3Npb25BZmZpbml0eVwiLCBcInB1YmxpY0lQc1wiLCBcInBvcnRzXCIsIFwic2VsZWN0b3JcIiwgXCIqXCJdO1xuICAgICAgICB3aXRoUHJvcGVydHkoc2NoZW1hLCAnc2Vzc2lvbkFmZmluaXR5JywgKHByb3BlcnR5KSA9PiB7XG4gICAgICAgICAgbG9nLmRlYnVnKFwiU2NoZW1hOiBcIiwgc2NoZW1hKTtcbiAgICAgICAgICBwcm9wZXJ0eS5lbnVtID0gWydOb25lJywgJ0NsaWVudElQJ107XG4gICAgICAgICAgcHJvcGVydHkuZGVmYXVsdCA9ICdOb25lJztcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmIChfLmVuZHNXaXRoKG5hbWUsIFwiU2VydmljZVwiKSkge1xuICAgICAgICBzY2hlbWEuY29udHJvbHMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHNjaGVtYS50YWJzID0ge1xuICAgICAgICAgICdCYXNpYyBJbmZvcm1hdGlvbic6IFsnbWV0YWRhdGEnXSxcbiAgICAgICAgICAnRGV0YWlscyc6IFsnKiddXG4gICAgICAgIH1cbiAgICAgICAgbG9nLmRlYnVnKFwiTmFtZTogXCIsIG5hbWUsIFwiIFNjaGVtYTogXCIsIHNjaGVtYSk7XG4gICAgICB9XG4gICAgIFxuICAgIH0pO1xuICAgIFxuICAgIFxuICAgIHNjaGVtYXMuYWRkU2NoZW1hKCdrdWJlcm5ldGVzJywgPGFueT4gc2NoZW1hKTtcbiAgICAvLyBub3cgbGV0cyBpdGVyYXRlIGFuZCBhZGQgYWxsIHRoZSBkZWZpbml0aW9ucyB0b29cbiAgICBhbmd1bGFyLmZvckVhY2goc2NoZW1hLmRlZmluaXRpb25zLCAoZGVmaW5pdGlvbiwgdHlwZU5hbWUpID0+IHtcbiAgICAgIC8vc2NoZW1hcy5hZGRTY2hlbWEodHlwZU5hbWUsIGRlZmluaXRpb24pO1xuICAgICAgc2NoZW1hcy5hZGRTY2hlbWEoXCIjL2RlZmluaXRpb25zL1wiICsgdHlwZU5hbWUsIGRlZmluaXRpb24pO1xuICAgIH0pO1xuICAgIHJldHVybiBzY2hlbWE7XG4gIH1dKTtcblxuXG4gIFxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzUGx1Z2luLnRzXCIvPlxuXG5tb2R1bGUgS3ViZXJuZXRlcyB7XG5cbiAgLy8gZmFjYWRlIHRoaXMgdG8gdGhlIHdhdGNoZXIgc2VydmljZVxuICBjbGFzcyBLdWJlcm5ldGVzU3RhdGVJbXBsIGltcGxlbWVudHMgS3ViZXJuZXRlc1N0YXRlIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHdhdGNoZXI6V2F0Y2hlclNlcnZpY2UpIHtcbiAgICB9XG4gICAgZ2V0IG5hbWVzcGFjZXMoKTpBcnJheTxzdHJpbmc+IHtcbiAgICAgIHJldHVybiBfLm1hcCh0aGlzLndhdGNoZXIuZ2V0T2JqZWN0cyhXYXRjaFR5cGVzLk5BTUVTUEFDRVMpLCAobmFtZXNwYWNlKSA9PiB7XG4gICAgICAgIHJldHVybiBuYW1lc3BhY2UubWV0YWRhdGEubmFtZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBnZXQgc2VsZWN0ZWROYW1lc3BhY2UoKTpzdHJpbmcge1xuICAgICAgcmV0dXJuIHRoaXMud2F0Y2hlci5nZXROYW1lc3BhY2UoKTtcbiAgICB9XG4gICAgc2V0IHNlbGVjdGVkTmFtZXNwYWNlKG5hbWVzcGFjZTpzdHJpbmcpIHtcbiAgICAgIHRoaXMud2F0Y2hlci5zZXROYW1lc3BhY2UobmFtZXNwYWNlKTtcbiAgICB9XG4gIH1cblxuICBfbW9kdWxlLmZhY3RvcnkoJ0t1YmVybmV0ZXNTdGF0ZScsIFsnV2F0Y2hlclNlcnZpY2UnLCAod2F0Y2hlcjpXYXRjaGVyU2VydmljZSkgPT4ge1xuICAgIHJldHVybiBuZXcgS3ViZXJuZXRlc1N0YXRlSW1wbCh3YXRjaGVyKTtcbiAgfV0pO1xuXG4gIC8vIFRPRE8gdGhpcyBkb2Vzbid0IG5lZWQgdG8gYmUgYSBzZXJ2aWNlIHJlYWxseVxuICBfbW9kdWxlLmZhY3RvcnkoJ0t1YmVybmV0ZXNBcGlVUkwnLCAoKSA9PiBrdWJlcm5ldGVzQXBpVXJsKCkpO1xuXG4gIC8vIFRPRE8gd2UnbGwgZ2V0IHJpZCBvZiB0aGlzLi4uXG4gIF9tb2R1bGUuZmFjdG9yeSgnS3ViZXJuZXRlc1ZlcnNpb24nLCBbKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBxdWVyeTogKCkgPT4gbnVsbFxuICAgIH1cbiAgfV0pO1xuXG4gIC8vIFRPRE8gbGV0J3MgbW92ZSB0aGVzZSBpbnRvIEt1YmVybmV0ZXNNb2RlbCBzbyBjb250cm9sbGVycyBkb24ndCBoYXZlIHRvIGluamVjdCB0aGVtIHNlcGFyYXRlbHlcbiAgX21vZHVsZS5mYWN0b3J5KCdLdWJlcm5ldGVzUG9kcycsIFsnS3ViZXJuZXRlc01vZGVsJywgKEt1YmVybmV0ZXNNb2RlbCkgPT4ge1xuICAgIHJldHVybiBLdWJlcm5ldGVzTW9kZWxbJ3BvZHNSZXNvdXJjZSddO1xuICB9XSk7XG5cbiAgX21vZHVsZS5mYWN0b3J5KCdLdWJlcm5ldGVzUmVwbGljYXRpb25Db250cm9sbGVycycsIFsnS3ViZXJuZXRlc01vZGVsJywgKEt1YmVybmV0ZXNNb2RlbCkgPT4ge1xuICAgIHJldHVybiBLdWJlcm5ldGVzTW9kZWxbJ3JlcGxpY2F0aW9uY29udHJvbGxlcnNSZXNvdXJjZSddO1xuICB9XSk7XG5cbiAgX21vZHVsZS5mYWN0b3J5KCdLdWJlcm5ldGVzU2VydmljZXMnLCBbJ0t1YmVybmV0ZXNNb2RlbCcsIChLdWJlcm5ldGVzTW9kZWwpID0+IHtcbiAgICByZXR1cm4gS3ViZXJuZXRlc01vZGVsWydzZXJ2aWNlc1Jlc291cmNlJ107XG4gIH1dKTtcblxuICBfbW9kdWxlLmZhY3RvcnkoJ0t1YmVybmV0ZXNCdWlsZHMnLCBbJ3Jlc3Rtb2QnLCAocmVzdG1vZCkgPT4ge1xuICAgIHJldHVybiByZXN0bW9kLm1vZGVsKGJ1aWxkQ29uZmlnc1Jlc3RVUkwoKSk7XG4gIH1dKTtcblxufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNIZWxwZXJzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNQbHVnaW4udHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwia3ViZXJuZXRlc01vZGVsLnRzXCIvPlxubW9kdWxlIEt1YmVybmV0ZXMge1xuXG4gIGV4cG9ydCB2YXIgRmlsZURyb3BDb250cm9sbGVyID0gY29udHJvbGxlcihcIkZpbGVEcm9wQ29udHJvbGxlclwiLCBbXCIkc2NvcGVcIiwgXCJLdWJlcm5ldGVzTW9kZWxcIiwgXCJGaWxlVXBsb2FkZXJcIiwgJyRodHRwJywgKCRzY29wZSwgbW9kZWw6S3ViZXJuZXRlc01vZGVsU2VydmljZSwgRmlsZVVwbG9hZGVyLCAkaHR0cDpuZy5JSHR0cFNlcnZpY2UpID0+IHtcblxuICAgICAgdmFyIHVwbG9hZGVyID0gJHNjb3BlLnVwbG9hZGVyID0gPEZpbGVVcGxvYWQuRmlsZVVwbG9hZGVyPiBuZXcgRmlsZVVwbG9hZGVyKDxGaWxlVXBsb2FkLklPcHRpb25zPntcbiAgICAgICAgYXV0b1VwbG9hZDogZmFsc2UsXG4gICAgICAgIHJlbW92ZUFmdGVyVXBsb2FkOiB0cnVlLFxuICAgICAgICB1cmw6IGt1YmVybmV0ZXNBcGlVcmwoKVxuICAgICAgfSk7XG5cbiAgICAgICRzY29wZS51cGxvYWRlci5vbkFmdGVyQWRkaW5nRmlsZSA9IChmaWxlKSA9PiB7XG4gICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgICByZWFkZXIub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgIGlmIChyZWFkZXIucmVhZHlTdGF0ZSA9PT0gMikge1xuICAgICAgICAgICAgbG9nLmRlYnVnKFwiRmlsZSBhZGRlZDogXCIsIGZpbGUpOyAgICAgICAgXG4gICAgICAgICAgICB2YXIganNvbiA9IHJlYWRlci5yZXN1bHQ7XG4gICAgICAgICAgICB2YXIgb2JqID0gbnVsbDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIG9iaiA9IGFuZ3VsYXIuZnJvbUpzb24oanNvbik7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgbG9nLmRlYnVnKFwiRmFpbGVkIHRvIHJlYWQgZHJvcHBlZCBmaWxlIFwiLCBmaWxlLl9maWxlLm5hbWUsIFwiOiBcIiwgZXJyKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9nLmRlYnVnKFwiRHJvcHBlZCBvYmplY3Q6IFwiLCBvYmopO1xuICAgICAgICAgICAgdXBkYXRlT3JDcmVhdGVPYmplY3Qob2JqLCBtb2RlbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlYWRlci5yZWFkQXNUZXh0KGZpbGUuX2ZpbGUpO1xuICAgICAgfTtcblxuICAgICAgJHNjb3BlLnVwbG9hZGVyLm9uQmVmb3JlVXBsb2FkSXRlbSA9IChpdGVtKSA9PiB7XG4gICAgICAgIGxvZy5kZWJ1ZyhcIlVwbG9hZGluZzogXCIsIGl0ZW0pO1xuICAgICAgICAvL0NvcmUubm90aWZpY2F0aW9uKCdpbmZvJywgJ1VwbG9hZGluZyAnICsgaXRlbSk7XG4gICAgICB9O1xuXG4gICAgICAkc2NvcGUudXBsb2FkZXIub25TdWNjZXNzSXRlbSA9IChpdGVtOkZpbGVVcGxvYWQuSUZpbGVJdGVtKSA9PiB7XG4gICAgICAgIGxvZy5kZWJ1ZyhcIm9uU3VjY2Vzc0l0ZW06IFwiLCBpdGVtKTtcbiAgICAgIH07XG5cbiAgICAgICRzY29wZS51cGxvYWRlci5vbkVycm9ySXRlbSA9IChpdGVtLCByZXNwb25zZSwgc3RhdHVzKSA9PiB7XG4gICAgICAgIGxvZy5kZWJ1ZyhcIkZhaWxlZCB0byBhcHBseSwgcmVzcG9uc2U6IFwiLCByZXNwb25zZSwgXCIgc3RhdHVzOiBcIiwgc3RhdHVzKTtcbiAgICAgIH1cblxuICB9XSk7XG5cdFxuXHRleHBvcnQgdmFyIE5hbWVzcGFjZUNvbnRyb2xsZXIgPSBjb250cm9sbGVyKCdOYW1lc3BhY2VDb250cm9sbGVyJywgWyckc2NvcGUnLCAnV2F0Y2hlclNlcnZpY2UnLCAoJHNjb3BlLCB3YXRjaGVyOldhdGNoZXJTZXJ2aWNlKSA9PiB7XG5cdFx0JHNjb3BlLm5hbWVzcGFjZXMgPSB3YXRjaGVyLmdldE9iamVjdHMoJ25hbWVzcGFjZXMnKTtcblx0XHQkc2NvcGUuJHdhdGNoQ29sbGVjdGlvbignbmFtZXNwYWNlcycsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcblx0XHRcdGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcblx0XHRcdFx0JHNjb3BlLm5hbWVzcGFjZSA9IHdhdGNoZXIuZ2V0TmFtZXNwYWNlKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0JHNjb3BlLiR3YXRjaCgnbmFtZXNwYWNlJywgKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgPT4ge1xuXHRcdFx0aWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuXHRcdFx0XHRpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7XG5cdFx0XHRcdFx0d2F0Y2hlci5zZXROYW1lc3BhY2UobmV3VmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1dKTtcblxuICBleHBvcnQgdmFyIFRvcExldmVsID0gY29udHJvbGxlcihcIlRvcExldmVsXCIsIFtcIiRzY29wZVwiLCBcIndvcmtzcGFjZVwiLCBcIkt1YmVybmV0ZXNWZXJzaW9uXCIsIFwiS3ViZXJuZXRlc1N0YXRlXCIsICgkc2NvcGUsIHdvcmtzcGFjZTpDb3JlLldvcmtzcGFjZSwgS3ViZXJuZXRlc1ZlcnNpb246bmcucmVzb3VyY2UuSVJlc291cmNlQ2xhc3MsIEt1YmVybmV0ZXNTdGF0ZSkgPT4ge1xuXG4gICAgJHNjb3BlLnZlcnNpb24gPSB1bmRlZmluZWQ7XG5cbiAgICAkc2NvcGUuc2hvd0FwcFZpZXcgPSBpc0FwcFZpZXcod29ya3NwYWNlKTtcblxuICAgICRzY29wZS5pc0FjdGl2ZSA9IChocmVmKSA9PiB7XG4gICAgICByZXR1cm4gd29ya3NwYWNlLmlzTGlua0FjdGl2ZShocmVmKTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLmt1YmVybmV0ZXMgPSBLdWJlcm5ldGVzU3RhdGU7XG5cbiAgICBLdWJlcm5ldGVzVmVyc2lvbi5xdWVyeSgocmVzcG9uc2UpID0+IHtcbiAgICAgICRzY29wZS52ZXJzaW9uID0gcmVzcG9uc2U7XG4gICAgfSk7XG5cbiAgfV0pO1xuXG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwia3ViZXJuZXRlc1BsdWdpbi50c1wiLz5cbm1vZHVsZSBLdWJlcm5ldGVzIHtcblx0XG5cdGV4cG9ydCB2YXIgTmFtZXNwYWNlQ29udHJvbGxlciA9IGNvbnRyb2xsZXIoXCJOYW1lc3BhY2VDb250cm9sbGVyXCIsIFtcIiRzY29wZVwiLCBcIldhdGNoZXJTZXJ2aWNlXCIsICgkc2NvcGUsIHdhdGNoZXI6V2F0Y2hlclNlcnZpY2UpID0+IHtcblx0XHQkc2NvcGUud2F0Y2hlciA9IHdhdGNoZXI7XG5cdFx0JHNjb3BlLm5hbWVzcGFjZU9iamVjdHMgPSB3YXRjaGVyLmdldE9iamVjdHMoJ25hbWVzcGFjZXMnKTtcblx0XHQkc2NvcGUubmFtZXNwYWNlID0gd2F0Y2hlci5nZXROYW1lc3BhY2UoKTtcblx0XHQkc2NvcGUubmFtZXNwYWNlcyA9IFtdO1xuXHRcdCRzY29wZS4kd2F0Y2goJ25hbWVzcGFjZScsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcblx0XHRcdGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcblx0XHRcdFx0d2F0Y2hlci5zZXROYW1lc3BhY2UobmV3VmFsdWUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdCRzY29wZS4kd2F0Y2goJ3dhdGNoZXIuZ2V0TmFtZXNwYWNlKCknLCAobmV3VmFsdWUsIG9sZFZhbHVlKSA9PiB7XG5cdFx0XHRpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7XG5cdFx0XHRcdCRzY29wZS5uYW1lc3BhY2UgPSBuZXdWYWx1ZTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHQkc2NvcGUuJHdhdGNoQ29sbGVjdGlvbignbmFtZXNwYWNlT2JqZWN0cycsIChuYW1lc3BhY2VPYmplY3RzKSA9PiB7XG5cdFx0XHQkc2NvcGUubmFtZXNwYWNlcyA9IF8ubWFwKG5hbWVzcGFjZU9iamVjdHMsIChuYW1lc3BhY2U6YW55KSA9PiBuYW1lc3BhY2UubWV0YWRhdGEubmFtZSk7XG5cdFx0fSlcdFx0XG5cdH1dKTtcblx0XG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNIZWxwZXJzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNQbHVnaW4udHNcIi8+XG5cbm1vZHVsZSBLdWJlcm5ldGVzIHtcblxuICB2YXIgT3ZlcnZpZXdEaXJlY3RpdmUgPSBfbW9kdWxlLmRpcmVjdGl2ZShcImt1YmVybmV0ZXNPdmVydmlld1wiLCBbXCIkdGVtcGxhdGVDYWNoZVwiLCBcIiRjb21waWxlXCIsIFwiJGludGVycG9sYXRlXCIsIFwiJHRpbWVvdXRcIiwgXCIkd2luZG93XCIsIFwiS3ViZXJuZXRlc1N0YXRlXCIsICdLdWJlcm5ldGVzTW9kZWwnLCAoJHRlbXBsYXRlQ2FjaGU6bmcuSVRlbXBsYXRlQ2FjaGVTZXJ2aWNlLCAkY29tcGlsZTpuZy5JQ29tcGlsZVNlcnZpY2UsICRpbnRlcnBvbGF0ZTpuZy5JSW50ZXJwb2xhdGVTZXJ2aWNlLCAkdGltZW91dDpuZy5JVGltZW91dFNlcnZpY2UsICR3aW5kb3c6bmcuSVdpbmRvd1NlcnZpY2UsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc01vZGVsKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgbGluazogKHNjb3BlLCBlbGVtZW50LCBhdHRyKSA9PiB7XG4gICAgICAgIHNjb3BlLm1vZGVsID0gS3ViZXJuZXRlc01vZGVsO1xuICAgICAgICBlbGVtZW50LmNzcyh7dmlzaWJpbGl0eTogJ2hpZGRlbid9KTtcbiAgICAgICAgc2NvcGUuZ2V0RW50aXR5ID0gKHR5cGU6c3RyaW5nLCBrZXk6c3RyaW5nKSA9PiB7XG4gICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdob3N0JzpcbiAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlLm1vZGVsLnBvZHNCeUhvc3Rba2V5XTtcbiAgICAgICAgICAgIGNhc2UgJ3BvZCc6XG4gICAgICAgICAgICAgIHJldHVybiBzY29wZS5tb2RlbC5wb2RzQnlLZXlba2V5XTtcbiAgICAgICAgICAgIGNhc2UgJ3JlcGxpY2F0aW9uQ29udHJvbGxlcic6XG4gICAgICAgICAgICAgIHJldHVybiBzY29wZS5tb2RlbC5yZXBsaWNhdGlvbkNvbnRyb2xsZXJzQnlLZXlba2V5XTtcbiAgICAgICAgICAgIGNhc2UgJ3NlcnZpY2UnOlxuICAgICAgICAgICAgICByZXR1cm4gc2NvcGUubW9kZWwuc2VydmljZXNCeUtleVtrZXldO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBzY29wZS5rdWJlcm5ldGVzID0gS3ViZXJuZXRlc1N0YXRlO1xuXG4gICAgICAgIHNjb3BlLmN1c3RvbWl6ZURlZmF1bHRPcHRpb25zID0gKG9wdGlvbnMpID0+IHtcbiAgICAgICAgICBvcHRpb25zLkVuZHBvaW50ID0gWydCbGFuaycsIHt9XTtcbiAgICAgICAgfTtcbiAgICAgICAgc2NvcGUubW91c2VFbnRlciA9ICgkZXZlbnQpID0+IHtcbiAgICAgICAgICBpZiAoc2NvcGUuanNQbHVtYikge1xuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCRldmVudC5jdXJyZW50VGFyZ2V0KS5hZGRDbGFzcyhcImhvdmVyZWRcIik7XG4gICAgICAgICAgICBzY29wZS5qc1BsdW1iLmdldEVuZHBvaW50cygkZXZlbnQuY3VycmVudFRhcmdldCkuZm9yRWFjaCgoZW5kcG9pbnQpID0+IHtcbiAgICAgICAgICAgICAgZW5kcG9pbnQuY29ubmVjdGlvbnMuZm9yRWFjaCgoY29ubmVjdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghY29ubmVjdGlvbi5pc0hvdmVyKCkpIHtcbiAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uc2V0SG92ZXIodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmVuZHBvaW50cy5mb3JFYWNoKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLm1vdXNlRW50ZXIoe1xuICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUYXJnZXQ6IGUuZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2NvcGUubW91c2VMZWF2ZSA9ICgkZXZlbnQpID0+IHtcbiAgICAgICAgICBpZiAoc2NvcGUuanNQbHVtYikge1xuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCRldmVudC5jdXJyZW50VGFyZ2V0KS5yZW1vdmVDbGFzcyhcImhvdmVyZWRcIik7XG4gICAgICAgICAgICBzY29wZS5qc1BsdW1iLmdldEVuZHBvaW50cygkZXZlbnQuY3VycmVudFRhcmdldCkuZm9yRWFjaCgoZW5kcG9pbnQpID0+IHtcbiAgICAgICAgICAgICAgZW5kcG9pbnQuY29ubmVjdGlvbnMuZm9yRWFjaCgoY29ubmVjdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjb25uZWN0aW9uLmlzSG92ZXIoKSkge1xuICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5zZXRIb3ZlcihmYWxzZSk7XG4gICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmVuZHBvaW50cy5mb3JFYWNoKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLm1vdXNlTGVhdmUoe1xuICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUYXJnZXQ6IGUuZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLypcbiAgICAgICAgc2NvcGUuY3VzdG9taXplRW5kcG9pbnRPcHRpb25zID0gKGpzUGx1bWIsIG5vZGUsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgICB2YXIgdHlwZSA9IG5vZGUuZWwuYXR0cignZGF0YS10eXBlJyk7XG4gICAgICAgICAgLy8gbG9nLmRlYnVnKFwiZW5kcG9pbnQgdHlwZTogXCIsIHR5cGUpO1xuICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSAncG9kJzpcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzZXJ2aWNlJzpcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdyZXBsaWNhdGlvbkNvbnRyb2xsZXInOlxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgICovXG4gICAgICAgIHNjb3BlLmN1c3RvbWl6ZUNvbm5lY3Rpb25PcHRpb25zID0gKGpzUGx1bWIsIGVkZ2UsIHBhcmFtcywgb3B0aW9ucykgPT4ge1xuICAgICAgICAgIHZhciB0eXBlID0gZWRnZS5zb3VyY2UuZWwuYXR0cignZGF0YS10eXBlJyk7XG4gICAgICAgICAgb3B0aW9ucy5jb25uZWN0b3IgPSBbIFwiQmV6aWVyXCIsIHsgY3VydmluZXNzOiA1MCwgc3R1YjogMjUsIGFsd2F5c1Jlc3BlY3RTdHViczogdHJ1ZSB9IF07XG4gICAgICAgICAgcGFyYW1zLnBhaW50U3R5bGUgPSB7XG4gICAgICAgICAgICBsaW5lV2lkdGg6IDIsXG4gICAgICAgICAgICBzdHJva2VTdHlsZTogJyM1NTU1Y2MnXG4gICAgICAgICAgfTtcbiAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3BvZCc6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2VydmljZSc6XG4gICAgICAgICAgICAgIHBhcmFtcy5hbmNob3JzID0gW1xuICAgICAgICAgICAgICAgIFsgXCJDb250aW51b3VzUmlnaHRcIiwgeyB9IF0sXG4gICAgICAgICAgICAgICAgWyBcIkNvbnRpbnVvdXNMZWZ0XCIsIHsgfSBdIFxuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgWzEsIDAuNSwgMCwgMCwgLTEwLCAtOTBdLFxuICAgICAgICAgICAgICAgIFswLCAwLjUsIDAsIDAsIC0xMCwgLTkwXVxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncmVwbGljYXRpb25Db250cm9sbGVyJzpcbiAgICAgICAgICAgICAgcGFyYW1zLmFuY2hvcnMgPSBbXG4gICAgICAgICAgICAgICAgWyBcIlBlcmltZXRlclwiLCB7IHNoYXBlOiBcIkNpcmNsZVwiIH0gXSxcbiAgICAgICAgICAgICAgICBbIFwiQ29udGludW91c1JpZ2h0XCIsIHsgfSBdXG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICBbMCwgMC41LCAwLCAwLCAtMTAsIC05MF0sXG4gICAgICAgICAgICAgICAgWzEsIDAuNSwgMCwgMCwgLTEwLCAtOTBdXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vbG9nLmRlYnVnKFwiY29ubmVjdGlvbiBzb3VyY2UgdHlwZTogXCIsIHR5cGUpO1xuICAgICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgICAgICB9O1xuICAgICAgICBmdW5jdGlvbiBpbnRlcnBvbGF0ZSh0ZW1wbGF0ZSwgY29uZmlnKSB7XG4gICAgICAgICAgcmV0dXJuICRpbnRlcnBvbGF0ZSh0ZW1wbGF0ZSkoY29uZmlnKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVFbGVtZW50KHRlbXBsYXRlLCB0aGluZ05hbWUsIHRoaW5nKSB7XG4gICAgICAgICAgdmFyIGNvbmZpZyA9IHt9O1xuICAgICAgICAgIGNvbmZpZ1t0aGluZ05hbWVdID0gdGhpbmc7XG4gICAgICAgICAgcmV0dXJuIGludGVycG9sYXRlKHRlbXBsYXRlLCBjb25maWcpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRzKHRlbXBsYXRlLCB0aGluZ05hbWUsIHRoaW5ncykge1xuICAgICAgICAgIHJldHVybiB0aGluZ3MubWFwKCh0aGluZykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodGVtcGxhdGUsIHRoaW5nTmFtZSwgdGhpbmcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGFwcGVuZE5ld0VsZW1lbnRzKHBhcmVudEVsLCB0ZW1wbGF0ZSwgdGhpbmdOYW1lLCB0aGluZ3MpIHtcbiAgICAgICAgICB0aGluZ3MuZm9yRWFjaCgodGhpbmcpID0+IHtcbiAgICAgICAgICAgIHZhciBrZXkgPSB0aGluZ1snX2tleSddIHx8IHRoaW5nWydlbGVtZW50SWQnXSB8fCB0aGluZ1snaWQnXVxuICAgICAgICAgICAgdmFyIGV4aXN0aW5nID0gcGFyZW50RWwuZmluZChcIiNcIiArIGtleSApO1xuICAgICAgICAgICAgaWYgKCFleGlzdGluZy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgcGFyZW50RWwuYXBwZW5kKCRjb21waWxlKGNyZWF0ZUVsZW1lbnQodGVtcGxhdGUsIHRoaW5nTmFtZSwgdGhpbmcpKShzY29wZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG5hbWVzcGFjZUZpbHRlcihpdGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0TmFtZXNwYWNlKGl0ZW0pID09PSBzY29wZS5rdWJlcm5ldGVzLnNlbGVjdGVkTmFtZXNwYWNlO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGZpcnN0RHJhdygpIHtcbiAgICAgICAgICBsb2cuZGVidWcoXCJGaXJzdCBkcmF3XCIpO1xuICAgICAgICAgIGVsZW1lbnQuZW1wdHkoKTtcbiAgICAgICAgICB2YXIgc2VydmljZXMgPSBzY29wZS5tb2RlbC5zZXJ2aWNlcztcbiAgICAgICAgICB2YXIgcmVwbGljYXRpb25Db250cm9sbGVycyA9IHNjb3BlLm1vZGVsLnJlcGxpY2F0aW9uQ29udHJvbGxlcnM7XG4gICAgICAgICAgdmFyIHBvZHMgPSBzY29wZS5tb2RlbC5wb2RzO1xuICAgICAgICAgIHZhciBob3N0cyA9IHNjb3BlLm1vZGVsLmhvc3RzO1xuICAgICAgICAgIC8vIGxvZy5kZWJ1ZyhcImhvc3RzOiBcIiwgc2NvcGUubW9kZWwuaG9zdHMpO1xuICAgICAgICAgIHZhciBwYXJlbnRFbCA9IGFuZ3VsYXIuZWxlbWVudCgkdGVtcGxhdGVDYWNoZS5nZXQoXCJvdmVydmlld1RlbXBsYXRlLmh0bWxcIikpO1xuICAgICAgICAgIHZhciBzZXJ2aWNlc0VsID0gcGFyZW50RWwuZmluZChcIi5zZXJ2aWNlc1wiKTtcbiAgICAgICAgICB2YXIgaG9zdHNFbCA9IHBhcmVudEVsLmZpbmQoXCIuaG9zdHNcIik7XG4gICAgICAgICAgdmFyIHJlcGxpY2F0aW9uQ29udHJvbGxlcnNFbCA9IHBhcmVudEVsLmZpbmQoXCIucmVwbGljYXRpb25Db250cm9sbGVyc1wiKTtcblxuICAgICAgICAgIHNlcnZpY2VzRWwuYXBwZW5kKGNyZWF0ZUVsZW1lbnRzKCR0ZW1wbGF0ZUNhY2hlLmdldChcInNlcnZpY2VUZW1wbGF0ZS5odG1sXCIpLCAnc2VydmljZScsIHNlcnZpY2VzLmZpbHRlcihuYW1lc3BhY2VGaWx0ZXIpKSk7XG4gICAgICAgICAgcmVwbGljYXRpb25Db250cm9sbGVyc0VsLmFwcGVuZChjcmVhdGVFbGVtZW50cygkdGVtcGxhdGVDYWNoZS5nZXQoXCJyZXBsaWNhdGlvbkNvbnRyb2xsZXJUZW1wbGF0ZS5odG1sXCIpLCAncmVwbGljYXRpb25Db250cm9sbGVyJywgcmVwbGljYXRpb25Db250cm9sbGVycy5maWx0ZXIobmFtZXNwYWNlRmlsdGVyKSkpO1xuXG4gICAgICAgICAgaG9zdHMuZm9yRWFjaCgoaG9zdCkgPT4ge1xuICAgICAgICAgICAgdmFyIGhvc3RFbCA9IGFuZ3VsYXIuZWxlbWVudChjcmVhdGVFbGVtZW50KCR0ZW1wbGF0ZUNhY2hlLmdldChcIm92ZXJ2aWV3SG9zdFRlbXBsYXRlLmh0bWxcIiksICdob3N0JywgaG9zdCkpO1xuICAgICAgICAgICAgdmFyIHBvZENvbnRhaW5lciA9IGFuZ3VsYXIuZWxlbWVudChob3N0RWwuZmluZCgnLnBvZC1jb250YWluZXInKSk7XG4gICAgICAgICAgICBwb2RDb250YWluZXIuYXBwZW5kKGNyZWF0ZUVsZW1lbnRzKCR0ZW1wbGF0ZUNhY2hlLmdldChcInBvZFRlbXBsYXRlLmh0bWxcIiksIFwicG9kXCIsIGhvc3QucG9kcykpO1xuICAgICAgICAgICAgaG9zdHNFbC5hcHBlbmQoaG9zdEVsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvL3BhcmVudEVsLmFwcGVuZChjcmVhdGVFbGVtZW50cygkdGVtcGxhdGVDYWNoZS5nZXQoXCJwb2RUZW1wbGF0ZS5odG1sXCIpLCAncG9kJywgcG9kcykpO1xuICAgICAgICAgIGVsZW1lbnQuYXBwZW5kKCRjb21waWxlKHBhcmVudEVsKShzY29wZSkpO1xuICAgICAgICAgICR0aW1lb3V0KCgpID0+IHsgZWxlbWVudC5jc3Moe3Zpc2liaWxpdHk6ICd2aXNpYmxlJ30pOyB9LCAyNTApO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgICAgIHNjb3BlLiRlbWl0KCdqc3BsdW1iRG9XaGlsZVN1c3BlbmRlZCcsICgpID0+IHtcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyhcIlVwZGF0ZVwiKTtcbiAgICAgICAgICAgIHZhciBzZXJ2aWNlcyA9IHNjb3BlLm1vZGVsLnNlcnZpY2VzO1xuICAgICAgICAgICAgdmFyIHJlcGxpY2F0aW9uQ29udHJvbGxlcnMgPSBzY29wZS5tb2RlbC5yZXBsaWNhdGlvbkNvbnRyb2xsZXJzO1xuICAgICAgICAgICAgdmFyIHBvZHMgPSBzY29wZS5tb2RlbC5wb2RzO1xuICAgICAgICAgICAgdmFyIGhvc3RzID0gc2NvcGUubW9kZWwuaG9zdHM7XG4gICAgICAgICAgICB2YXIgcGFyZW50RWwgPSBlbGVtZW50LmZpbmQoJ1toYXd0aW8tanNwbHVtYl0nKTtcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IHBhcmVudEVsLmZpbmQoJy5qc3BsdW1iLW5vZGUnKTtcbiAgICAgICAgICAgIGNoaWxkcmVuLmVhY2goKGluZGV4LCBjKSA9PiB7XG4gICAgICAgICAgICAgIHZhciBjaGlsZCA9IGFuZ3VsYXIuZWxlbWVudChjKTtcbiAgICAgICAgICAgICAgdmFyIGtleSA9IGNoaWxkLmF0dHIoJ2lkJyk7XG4gICAgICAgICAgICAgIGlmIChDb3JlLmlzQmxhbmsoa2V5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2YXIgdHlwZSA9IGNoaWxkLmF0dHIoJ2RhdGEtdHlwZScpO1xuICAgICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdob3N0JzpcbiAgICAgICAgICAgICAgICAgIGxvZy5kZWJ1Zygna2V5OiAnLCBrZXkpO1xuICAgICAgICAgICAgICAgICAgaWYgKGtleSBpbiBzY29wZS5tb2RlbC5wb2RzQnlIb3N0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NlcnZpY2UnOlxuICAgICAgICAgICAgICAgICAgaWYgKGtleSBpbiBzY29wZS5tb2RlbC5zZXJ2aWNlc0J5S2V5ICYmIGdldE5hbWVzcGFjZShzY29wZS5tb2RlbC5zZXJ2aWNlc0J5S2V5W2tleV0pID09IHNjb3BlLmt1YmVybmV0ZXMuc2VsZWN0ZWROYW1lc3BhY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlcnZpY2UgPSBzY29wZS5tb2RlbC5zZXJ2aWNlc0J5S2V5W2tleV07XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLmF0dHIoJ2Nvbm5lY3QtdG8nLCBzZXJ2aWNlLmNvbm5lY3RUbyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3BvZCc6XG4gICAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgaWYgKGhhc0lkKHBvZHMsIGlkKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgaWYgKGtleSBpbiBzY29wZS5tb2RlbC5wb2RzQnlLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncmVwbGljYXRpb25Db250cm9sbGVyJzpcbiAgICAgICAgICAgICAgICAgIGlmIChrZXkgaW4gc2NvcGUubW9kZWwucmVwbGljYXRpb25Db250cm9sbGVyc0J5S2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXBsaWNhdGlvbkNvbnRyb2xsZXIgPSBzY29wZS5tb2RlbC5yZXBsaWNhdGlvbkNvbnRyb2xsZXJzQnlLZXlba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQuYXR0cignY29ubmVjdC10bycsIHJlcGxpY2F0aW9uQ29udHJvbGxlci5jb25uZWN0VG8pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgbG9nLmRlYnVnKFwiSWdub3JpbmcgZWxlbWVudCB3aXRoIHVua25vd24gdHlwZVwiKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsb2cuZGVidWcoXCJSZW1vdmluZzogXCIsIGtleSk7XG4gICAgICAgICAgICAgIGNoaWxkLnJlbW92ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgc2VydmljZXNFbCA9IGVsZW1lbnQuZmluZChcIi5zZXJ2aWNlc1wiKTtcbiAgICAgICAgICAgIHZhciByZXBsaWNhdGlvbkNvbnRyb2xsZXJzRWwgPSBlbGVtZW50LmZpbmQoXCIucmVwbGljYXRpb25Db250cm9sbGVyc1wiKTtcbiAgICAgICAgICAgIHZhciBob3N0c0VsID0gZWxlbWVudC5maW5kKFwiLmhvc3RzXCIpO1xuXG4gICAgICAgICAgICBhcHBlbmROZXdFbGVtZW50cyhzZXJ2aWNlc0VsLCAkdGVtcGxhdGVDYWNoZS5nZXQoXCJzZXJ2aWNlVGVtcGxhdGUuaHRtbFwiKSwgXCJzZXJ2aWNlXCIsIHNlcnZpY2VzKTtcbiAgICAgICAgICAgIGFwcGVuZE5ld0VsZW1lbnRzKHJlcGxpY2F0aW9uQ29udHJvbGxlcnNFbCwgJHRlbXBsYXRlQ2FjaGUuZ2V0KFwicmVwbGljYXRpb25Db250cm9sbGVyVGVtcGxhdGUuaHRtbFwiKSwgXCJyZXBsaWNhdGlvbkNvbnRyb2xsZXJcIiwgcmVwbGljYXRpb25Db250cm9sbGVycyk7XG4gICAgICAgICAgICBhcHBlbmROZXdFbGVtZW50cyhob3N0c0VsLCAkdGVtcGxhdGVDYWNoZS5nZXQoXCJvdmVydmlld0hvc3RUZW1wbGF0ZS5odG1sXCIpLCBcImhvc3RcIiwgaG9zdHMpO1xuICAgICAgICAgICAgaG9zdHMuZm9yRWFjaCgoaG9zdCkgPT4ge1xuICAgICAgICAgICAgICB2YXIgaG9zdEVsID0gYW5ndWxhci5lbGVtZW50KGhvc3RzRWwuZmluZChcIiNcIiArIGhvc3QuZWxlbWVudElkKSk7XG4gICAgICAgICAgICAgIHZhciBwb2RDb250YWluZXIgPSBhbmd1bGFyLmVsZW1lbnQoaG9zdEVsLmZpbmQoJy5wb2QtY29udGFpbmVyJykpO1xuICAgICAgICAgICAgICBhcHBlbmROZXdFbGVtZW50cyhwb2RDb250YWluZXIsICR0ZW1wbGF0ZUNhY2hlLmdldChcInBvZFRlbXBsYXRlLmh0bWxcIiksIFwicG9kXCIsIGhvc3QucG9kcyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlZnJlc2hEcmF3aW5nKCkge1xuICAgICAgICAgIGxvZy5kZWJ1ZyhcIlJlZnJlc2hpbmcgZHJhd2luZ1wiKTtcbiAgICAgICAgICBpZiAoZWxlbWVudC5jaGlsZHJlbigpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZmlyc3REcmF3KCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVwZGF0ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBDb3JlLiRhcHBseShzY29wZSk7XG4gICAgICAgIH1cblxuICAgICAgICBzY29wZS4kb24oJ2t1YmVybmV0ZXNNb2RlbFVwZGF0ZWQnLCBfLmRlYm91bmNlKHJlZnJlc2hEcmF3aW5nLCA1MDAsIHsgdHJhaWxpbmc6IHRydWV9KSk7XG4gICAgICAgIHNldFRpbWVvdXQocmVmcmVzaERyYXdpbmcsIDEwMCk7XG4gICAgICB9XG4gICAgfTtcbiAgfV0pO1xuXG4gIHZhciBPdmVydmlld0JveENvbnRyb2xsZXIgPSBjb250cm9sbGVyKFwiT3ZlcnZpZXdCb3hDb250cm9sbGVyXCIsIFtcIiRzY29wZVwiLCBcIiRsb2NhdGlvblwiLCAoJHNjb3BlLCAkbG9jYXRpb246bmcuSUxvY2F0aW9uU2VydmljZSkgPT4ge1xuICAgICRzY29wZS52aWV3RGV0YWlscyA9IChlbnRpdHksIHBhdGg6c3RyaW5nKSA9PiB7XG4gICAgICBpZiAoZW50aXR5KSB7XG4gICAgICAgIHZhciBuYW1lc3BhY2UgPSBnZXROYW1lc3BhY2UoZW50aXR5KTtcbiAgICAgICAgdmFyIGlkID0gZ2V0TmFtZShlbnRpdHkpO1xuICAgICAgICAkbG9jYXRpb24ucGF0aChVcmxIZWxwZXJzLmpvaW4oJy9rdWJlcm5ldGVzL25hbWVzcGFjZScsIG5hbWVzcGFjZSwgcGF0aCwgaWQpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZy53YXJuKFwiTm8gZW50aXR5IGZvciB2aWV3RGV0YWlscyFcIik7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgdmFyIHNjb3BlTmFtZSA9IFwiT3ZlcnZpZXdDb250cm9sbGVyXCI7XG5cbiAgdmFyIE92ZXJ2aWV3Q29udHJvbGxlciA9IGNvbnRyb2xsZXIoc2NvcGVOYW1lLCBbXCIkc2NvcGVcIiwgXCIkbG9jYXRpb25cIiwgXCIkaHR0cFwiLCBcIiR0aW1lb3V0XCIsIFwiJHJvdXRlUGFyYW1zXCIsIFwiS3ViZXJuZXRlc01vZGVsXCIsXCJLdWJlcm5ldGVzU3RhdGVcIiwgXCJLdWJlcm5ldGVzQXBpVVJMXCIsICgkc2NvcGUsICRsb2NhdGlvbiwgJGh0dHAsICR0aW1lb3V0LCAkcm91dGVQYXJhbXMsIEt1YmVybmV0ZXNNb2RlbCwgS3ViZXJuZXRlc1N0YXRlLCBLdWJlcm5ldGVzQXBpVVJMKSA9PiB7XG4gICAgJHNjb3BlLm5hbWUgPSBzY29wZU5hbWU7XG4gICAgJHNjb3BlLmt1YmVybmV0ZXMgPSBLdWJlcm5ldGVzU3RhdGU7XG4gICAgJHNjb3BlLm1vZGVsID0gS3ViZXJuZXRlc01vZGVsO1xuXG4gICAgS3ViZXJuZXRlcy5pbml0U2hhcmVkKCRzY29wZSwgJGxvY2F0aW9uLCAkaHR0cCwgJHRpbWVvdXQsICRyb3V0ZVBhcmFtcywgS3ViZXJuZXRlc01vZGVsLCBLdWJlcm5ldGVzU3RhdGUsIEt1YmVybmV0ZXNBcGlVUkwpO1xuICB9XSk7XG5cbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9pbmNsdWRlcy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzUGx1Z2luLnRzXCIvPlxuXG5tb2R1bGUgS3ViZXJuZXRlcyB7XG5cbiAgZXhwb3J0IHZhciBQaXBlbGluZXNDb250cm9sbGVyID0gY29udHJvbGxlcihcIlBpcGVsaW5lc0NvbnRyb2xsZXJcIiwgW1wiJHNjb3BlXCIsIFwiS3ViZXJuZXRlc01vZGVsXCIsIFwiS3ViZXJuZXRlc0J1aWxkc1wiLCBcIkt1YmVybmV0ZXNTdGF0ZVwiLCBcIiRkaWFsb2dcIiwgXCIkd2luZG93XCIsIFwiJHRlbXBsYXRlQ2FjaGVcIiwgXCIkcm91dGVQYXJhbXNcIiwgXCIkbG9jYXRpb25cIiwgXCJsb2NhbFN0b3JhZ2VcIiwgXCIkaHR0cFwiLCBcIiR0aW1lb3V0XCIsIFwiS3ViZXJuZXRlc0FwaVVSTFwiLFxuICAgICgkc2NvcGUsIEt1YmVybmV0ZXNNb2RlbDpLdWJlcm5ldGVzLkt1YmVybmV0ZXNNb2RlbFNlcnZpY2UsIEt1YmVybmV0ZXNCdWlsZHMsIEt1YmVybmV0ZXNTdGF0ZSwgJGRpYWxvZywgJHdpbmRvdywgJHRlbXBsYXRlQ2FjaGUsICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uOm5nLklMb2NhdGlvblNlcnZpY2UsIGxvY2FsU3RvcmFnZSwgJGh0dHAsICR0aW1lb3V0LCBLdWJlcm5ldGVzQXBpVVJMKSA9PiB7XG5cbiAgICAgICRzY29wZS5rdWJlcm5ldGVzID0gS3ViZXJuZXRlc1N0YXRlO1xuICAgICAgJHNjb3BlLm1vZGVsID0gS3ViZXJuZXRlc01vZGVsO1xuICAgICAgJHNjb3BlLkt1YmVybmV0ZXNCdWlsZHMgPSBLdWJlcm5ldGVzQnVpbGRzO1xuXG4gICAgICBLdWJlcm5ldGVzLmluaXRTaGFyZWQoJHNjb3BlLCAkbG9jYXRpb24sICRodHRwLCAkdGltZW91dCwgJHJvdXRlUGFyYW1zLCBLdWJlcm5ldGVzTW9kZWwsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc0FwaVVSTCk7XG5cbiAgICAgIC8qKlxuICAgICAgICogTGV0cyB1cGRhdGUgdGhlIHZhcmlvdXMgZGF0YSB0byBqb2luIHRoZW0gdG9nZXRoZXIgdG8gYSBwaXBlbGluZSBtb2RlbFxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiB1cGRhdGVEYXRhKCkge1xuICAgICAgICB2YXIgcGlwZWxpbmVTdGVwcyA9IHt9O1xuICAgICAgICBpZiAoJHNjb3BlLmJ1aWxkQ29uZmlncyAmJiAkc2NvcGUuYnVpbGRzICYmICRzY29wZS5kZXBsb3ltZW50Q29uZmlncykge1xuICAgICAgICAgIGVucmljaEJ1aWxkQ29uZmlncygkc2NvcGUuYnVpbGRDb25maWdzLCAkc2NvcGUuYnVpbGRzKTtcbiAgICAgICAgICAkc2NvcGUuZmV0Y2hlZCA9IHRydWU7XG5cbiAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLmJ1aWxkQ29uZmlncywgKGJ1aWxkQ29uZmlnKSA9PiB7XG4gICAgICAgICAgICB2YXIgcGlwZWxpbmVLZXkgPSBjcmVhdGVQaXBlbGluZUtleShidWlsZENvbmZpZyk7XG4gICAgICAgICAgICBpZiAocGlwZWxpbmVLZXkpIHtcbiAgICAgICAgICAgICAgcGlwZWxpbmVTdGVwc1twaXBlbGluZUtleV0gPSB7XG4gICAgICAgICAgICAgICAgYnVpbGRDb25maWc6IGJ1aWxkQ29uZmlnLFxuICAgICAgICAgICAgICAgIGJ1aWxkczogW10sXG4gICAgICAgICAgICAgICAgdHJpZ2dlcmVkQnk6IG51bGwsXG4gICAgICAgICAgICAgICAgdHJpZ2dlcnNTdGVwczogW10sXG4gICAgICAgICAgICAgICAgJGNsYXNzOiAncGlwZWxpbmUtYnVpbGQnXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLmJ1aWxkcywgKGJ1aWxkKSA9PiB7XG4gICAgICAgICAgICB2YXIgcGlwZWxpbmVLZXkgPSBjcmVhdGVQaXBlbGluZUtleShidWlsZCk7XG4gICAgICAgICAgICBpZiAocGlwZWxpbmVLZXkpIHtcbiAgICAgICAgICAgICAgdmFyIHBpcGVsaW5lID0gcGlwZWxpbmVTdGVwc1twaXBlbGluZUtleV07XG4gICAgICAgICAgICAgIGlmICghcGlwZWxpbmUpIHtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwid2FybmluZyBubyBwaXBlbGluZSBnZW5lcmF0ZWQgZm9yIGJ1aWxkQ29uZmlnIGZvciBrZXkgXCIgKyBwaXBlbGluZUtleSArIFwiIGZvciBidWlsZCBcIiArIGFuZ3VsYXIudG9Kc29uKGJ1aWxkLCB0cnVlKSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJ3YXJuaW5nIG5vIHBpcGVsaW5lIGdlbmVyYXRlZCBmb3IgYnVpbGRDb25maWcgZm9yIGtleSBcIiArIHBpcGVsaW5lS2V5ICsgXCIgZm9yIGJ1aWxkIFwiICsgYnVpbGQuJG5hbWUpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBpcGVsaW5lLmJ1aWxkcy5wdXNoKGJ1aWxkKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gVE9ETyBub3cgd2UgbmVlZCB0byBsb29rIGF0IHRoZSB0cmlnZ2VycyB0byBmaWd1cmUgb3V0IHdoaWNoIHBpcGVsaW5lU3RlcHMgdHJpZ2dlcnMgZWFjaCBwaXBlbGluZVN0ZXBcblxuXG4gICAgICAgICAgLy8gbm93IGxldHMgY3JlYXRlIGFuIGFycmF5IG9mIGFsbCBwaXBlbGluZXMsIHN0YXJ0aW5nIGZyb20gdGhlIGZpcnN0IGtub3duIHN0ZXAgd2l0aCBhIGxpc3Qgb2YgdGhlIHN0ZXBzXG5cbiAgICAgICAgICB2YXIgcGlwZWxpbmVzID0gW107XG4gICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHBpcGVsaW5lU3RlcHMsIChwaXBlbGluZVN0ZXAsIGtleSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFwaXBlbGluZVN0ZXAudHJpZ2dlcmVkQnkpIHtcbiAgICAgICAgICAgICAgLy8gd2UgYXJlIGEgcm9vdCBzdGVwLi4uLlxuICAgICAgICAgICAgICBwaXBlbGluZXMucHVzaChwaXBlbGluZVN0ZXApO1xuICAgICAgICAgICAgICAvLyBub3cgbGV0cyBhZGQgYWxsIHRoZSBzdGVwcyBmb3IgdGhpcyBrZXkuLi5cbiAgICAgICAgICAgICAgcGlwZWxpbmVTdGVwLnRyaWdnZXJzU3RlcHMucHVzaChwaXBlbGluZVN0ZXApO1xuICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gocGlwZWxpbmVTdGVwcywgKHN0ZXApID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoc3RlcC50cmlnZ2VyZWRCeSA9PT0ga2V5KSB7XG4gICAgICAgICAgICAgICAgICBwaXBlbGluZVN0ZXAudHJpZ2dlcnNTdGVwcy5wdXNoKHN0ZXApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLmRlcGxveW1lbnRDb25maWdzLCAoZGVwbG95bWVudENvbmZpZykgPT4ge1xuICAgICAgICAgICAgaWYgKCFkZXBsb3ltZW50Q29uZmlnLmtpbmQpIHtcbiAgICAgICAgICAgICAgZGVwbG95bWVudENvbmZpZy5raW5kID0gXCJEZXBsb3ltZW50Q29uZmlnXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goZGVwbG95bWVudENvbmZpZy50cmlnZ2VycywgKHRyaWdnZXIpID0+IHtcbiAgICAgICAgICAgICAgdmFyIHR5cGUgPSB0cmlnZ2VyLnR5cGU7XG4gICAgICAgICAgICAgIHZhciBpbWFnZUNoYW5nZVBhcmFtcyA9IHRyaWdnZXIuaW1hZ2VDaGFuZ2VQYXJhbXM7XG4gICAgICAgICAgICAgIGlmIChpbWFnZUNoYW5nZVBhcmFtcyAmJiB0eXBlID09PSBcIkltYWdlQ2hhbmdlXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgZnJvbSA9IGltYWdlQ2hhbmdlUGFyYW1zLmZyb207XG4gICAgICAgICAgICAgICAgaWYgKGZyb20pIHtcbiAgICAgICAgICAgICAgICAgIHZhciBuYW1lID0gZnJvbS5uYW1lO1xuICAgICAgICAgICAgICAgICAgaWYgKGZyb20ua2luZCA9PT0gXCJJbWFnZVJlcG9zaXRvcnlcIikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFnID0gaW1hZ2VDaGFuZ2VQYXJhbXMudGFnIHx8IFwibGF0ZXN0XCI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gbm93IGxldHMgZmluZCBhIHBpcGVsaW5lIHN0ZXAgd2hpY2ggZmlyZXMgZnJvbSB0aGlzXG4gICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHBpcGVsaW5lU3RlcHMsIChwaXBlbGluZVN0ZXAsIGtleSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvID0gQ29yZS5wYXRoR2V0KHBpcGVsaW5lU3RlcCwgW1wiYnVpbGRDb25maWdcIiwgXCJwYXJhbWV0ZXJzXCIsIFwib3V0cHV0XCIsIFwidG9cIl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRvICYmICh0by5raW5kID09PSBcIkltYWdlUmVwb3NpdG9yeVwiIHx8IHRvLmtpbmQgPT09IFwiSW1hZ2VTdHJlYW1cIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvTmFtZSA9IHRvLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b05hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0b3IgPSBDb3JlLnBhdGhHZXQoZGVwbG95bWVudENvbmZpZywgW1widGVtcGxhdGVcIiwgXCJjb250cm9sbGVyVGVtcGxhdGVcIiwgXCJzZWxlY3RvclwiXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvZHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJHBvZENvdW50ZXJzID0gc2VsZWN0b3IgPyBjcmVhdGVQb2RDb3VudGVycyhzZWxlY3RvciwgS3ViZXJuZXRlc01vZGVsLnBvZHNGb3JOYW1lc3BhY2UoKSwgcG9kcykgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZXBsb3lQaXBlbGluZVN0ZXAgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZENvbmZpZzogZGVwbG95bWVudENvbmZpZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjbGFzczogJ3BpcGVsaW5lLWRlcGxveScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcG9kQ291bnRlcnM6ICRwb2RDb3VudGVycyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwb2RzOiBwb2RzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaXBlbGluZVN0ZXAudHJpZ2dlcnNTdGVwcy5wdXNoKGRlcGxveVBpcGVsaW5lU3RlcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgJHNjb3BlLnBpcGVsaW5lcyA9IHBpcGVsaW5lcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIExldHMgY3JlYXRlIGEgdW5pcXVlIGtleSBmb3IgYnVpbGQgLyBjb25maWcgd2UgY2FuIHVzZSB0byBkbyBsaW5raW5nIG9mIGJ1aWxkcyAvIGNvbmZpZ3MgLyB0cmlnZ2Vyc1xuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBjcmVhdGVQaXBlbGluZUtleShidWlsZENvbmZpZykge1xuICAgICAgICByZXR1cm4gQ29yZS5wYXRoR2V0KGJ1aWxkQ29uZmlnLCBbXCJwYXJhbWV0ZXJzXCIsIFwic291cmNlXCIsIFwiZ2l0XCIsIFwidXJpXCJdKTtcbiAgICAgIH1cblxuICAgICAgJHNjb3BlLiRrZWVwUG9sbGluZyA9ICgpID0+IGtlZXBQb2xsaW5nTW9kZWw7XG4gICAgICAkc2NvcGUuZmV0Y2ggPSBQb2xsSGVscGVycy5zZXR1cFBvbGxpbmcoJHNjb3BlLCAobmV4dDooKSA9PiB2b2lkKSA9PiB7XG4gICAgICAgIHZhciByZWFkeSA9IDA7XG4gICAgICAgIHZhciBudW1TZXJ2aWNlcyA9IDM7XG5cbiAgICAgICAgZnVuY3Rpb24gbWF5YmVOZXh0KCkge1xuICAgICAgICAgIGlmICgrK3JlYWR5ID49IG51bVNlcnZpY2VzKSB7XG4gICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHVybCA9IGJ1aWxkc1Jlc3RVUkwoKTtcbiAgICAgICAgJGh0dHAuZ2V0KHVybCkuXG4gICAgICAgICAgc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICRzY29wZS5idWlsZHMgPSBlbnJpY2hCdWlsZHMoZGF0YS5pdGVtcyk7XG4gICAgICAgICAgICAgIHVwZGF0ZURhdGEoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1heWJlTmV4dCgpO1xuICAgICAgICAgIH0pLlxuICAgICAgICAgIGVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgbG9nLndhcm4oXCJGYWlsZWQgdG8gbG9hZCBcIiArIHVybCArIFwiIFwiICsgZGF0YSArIFwiIFwiICsgc3RhdHVzKTtcbiAgICAgICAgICAgIG1heWJlTmV4dCgpO1xuXG4gICAgICAgICAgfSk7XG4gICAgICAgIHVybCA9IGJ1aWxkQ29uZmlnc1Jlc3RVUkwoKTtcbiAgICAgICAgJGh0dHAuZ2V0KHVybCkuXG4gICAgICAgICAgc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICRzY29wZS5idWlsZENvbmZpZ3MgPSBkYXRhLml0ZW1zO1xuICAgICAgICAgICAgICB1cGRhdGVEYXRhKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtYXliZU5leHQoKTtcbiAgICAgICAgICB9KS5cbiAgICAgICAgICBlcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgIGxvZy53YXJuKFwiRmFpbGVkIHRvIGxvYWQgXCIgKyB1cmwgKyBcIiBcIiArIGRhdGEgKyBcIiBcIiArIHN0YXR1cyk7XG4gICAgICAgICAgICBtYXliZU5leHQoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgdXJsID0gZGVwbG95bWVudENvbmZpZ3NSZXN0VVJMKCk7XG4gICAgICAgICRodHRwLmdldCh1cmwpLlxuICAgICAgICAgIHN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAkc2NvcGUuZGVwbG95bWVudENvbmZpZ3MgPSBkYXRhLml0ZW1zO1xuICAgICAgICAgICAgICB1cGRhdGVEYXRhKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtYXliZU5leHQoKTtcbiAgICAgICAgICB9KS5cbiAgICAgICAgICBlcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgIGxvZy53YXJuKFwiRmFpbGVkIHRvIGxvYWQgXCIgKyB1cmwgKyBcIiBcIiArIGRhdGEgKyBcIiBcIiArIHN0YXR1cyk7XG4gICAgICAgICAgICBtYXliZU5leHQoKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICAkc2NvcGUuZmV0Y2goKTtcbiAgICB9XSk7XG5cbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9pbmNsdWRlcy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzSGVscGVycy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzUGx1Z2luLnRzXCIvPlxuXG5tb2R1bGUgS3ViZXJuZXRlcyB7XG5cbiAgZXhwb3J0IHZhciBQb2RDb250cm9sbGVyID0gY29udHJvbGxlcihcIlBvZENvbnRyb2xsZXJcIixcbiAgICBbXCIkc2NvcGVcIiwgXCJLdWJlcm5ldGVzTW9kZWxcIiwgXCJLdWJlcm5ldGVzU3RhdGVcIiwgXCJTZXJ2aWNlUmVnaXN0cnlcIiwgXCIkdGVtcGxhdGVDYWNoZVwiLCBcIiRsb2NhdGlvblwiLCBcIiRyb3V0ZVBhcmFtc1wiLCBcIiRodHRwXCIsIFwiJHRpbWVvdXRcIiwgXCIkd2luZG93XCIsIFwiS3ViZXJuZXRlc0FwaVVSTFwiLFxuICAgICAgKCRzY29wZSwgS3ViZXJuZXRlc01vZGVsOiBLdWJlcm5ldGVzLkt1YmVybmV0ZXNNb2RlbFNlcnZpY2UsIEt1YmVybmV0ZXNTdGF0ZSwgU2VydmljZVJlZ2lzdHJ5LFxuICAgICAgICR0ZW1wbGF0ZUNhY2hlOm5nLklUZW1wbGF0ZUNhY2hlU2VydmljZSwgJGxvY2F0aW9uOm5nLklMb2NhdGlvblNlcnZpY2UsICRyb3V0ZVBhcmFtcywgJGh0dHAsICR0aW1lb3V0LCAkd2luZG93LCBLdWJlcm5ldGVzQXBpVVJMKSA9PiB7XG5cbiAgICAkc2NvcGUua3ViZXJuZXRlcyA9IEt1YmVybmV0ZXNTdGF0ZTtcbiAgICAkc2NvcGUubW9kZWwgPSBLdWJlcm5ldGVzTW9kZWw7XG4gICAgJHNjb3BlLnJhd01vZGUgPSBmYWxzZTtcbiAgICAkc2NvcGUucmF3TW9kZWwgPSBudWxsO1xuXG4gICAgJHNjb3BlLml0ZW1Db25maWcgPSB7XG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICdjb250YWluZXJzL2ltYWdlJCc6IHtcbiAgICAgICAgICB0ZW1wbGF0ZTogJHRlbXBsYXRlQ2FjaGUuZ2V0KCdpbWFnZVRlbXBsYXRlLmh0bWwnKVxuICAgICAgICB9LFxuICAgICAgICAnc3RhdHVzL3BoYXNlJzoge1xuICAgICAgICAgIHRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoJ3N0YXR1c1RlbXBsYXRlLmh0bWwnKVxuICAgICAgICB9LFxuICAgICAgICAnXFxcXC9FbnZcXFxcLyc6IHtcbiAgICAgICAgICB0ZW1wbGF0ZTogJHRlbXBsYXRlQ2FjaGUuZ2V0KCdlbnZJdGVtVGVtcGxhdGUuaHRtbCcpXG4gICAgICAgIH0sXG4gICAgICAgICdeXFxcXC9sYWJlbHMkJzoge1xuICAgICAgICAgIHRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoJ2xhYmVsVGVtcGxhdGUuaHRtbCcpXG4gICAgICAgIH0sXG4gICAgICAgICdcXFxcL2VudlxcXFwva2V5JCc6IHtcbiAgICAgICAgICBoaWRkZW46IHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBLdWJlcm5ldGVzLmluaXRTaGFyZWQoJHNjb3BlLCAkbG9jYXRpb24sICRodHRwLCAkdGltZW91dCwgJHJvdXRlUGFyYW1zLCBLdWJlcm5ldGVzTW9kZWwsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc0FwaVVSTCk7XG5cbiAgICAkc2NvcGUuJG9uKCdrdWJlcm5ldGVzTW9kZWxVcGRhdGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgdXBkYXRlRGF0YSgpO1xuICAgIH0pO1xuXG4gICAgJHNjb3BlLiRvbignJHJvdXRlVXBkYXRlJywgKCRldmVudCkgPT4ge1xuICAgICAgdXBkYXRlRGF0YSgpO1xuICAgIH0pO1xuXG4gICAgJHNjb3BlLiR3YXRjaCgnbW9kZWwucG9kcycsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcbiAgICAgIHVwZGF0ZURhdGEoKTtcbiAgICB9LCB0cnVlKTtcblxuICAgICRzY29wZS5mbGlwUmF3ID0gKCkgPT4ge1xuICAgICAgJHNjb3BlLnJhd01vZGUgPSAhJHNjb3BlLnJhd01vZGU7XG4gICAgICBDb3JlLiRhcHBseSgkc2NvcGUpO1xuICAgIH07XG5cbiAgICAkc2NvcGUub3BlbkxvZ3MgPSAoKSA9PiB7XG4gICAgICB2YXIgcG9kcyA9IFskc2NvcGUuaXRlbV07XG4gICAgICBvcGVuTG9nc0ZvclBvZHMoU2VydmljZVJlZ2lzdHJ5LCAkd2luZG93LCBLdWJlcm5ldGVzTW9kZWwuY3VycmVudE5hbWVzcGFjZSgpLCBwb2RzKTtcbiAgICB9O1xuXG4gICAgdXBkYXRlRGF0YSgpO1xuXG4gICAgZnVuY3Rpb24gdXBkYXRlRGF0YSgpIHtcbiAgICAgICRzY29wZS5pZCA9ICRyb3V0ZVBhcmFtc1tcImlkXCJdO1xuICAgICAgJHNjb3BlLml0ZW0gPSAkc2NvcGUubW9kZWwuZ2V0UG9kKEt1YmVybmV0ZXNTdGF0ZS5zZWxlY3RlZE5hbWVzcGFjZSwgJHNjb3BlLmlkKTtcbiAgICAgIGlmICgkc2NvcGUuaXRlbSkge1xuICAgICAgICAkc2NvcGUucmF3TW9kZWwgPSB0b1Jhd0pzb24oJHNjb3BlLml0ZW0pO1xuICAgICAgfVxuICAgICAgQ29yZS4kYXBwbHkoJHNjb3BlKTtcbiAgICB9XG4gIH1dKTtcbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9pbmNsdWRlcy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzSGVscGVycy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzUGx1Z2luLnRzXCIvPlxuXG5tb2R1bGUgS3ViZXJuZXRlcyB7XG5cbiAgZXhwb3J0IHZhciBQb2RFZGl0Q29udHJvbGxlciA9IGNvbnRyb2xsZXIoXCJQb2RFZGl0Q29udHJvbGxlclwiLFxuICAgIFtcIiRzY29wZVwiLCBcIkt1YmVybmV0ZXNNb2RlbFwiLCBcIkt1YmVybmV0ZXNTdGF0ZVwiLCBcIkt1YmVybmV0ZXNTY2hlbWFcIiwgXCIkdGVtcGxhdGVDYWNoZVwiLCBcIiRsb2NhdGlvblwiLCBcIiRyb3V0ZVBhcmFtc1wiLCBcIiRodHRwXCIsIFwiJHRpbWVvdXRcIiwgXCJLdWJlcm5ldGVzQXBpVVJMXCIsIFwiU2NoZW1hUmVnaXN0cnlcIixcbiAgICAgICgkc2NvcGUsIEt1YmVybmV0ZXNNb2RlbDogS3ViZXJuZXRlcy5LdWJlcm5ldGVzTW9kZWxTZXJ2aWNlLCBLdWJlcm5ldGVzU3RhdGUsIEt1YmVybmV0ZXNTY2hlbWEsXG4gICAgICAgJHRlbXBsYXRlQ2FjaGU6bmcuSVRlbXBsYXRlQ2FjaGVTZXJ2aWNlLCAkbG9jYXRpb246bmcuSUxvY2F0aW9uU2VydmljZSwgJHJvdXRlUGFyYW1zLCAkaHR0cCwgJHRpbWVvdXQsIEt1YmVybmV0ZXNBcGlVUkwsIHNjaGVtYXM6SGF3dGlvRm9ybXMuU2NoZW1hUmVnaXN0cnkpID0+IHtcblxuICAgICRzY29wZS5rdWJlcm5ldGVzID0gS3ViZXJuZXRlc1N0YXRlO1xuICAgICRzY29wZS5tb2RlbCA9IEt1YmVybmV0ZXNNb2RlbDtcbiAgICAkc2NvcGUuaWQgPSAkcm91dGVQYXJhbXNbXCJpZFwiXTtcbiAgICAkc2NvcGUuc2NoZW1hID0gS3ViZXJuZXRlc1NjaGVtYTtcbiAgICAkc2NvcGUuY29uZmlnID0gc2NoZW1hcy5jbG9uZVNjaGVtYShcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuUG9kXCIpO1xuICAgIC8vJHNjb3BlLmNvbmZpZyA9IEt1YmVybmV0ZXNTY2hlbWEuZGVmaW5pdGlvbnMua3ViZXJuZXRlc192MWJldGEyX1BvZDtcblxuICAgIEt1YmVybmV0ZXMuaW5pdFNoYXJlZCgkc2NvcGUsICRsb2NhdGlvbiwgJGh0dHAsICR0aW1lb3V0LCAkcm91dGVQYXJhbXMsIEt1YmVybmV0ZXNNb2RlbCwgS3ViZXJuZXRlc1N0YXRlLCBLdWJlcm5ldGVzQXBpVVJMKTtcblxuICAgICRzY29wZS4kb24oJyRyb3V0ZVVwZGF0ZScsICgkZXZlbnQpID0+IHtcbiAgICAgIHVwZGF0ZURhdGEoKTtcbiAgICB9KTtcblxuICAgIHVwZGF0ZURhdGEoKTtcblxuICAgIGZ1bmN0aW9uIHVwZGF0ZURhdGEoKSB7XG4gICAgICBpZiAoJHNjb3BlLmlkKSB7XG4gICAgICAgICRzY29wZS5lbnRpdHkgPSAkc2NvcGUubW9kZWwuZ2V0UG9kKEt1YmVybmV0ZXNTdGF0ZS5zZWxlY3RlZE5hbWVzcGFjZSwgJHNjb3BlLmlkKTtcbiAgICAgICAgQ29yZS4kYXBwbHkoJHNjb3BlKTtcbiAgICAgICAgJHNjb3BlLmZldGNoZWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHNjb3BlLmZldGNoZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNQbHVnaW4udHNcIi8+XG5cbm1vZHVsZSBLdWJlcm5ldGVzIHtcblxuICBleHBvcnQgdmFyIEVudkl0ZW0gPSBjb250cm9sbGVyKFwiRW52SXRlbVwiLCBbXCIkc2NvcGVcIiwgKCRzY29wZSkgPT4ge1xuICAgIHZhciBwYXJ0cyA9ICRzY29wZS5kYXRhLnNwbGl0KCc9Jyk7XG4gICAgJHNjb3BlLmtleSA9IHBhcnRzLnNoaWZ0KCk7XG4gICAgJHNjb3BlLnZhbHVlID0gcGFydHMuam9pbignPScpO1xuICB9XSk7XG5cbiAgLy8gbWFpbiBjb250cm9sbGVyIGZvciB0aGUgcGFnZVxuICBleHBvcnQgdmFyIFBvZHMgPSBjb250cm9sbGVyKFwiUG9kc1wiLCBbXCIkc2NvcGVcIiwgXCJLdWJlcm5ldGVzTW9kZWxcIiwgXCJLdWJlcm5ldGVzUG9kc1wiLCBcIkt1YmVybmV0ZXNTdGF0ZVwiLCBcIlNlcnZpY2VSZWdpc3RyeVwiLCBcIiRkaWFsb2dcIiwgXCIkd2luZG93XCIsIFwiJHRlbXBsYXRlQ2FjaGVcIiwgXCIkcm91dGVQYXJhbXNcIiwgXCIkbG9jYXRpb25cIiwgXCJsb2NhbFN0b3JhZ2VcIiwgXCIkaHR0cFwiLCBcIiR0aW1lb3V0XCIsIFwiS3ViZXJuZXRlc0FwaVVSTFwiLFxuICAgICgkc2NvcGUsIEt1YmVybmV0ZXNNb2RlbDogS3ViZXJuZXRlcy5LdWJlcm5ldGVzTW9kZWxTZXJ2aWNlLCBLdWJlcm5ldGVzUG9kczpuZy5yZXNvdXJjZS5JUmVzb3VyY2VDbGFzcywgS3ViZXJuZXRlc1N0YXRlLCBTZXJ2aWNlUmVnaXN0cnksICRkaWFsb2csICR3aW5kb3csICR0ZW1wbGF0ZUNhY2hlLCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbjpuZy5JTG9jYXRpb25TZXJ2aWNlLCBsb2NhbFN0b3JhZ2UsICRodHRwLCAkdGltZW91dCwgS3ViZXJuZXRlc0FwaVVSTCkgPT4ge1xuXG4gICAgJHNjb3BlLmt1YmVybmV0ZXMgPSBLdWJlcm5ldGVzU3RhdGU7XG4gICAgJHNjb3BlLm1vZGVsID0gS3ViZXJuZXRlc01vZGVsO1xuICAgICRzY29wZS4kb24oJ2t1YmVybmV0ZXNNb2RlbFVwZGF0ZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBDb3JlLiRhcHBseSgkc2NvcGUpO1xuICAgIH0pO1xuXG4gICAgJHNjb3BlLml0ZW1TY2hlbWEgPSBGb3Jtcy5jcmVhdGVGb3JtQ29uZmlndXJhdGlvbigpO1xuXG4gICAgJHNjb3BlLnRhYmxlQ29uZmlnID0ge1xuICAgICAgZGF0YTogJ21vZGVsLnBvZHMnLFxuICAgICAgc2hvd1NlbGVjdGlvbkNoZWNrYm94OiB0cnVlLFxuICAgICAgZW5hYmxlUm93Q2xpY2tTZWxlY3Rpb246IGZhbHNlLFxuICAgICAgbXVsdGlTZWxlY3Q6IHRydWUsXG4gICAgICBzZWxlY3RlZEl0ZW1zOiBbXSxcbiAgICAgIGZpbHRlck9wdGlvbnM6IHtcbiAgICAgICAgZmlsdGVyVGV4dDogJGxvY2F0aW9uLnNlYXJjaCgpW1wicVwiXSB8fCAnJ1xuICAgICAgfSxcbiAgICAgIGNvbHVtbkRlZnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGZpZWxkOiAnaWQnLFxuICAgICAgICAgIGRpc3BsYXlOYW1lOiAnSUQnLFxuICAgICAgICAgIGRlZmF1bHRTb3J0OiB0cnVlLFxuICAgICAgICAgIGNlbGxUZW1wbGF0ZTogJHRlbXBsYXRlQ2FjaGUuZ2V0KFwiaWRUZW1wbGF0ZS5odG1sXCIpXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBmaWVsZDogJ3N0YXR1cy5waGFzZScsXG4gICAgICAgICAgZGlzcGxheU5hbWU6ICdTdGF0dXMnLFxuICAgICAgICAgIGNlbGxUZW1wbGF0ZTogJHRlbXBsYXRlQ2FjaGUuZ2V0KFwic3RhdHVzVGVtcGxhdGUuaHRtbFwiKVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZmllbGQ6ICdjb250YWluZXJJbWFnZXMnLFxuICAgICAgICAgIGRpc3BsYXlOYW1lOiAnSW1hZ2VzJyxcbiAgICAgICAgICBjZWxsVGVtcGxhdGU6ICR0ZW1wbGF0ZUNhY2hlLmdldChcImltYWdlVGVtcGxhdGUuaHRtbFwiKVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZmllbGQ6ICdzcGVjLmhvc3QnLFxuICAgICAgICAgIGRpc3BsYXlOYW1lOiAnSG9zdCcsXG4gICAgICAgICAgY2VsbFRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoXCJob3N0VGVtcGxhdGUuaHRtbFwiKVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZmllbGQ6ICdsYWJlbHMnLFxuICAgICAgICAgIGRpc3BsYXlOYW1lOiAnTGFiZWxzJyxcbiAgICAgICAgICBjZWxsVGVtcGxhdGU6ICR0ZW1wbGF0ZUNhY2hlLmdldChcImxhYmVsVGVtcGxhdGUuaHRtbFwiKVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZmllbGQ6ICdzdGF0dXMucG9kSVAnLFxuICAgICAgICAgIGRpc3BsYXlOYW1lOiAnUG9kIElQJ1xuICAgICAgICB9XG4gICAgICAgIC8qXG4gICAgICAgIFRPRE8gb25seSBzaG93IG5hbWVzcGFjZSBpZiB3ZSBoYXZlIGEgJ3Nob3cgYWxsIG5hbWVzcGFjZXMnIG9wdGlvblxuICAgICAgICAsXG4gICAgICAgIHtcbiAgICAgICAgICAgICAgZmllbGQ6ICduYW1lc3BhY2UnLFxuICAgICAgICAgICAgICBkaXNwbGF5TmFtZTogJ05hbWVzcGFjZSdcbiAgICAgICAgfVxuICAgICAgICAqL1xuICAgICAgXVxuICAgIH07XG5cbiAgICAkc2NvcGUub3BlbkxvZ3MgPSAoKSA9PiB7XG4gICAgICB2YXIgcG9kcyA9ICRzY29wZS50YWJsZUNvbmZpZy5zZWxlY3RlZEl0ZW1zO1xuICAgICAgaWYgKCFwb2RzIHx8ICFwb2RzLmxlbmd0aCkge1xuICAgICAgICBpZiAoJHNjb3BlLmlkKSB7XG4gICAgICAgICAgdmFyIGl0ZW0gPSAkc2NvcGUuaXRlbTtcbiAgICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgICAgcG9kcyA9IFtpdGVtXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG9wZW5Mb2dzRm9yUG9kcyhTZXJ2aWNlUmVnaXN0cnksICR3aW5kb3csIEt1YmVybmV0ZXNNb2RlbC5jdXJyZW50TmFtZXNwYWNlKCksIHBvZHMpO1xuICAgIH07XG5cbiAgICBLdWJlcm5ldGVzLmluaXRTaGFyZWQoJHNjb3BlLCAkbG9jYXRpb24sICRodHRwLCAkdGltZW91dCwgJHJvdXRlUGFyYW1zLCBLdWJlcm5ldGVzTW9kZWwsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc0FwaVVSTCk7XG5cbiAgICAkc2NvcGUuZGVsZXRlUHJvbXB0ID0gKHNlbGVjdGVkKSA9PiB7XG4gICAgICBpZiAoYW5ndWxhci5pc1N0cmluZyhzZWxlY3RlZCkpIHtcbiAgICAgICAgc2VsZWN0ZWQgPSBbe1xuICAgICAgICAgIGlkOiBzZWxlY3RlZFxuICAgICAgICB9XTtcbiAgICAgIH1cbiAgICAgIFVJLm11bHRpSXRlbUNvbmZpcm1BY3Rpb25EaWFsb2coPFVJLk11bHRpSXRlbUNvbmZpcm1BY3Rpb25PcHRpb25zPntcbiAgICAgICAgY29sbGVjdGlvbjogc2VsZWN0ZWQsXG4gICAgICAgIGluZGV4OiAnbWV0YWRhdGEubmFtZScsXG4gICAgICAgIG9uQ2xvc2U6IChyZXN1bHQ6Ym9vbGVhbikgPT4ge1xuICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGRlbGV0ZVNlbGVjdGVkKHNlbGVjdGVkOkFycmF5PEt1YmVQb2Q+LCBuZXh0Okt1YmVQb2QpIHtcbiAgICAgICAgICAgICAgaWYgKG5leHQpIHtcbiAgICAgICAgICAgICAgICBsb2cuZGVidWcoXCJkZWxldGluZzogXCIsIGdldE5hbWUobmV4dCkpO1xuICAgICAgICAgICAgICAgIEt1YmVybmV0ZXNQb2RzLmRlbGV0ZSh7XG4gICAgICAgICAgICAgICAgICBpZDogZ2V0TmFtZShuZXh0KVxuICAgICAgICAgICAgICAgIH0sIHVuZGVmaW5lZCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgbG9nLmRlYnVnKFwiZGVsZXRlZDogXCIsIGdldE5hbWUobmV4dCkpO1xuICAgICAgICAgICAgICAgICAgZGVsZXRlU2VsZWN0ZWQoc2VsZWN0ZWQsIHNlbGVjdGVkLnNoaWZ0KCkpO1xuICAgICAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgbG9nLmRlYnVnKFwiRXJyb3IgZGVsZXRpbmc6IFwiLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgICBkZWxldGVTZWxlY3RlZChzZWxlY3RlZCwgc2VsZWN0ZWQuc2hpZnQoKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlbGV0ZVNlbGVjdGVkKHNlbGVjdGVkLCBzZWxlY3RlZC5zaGlmdCgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHRpdGxlOiAnRGVsZXRlIHBvZHM/JyxcbiAgICAgICAgYWN0aW9uOiAnVGhlIGZvbGxvd2luZyBwb2RzIHdpbGwgYmUgZGVsZXRlZDonLFxuICAgICAgICBva1RleHQ6ICdEZWxldGUnLFxuICAgICAgICBva0NsYXNzOiAnYnRuLWRhbmdlcicsXG4gICAgICAgIGN1c3RvbTogXCJUaGlzIG9wZXJhdGlvbiBpcyBwZXJtYW5lbnQgb25jZSBjb21wbGV0ZWQhXCIsXG4gICAgICAgIGN1c3RvbUNsYXNzOiBcImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIlxuICAgICAgfSkub3BlbigpO1xuICAgIH07XG4gIH1dKTtcbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9pbmNsdWRlcy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzSGVscGVycy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzUGx1Z2luLnRzXCIvPlxuXG5tb2R1bGUgS3ViZXJuZXRlcyB7XG5cbiAgZXhwb3J0IHZhciBSZXBsaWNhdGlvbkNvbnRyb2xsZXJDb250cm9sbGVyID0gY29udHJvbGxlcihcIlJlcGxpY2F0aW9uQ29udHJvbGxlckNvbnRyb2xsZXJcIixcbiAgICBbXCIkc2NvcGVcIiwgXCJLdWJlcm5ldGVzTW9kZWxcIiwgXCJLdWJlcm5ldGVzU3RhdGVcIiwgXCIkdGVtcGxhdGVDYWNoZVwiLCBcIiRsb2NhdGlvblwiLCBcIiRyb3V0ZVBhcmFtc1wiLCBcIiRodHRwXCIsIFwiJHRpbWVvdXRcIiwgXCJLdWJlcm5ldGVzQXBpVVJMXCIsXG4gICAgICAoJHNjb3BlLCBLdWJlcm5ldGVzTW9kZWw6IEt1YmVybmV0ZXMuS3ViZXJuZXRlc01vZGVsU2VydmljZSwgS3ViZXJuZXRlc1N0YXRlLFxuICAgICAgICR0ZW1wbGF0ZUNhY2hlOm5nLklUZW1wbGF0ZUNhY2hlU2VydmljZSwgJGxvY2F0aW9uOm5nLklMb2NhdGlvblNlcnZpY2UsICRyb3V0ZVBhcmFtcywgJGh0dHAsICR0aW1lb3V0LCBLdWJlcm5ldGVzQXBpVVJMKSA9PiB7XG5cbiAgICAkc2NvcGUua3ViZXJuZXRlcyA9IEt1YmVybmV0ZXNTdGF0ZTtcbiAgICAkc2NvcGUubW9kZWwgPSBLdWJlcm5ldGVzTW9kZWw7XG4gICAgJHNjb3BlLnJhd01vZGUgPSBmYWxzZTtcbiAgICAkc2NvcGUucmF3TW9kZWwgPSBudWxsO1xuXG4gICAgS3ViZXJuZXRlcy5pbml0U2hhcmVkKCRzY29wZSwgJGxvY2F0aW9uLCAkaHR0cCwgJHRpbWVvdXQsICRyb3V0ZVBhcmFtcywgS3ViZXJuZXRlc01vZGVsLCBLdWJlcm5ldGVzU3RhdGUsIEt1YmVybmV0ZXNBcGlVUkwpO1xuXG4gICAgJHNjb3BlLml0ZW1Db25maWcgPSB7XG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICdeXFxcXC9sYWJlbHMkJzoge1xuICAgICAgICAgIHRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoJ2xhYmVsVGVtcGxhdGUuaHRtbCcpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgJHNjb3BlLiRvbigna3ViZXJuZXRlc01vZGVsVXBkYXRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHVwZGF0ZURhdGEoKTtcbiAgICB9KTtcblxuICAgICRzY29wZS4kb24oJyRyb3V0ZVVwZGF0ZScsICgkZXZlbnQpID0+IHtcbiAgICAgIHVwZGF0ZURhdGEoKTtcbiAgICB9KTtcblxuICAgICRzY29wZS4kd2F0Y2goJ21vZGVsLnBvZHMnLCAobmV3VmFsdWUsIG9sZFZhbHVlKSA9PiB7XG4gICAgICB1cGRhdGVEYXRhKCk7XG4gICAgfSwgdHJ1ZSk7XG5cbiAgICAkc2NvcGUuZmxpcFJhdyA9ICgpID0+IHtcbiAgICAgICRzY29wZS5yYXdNb2RlID0gISRzY29wZS5yYXdNb2RlO1xuICAgICAgQ29yZS4kYXBwbHkoJHNjb3BlKTtcbiAgICB9O1xuXG4gICAgdXBkYXRlRGF0YSgpO1xuXG4gICAgZnVuY3Rpb24gdXBkYXRlRGF0YSgpIHtcbiAgICAgICRzY29wZS5pZCA9ICRyb3V0ZVBhcmFtc1tcImlkXCJdO1xuICAgICAgJHNjb3BlLml0ZW0gPSAkc2NvcGUubW9kZWwuZ2V0UmVwbGljYXRpb25Db250cm9sbGVyKEt1YmVybmV0ZXNTdGF0ZS5zZWxlY3RlZE5hbWVzcGFjZSwgJHNjb3BlLmlkKTtcbiAgICAgIGlmICgkc2NvcGUuaXRlbSkge1xuICAgICAgICAkc2NvcGUucmF3TW9kZWwgPSB0b1Jhd0pzb24oJHNjb3BlLml0ZW0pO1xuICAgICAgfVxuXG4gICAgICBDb3JlLiRhcHBseSgkc2NvcGUpO1xuICAgIH1cbiAgfV0pO1xufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNIZWxwZXJzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNQbHVnaW4udHNcIi8+XG5cbm1vZHVsZSBLdWJlcm5ldGVzIHtcblxuICBleHBvcnQgdmFyIFJlcGxpY2F0aW9uQ29udHJvbGxlckVkaXRDb250cm9sbGVyID0gY29udHJvbGxlcihcIlJlcGxpY2F0aW9uQ29udHJvbGxlckVkaXRDb250cm9sbGVyXCIsXG4gICAgW1wiJHNjb3BlXCIsIFwiS3ViZXJuZXRlc01vZGVsXCIsIFwiS3ViZXJuZXRlc1N0YXRlXCIsIFwiS3ViZXJuZXRlc1NjaGVtYVwiLCBcIiR0ZW1wbGF0ZUNhY2hlXCIsIFwiJGxvY2F0aW9uXCIsIFwiJHJvdXRlUGFyYW1zXCIsIFwiJGh0dHBcIiwgXCIkdGltZW91dFwiLCBcIkt1YmVybmV0ZXNBcGlVUkxcIiwgXCJTY2hlbWFSZWdpc3RyeVwiLFxuICAgICAgKCRzY29wZSwgS3ViZXJuZXRlc01vZGVsOiBLdWJlcm5ldGVzLkt1YmVybmV0ZXNNb2RlbFNlcnZpY2UsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc1NjaGVtYSxcbiAgICAgICAkdGVtcGxhdGVDYWNoZTpuZy5JVGVtcGxhdGVDYWNoZVNlcnZpY2UsICRsb2NhdGlvbjpuZy5JTG9jYXRpb25TZXJ2aWNlLCAkcm91dGVQYXJhbXMsICRodHRwLCAkdGltZW91dCwgS3ViZXJuZXRlc0FwaVVSTCwgc2NoZW1hczpIYXd0aW9Gb3Jtcy5TY2hlbWFSZWdpc3RyeSkgPT4ge1xuXG4gICAgJHNjb3BlLmt1YmVybmV0ZXMgPSBLdWJlcm5ldGVzU3RhdGU7XG4gICAgJHNjb3BlLm1vZGVsID0gS3ViZXJuZXRlc01vZGVsO1xuICAgICRzY29wZS5pZCA9ICRyb3V0ZVBhcmFtc1tcImlkXCJdO1xuICAgICRzY29wZS5zY2hlbWEgPSBLdWJlcm5ldGVzU2NoZW1hO1xuICAgIGxvZy5kZWJ1ZyhcIlNjaGVtYTogXCIsICRzY29wZS5zY2hlbWEpO1xuICAgICRzY29wZS5jb25maWcgPSBzY2hlbWFzLmNsb25lU2NoZW1hKFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5SZXBsaWNhdGlvbkNvbnRyb2xsZXJcIik7XG4gICAgLy8kJHNjb3BlLmNvbmZpZyA9IEt1YmVybmV0ZXNTY2hlbWEuZGVmaW5pdGlvbnMua3ViZXJuZXRlc192MWJldGEzX1JlcGxpY2F0aW9uQ29udHJvbGxlcjtcblxuICAgIEt1YmVybmV0ZXMuaW5pdFNoYXJlZCgkc2NvcGUsICRsb2NhdGlvbiwgJGh0dHAsICR0aW1lb3V0LCAkcm91dGVQYXJhbXMsIEt1YmVybmV0ZXNNb2RlbCwgS3ViZXJuZXRlc1N0YXRlLCBLdWJlcm5ldGVzQXBpVVJMKTtcblxuICAgICRzY29wZS4kb24oJyRyb3V0ZVVwZGF0ZScsICgkZXZlbnQpID0+IHtcbiAgICAgIHVwZGF0ZURhdGEoKTtcbiAgICB9KTtcblxuICAgIHVwZGF0ZURhdGEoKTtcblxuICAgIGZ1bmN0aW9uIHVwZGF0ZURhdGEoKSB7XG4gICAgICBpZiAoJHNjb3BlLmlkKSB7XG4gICAgICAgICRzY29wZS5lbnRpdHkgPSAkc2NvcGUubW9kZWwuZ2V0UmVwbGljYXRpb25Db250cm9sbGVyKEt1YmVybmV0ZXNTdGF0ZS5zZWxlY3RlZE5hbWVzcGFjZSwgJHNjb3BlLmlkKTtcbiAgICAgICAgQ29yZS4kYXBwbHkoJHNjb3BlKTtcbiAgICAgICAgJHNjb3BlLmZldGNoZWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHNjb3BlLmZldGNoZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNIZWxwZXJzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNQbHVnaW4udHNcIi8+XG5cbm1vZHVsZSBLdWJlcm5ldGVzIHtcblxuICBleHBvcnQgdmFyIFJlcGxpY2F0aW9uQ29udHJvbGxlcnMgPSBjb250cm9sbGVyKFwiUmVwbGljYXRpb25Db250cm9sbGVyc1wiLFxuICAgIFtcIiRzY29wZVwiLCBcIkt1YmVybmV0ZXNNb2RlbFwiLCBcIkt1YmVybmV0ZXNSZXBsaWNhdGlvbkNvbnRyb2xsZXJzXCIsIFwiS3ViZXJuZXRlc1BvZHNcIiwgXCJLdWJlcm5ldGVzU3RhdGVcIiwgXCIkdGVtcGxhdGVDYWNoZVwiLCBcIiRsb2NhdGlvblwiLCBcIiRyb3V0ZVBhcmFtc1wiLCBcImpvbG9raWFcIiwgXCIkaHR0cFwiLCBcIiR0aW1lb3V0XCIsIFwiS3ViZXJuZXRlc0FwaVVSTFwiLFxuICAgICAgKCRzY29wZSwgS3ViZXJuZXRlc01vZGVsOiBLdWJlcm5ldGVzLkt1YmVybmV0ZXNNb2RlbFNlcnZpY2UsIEt1YmVybmV0ZXNSZXBsaWNhdGlvbkNvbnRyb2xsZXJzOm5nLnJlc291cmNlLklSZXNvdXJjZUNsYXNzLCBLdWJlcm5ldGVzUG9kczpuZy5yZXNvdXJjZS5JUmVzb3VyY2VDbGFzcywgS3ViZXJuZXRlc1N0YXRlLFxuICAgICAgICR0ZW1wbGF0ZUNhY2hlOm5nLklUZW1wbGF0ZUNhY2hlU2VydmljZSwgJGxvY2F0aW9uOm5nLklMb2NhdGlvblNlcnZpY2UsICRyb3V0ZVBhcmFtcywgam9sb2tpYTpKb2xva2lhLklKb2xva2lhLCAkaHR0cCwgJHRpbWVvdXQsIEt1YmVybmV0ZXNBcGlVUkwpID0+IHtcblxuICAgICRzY29wZS5rdWJlcm5ldGVzID0gS3ViZXJuZXRlc1N0YXRlO1xuICAgICRzY29wZS5tb2RlbCA9IEt1YmVybmV0ZXNNb2RlbDtcblxuICAgICRzY29wZS50YWJsZUNvbmZpZyA9IHtcbiAgICAgIGRhdGE6ICdtb2RlbC5yZXBsaWNhdGlvbkNvbnRyb2xsZXJzJyxcbiAgICAgIHNob3dTZWxlY3Rpb25DaGVja2JveDogdHJ1ZSxcbiAgICAgIGVuYWJsZVJvd0NsaWNrU2VsZWN0aW9uOiBmYWxzZSxcbiAgICAgIG11bHRpU2VsZWN0OiB0cnVlLFxuICAgICAgc2VsZWN0ZWRJdGVtczogW10sXG4gICAgICBmaWx0ZXJPcHRpb25zOiB7XG4gICAgICAgIGZpbHRlclRleHQ6ICRsb2NhdGlvbi5zZWFyY2goKVtcInFcIl0gfHwgJydcbiAgICAgIH0sXG4gICAgICBjb2x1bW5EZWZzOiBbXG4gICAgICAgIHsgZmllbGQ6ICdtZXRhZGF0YS5uYW1lJywgZGlzcGxheU5hbWU6ICdJRCcsIGNlbGxUZW1wbGF0ZTogJHRlbXBsYXRlQ2FjaGUuZ2V0KFwiaWRUZW1wbGF0ZS5odG1sXCIpIH0sXG4gICAgICAgIHsgZmllbGQ6ICckcG9kc0xpbmsnLCBkaXNwbGF5TmFtZTogJ1BvZHMnLCBjZWxsVGVtcGxhdGU6ICR0ZW1wbGF0ZUNhY2hlLmdldChcInBvZENvdW50c0FuZExpbmtUZW1wbGF0ZS5odG1sXCIpIH0sXG4gICAgICAgIHsgZmllbGQ6ICdkZXNpcmVkU3RhdGUucmVwbGljYXMnLCBkaXNwbGF5TmFtZTogJ1JlcGxpY2FzJywgY2VsbFRlbXBsYXRlOiR0ZW1wbGF0ZUNhY2hlLmdldChcImRlc2lyZWRSZXBsaWNhcy5odG1sXCIpIH0sXG4gICAgICAgIHsgZmllbGQ6ICdsYWJlbHNUZXh0JywgZGlzcGxheU5hbWU6ICdMYWJlbHMnLCBjZWxsVGVtcGxhdGU6ICR0ZW1wbGF0ZUNhY2hlLmdldChcImxhYmVsVGVtcGxhdGUuaHRtbFwiKSB9LFxuICAgICAgICB7IGZpZWxkOiAnbWV0YWRhdGEubmFtZXNwYWNlJywgZGlzcGxheU5hbWU6ICdOYW1lc3BhY2UnIH1cbiAgICAgIF1cbiAgICB9O1xuXG4gICAgS3ViZXJuZXRlcy5pbml0U2hhcmVkKCRzY29wZSwgJGxvY2F0aW9uLCAkaHR0cCwgJHRpbWVvdXQsICRyb3V0ZVBhcmFtcywgS3ViZXJuZXRlc01vZGVsLCBLdWJlcm5ldGVzU3RhdGUsIEt1YmVybmV0ZXNBcGlVUkwpO1xuXG4gICAgJHNjb3BlLmRlbGV0ZVByb21wdCA9IChzZWxlY3RlZCkgPT4ge1xuICAgICAgaWYgKGFuZ3VsYXIuaXNTdHJpbmcoc2VsZWN0ZWQpKSB7XG4gICAgICAgIHNlbGVjdGVkID0gW3tcbiAgICAgICAgICBpZDogc2VsZWN0ZWRcbiAgICAgICAgfV07XG4gICAgICB9XG4gICAgICBVSS5tdWx0aUl0ZW1Db25maXJtQWN0aW9uRGlhbG9nKDxVSS5NdWx0aUl0ZW1Db25maXJtQWN0aW9uT3B0aW9ucz57XG4gICAgICAgIGNvbGxlY3Rpb246IHNlbGVjdGVkLFxuICAgICAgICBpbmRleDogJ21ldGFkYXRhLm5hbWUnLFxuICAgICAgICBvbkNsb3NlOiAocmVzdWx0OmJvb2xlYW4pID0+IHtcbiAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBkZWxldGVTZWxlY3RlZChzZWxlY3RlZDpBcnJheTxLdWJlUG9kPiwgbmV4dDpLdWJlUG9kKSB7XG4gICAgICAgICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgICAgICAgbG9nLmRlYnVnKFwiZGVsZXRpbmc6IFwiLCBnZXROYW1lKG5leHQpKTtcbiAgICAgICAgICAgICAgICBLdWJlcm5ldGVzUmVwbGljYXRpb25Db250cm9sbGVycy5kZWxldGUoe1xuICAgICAgICAgICAgICAgICAgaWQ6IGdldE5hbWUobmV4dClcbiAgICAgICAgICAgICAgICB9LCB1bmRlZmluZWQsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyhcImRlbGV0ZWQ6IFwiLCBnZXROYW1lKG5leHQpKTtcbiAgICAgICAgICAgICAgICAgIGRlbGV0ZVNlbGVjdGVkKHNlbGVjdGVkLCBzZWxlY3RlZC5zaGlmdCgpKTtcbiAgICAgICAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyhcIkVycm9yIGRlbGV0aW5nOiBcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgZGVsZXRlU2VsZWN0ZWQoc2VsZWN0ZWQsIHNlbGVjdGVkLnNoaWZ0KCkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWxldGVTZWxlY3RlZChzZWxlY3RlZCwgc2VsZWN0ZWQuc2hpZnQoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0aXRsZTogJ0RlbGV0ZSByZXBsaWNhdGlvbiBjb250cm9sbGVycz8nLFxuICAgICAgICBhY3Rpb246ICdUaGUgZm9sbG93aW5nIHJlcGxpY2F0aW9uIGNvbnRyb2xsZXJzIHdpbGwgYmUgZGVsZXRlZDonLFxuICAgICAgICBva1RleHQ6ICdEZWxldGUnLFxuICAgICAgICBva0NsYXNzOiAnYnRuLWRhbmdlcicsXG4gICAgICAgIGN1c3RvbTogXCJUaGlzIG9wZXJhdGlvbiBpcyBwZXJtYW5lbnQgb25jZSBjb21wbGV0ZWQhXCIsXG4gICAgICAgIGN1c3RvbUNsYXNzOiBcImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIlxuICAgICAgfSkub3BlbigpO1xuICAgIH07XG4gIH1dKTtcbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9pbmNsdWRlcy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzSGVscGVycy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzUGx1Z2luLnRzXCIvPlxuXG5tb2R1bGUgS3ViZXJuZXRlcyB7XG5cbiAgZXhwb3J0IHZhciBTZXJ2aWNlQ29udHJvbGxlciA9IGNvbnRyb2xsZXIoXCJTZXJ2aWNlQ29udHJvbGxlclwiLFxuICAgIFtcIiRzY29wZVwiLCBcIkt1YmVybmV0ZXNNb2RlbFwiLCBcIkt1YmVybmV0ZXNTdGF0ZVwiLCBcIiR0ZW1wbGF0ZUNhY2hlXCIsIFwiJGxvY2F0aW9uXCIsIFwiJHJvdXRlUGFyYW1zXCIsIFwiJGh0dHBcIiwgXCIkdGltZW91dFwiLCBcIkt1YmVybmV0ZXNBcGlVUkxcIixcbiAgICAgICgkc2NvcGUsIEt1YmVybmV0ZXNNb2RlbDogS3ViZXJuZXRlcy5LdWJlcm5ldGVzTW9kZWxTZXJ2aWNlLCBLdWJlcm5ldGVzU3RhdGUsXG4gICAgICAgJHRlbXBsYXRlQ2FjaGU6bmcuSVRlbXBsYXRlQ2FjaGVTZXJ2aWNlLCAkbG9jYXRpb246bmcuSUxvY2F0aW9uU2VydmljZSwgJHJvdXRlUGFyYW1zLCAkaHR0cCwgJHRpbWVvdXQsIEt1YmVybmV0ZXNBcGlVUkwpID0+IHtcblxuICAgICRzY29wZS5rdWJlcm5ldGVzID0gS3ViZXJuZXRlc1N0YXRlO1xuICAgICRzY29wZS5tb2RlbCA9IEt1YmVybmV0ZXNNb2RlbDtcbiAgICAkc2NvcGUucmF3TW9kZSA9IGZhbHNlO1xuICAgICRzY29wZS5yYXdNb2RlbCA9IG51bGw7XG5cbiAgICBLdWJlcm5ldGVzLmluaXRTaGFyZWQoJHNjb3BlLCAkbG9jYXRpb24sICRodHRwLCAkdGltZW91dCwgJHJvdXRlUGFyYW1zLCBLdWJlcm5ldGVzTW9kZWwsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc0FwaVVSTCk7XG5cbiAgICAkc2NvcGUuaXRlbUNvbmZpZyA9IHtcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgJ15cXFxcL2xhYmVscyQnOiB7XG4gICAgICAgICAgdGVtcGxhdGU6ICR0ZW1wbGF0ZUNhY2hlLmdldCgnbGFiZWxUZW1wbGF0ZS5odG1sJylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAkc2NvcGUuJG9uKCdrdWJlcm5ldGVzTW9kZWxVcGRhdGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgdXBkYXRlRGF0YSgpO1xuICAgIH0pO1xuXG4gICAgJHNjb3BlLiR3YXRjaCgnbW9kZWwuc2VydmljZXMnLCAobmV3VmFsdWUsIG9sZFZhbHVlKSA9PiB7XG4gICAgICB1cGRhdGVEYXRhKCk7XG4gICAgfSwgdHJ1ZSk7XG5cbiAgICAkc2NvcGUuJG9uKCckcm91dGVVcGRhdGUnLCAoJGV2ZW50KSA9PiB7XG4gICAgICB1cGRhdGVEYXRhKCk7XG4gICAgfSk7XG5cbiAgICAkc2NvcGUuZmxpcFJhdyA9ICgpID0+IHtcbiAgICAgICRzY29wZS5yYXdNb2RlID0gISRzY29wZS5yYXdNb2RlO1xuICAgICAgQ29yZS4kYXBwbHkoJHNjb3BlKTtcbiAgICB9O1xuXG4gICAgdXBkYXRlRGF0YSgpO1xuXG4gICAgZnVuY3Rpb24gdXBkYXRlRGF0YSgpIHtcbiAgICAgICRzY29wZS5pZCA9ICRyb3V0ZVBhcmFtc1tcImlkXCJdO1xuICAgICAgJHNjb3BlLm5hbWVzcGFjZSA9ICRyb3V0ZVBhcmFtc1tcIm5hbWVzcGFjZVwiXSB8fCBLdWJlcm5ldGVzU3RhdGUuc2VsZWN0ZWROYW1lc3BhY2U7XG4gICAgICAkc2NvcGUuaXRlbSA9ICRzY29wZS5tb2RlbC5nZXRTZXJ2aWNlKCRzY29wZS5uYW1lc3BhY2UsICRzY29wZS5pZCk7XG4gICAgICBpZiAoJHNjb3BlLml0ZW0pIHtcbiAgICAgICAgJHNjb3BlLnJhd01vZGVsID0gdG9SYXdKc29uKCRzY29wZS5pdGVtKTtcbiAgICAgIH1cbiAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgfVxuICB9XSk7XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vaW5jbHVkZXMudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwia3ViZXJuZXRlc0hlbHBlcnMudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwia3ViZXJuZXRlc1BsdWdpbi50c1wiLz5cblxubW9kdWxlIEt1YmVybmV0ZXMge1xuXG4gIGV4cG9ydCB2YXIgU2VydmljZUVkaXRDb250cm9sbGVyID0gY29udHJvbGxlcihcIlNlcnZpY2VFZGl0Q29udHJvbGxlclwiLFxuICAgIFtcIiRzY29wZVwiLCBcIkt1YmVybmV0ZXNNb2RlbFwiLCBcIkt1YmVybmV0ZXNTdGF0ZVwiLCBcIkt1YmVybmV0ZXNTY2hlbWFcIiwgXCIkdGVtcGxhdGVDYWNoZVwiLCBcIiRsb2NhdGlvblwiLCBcIiRyb3V0ZVBhcmFtc1wiLCBcIiRodHRwXCIsIFwiJHRpbWVvdXRcIiwgXCJLdWJlcm5ldGVzQXBpVVJMXCIsIFwiU2NoZW1hUmVnaXN0cnlcIixcbiAgICAgICgkc2NvcGUsIEt1YmVybmV0ZXNNb2RlbDogS3ViZXJuZXRlcy5LdWJlcm5ldGVzTW9kZWxTZXJ2aWNlLCBLdWJlcm5ldGVzU3RhdGUsIEt1YmVybmV0ZXNTY2hlbWEsXG4gICAgICAgJHRlbXBsYXRlQ2FjaGU6bmcuSVRlbXBsYXRlQ2FjaGVTZXJ2aWNlLCAkbG9jYXRpb246bmcuSUxvY2F0aW9uU2VydmljZSwgJHJvdXRlUGFyYW1zLCAkaHR0cCwgJHRpbWVvdXQsIEt1YmVybmV0ZXNBcGlVUkwsIHNjaGVtYXM6SGF3dGlvRm9ybXMuU2NoZW1hUmVnaXN0cnkpID0+IHtcblxuICAgICRzY29wZS5rdWJlcm5ldGVzID0gS3ViZXJuZXRlc1N0YXRlO1xuICAgICRzY29wZS5tb2RlbCA9IEt1YmVybmV0ZXNNb2RlbDtcbiAgICAkc2NvcGUuaWQgPSAkcm91dGVQYXJhbXNbXCJpZFwiXTtcbiAgICAkc2NvcGUuc2NoZW1hID0gS3ViZXJuZXRlc1NjaGVtYTtcbiAgICAkc2NvcGUuY29uZmlnID0gc2NoZW1hcy5jbG9uZVNjaGVtYShcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuU2VydmljZVwiKTtcbiAgICAvLyRzY29wZS5jb25maWcgPSBLdWJlcm5ldGVzU2NoZW1hLmRlZmluaXRpb25zLmt1YmVybmV0ZXNfdjFiZXRhMl9TZXJ2aWNlO1xuXG4gICAgS3ViZXJuZXRlcy5pbml0U2hhcmVkKCRzY29wZSwgJGxvY2F0aW9uLCAkaHR0cCwgJHRpbWVvdXQsICRyb3V0ZVBhcmFtcywgS3ViZXJuZXRlc01vZGVsLCBLdWJlcm5ldGVzU3RhdGUsIEt1YmVybmV0ZXNBcGlVUkwpO1xuXG4gICAgJHNjb3BlLiRvbignJHJvdXRlVXBkYXRlJywgKCRldmVudCkgPT4ge1xuICAgICAgdXBkYXRlRGF0YSgpO1xuICAgIH0pO1xuXG4gICAgdXBkYXRlRGF0YSgpO1xuXG4gICAgZnVuY3Rpb24gdXBkYXRlRGF0YSgpIHtcbiAgICAgIGlmICgkc2NvcGUuaWQpIHtcbiAgICAgICAgJHNjb3BlLmVudGl0eSA9ICRzY29wZS5tb2RlbC5nZXRTZXJ2aWNlKEt1YmVybmV0ZXNTdGF0ZS5zZWxlY3RlZE5hbWVzcGFjZSwgJHNjb3BlLmlkKTtcbiAgICAgICAgQ29yZS4kYXBwbHkoJHNjb3BlKTtcbiAgICAgICAgJHNjb3BlLmZldGNoZWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHNjb3BlLmZldGNoZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNIZWxwZXJzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNQbHVnaW4udHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwia3ViZXJuZXRlc01vZGVsLnRzXCIvPlxuXG5tb2R1bGUgS3ViZXJuZXRlcyB7XG5cbiAgX21vZHVsZS5mYWN0b3J5KCdTZXJ2aWNlUmVnaXN0cnknLCBbKCkgPT4ge1xuICAgIHJldHVybiBuZXcgU2VydmljZVJlZ2lzdHJ5U2VydmljZSgpO1xuICB9XSk7XG5cbiAgLyoqXG4gICAqIFJlcHJlc2VudHMgYSBzaW1wbGUgaW50ZXJmYWNlIHRvIHNlcnZpY2UgZGlzY292ZXJ5IHRoYXQgY2FuIGJlIHVzZWQgZWFybHkgb24gaW4gdGhlIGFwcGxpY2F0aW9uIGxpZmVjeWNsZSBiZWZvcmUgdGhlXG4gICAqIHVuZGVybHlpbmcgbW9kZWwgaGFzIGJlZW4gY3JlYXRlZCB2aWEgZGVwZW5kZW5jeSBpbmplY3Rpb25cbiAgICovXG4gIGV4cG9ydCBjbGFzcyBTZXJ2aWNlUmVnaXN0cnlTZXJ2aWNlIHtcbiAgICBwcml2YXRlIG1vZGVsOkt1YmVybmV0ZXNNb2RlbFNlcnZpY2UgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZXJlIGlzIGEgc2VydmljZSBhdmFpbGFibGUgZm9yIHRoZSBnaXZlbiBJRCBvciBmYWxzZVxuICAgICAqL1xuICAgIHB1YmxpYyBoYXNTZXJ2aWNlKHNlcnZpY2VOYW1lOiBzdHJpbmcpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbmRTZXJ2aWNlKHNlcnZpY2VOYW1lKSA/IHRydWUgOiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzZXJ2aWNlIGZvciB0aGUgZ2l2ZW4gc2VydmljZSBuYW1lIChJRCkgb3IgbnVsbCBpZiBpdCBjYW5ub3QgYmUgZm91bmRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBzZXJ2aWNlTmFtZSB0aGUgbmFtZSBvZiB0aGUgc2VydmljZSB0byBsb29rIGZvclxuICAgICAqIEByZXR1cm4ge251bGx9XG4gICAgICovXG4gICAgcHVibGljIGZpbmRTZXJ2aWNlKHNlcnZpY2VOYW1lOiBzdHJpbmcpIHtcbiAgICAgIHZhciBhbnN3ZXIgPSBudWxsO1xuICAgICAgaWYgKHNlcnZpY2VOYW1lKSB7XG4gICAgICAgIHZhciBtb2RlbCA9IHRoaXMuZ2V0TW9kZWwoKTtcbiAgICAgICAgaWYgKG1vZGVsKSB7XG4gICAgICAgICAgdmFyIG5hbWVzcGFjZSA9IG1vZGVsLmN1cnJlbnROYW1lc3BhY2UoKTtcbiAgICAgICAgICByZXR1cm4gbW9kZWwuZ2V0U2VydmljZShuYW1lc3BhY2UgLHNlcnZpY2VOYW1lKTtcbi8qXG4gICAgICAgIFRPRE8gbGV0cyBvbmx5IGxvb2sgaW4gdGhlIGN1cnJlbnQgbmFtZXNwYWNlXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChtb2RlbC5zZXJ2aWNlcywgKHNlcnZpY2UpID0+IHtcbiAgICAgICAgICBpZiAoc2VydmljZU5hbWUgPT09IGdldE5hbWUoc2VydmljZSkpIHtcbiAgICAgICAgICAgIGFuc3dlciA9IHNlcnZpY2U7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiovXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhbnN3ZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc2VydmljZSBsaW5rIGZvciB0aGUgZ2l2ZW4gc2VydmljZSBuYW1lXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2VydmljZU5hbWUgdGhlIG5hbWUgb2YgdGhlIHNlcnZpY2VcbiAgICAgKiBAcmV0dXJuIHtudWxsfVxuICAgICAqL1xuICAgIHB1YmxpYyBzZXJ2aWNlTGluayhzZXJ2aWNlTmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgIHZhciBzZXJ2aWNlID0gdGhpcy5maW5kU2VydmljZShzZXJ2aWNlTmFtZSk7XG4gICAgICByZXR1cm4gc2VydmljZUxpbmtVcmwoc2VydmljZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRNb2RlbCgpOkt1YmVybmV0ZXNNb2RlbFNlcnZpY2Uge1xuICAgICAgdmFyIGFuc3dlciA9IHRoaXMubW9kZWw7XG4gICAgICAvLyBsZXRzIGFsbG93IGxhenkgbG9hZCBzbyB3ZSBjYW4gYmUgaW52b2tlZCBiZWZvcmUgdGhlIGluamVjdG9yIGhhcyBiZWVuIGNyZWF0ZWRcbiAgICAgIGlmICghYW5zd2VyKSB7XG4gICAgICAgIHZhciBpbmplY3RvciA9IEhhd3Rpb0NvcmUuaW5qZWN0b3I7XG4gICAgICAgIGlmIChpbmplY3Rvcikge1xuICAgICAgICAgIHRoaXMubW9kZWwgPSBpbmplY3Rvci5nZXQoJ0t1YmVybmV0ZXNNb2RlbCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhbnN3ZXIgPSB0aGlzLm1vZGVsO1xuICAgICAgcmV0dXJuIGFuc3dlcjtcbiAgICB9XG4gIH1cbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9pbmNsdWRlcy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzSGVscGVycy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzUGx1Z2luLnRzXCIvPlxuXG5tb2R1bGUgS3ViZXJuZXRlcyB7XG5cbiAgZXhwb3J0IHZhciBTZXJ2aWNlcyA9IGNvbnRyb2xsZXIoXCJTZXJ2aWNlc1wiLFxuICAgIFtcIiRzY29wZVwiLCBcIkt1YmVybmV0ZXNNb2RlbFwiLCBcIkt1YmVybmV0ZXNTZXJ2aWNlc1wiLCBcIkt1YmVybmV0ZXNQb2RzXCIsIFwiS3ViZXJuZXRlc1N0YXRlXCIsIFwiJHRlbXBsYXRlQ2FjaGVcIiwgXCIkbG9jYXRpb25cIiwgXCIkcm91dGVQYXJhbXNcIiwgXCJqb2xva2lhXCIsIFwiJGh0dHBcIiwgXCIkdGltZW91dFwiLCBcIkt1YmVybmV0ZXNBcGlVUkxcIixcbiAgICAgICgkc2NvcGUsIEt1YmVybmV0ZXNNb2RlbDogS3ViZXJuZXRlcy5LdWJlcm5ldGVzTW9kZWxTZXJ2aWNlLCBLdWJlcm5ldGVzU2VydmljZXM6bmcucmVzb3VyY2UuSVJlc291cmNlQ2xhc3MsIEt1YmVybmV0ZXNQb2RzOm5nLnJlc291cmNlLklSZXNvdXJjZUNsYXNzLCBLdWJlcm5ldGVzU3RhdGUsXG4gICAgICAgJHRlbXBsYXRlQ2FjaGU6bmcuSVRlbXBsYXRlQ2FjaGVTZXJ2aWNlLCAkbG9jYXRpb246bmcuSUxvY2F0aW9uU2VydmljZSwgJHJvdXRlUGFyYW1zLCBqb2xva2lhOkpvbG9raWEuSUpvbG9raWEsICRodHRwLCAkdGltZW91dCwgS3ViZXJuZXRlc0FwaVVSTCkgPT4ge1xuXG4gICAgJHNjb3BlLmt1YmVybmV0ZXMgPSBLdWJlcm5ldGVzU3RhdGU7XG4gICAgJHNjb3BlLm1vZGVsID0gS3ViZXJuZXRlc01vZGVsO1xuXG4gICAgJHNjb3BlLnRhYmxlQ29uZmlnID0ge1xuICAgICAgZGF0YTogJ21vZGVsLnNlcnZpY2VzJyxcbiAgICAgIHNob3dTZWxlY3Rpb25DaGVja2JveDogdHJ1ZSxcbiAgICAgIGVuYWJsZVJvd0NsaWNrU2VsZWN0aW9uOiBmYWxzZSxcbiAgICAgIG11bHRpU2VsZWN0OiB0cnVlLFxuICAgICAgc2VsZWN0ZWRJdGVtczogW10sXG4gICAgICBmaWx0ZXJPcHRpb25zOiB7XG4gICAgICAgIGZpbHRlclRleHQ6ICRsb2NhdGlvbi5zZWFyY2goKVtcInFcIl0gfHwgJydcbiAgICAgIH0sXG4gICAgICBjb2x1bW5EZWZzOiBbXG4gICAgICAgIHsgZmllbGQ6ICdtZXRhZGF0YS5uYW1lJywgZGlzcGxheU5hbWU6ICdJRCcsIGNlbGxUZW1wbGF0ZTogJHRlbXBsYXRlQ2FjaGUuZ2V0KFwiaWRUZW1wbGF0ZS5odG1sXCIpIH0sXG4gICAgICAgIHsgZmllbGQ6ICdzcGVjLnBvcnRhbElQJywgZGlzcGxheU5hbWU6ICdBZGRyZXNzJywgY2VsbFRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoXCJwb3J0YWxBZGRyZXNzLmh0bWxcIikgfSxcbiAgICAgICAgeyBmaWVsZDogJyRwb2RzTGluaycsIGRpc3BsYXlOYW1lOiAnUG9kcycsIGNlbGxUZW1wbGF0ZTogJHRlbXBsYXRlQ2FjaGUuZ2V0KFwicG9kQ291bnRzQW5kTGlua1RlbXBsYXRlLmh0bWxcIikgfSxcbiAgICAgICAgeyBmaWVsZDogJ3NwZWMuc2VsZWN0b3InLCBkaXNwbGF5TmFtZTogJ1NlbGVjdG9yJywgY2VsbFRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoXCJzZWxlY3RvclRlbXBsYXRlLmh0bWxcIikgfSxcbiAgICAgICAgeyBmaWVsZDogJ2xhYmVsc1RleHQnLCBkaXNwbGF5TmFtZTogJ0xhYmVscycsIGNlbGxUZW1wbGF0ZTogJHRlbXBsYXRlQ2FjaGUuZ2V0KFwibGFiZWxUZW1wbGF0ZS5odG1sXCIpIH0sXG4gICAgICAgIHsgZmllbGQ6ICdtZXRhZGF0YS5uYW1lc3BhY2UnLCBkaXNwbGF5TmFtZTogJ05hbWVzcGFjZScgfVxuICAgICAgXVxuICAgIH07XG5cbiAgICBLdWJlcm5ldGVzLmluaXRTaGFyZWQoJHNjb3BlLCAkbG9jYXRpb24sICRodHRwLCAkdGltZW91dCwgJHJvdXRlUGFyYW1zLCBLdWJlcm5ldGVzTW9kZWwsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc0FwaVVSTCk7XG5cbiAgICAkc2NvcGUuZGVsZXRlUHJvbXB0ID0gKHNlbGVjdGVkKSA9PiB7XG4gICAgICBpZiAoYW5ndWxhci5pc1N0cmluZyhzZWxlY3RlZCkpIHtcbiAgICAgICAgc2VsZWN0ZWQgPSBbe1xuICAgICAgICAgIGlkOiBzZWxlY3RlZFxuICAgICAgICB9XTtcbiAgICAgIH1cbiAgICAgIFVJLm11bHRpSXRlbUNvbmZpcm1BY3Rpb25EaWFsb2coPFVJLk11bHRpSXRlbUNvbmZpcm1BY3Rpb25PcHRpb25zPntcbiAgICAgICAgY29sbGVjdGlvbjogc2VsZWN0ZWQsXG4gICAgICAgIGluZGV4OiAnbWV0YWRhdGEubmFtZScsXG4gICAgICAgIG9uQ2xvc2U6IChyZXN1bHQ6Ym9vbGVhbikgPT4ge1xuICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGRlbGV0ZVNlbGVjdGVkKHNlbGVjdGVkOkFycmF5PEt1YmVQb2Q+LCBuZXh0Okt1YmVQb2QpIHtcbiAgICAgICAgICAgICAgaWYgKG5leHQpIHtcbiAgICAgICAgICAgICAgICBsb2cuZGVidWcoXCJkZWxldGluZzogXCIsIGdldE5hbWUobmV4dCkpO1xuICAgICAgICAgICAgICAgIEt1YmVybmV0ZXNTZXJ2aWNlcy5kZWxldGUoe1xuICAgICAgICAgICAgICAgICAgaWQ6IGdldE5hbWUobmV4dClcbiAgICAgICAgICAgICAgICB9LCB1bmRlZmluZWQsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyhcImRlbGV0ZWQ6IFwiLCBnZXROYW1lKG5leHQpKTtcbiAgICAgICAgICAgICAgICAgIGRlbGV0ZVNlbGVjdGVkKHNlbGVjdGVkLCBzZWxlY3RlZC5zaGlmdCgpKTtcbiAgICAgICAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyhcIkVycm9yIGRlbGV0aW5nOiBcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgZGVsZXRlU2VsZWN0ZWQoc2VsZWN0ZWQsIHNlbGVjdGVkLnNoaWZ0KCkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWxldGVTZWxlY3RlZChzZWxlY3RlZCwgc2VsZWN0ZWQuc2hpZnQoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0aXRsZTogJ0RlbGV0ZSBzZXJ2aWNlcz8nLFxuICAgICAgICBhY3Rpb246ICdUaGUgZm9sbG93aW5nIHNlcnZpY2VzIHdpbGwgYmUgZGVsZXRlZDonLFxuICAgICAgICBva1RleHQ6ICdEZWxldGUnLFxuICAgICAgICBva0NsYXNzOiAnYnRuLWRhbmdlcicsXG4gICAgICAgIGN1c3RvbTogXCJUaGlzIG9wZXJhdGlvbiBpcyBwZXJtYW5lbnQgb25jZSBjb21wbGV0ZWQhXCIsXG4gICAgICAgIGN1c3RvbUNsYXNzOiBcImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIlxuICAgICAgfSkub3BlbigpO1xuICAgIH07XG5cbiAgfV0pO1xufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNIZWxwZXJzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNQbHVnaW4udHNcIi8+XG5cbm1vZHVsZSBLdWJlcm5ldGVzIHtcblxuICAvLyBjb250cm9sbGVyIGZvciB0aGUgc3RhdHVzIGljb24gY2VsbFxuICBleHBvcnQgdmFyIFBvZFN0YXR1cyA9IGNvbnRyb2xsZXIoXCJQb2RTdGF0dXNcIiwgW1wiJHNjb3BlXCIsICgkc2NvcGUpID0+IHtcbiAgICAkc2NvcGUuc3RhdHVzTWFwcGluZyA9ICh0ZXh0KSA9PiB7XG4gICAgICByZXR1cm4gc3RhdHVzVGV4dFRvQ3NzQ2xhc3ModGV4dCk7XG4gICAgfVxuICB9XSk7XG5cbiAgLy8gY29udHJvbGxlciB0aGF0IGRlYWxzIHdpdGggdGhlIGxhYmVscyBwZXIgcG9kXG4gIGV4cG9ydCB2YXIgTGFiZWxzID0gY29udHJvbGxlcihcIkxhYmVsc1wiLCBbXCIkc2NvcGVcIiwgXCJ3b3Jrc3BhY2VcIiwgXCJqb2xva2lhXCIsIFwiJGxvY2F0aW9uXCIsICgkc2NvcGUsIHdvcmtzcGFjZSwgam9sb2tpYSwgJGxvY2F0aW9uKSA9PiB7XG4gICAgJHNjb3BlLmxhYmVscyA9IFtdO1xuICAgIHZhciBsYWJlbEtleVdlaWdodHMgPSB7XG4gICAgICBcIm5hbWVcIjogMSxcbiAgICAgIFwicmVwbGljYXRpb25Db250cm9sbGVyXCI6IDIsXG4gICAgICBcImdyb3VwXCI6IDNcbiAgICB9O1xuICAgICRzY29wZS4kd2F0Y2goJ2VudGl0eScsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcbiAgICAgIGlmIChuZXdWYWx1ZSkge1xuICAgICAgICAvLyBsb2cuZGVidWcoXCJsYWJlbHM6IFwiLCBuZXdWYWx1ZSk7XG4gICAgICAgIC8vIG1hc3NhZ2UgdGhlIGxhYmVscyBhIGJpdFxuICAgICAgICAkc2NvcGUubGFiZWxzID0gW107XG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChDb3JlLnBhdGhHZXQoJHNjb3BlLmVudGl0eSwgW1wibWV0YWRhdGFcIiwgXCJsYWJlbHNcIl0pLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgIGlmIChrZXkgPT09ICdmYWJyaWM4Jykge1xuICAgICAgICAgICAgLy8gVE9ETyBub3Qgc3VyZSB3aGF0IHRoaXMgaXMgZm9yLCB0aGUgY29udGFpbmVyIHR5cGU/XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgICRzY29wZS5sYWJlbHMucHVzaCh7XG4gICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgIHRpdGxlOiB2YWx1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyAgbGV0cyBzb3J0IGJ5IGtleSBidXQgbGV0cyBtYWtlIHN1cmUgdGhhdCB3ZSB3ZWlnaHQgY2VydGFpbiBsYWJlbHMgc28gdGhleSBhcmUgZmlyc3RcbiAgICAgICAgJHNjb3BlLmxhYmVscyA9ICRzY29wZS5sYWJlbHMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgIGZ1bmN0aW9uIGdldFdlaWdodChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBsYWJlbEtleVdlaWdodHNba2V5XSB8fCAxMDAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgbjEgPSBhW1wia2V5XCJdO1xuICAgICAgICAgIHZhciBuMiA9IGJbXCJrZXlcIl07XG4gICAgICAgICAgdmFyIHcxID0gZ2V0V2VpZ2h0KG4xKTtcbiAgICAgICAgICB2YXIgdzIgPSBnZXRXZWlnaHQobjIpO1xuICAgICAgICAgIHZhciBkaWZmID0gdzEgLSB3MjtcbiAgICAgICAgICBpZiAoZGlmZiA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGRpZmYgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG4xICYmIG4yKSB7XG4gICAgICAgICAgICBpZiAobjEgPiBuMikge1xuICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobjEgPCBuMikge1xuICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKG4xID09PSBuMikge1xuICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobjEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICRzY29wZS5oYW5kbGVDbGljayA9IChlbnRpdHksIGxhYmVsVHlwZTpzdHJpbmcsIHZhbHVlKSA9PiB7XG4gICAgICAvLyBsb2cuZGVidWcoXCJoYW5kbGVDbGljaywgZW50aXR5OiBcIiwgZW50aXR5LCBcIiBrZXk6IFwiLCBsYWJlbFR5cGUsIFwiIHZhbHVlOiBcIiwgdmFsdWUpO1xuICAgICAgdmFyIGZpbHRlclRleHRTZWN0aW9uID0gbGFiZWxUeXBlICsgXCI9XCIgKyB2YWx1ZS50aXRsZTtcbiAgICAgICRzY29wZS4kZW1pdCgnbGFiZWxGaWx0ZXJVcGRhdGUnLCBmaWx0ZXJUZXh0U2VjdGlvbik7XG4gICAgfTtcblxuICAgICRzY29wZS5sYWJlbENsYXNzID0gY29udGFpbmVyTGFiZWxDbGFzcztcbiAgfV0pO1xuXG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwia3ViZXJuZXRlc1BsdWdpbi50c1wiLz5cblxubW9kdWxlIEt1YmVybmV0ZXMge1xuICBleHBvcnQgdmFyIFRlbXBsYXRlQ29udHJvbGxlciA9IGNvbnRyb2xsZXIoXCJUZW1wbGF0ZUNvbnRyb2xsZXJcIiwgW1wiJHNjb3BlXCIsIFwiS3ViZXJuZXRlc01vZGVsXCIsIFwiJGxvY2F0aW9uXCIsIFwibWFya2VkXCIsICgkc2NvcGUsIEt1YmVybmV0ZXNNb2RlbCwgJGxvY2F0aW9uLCBtYXJrZWQpID0+IHtcbiAgICAkc2NvcGUubW9kZWwgPSBLdWJlcm5ldGVzTW9kZWw7XG4gICAgJHNjb3BlLmZpbHRlclRleHQgPSBcIlwiO1xuXG4gICAgZnVuY3Rpb24gZ2V0QW5ub3RhdGlvbnMob2JqKSB7XG4gICAgICByZXR1cm4gQ29yZS5wYXRoR2V0KG9iaiwgWydtZXRhZGF0YScsICdhbm5vdGF0aW9ucyddKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRWYWx1ZUZvcihvYmosIGtleSkge1xuICAgICAgdmFyIGFubm90YXRpb25zID0gZ2V0QW5ub3RhdGlvbnMob2JqKTtcbiAgICAgIGlmICghYW5ub3RhdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICB9XG4gICAgICB2YXIgbmFtZSA9IGdldE5hbWUob2JqKTtcbiAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgIHZhciBmdWxsS2V5ID0gXCJmYWJyaWM4LlwiICsgbmFtZSArIFwiL1wiICsga2V5O1xuICAgICAgICB2YXIgYW5zd2VyID0gYW5ub3RhdGlvbnNbZnVsbEtleV07XG4gICAgICAgIGlmIChhbnN3ZXIpIHtcbiAgICAgICAgICByZXR1cm4gYW5zd2VyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIga2V5OiBhbnkgPSBfLmZpbmQoXy5rZXlzKGFubm90YXRpb25zKSwgKGs6IHN0cmluZykgPT4gXy5lbmRzV2l0aChrLCBrZXkpKTtcbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIGFubm90YXRpb25zW2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAkc2NvcGUuY2FuY2VsID0gKCkgPT4ge1xuICAgICAgaWYgKCRzY29wZS5mb3JtQ29uZmlnKSB7XG4gICAgICAgIGRlbGV0ZSAkc2NvcGUuZm9ybUNvbmZpZztcbiAgICAgICAgZGVsZXRlICRzY29wZS5lbnRpdHk7XG4gICAgICAgICRzY29wZS5vYmplY3RzID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAkbG9jYXRpb24ucGF0aCgnL2t1YmVybmV0ZXMvYXBwcycpO1xuICAgIH1cblxuICAgICRzY29wZS4kd2F0Y2goJ21vZGVsLnRlbXBsYXRlcy5sZW5ndGgnLCAobmV3VmFsdWUpID0+IHtcbiAgICAgIGlmIChuZXdWYWx1ZSA9PT0gMCkge1xuICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2t1YmVybmV0ZXMvYXBwcycpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgJHNjb3BlLmZpbHRlclRlbXBsYXRlcyA9ICh0ZW1wbGF0ZSkgPT4ge1xuICAgICAgaWYgKENvcmUuaXNCbGFuaygkc2NvcGUuZmlsdGVyVGV4dCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gXy5jb250YWlucyhhbmd1bGFyLnRvSnNvbih0ZW1wbGF0ZSksICRzY29wZS5maWx0ZXJUZXh0LnRvTG93ZXJDYXNlKCkpO1xuICAgIH1cblxuICAgICRzY29wZS5nZXREZXNjcmlwdGlvbiA9ICh0ZW1wbGF0ZSkgPT4ge1xuICAgICAgcmV0dXJuIG1hcmtlZChnZXRWYWx1ZUZvcih0ZW1wbGF0ZSwgJ2Rlc2NyaXB0aW9uJykgfHwgJ05vIGRlc2NyaXB0aW9uJyk7XG4gICAgfVxuXG4gICAgJHNjb3BlLmdldEljb25VcmwgPSAodGVtcGxhdGUpID0+IHtcbiAgICAgIHJldHVybiBnZXRWYWx1ZUZvcih0ZW1wbGF0ZSwgJ2ljb25VcmwnKSB8fCBkZWZhdWx0SWNvblVybDtcbiAgICB9XG5cblxuICAgICRzY29wZS5kZXBsb3lUZW1wbGF0ZSA9ICh0ZW1wbGF0ZSkgPT4ge1xuICAgICAgbG9nLmRlYnVnKFwiVGVtcGxhdGUgcGFyYW1ldGVyczogXCIsIHRlbXBsYXRlLnBhcmFtZXRlcnMpO1xuICAgICAgbG9nLmRlYnVnKFwiVGVtcGxhdGUgb2JqZWN0czogXCIsIHRlbXBsYXRlLm9iamVjdHMpO1xuICAgICAgdmFyIHJvdXRlU2VydmljZU5hbWUgPSA8c3RyaW5nPiB1bmRlZmluZWQ7XG4gICAgICB2YXIgc2VydmljZSA9IF8uZmluZCh0ZW1wbGF0ZS5vYmplY3RzLCAob2JqKSA9PiB7XG4gICAgICAgIGlmIChnZXRLaW5kKG9iaikgPT09IFwiU2VydmljZVwiKSB7XG4gICAgICAgICAgdmFyIHBvcnRzID0gZ2V0UG9ydHMob2JqKTtcbiAgICAgICAgICBpZiAocG9ydHMgJiYgcG9ydHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChzZXJ2aWNlKSB7XG4gICAgICAgIHJvdXRlU2VydmljZU5hbWUgPSBnZXROYW1lKHNlcnZpY2UpO1xuICAgICAgfVxuICAgICAgbG9nLmRlYnVnKFwiU2VydmljZTogXCIsIHNlcnZpY2UpO1xuICAgICAgaWYgKCFyb3V0ZVNlcnZpY2VOYW1lICYmICghdGVtcGxhdGUucGFyYW1ldGVycyB8fCB0ZW1wbGF0ZS5wYXJhbWV0ZXJzLmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgICAgbG9nLmRlYnVnKFwiTm8gcGFyYW1ldGVycyByZXF1aXJlZCwgZGVwbG95aW5nIG9iamVjdHNcIik7XG4gICAgICAgIGFwcGx5T2JqZWN0cyh0ZW1wbGF0ZS5vYmplY3RzKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGZvcm1Db25maWcgPSB7XG4gICAgICAgIHN0eWxlOiBIYXd0aW9Gb3Jtcy5Gb3JtU3R5bGUuU1RBTkRBUkQsXG4gICAgICAgIGhpZGVMZWdlbmQ6IHRydWUsXG4gICAgICAgIHByb3BlcnRpZXM6IDxhbnk+IHt9XG4gICAgICB9O1xuICAgICAgdmFyIHBhcmFtcyA9IHRlbXBsYXRlLnBhcmFtZXRlcnM7XG4gICAgICBfLmZvckVhY2gocGFyYW1zLCAocGFyYW06YW55KSA9PiB7XG4gICAgICAgIHZhciBwcm9wZXJ0eSA9IDxhbnk+IHt9O1xuICAgICAgICBwcm9wZXJ0eS5sYWJlbCA9IHBhcmFtLm5hbWUudGl0bGVpemUoKTtcbiAgICAgICAgcHJvcGVydHkuZGVzY3JpcHRpb24gPSBwYXJhbS5kZXNjcmlwdGlvbjtcbiAgICAgICAgcHJvcGVydHkuZGVmYXVsdCA9IHBhcmFtLnZhbHVlO1xuICAgICAgICAvLyBUT0RPLCBkbyBwYXJhbWV0ZXJzIHN1cHBvcnQgdHlwZXM/XG4gICAgICAgIHByb3BlcnR5LnR5cGUgPSAnc3RyaW5nJztcbiAgICAgICAgZm9ybUNvbmZpZy5wcm9wZXJ0aWVzW3BhcmFtLm5hbWVdID0gcHJvcGVydHk7XG4gICAgICB9KTtcbiAgICAgIGlmIChyb3V0ZVNlcnZpY2VOYW1lKSB7XG4gICAgICAgIGZvcm1Db25maWcucHJvcGVydGllcy5jcmVhdGVSb3V0ZSA9IHtcbiAgICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgICBsYWJlbDogXCJDcmVhdGUgUm91dGVcIlxuICAgICAgICB9O1xuLypcbiAgICAgICAgZm9ybUNvbmZpZy5wcm9wZXJ0aWVzLnJvdXRlTmFtZSA9IHtcbiAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICBsYWJlbDogJ1JvdXRlIE5hbWUnLFxuICAgICAgICAgIGRlZmF1bHQ6IHJvdXRlU2VydmljZU5hbWUsXG4gICAgICAgICAgJ2NvbnRyb2wtZ3JvdXAtYXR0cmlidXRlcyc6IHtcbiAgICAgICAgICAgICduZy1zaG93JzogJ2VudGl0eS5jcmVhdGVSb3V0ZSdcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4qL1xuICAgICAgICBmb3JtQ29uZmlnLnByb3BlcnRpZXMucm91dGVTZXJ2aWNlTmFtZSA9IHtcbiAgICAgICAgICB0eXBlOiAnaGlkZGVuJyxcbiAgICAgICAgICBkZWZhdWx0OiByb3V0ZVNlcnZpY2VOYW1lXG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbmFtZXNwYWNlID0gY3VycmVudEt1YmVybmV0ZXNOYW1lc3BhY2UoKTtcbiAgICAgICAgLy8gVE9ETyBzdG9yZSB0aGlzIGluIGxvY2FsU3RvcmFnZSFcbiAgICAgICAgdmFyIGRvbWFpbiA9IFwidmFncmFudC5mOFwiO1xuICAgICAgICB2YXIgZGVmYXVsdFJvdXRlSG9zdFN1ZmZpeCA9ICcuJyArIChuYW1lc3BhY2UgPT09IFwiZGVmYXVsdFwiID8gXCJcIiA6IG5hbWVzcGFjZSArIFwiLlwiKSArIGRvbWFpbjtcbiAgICAgICAgZm9ybUNvbmZpZy5wcm9wZXJ0aWVzLnJvdXRlSG9zdG5hbWUgPSB7XG4gICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgZGVmYXVsdDogZGVmYXVsdFJvdXRlSG9zdFN1ZmZpeCxcbiAgICAgICAgICBsYWJlbDogXCJSb3V0ZSBob3N0IG5hbWUgc3VmZml4XCIsXG4gICAgICAgICAgJ2NvbnRyb2wtZ3JvdXAtYXR0cmlidXRlcyc6IHtcbiAgICAgICAgICAgICduZy1zaG93JzogJ2VudGl0eS5jcmVhdGVSb3V0ZSdcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICAkc2NvcGUuZW50aXR5ID0gPGFueT4ge307XG4gICAgICAkc2NvcGUuZm9ybUNvbmZpZyA9IGZvcm1Db25maWc7XG4gICAgICAkc2NvcGUub2JqZWN0cyA9IHRlbXBsYXRlLm9iamVjdHM7XG4gICAgICBsb2cuZGVidWcoXCJGb3JtIGNvbmZpZzogXCIsIGZvcm1Db25maWcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN1YnN0aXR1dGUoc3RyLCBkYXRhKSB7XG4gICAgICByZXR1cm4gc3RyLnJlcGxhY2UoL1xcJHtcXHcqfS9nLCAobWF0Y2gpID0+IHtcbiAgICAgICAgdmFyIGtleSA9IG1hdGNoLnJlcGxhY2UoL1xcJHsvLCAnJykucmVwbGFjZSgvfS8sICcnKS50cmltKCk7XG4gICAgICAgIHJldHVybiBkYXRhW2tleV0gfHwgbWF0Y2g7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAkc2NvcGUuc3Vic3RpdHV0ZUFuZERlcGxveVRlbXBsYXRlID0gKCkgPT4ge1xuICAgICAgdmFyIG9iamVjdHMgPSAkc2NvcGUub2JqZWN0cztcbiAgICAgIHZhciBvYmplY3RzVGV4dCA9IGFuZ3VsYXIudG9Kc29uKG9iamVjdHMsIHRydWUpO1xuICAgICAgLy8gcHVsbCB0aGVzZSBvdXQgb2YgdGhlIGVudGl0eSBvYmplY3Qgc28gdGhleSdyZSBub3QgdXNlZCBpbiBzdWJzdGl0dXRpb25zXG4gICAgICB2YXIgY3JlYXRlUm91dGUgPSAkc2NvcGUuZW50aXR5LmNyZWF0ZVJvdXRlO1xuICAgICAgdmFyIHJvdXRlSG9zdG5hbWVTdWZmaXggPSAkc2NvcGUuZW50aXR5LnJvdXRlSG9zdG5hbWUgfHwgXCJcIjtcbiAgICAgIHZhciByb3V0ZU5hbWUgPSAkc2NvcGUuZW50aXR5LnJvdXRlTmFtZTtcbiAgICAgIHZhciByb3V0ZVNlcnZpY2VOYW1lID0gJHNjb3BlLmVudGl0eS5yb3V0ZVNlcnZpY2VOYW1lO1xuICAgICAgZGVsZXRlICRzY29wZS5lbnRpdHkuY3JlYXRlUm91dGU7XG4gICAgICBkZWxldGUgJHNjb3BlLmVudGl0eS5yb3V0ZUhvc3RuYW1lO1xuICAgICAgZGVsZXRlICRzY29wZS5lbnRpdHkucm91dGVOYW1lO1xuICAgICAgZGVsZXRlICRzY29wZS5lbnRpdHkucm91dGVTZXJ2aWNlTmFtZTtcbiAgICAgIG9iamVjdHNUZXh0ID0gc3Vic3RpdHV0ZShvYmplY3RzVGV4dCwgJHNjb3BlLmVudGl0eSk7XG4gICAgICBvYmplY3RzID0gYW5ndWxhci5mcm9tSnNvbihvYmplY3RzVGV4dCk7XG4gICAgICBpZiAoY3JlYXRlUm91dGUpIHtcbiAgICAgICAgdmFyIHJvdXRlcyA9IFtdO1xuICAgICAgICBhbmd1bGFyLmZvckVhY2gob2JqZWN0cywgKG9iamVjdCkgPT4ge1xuICAgICAgICAgIHZhciBraW5kID0gb2JqZWN0LmtpbmQ7XG4gICAgICAgICAgdmFyIG5hbWUgPSBnZXROYW1lKG9iamVjdCk7XG4gICAgICAgICAgaWYgKG5hbWUgJiYgXCJTZXJ2aWNlXCIgPT09IGtpbmQpIHtcbiAgICAgICAgICAgIHZhciByb3V0ZUhvc3RuYW1lID0gbmFtZSArIHJvdXRlSG9zdG5hbWVTdWZmaXg7XG4gICAgICAgICAgICB2YXIgcm91dGUgPSB7XG4gICAgICAgICAgICAgIGtpbmQ6IFwiUm91dGVcIixcbiAgICAgICAgICAgICAgYXBpVmVyc2lvbjogZGVmYXVsdE9TQXBpVmVyc2lvbixcbiAgICAgICAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBzcGVjOiB7XG4gICAgICAgICAgICAgICAgaG9zdDogcm91dGVIb3N0bmFtZSxcbiAgICAgICAgICAgICAgICB0bzoge1xuICAgICAgICAgICAgICAgICAga2luZDogXCJTZXJ2aWNlXCIsXG4gICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByb3V0ZXMucHVzaChyb3V0ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgb2JqZWN0cyA9IG9iamVjdHMuY29uY2F0KHJvdXRlcyk7XG4gICAgICB9XG4gICAgICBhcHBseU9iamVjdHMob2JqZWN0cyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwbHlPYmplY3RzKG9iamVjdHMpIHtcbiAgICAgIF8uZm9yRWFjaChvYmplY3RzLCAob2JqZWN0OmFueSkgPT4ge1xuICAgICAgICBsb2cuZGVidWcoXCJPYmplY3Q6IFwiLCBvYmplY3QpO1xuICAgICAgICB1cGRhdGVPckNyZWF0ZU9iamVjdChvYmplY3QsIEt1YmVybmV0ZXNNb2RlbCk7XG4gICAgICB9KTtcbiAgICAgICRsb2NhdGlvbi5wYXRoKCcva3ViZXJuZXRlcy9hcHBzJyk7XG4gICAgfVxuXG4gICAgJHNjb3BlLmRlbGV0ZVRlbXBsYXRlID0gKHRlbXBsYXRlKSA9PiB7XG4gICAgICBVSS5tdWx0aUl0ZW1Db25maXJtQWN0aW9uRGlhbG9nKDxVSS5NdWx0aUl0ZW1Db25maXJtQWN0aW9uT3B0aW9ucz57XG4gICAgICAgIGNvbGxlY3Rpb246IFt0ZW1wbGF0ZV0sXG4gICAgICAgIGluZGV4OiAnbWV0YWRhdGEubmFtZScsXG4gICAgICAgIG9uQ2xvc2U6IChyZXN1bHQ6Ym9vbGVhbikgPT4ge1xuICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIEt1YmVybmV0ZXNNb2RlbFsndGVtcGxhdGVzUmVzb3VyY2UnXS5kZWxldGUoe1xuICAgICAgICAgICAgICBpZDogdGVtcGxhdGUubWV0YWRhdGEubmFtZVxuICAgICAgICAgICAgfSwgdW5kZWZpbmVkLCAoKSA9PiB7XG4gICAgICAgICAgICAgIEt1YmVybmV0ZXNNb2RlbFsndGVtcGxhdGVzUmVzb3VyY2UnXS5xdWVyeSgoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIEt1YmVybmV0ZXNNb2RlbC50ZW1wbGF0ZXMgPSBkYXRhLml0ZW1zO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICBsb2cuZGVidWcoXCJFcnJvciBkZWxldGluZyB0ZW1wbGF0ZTogXCIsIGVycm9yKTsgXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHRpdGxlOiAnRGVsZXRlIFRlbXBsYXRlPycsXG4gICAgICAgIGFjdGlvbjogJ1RoZSBmb2xsb3dpbmcgdGVtcGxhdGUgd2lsbCBiZSBkZWxldGVkOicsXG4gICAgICAgIG9rVGV4dDogJ0RlbGV0ZScsXG4gICAgICAgIG9rQ2xhc3M6ICdidG4tZGFuZ2VyJyxcbiAgICAgICAgY3VzdG9tOiBcIlRoaXMgb3BlcmF0aW9uIGlzIHBlcm1hbmVudCBvbmNlIGNvbXBsZXRlZCFcIixcbiAgICAgICAgY3VzdG9tQ2xhc3M6IFwiYWxlcnQgYWxlcnQtd2FybmluZ1wiXG4gICAgICB9KS5vcGVuKCk7XG4gICAgfVxuXG4gIH1dKTtcbn1cblxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNQbHVnaW4udHNcIi8+XG5cbm1vZHVsZSBLdWJlcm5ldGVzIHtcblx0dmFyIGxvZyA9IExvZ2dlci5nZXQoJ2t1YmVybmV0ZXMtd2F0Y2hlcicpO1xuXHR2YXIgYXBpVXJsID0gVXJsSGVscGVycy5qb2luKCdhcGknLCAndjEnKTtcblxuXHR2YXIgbmFtZXNwYWNlVHlwZSA9IFdhdGNoVHlwZXMuTkFNRVNQQUNFUztcblxuXHR2YXIgazhzVHlwZXMgPSBOYW1lc3BhY2VkVHlwZXMuazhzVHlwZXM7XG4gIHZhciBvc1R5cGVzICA9IE5hbWVzcGFjZWRUeXBlcy5vc1R5cGVzO1xuXG4gIHZhciBiYXNlV2F0Y2ggPSA8YW55PiB7XG5cdFx0XHR1cmw6IDxzdHJpbmc+IHVuZGVmaW5lZCxcblx0XHRcdGNvbm5lY3RUaW1lOiA8TnVtYmVyPiB1bmRlZmluZWQsXG5cdFx0XHRvYmplY3RzOiA8T2JqZWN0TWFwPiB7fSxcblx0XHRcdG9iamVjdEFycmF5OiA8QXJyYXk8YW55Pj4gW10sXG5cdFx0XHRjdXN0b21pemVyczogPEFycmF5PChvYmo6YW55KSA9PiB2b2lkPj5bXSxcblx0XHRcdG9uQWRkQWN0aW9uczogPEFycmF5PChvYmo6YW55KSA9PiB2b2lkPj4gW10sXG5cdFx0XHRvbk1vZGlmaWVkQWN0aW9uczogPEFycmF5PChvYmo6YW55KSA9PiB2b2lkPj4gW10sXG5cdFx0XHRvbkRlbGV0ZWRBY3Rpb25zOiA8QXJyYXk8KG9iajphbnkpID0+IHZvaWQ+PiBbXSxcblx0XHRcdHNvY2tldDogPFdlYlNvY2tldD4gdW5kZWZpbmVkLFxuICAgICAgY29ubmVjdGVkOiBmYWxzZVxuICB9XG5cblx0dmFyIG5hbWVzcGFjZVdhdGNoID0gPGFueT4gXy5hc3NpZ24oXy5jbG9uZURlZXAoYmFzZVdhdGNoKSwge1xuXHRcdHNlbGVjdGVkOiB1bmRlZmluZWQsXG5cdFx0Y29ubmVjdFRpbWU6IDxOdW1iZXI+IHVuZGVmaW5lZCxcblx0XHR1cmw6IFVybEhlbHBlcnMuam9pbihhcGlVcmwsIFdhdGNoVHlwZXMuTkFNRVNQQUNFUyksXG5cdH0pO1xuXG5cdHZhciB3YXRjaGVzID0gPGFueT4ge307XG5cdF8uZm9yRWFjaChrOHNUeXBlcywgKHR5cGUpID0+IHtcblx0XHR3YXRjaGVzW3R5cGVdID0gXy5hc3NpZ24oXy5jbG9uZURlZXAoYmFzZVdhdGNoKSwge1xuICAgICAgcHJlZml4OiBrdWJlcm5ldGVzQXBpUHJlZml4KClcbiAgICB9KTtcbiAgfSk7XG5cdF8uZm9yRWFjaChvc1R5cGVzLCAodHlwZSkgPT4ge1xuXHRcdHdhdGNoZXNbdHlwZV0gPSBfLmFzc2lnbihfLmNsb25lRGVlcChiYXNlV2F0Y2gpLCB7XG4gICAgICBwcmVmaXg6IFVybEhlbHBlcnMuam9pbihvcGVuc2hpZnRBcGlQcmVmaXgoKSlcbiAgICB9KTtcbiAgfSk7XG5cbiAgaGF3dGlvUGx1Z2luTG9hZGVyLnJlZ2lzdGVyUHJlQm9vdHN0cmFwVGFzaygobmV4dCkgPT4ge1xuICAgIHZhciB1cmkgPSBuZXcgVVJJKG1hc3RlckFwaVVybCgpKTtcbiAgICB1cmkucGF0aChuYW1lc3BhY2VXYXRjaC51cmwpO1xuICAgIHZhciB1cmwgPSB1cmkudG9TdHJpbmcoKTtcblxuICAgIC8vIGNhbid0IHVzZSAkaHR0cCBoZXJlXG4gICAgJC5nZXQodXJpLnRvU3RyaW5nKCkpXG4gICAgICAuZG9uZSgoZGF0YSkgPT4ge1xuICAgICAgICBfLmZvckVhY2goZGF0YS5pdGVtcywgKG5hbWVzcGFjZTphbnkpID0+IHtcbiAgICAgICAgICBpZiAoIW5hbWVzcGFjZS5tZXRhZGF0YS51aWQpIHtcbiAgICAgICAgICAgIG5hbWVzcGFjZS5tZXRhZGF0YS51aWQgPSBuYW1lc3BhY2UubWV0YWRhdGEubmFtZXNwYWNlICsgJy8nICsgbmFtZXNwYWNlLm1ldGFkYXRhLm5hbWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5hbWVzcGFjZVdhdGNoLm9iamVjdHNbbmFtZXNwYWNlLm1ldGFkYXRhLnVpZF0gPSBuYW1lc3BhY2U7XG4gICAgICAgIH0pO1xuICAgICAgICBuYW1lc3BhY2VXYXRjaC5vYmplY3RBcnJheS5sZW5ndGggPSAwO1xuICAgICAgICBfLmZvckluKG5hbWVzcGFjZVdhdGNoLm9iamVjdHMsIChvYmplY3QsIGtleSkgPT4ge1xuICAgICAgICAgIG5hbWVzcGFjZVdhdGNoLm9iamVjdEFycmF5LnB1c2gob2JqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9KS5hbHdheXMobmV4dCk7XG4gIH0pO1xuXG5cdGZ1bmN0aW9uIGNyZWF0ZVdhdGNoKHR5cGUsIHdhdGNoLCB1c2VyRGV0YWlscywgJHNjb3BlLCBvbk1lc3NhZ2UgPSAoZXZlbnQpID0+IHt9LCBvbkNsb3NlID0gKGV2ZW50KSA9PiB7fSwgb25PcGVuID0gKGV2ZW50KSA9PiB7fSkge1xuXHRcdFx0dmFyIHVyaSA9IG5ldyBVUkkobWFzdGVyQXBpVXJsKCkpO1xuXHRcdFx0dXJpLnBhdGgod2F0Y2gudXJsKTtcblx0XHRcdGlmICh1cmkucHJvdG9jb2woKSA9PT0gXCJodHRwc1wiKSB7XG5cdFx0XHRcdHVyaS5wcm90b2NvbCgnd3NzJyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR1cmkucHJvdG9jb2woJ3dzJyk7XG5cdFx0XHR9XG5cdFx0XHR1cmkucXVlcnkoPGFueT4ge1xuXHRcdFx0XHR3YXRjaDogdHJ1ZSxcblx0XHRcdFx0YWNjZXNzX3Rva2VuOiB1c2VyRGV0YWlscy50b2tlblxuXHRcdFx0fSk7XG5cdFx0XHR3YXRjaC5yZXRyaWVzID0gMDtcblx0XHRcdHZhciBvbk9wZW5JbnRlcm5hbCA9IChldmVudCkgPT4ge1xuXHRcdFx0XHR3YXRjaC5yZXRyaWVzID0gMDtcblx0XHRcdFx0d2F0Y2guY29ubmVjdFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgd2F0Y2guY29ubmVjdGVkID0gdHJ1ZTtcblx0XHRcdFx0b25PcGVuKGV2ZW50KTtcblx0XHRcdH07XG5cdFx0XHR2YXIgb25NZXNzYWdlSW50ZXJuYWwgPSAoZXZlbnQpID0+IHtcblx0XHRcdFx0Ly8gbG9nLmRlYnVnKHR5cGUsIFwiIG9ubWVzc2FnZTogXCIsIGV2ZW50KTtcblx0XHRcdFx0dmFyIGRhdGEgPSBhbmd1bGFyLmZyb21Kc29uKGV2ZW50LmRhdGEpO1xuXHRcdFx0XHQvL2xvZy5kZWJ1Zyh0eXBlLCBcIiBkYXRhOiBcIiwgZGF0YSk7XG5cdFx0XHRcdHN3aXRjaCAoZGF0YS50eXBlKSB7XG5cdFx0XHRcdFx0Y2FzZSBXYXRjaEFjdGlvbnMuQURERUQ6XG5cdFx0XHRcdFx0Y2FzZSBXYXRjaEFjdGlvbnMuTU9ESUZJRUQ6XG5cdFx0XHRcdFx0XHR2YXIgb2JqID0gZGF0YS5vYmplY3Q7XG5cdFx0XHRcdFx0XHRpZiAod2F0Y2guY3VzdG9taXplcnMubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdFx0XHRfLmZvckVhY2god2F0Y2guY3VzdG9taXplcnMsIChjdXN0b21pemVyOihvYmo6YW55KSA9PiB2b2lkKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0Y3VzdG9taXplcihvYmopO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cbiAgICAgICAgICAgIGlmICghZGF0YS5vYmplY3QubWV0YWRhdGEudWlkKSB7XG4gICAgICAgICAgICAgIGRhdGEub2JqZWN0Lm1ldGFkYXRhLnVpZCA9IGRhdGEub2JqZWN0Lm1ldGFkYXRhLm5hbWVzcGFjZSArICcvJyArIGRhdGEub2JqZWN0Lm1ldGFkYXRhLm5hbWU7XG4gICAgICAgICAgICB9XG5cdFx0XHRcdFx0XHR3YXRjaC5vYmplY3RzW2RhdGEub2JqZWN0Lm1ldGFkYXRhLnVpZF0gPSBkYXRhLm9iamVjdDtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgV2F0Y2hBY3Rpb25zLkRFTEVURUQ6XG5cdFx0XHRcdFx0XHRkZWxldGUgd2F0Y2gub2JqZWN0c1tkYXRhLm9iamVjdC5tZXRhZGF0YS51aWRdO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdGxvZy5pbmZvKFwiVW5rbm93biBldmVudCB0eXBlOiBcIiwgZGF0YS50eXBlKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHR3YXRjaC5vYmplY3RBcnJheS5sZW5ndGggPSAwO1xuXHRcdFx0XHRfLmZvckluKHdhdGNoLm9iamVjdHMsIChvYmplY3QsIHVpZCkgPT4ge1xuXHRcdFx0XHRcdHdhdGNoLm9iamVjdEFycmF5LnB1c2gob2JqZWN0KTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdG9uTWVzc2FnZShkYXRhKTtcblx0XHRcdFx0Ly8gZXhlY3V0ZSBhbnkgd2F0Y2ggYWN0aW9uc1xuXHRcdFx0XHRzd2l0Y2ggKGRhdGEudHlwZSkge1xuXHRcdFx0XHRcdGNhc2UgV2F0Y2hBY3Rpb25zLkFEREVEOlxuXHRcdFx0XHRcdFx0Xy5mb3JFYWNoKHdhdGNoLm9uQWRkQWN0aW9ucywgKGFjdGlvbjphbnkpID0+IGFjdGlvbihkYXRhLm9iamVjdCkpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBXYXRjaEFjdGlvbnMuTU9ESUZJRUQ6XG5cdFx0XHRcdFx0XHRfLmZvckVhY2god2F0Y2gub25Nb2RpZmllZEFjdGlvbnMsIChhY3Rpb246YW55KSA9PiBhY3Rpb24oZGF0YS5vYmplY3QpKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgV2F0Y2hBY3Rpb25zLkRFTEVURUQ6XG5cdFx0XHRcdFx0XHRfLmZvckVhY2god2F0Y2gub25EZWxldGVkQWN0aW9ucywgKGFjdGlvbjphbnkpID0+IGFjdGlvbihkYXRhLm9iamVjdCkpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0Q29yZS4kYXBwbHkoJHNjb3BlKTtcblx0XHRcdH07XG5cdFx0XHR2YXIgb25DbG9zZUludGVybmFsID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHdhdGNoLmNvbm5lY3RlZCA9IGZhbHNlO1xuXHRcdFx0XHRpZiAod2F0Y2gucmV0cmllcyA8IDMgJiYgd2F0Y2guY29ubmVjdFRpbWUgJiYgbmV3IERhdGUoKS5nZXRUaW1lKCkgLSB3YXRjaC5jb25uZWN0VGltZSA+IDUwMDApIHtcblx0XHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0XHRcdHdhdGNoLnJldHJpZXMgPSB3YXRjaC5yZXRyaWVzICsgMTtcblx0XHRcdFx0XHRcdGxvZy5kZWJ1ZyhcIndhdGNoIFwiLCB0eXBlLCBcIiBkaXNjb25uZWN0ZWQsIHJldHJ5ICNcIiwgd2F0Y2gucmV0cmllcyk7XG5cdFx0XHRcdFx0XHR2YXIgd3MgPSB3YXRjaC5zb2NrZXQgPSBuZXcgV2ViU29ja2V0KHVyaS50b1N0cmluZygpKTtcblx0XHRcdFx0XHRcdHdzLm9ub3BlbiA9IG9uT3BlbkludGVybmFsO1xuXHRcdFx0XHRcdFx0d3Mub25tZXNzYWdlID0gb25NZXNzYWdlSW50ZXJuYWw7XG5cdFx0XHRcdFx0XHR3cy5vbmNsb3NlID0gb25DbG9zZUludGVybmFsO1xuXHRcdFx0XHRcdH0sIDUwMDApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdG9uQ2xvc2UoZXZlbnQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR2YXIgd3MgPSB3YXRjaC5zb2NrZXQgPSBuZXcgV2ViU29ja2V0KHVyaS50b1N0cmluZygpKTtcblx0XHRcdHdzLm9ub3BlbiA9IG9uT3BlbkludGVybmFsO1xuXHRcdFx0d3Mub25tZXNzYWdlID0gb25NZXNzYWdlSW50ZXJuYWw7XG5cdFx0XHR3cy5vbmNsb3NlID0gb25DbG9zZUludGVybmFsO1xuXHR9XG5cblx0Lypcblx0X21vZHVsZS5ydW4oWydXYXRjaGVyU2VydmljZScsICckcm9vdFNjb3BlJywgKFdhdGNoZXJTZXJ2aWNlOldhdGNoZXJTZXJ2aWNlLCAkcm9vdFNjb3BlKSA9PiB7XG5cdFx0bG9nLmRlYnVnKFwiU3RhcnRlZCB3YXRjaGVyIHNlcnZpY2VcIik7XG5cbi8vXHRcdEt1YmVybmV0ZXMua2VlcFBvbGxpbmdNb2RlbCA9IGZhbHNlO1xuXG5cdFx0Ly8gc29tZSB1c2FnZSBleGFtcGxlc1xuLy9cdFx0V2F0Y2hlclNlcnZpY2UuYWRkQ3VzdG9taXplcigncG9kcycsIChwb2QpID0+IHtcbi8vXHRcdFx0cG9kLlNvbWVWYWx1ZSA9ICdmb29iYXInO1xuLy9cdFx0fSk7XG4vL1x0XHQkcm9vdFNjb3BlLnBvZHMgPSBXYXRjaGVyU2VydmljZS5nZXRPYmplY3RzKCdwb2RzJyk7XG4vL1x0XHQkcm9vdFNjb3BlLnBvZE1hcCA9IFdhdGNoZXJTZXJ2aWNlLmdldE9iamVjdE1hcCgncG9kcycpO1xuLy9cbi8vXHRcdCRyb290U2NvcGUuJHdhdGNoQ29sbGVjdGlvbigncG9kcycsIChuZXdWYWx1ZSkgPT4ge1xuLy9cdFx0ICBsb2cuZGVidWcoXCJwb2RzIGNoYW5nZWQ6IFwiLCBuZXdWYWx1ZSk7XG4vL1x0XHR9KTtcbi8vXG4vL1x0XHQkcm9vdFNjb3BlLiR3YXRjaCgncG9kTWFwJywgKG5ld1ZhbHVlKSA9PiB7XG4vL1x0XHQgIGxvZy5kZWJ1ZyhcInBvZCBtYXAgY2hhbmdlZDogXCIsIG5ld1ZhbHVlKTtcbi8vXHRcdH0sIHRydWUpO1xuXHR9XSk7XG5cdCovXG5cblx0X21vZHVsZS5zZXJ2aWNlKCdXYXRjaGVyU2VydmljZScsIFsndXNlckRldGFpbHMnLCAnJHJvb3RTY29wZScsICckdGltZW91dCcsICh1c2VyRGV0YWlscywgJHJvb3RTY29wZSwgJHRpbWVvdXQpID0+IHtcblx0XHR2YXIgc2VsZiA9IDxhbnk+IHtcblx0XHRcdGhhc1dlYlNvY2tldDogZmFsc2Vcblx0XHR9O1xuXG5cdFx0dHJ5IHtcblx0XHRcdGlmICghV2ViU29ja2V0KSAge1xuXHRcdFx0XHRyZXR1cm4gc2VsZjtcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdHJldHVybiBzZWxmO1xuXHRcdH1cblxuXHRcdHNlbGYuc2V0TmFtZXNwYWNlID0gKG5hbWVzcGFjZTogc3RyaW5nKSA9PiB7XG5cdFx0XHRpZiAobmFtZXNwYWNlICE9PSBuYW1lc3BhY2VXYXRjaC5zZWxlY3RlZCkge1xuXHRcdFx0XHRsb2cuZGVidWcoXCJOYW1lc3BhY2UgY2hhbmdlZCwgc2h1dHRpbmcgZG93biBleGlzdGluZyB3YXRjaGVzXCIpO1xuXHRcdFx0XHRfLmZvckluKHdhdGNoZXMsICh3YXRjaCwgdHlwZSkgPT4ge1xuXHRcdFx0XHRcdGlmICh3YXRjaC5zb2NrZXQpIHtcblx0XHRcdFx0XHRcdHdhdGNoLnNvY2tldC5jbG9zZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHQgIGxvZy5kZWJ1ZyhcIlNldHRpbmcgbmFtZXNwYWNlIHdhdGNoIHRvOiBcIiwgbmFtZXNwYWNlKTtcblx0XHRcdFx0bmFtZXNwYWNlV2F0Y2guc2VsZWN0ZWQgPSBuYW1lc3BhY2U7XG4gICAgICAgIGlmICghbmFtZXNwYWNlKSB7XG4gICAgICAgICAgZGVsZXRlIGxvY2FsU3RvcmFnZVtDb25zdGFudHMuTkFNRVNQQUNFX1NUT1JBR0VfS0VZXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsb2NhbFN0b3JhZ2VbQ29uc3RhbnRzLk5BTUVTUEFDRV9TVE9SQUdFX0tFWV0gPSBuYW1lc3BhY2U7XG4gICAgICAgIH1cblx0XHRcdFx0JHJvb3RTY29wZS4kYnJvYWRjYXN0KFwiV2F0Y2hlck5hbWVzcGFjZUNoYW5nZWRcIiwgbmFtZXNwYWNlKTtcblx0XHRcdFx0aWYgKG5hbWVzcGFjZSkge1xuXG4gICAgICAgICAgXy5mb3JJbih3YXRjaGVzLCAod2F0Y2gsIHR5cGUpID0+IHtcblx0XHRcdFx0XHRcdC8vIHJlc2V0IHRoZSBvYmplY3QgcmF0aGVyIHRoYW4gcmUtYXNzaWduaW5nIHRoZW1cblx0XHRcdFx0XHRcdC8vIGVuc3VyZXMgdGhhdCBhbnkgd2F0Y2hlcyBpbiBjb250cm9sbGVycyB3b24ndFxuXHRcdFx0XHRcdFx0Ly8gYmUgd2F0Y2hpbmcgYSBzdGFsZSBvYmplY3Rcblx0XHRcdFx0XHRcdHdhdGNoLnVybCA9IFVybEhlbHBlcnMuam9pbih3YXRjaC5wcmVmaXgsIFdhdGNoVHlwZXMuTkFNRVNQQUNFUywgbmFtZXNwYWNlLCB0eXBlKTtcblx0XHRcdFx0XHRcdHdhdGNoLmNvbm5lY3RUaW1lID0gPE51bWJlcj4gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0Xy5mb3JFYWNoKF8ua2V5cyh3YXRjaC5vYmplY3RzKSwgKHVpZCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRfLmZvckVhY2god2F0Y2gub25EZWxldGVkQWN0aW9ucywgKGFjdGlvbjphbnkpID0+IGFjdGlvbih3YXRjaC5vYmplY3RzW3VpZF0pKTtcblx0XHRcdFx0XHRcdFx0ZGVsZXRlIHdhdGNoLm9iamVjdHNbdWlkXTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0d2F0Y2gub2JqZWN0QXJyYXkubGVuZ3RoID0gMDtcblx0XHRcdFx0XHRcdHdhdGNoLnNvY2tldCA9IDxXZWJTb2NrZXQ+IHVuZGVmaW5lZDtcbiAgICAgICAgICB9KTtcblx0XHRcdFx0XHRfLmZvckluKHdhdGNoZXMsICh3YXRjaCwgdHlwZSkgPT4ge1xuXHRcdFx0XHRcdFx0Y3JlYXRlV2F0Y2godHlwZSwgd2F0Y2gsIHVzZXJEZXRhaWxzLCAkcm9vdFNjb3BlKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGNyZWF0ZVdhdGNoKFdhdGNoVHlwZXMuTkFNRVNQQUNFUywgbmFtZXNwYWNlV2F0Y2gsIHVzZXJEZXRhaWxzLCAkcm9vdFNjb3BlLCAoZXZlbnQpID0+IHtcblx0XHRcdC8vIGxvZy5kZWJ1ZyhcIkdvdCBldmVudDogXCIsIGV2ZW50KTtcblx0XHRcdHN3aXRjaCAoZXZlbnQudHlwZSkge1xuXHRcdFx0XHRjYXNlIFdhdGNoQWN0aW9ucy5BRERFRDpcblx0XHRcdFx0Y2FzZSBXYXRjaEFjdGlvbnMuTU9ESUZJRUQ6XG4gICAgICAgICAgaWYgKCFuYW1lc3BhY2VXYXRjaC5zZWxlY3RlZCkge1xuICAgICAgICAgICAgICBzZWxmLnNldE5hbWVzcGFjZShldmVudC5vYmplY3QubWV0YWRhdGEubmFtZSk7XG4gICAgICAgICAgfVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFdhdGNoQWN0aW9ucy5ERUxFVEVEOlxuXHRcdFx0XHRcdHZhciBuZXh0ID0gPGFueT4gXy5maXJzdChuYW1lc3BhY2VXYXRjaC5vYmplY3RBcnJheSk7XG5cdFx0XHRcdFx0aWYgKG5leHQpIHtcblx0XHRcdFx0XHRcdHNlbGYuc2V0TmFtZXNwYWNlKG5leHQubWV0YWRhdGEubmFtZSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuc2V0TmFtZXNwYWNlKHVuZGVmaW5lZCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdGxvZy5kZWJ1ZyhcIlVua25vd24gbmFtZXNwYWNlIGV2ZW50IHR5cGU6IFwiLCBldmVudC50eXBlKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0fSwgKGV2ZW50KSA9PiB7XG5cdFx0XHRsb2cuZGVidWcoXCJOYW1lc3BhY2Ugd2F0Y2ggY2xvc2VkXCIpO1xuXHRcdFx0c2VsZi5zZXROYW1lc3BhY2UodW5kZWZpbmVkKTtcblx0XHR9KTtcblxuICAgIHNlbGYuc2V0TmFtZXNwYWNlKGxvY2FsU3RvcmFnZVtDb25zdGFudHMuTkFNRVNQQUNFX1NUT1JBR0VfS0VZXSk7XG5cblx0XHRzZWxmLmhhc1dlYlNvY2tldCA9IHRydWU7XG5cblx0XHRzZWxmLmdldE5hbWVzcGFjZSA9ICgpID0+IG5hbWVzcGFjZVdhdGNoLnNlbGVjdGVkO1xuXG5cdFx0c2VsZi5hZGRDdXN0b21pemVyID0gKHR5cGU6IHN0cmluZywgY3VzdG9taXplcjogKG9iajphbnkpID0+IHZvaWQpID0+IHtcblx0XHRcdGlmICh0eXBlIGluIHdhdGNoZXMpIHtcblx0XHRcdFx0d2F0Y2hlc1t0eXBlXS5jdXN0b21pemVycy5wdXNoKGN1c3RvbWl6ZXIpO1xuXHRcdFx0XHRfLmZvckVhY2god2F0Y2hlc1t0eXBlXS5vYmplY3RBcnJheSwgKG9iaikgPT4gY3VzdG9taXplcihvYmopKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRzZWxmLmdldFR5cGVzID0gKCkgPT4ge1xuXHRcdFx0cmV0dXJuIGs4c1R5cGVzLmNvbmNhdChbV2F0Y2hUeXBlcy5OQU1FU1BBQ0VTXSkuY29uY2F0KG9zVHlwZXMpO1xuXHRcdH1cblxuXHRcdHNlbGYuZ2V0T2JqZWN0TWFwID0gKHR5cGU6IHN0cmluZykgPT4ge1xuXHRcdFx0aWYgKHR5cGUgPT09IFdhdGNoVHlwZXMuTkFNRVNQQUNFUykge1xuXHRcdFx0XHRyZXR1cm4gbmFtZXNwYWNlV2F0Y2gub2JqZWN0cztcblx0XHRcdH1cblx0XHRcdGlmICh0eXBlIGluIHdhdGNoZXMpIHtcblx0XHRcdFx0cmV0dXJuIHdhdGNoZXNbdHlwZV0ub2JqZWN0cztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0c2VsZi5nZXRPYmplY3RzID0gKHR5cGU6c3RyaW5nKSA9PiB7XG5cdFx0XHRpZiAodHlwZSA9PT0gV2F0Y2hUeXBlcy5OQU1FU1BBQ0VTKSB7XG5cdFx0XHRcdHJldHVybiBuYW1lc3BhY2VXYXRjaC5vYmplY3RBcnJheTtcblx0XHRcdH1cblx0XHRcdGlmICh0eXBlIGluIHdhdGNoZXMpIHtcblx0XHRcdFx0cmV0dXJuIHdhdGNoZXNbdHlwZV0ub2JqZWN0QXJyYXk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHNlbGYubGlzdGVuZXJzID0gPEFycmF5PChPYmplY3RNYXApID0+IHZvaWQ+PiBbXTtcblxuXHRcdHZhciB1cGRhdGVGdW5jdGlvbiA9ICgpID0+IHtcbiAgICAgIGxvZy5kZWJ1ZyhcIk9iamVjdHMgY2hhbmdlZCwgZmlyaW5nIGxpc3RlbmVyc1wiKTtcblx0XHRcdHZhciBvYmplY3RzID0gPE9iamVjdE1hcD57fTtcblx0XHRcdF8uZm9yRWFjaChzZWxmLmdldFR5cGVzKCksICh0eXBlOnN0cmluZykgPT4ge1xuICAgICAgICBvYmplY3RzW3R5cGVdID0gc2VsZi5nZXRPYmplY3RzKHR5cGUpO1xuXHRcdFx0fSk7XG5cdFx0XHRfLmZvckVhY2goc2VsZi5saXN0ZW5lcnMsIChsaXN0ZW5lcjooT2JqZWN0TWFwKSA9PiB2b2lkKSA9PiB7XG5cdFx0XHRcdGxpc3RlbmVyKG9iamVjdHMpO1xuXHRcdFx0fSk7XG5cdFx0fTtcblxuXHRcdHZhciBkZWJvdW5jZWRVcGRhdGUgPSBfLmRlYm91bmNlKHVwZGF0ZUZ1bmN0aW9uLCA1MDAsIHsgdHJhaWxpbmc6IHRydWUgfSk7XG5cblx0XHQvLyBsaXN0ZW5lciBnZXRzIG5vdGlmaWVkIGFmdGVyIGEgYnVuY2ggb2YgY2hhbmdlcyBoYXZlIG9jY3VycmVkXG5cdFx0c2VsZi5yZWdpc3Rlckxpc3RlbmVyID0gKGZuOihvYmplY3RzOk9iamVjdE1hcCkgPT4gdm9pZCkgPT4ge1xuXHRcdFx0c2VsZi5saXN0ZW5lcnMucHVzaChmbik7XG5cdFx0XHRfLmZvckVhY2goc2VsZi5nZXRUeXBlcygpLCAodHlwZSkgPT4ge1xuXHRcdFx0XHRzZWxmLmFkZEFjdGlvbih0eXBlLCBXYXRjaEFjdGlvbnMuQU5ZLCBkZWJvdW5jZWRVcGRhdGUpXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHQvLyBmdW5jdGlvbiB0byB3YXRjaCBpbmRpdmlkdWFsIGFjdGlvbnMgb24gdGhlIGs4cyBvYmplY3RzXG5cdFx0c2VsZi5hZGRBY3Rpb24gPSAodHlwZTogc3RyaW5nLCBhY3Rpb246IHN0cmluZywgZm46IChvYmo6YW55KSA9PiB2b2lkKSA9PiB7XG5cdFx0XHR2YXIgd2F0Y2ggPSA8YW55PiB1bmRlZmluZWQ7XG5cdFx0XHRpZiAodHlwZSA9PT0gV2F0Y2hUeXBlcy5OQU1FU1BBQ0VTKSB7XG5cdFx0XHRcdHdhdGNoID0gbmFtZXNwYWNlV2F0Y2g7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3YXRjaCA9IHdhdGNoZXNbdHlwZV07XG5cdFx0XHR9XG5cdFx0XHRpZiAod2F0Y2gpIHtcblx0XHRcdFx0c3dpdGNoIChhY3Rpb24pIHtcblx0XHRcdFx0XHRjYXNlIFdhdGNoQWN0aW9ucy5BTlk6XG5cdFx0XHRcdFx0XHRfLmZvckVhY2god2F0Y2gub2JqZWN0QXJyYXksIChvYmopID0+IGZuKG9iaikpO1xuXHRcdFx0XHRcdFx0d2F0Y2gub25BZGRBY3Rpb25zLnB1c2goZm4pO1xuXHRcdFx0XHRcdFx0d2F0Y2gub25EZWxldGVkQWN0aW9ucy5wdXNoKGZuKTtcblx0XHRcdFx0XHRcdHdhdGNoLm9uTW9kaWZpZWRBY3Rpb25zLnB1c2goZm4pO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBXYXRjaEFjdGlvbnMuQURERUQ6XG5cdFx0XHRcdFx0XHRfLmZvckVhY2god2F0Y2gub2JqZWN0QXJyYXksIChvYmopID0+IGZuKG9iaikpO1xuXHRcdFx0XHRcdFx0d2F0Y2gub25BZGRBY3Rpb25zLnB1c2goZm4pO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBXYXRjaEFjdGlvbnMuTU9ESUZJRUQ6XG5cdFx0XHRcdFx0XHR3YXRjaC5vbk1vZGlmaWVkQWN0aW9ucy5wdXNoKGZuKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgV2F0Y2hBY3Rpb25zLkRFTEVURUQ6XG5cdFx0XHRcdFx0XHR3YXRjaC5vbkRlbGV0ZWRBY3Rpb25zLnB1c2goZm4pO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdGxvZy5kZWJ1ZyhcIkF0dGVtcHRpbmcgdG8gYWRkIHVua25vd24gYWN0aW9uOiBcIiwgYWN0aW9uKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gc2VsZjtcblx0fV0pO1xufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
angular.module("hawtio-kubernetes-templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("plugins/kubernetes/html/apps.html","<div ng-controller=\"Kubernetes.Apps\">\n  <script type=\"text/ng-template\" id=\"appIconTemplate.html\">\n    <div class=\"ngCellText\" title=\"{{row.entity.$info.description}}\">\n      <a ng-href=\"row.entity.$appUrl\">\n        <img ng-show=\"row.entity.$iconUrl\" class=\"app-icon-small\" ng-src=\"{{row.entity.$iconUrl}}\">\n      </a>\n      <span class=\"app-name\">\n        <a ng-click=\"row.entity.$select()\">\n          {{row.entity.$info.name}}\n        </a>\n      </span>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"appServicesTemplate.html\">\n    <div class=\"ngCellText\">\n      <span ng-repeat=\"service in row.entity.services\">\n          <a ng-href=\"{{service | kubernetesPageLink}}\"\n             title=\"View service details\">\n            <span>{{service.metadata.name ||service.name || service.id}}</span>\n          </a>\n      </span>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"appDeployedTemplate.html\">\n    <div class=\"ngCellText\" title=\"deployed at: {{row.entity.$creationDate | date:\'yyyy-MMM-dd HH:mm:ss Z\'}}\">\n      {{row.entity.$creationDate.relative()}}\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"appReplicationControllerTemplate.html\">\n    <div class=\"ngCellText\">\n      <span ng-repeat=\"controller in row.entity.replicationControllers\">\n        <a ng-href=\"{{controller | kubernetesPageLink}}\"\n           title=\"View controller details\">\n          <span>{{controller.metadata.name || controller.id}}</span>\n        </a>\n        &nbsp;\n        <span class=\"pull-right\">\n          <a class=\"badge badge-info\" href=\"\" ng-click=\"$emit(\'do-resize\', controller)\"\n            title=\"Resize the number of replicas of this controller\">\n             {{controller.spec.replicas || 0}}</a>\n        </span>\n      </span>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"appPodCountsAndLinkTemplate.html\">\n    <div class=\"ngCellText\" title=\"Number of running pods for this controller\">\n      <div ng-repeat=\"podCounters in row.entity.$podCounters track by $index\">\n        <a ng-show=\"podCounters.podsLink\" href=\"{{podCounters.podsLink}}\" title=\"{{podCounters.labelText}}\">\n          <span ng-show=\"podCounters.valid\" class=\"badge badge-success\">{{podCounters.valid}}</span>\n          <span ng-show=\"podCounters.waiting\" class=\"badge\">{{podCounters.waiting}}</span>\n          <span ng-show=\"podCounters.error\" class=\"badge badge-warning\">{{podCounters.error}}</span>\n        </a>\n      </div>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"appDetailTemplate.html\">\n    <div class=\"service-view-rectangle\" ng-repeat=\"view in item.$serviceViews\">\n      <div class=\"service-view-header\">\n        <span class=\"service-view-icon\">\n          <a ng-href=\"{{view.service | kubernetesPageLink}}\" title=\"View the service detail page\">\n            <img ng-show=\"item.$iconUrl\" ng-src=\"{{item.$iconUrl}}\">\n          </a>\n        </span>\n        <span class=\"service-view-name\" title=\"{{view.name}}\">\n          <a ng-href=\"{{view.service | kubernetesPageLink}}\" title=\"View the service detail page\">\n            {{view.appName}}\n          </a>\n        </span>\n        <span class=\"service-view-address\" title=\"The service address\">\n          <a ng-show=\"view.service.$connectUrl\" ng-href=\"{{view.service.$connectUrl}}\" title=\"Connect to the service\">\n            {{view.service.$host}}\n          </a>\n          <span ng-hide=\"view.service.$connectUrl\">{{view.service.$host}}</span>\n        </span>\n        <span class=\"pull-right\">\n          <a class=\"service-view-header-delete\" href=\"\" ng-click=\"deleteSingleApp(item)\" title=\"Delete this app\"><i\n                  class=\"fa fa-remove red\"></i></a>\n        </span>\n      </div>\n\n      <div class=\"service-view-detail-rectangle\">\n        <div class=\"service-view-detail-header\">\n          <div class=\"col-md-4\">\n            <div class=\"service-view-detail-deployed\" ng-show=\"view.createdDate\"\n                 title=\"deployed at: {{view.createdDate | date:\'yyyy-MMM-dd HH:mm:ss Z\'}}\">\n              deployed:\n              <span class=\"value\">{{view.createdDate.relative()}}</span>\n            </div>\n            <div class=\"service-view-detail-deployed\" ng-hide=\"view.createdDate\">\n              not deployed\n            </div>\n          </div>\n          <div class=\"col-md-4\">\n            <div class=\"service-view-detail-pod-template\" ng-show=\"view.controllerId\">\n              pod template:\n              <span class=\"value\" title=\"Go to the replication controller detail page\"><a\n                      ng-href=\"{{view.replicationController | kubernetesPageLink}}\">{{view.controllerId}}</a></span>\n            </div>\n            <div class=\"service-view-detail-pod-template\" ng-hide=\"view.controllerId\">\n              no pod template\n            </div>\n          </div>\n          <div class=\"col-md-4 service-view-detail-pod-counts\">\n            <span class=\"pull-right\">\n              pods:\n              <a href=\"\" ng-show=\"view.replicationController\" class=\"badge badge-info\"\n                ng-click=\"resizeDialog.open(view.replicationController)\"\n                title=\"Resize the number of pods\">\n                {{view.podCount}}\n              </a>\n              <span ng-hide=\"view.replicationController\" class=\"badge badge-success\">\n                {{view.podCount}}\n              </span>\n            </span>\n          </div>\n        </div>\n\n        <div class=\"service-view-detail-pod-box\" ng-repeat=\"pod in item.pods track by $index\">\n          <div ng-show=\"podExpanded(pod)\" class=\"service-view-detail-pod-summary-expand\">\n            <table>\n              <tr>\n                <td class=\"service-view-detail-pod-status\">\n                  <i ng-class=\"pod.statusClass\"></i>\n                </td>\n                <td class=\"service-view-detail-pod-connect\" ng-show=\"pod.$jolokiaUrl\"\n                    ng-controller=\"Kubernetes.ConnectController\">\n                  <a class=\"clickable\"\n                     ng-click=\"doConnect(pod)\"\n                     title=\"Open a new window and connect to this container\">\n                    <i class=\"fa fa-sign-in\"></i>\n                  </a>\n                </td>\n                <td>\n                  <div class=\"service-view-detail-pod-id\" title=\"{{pod.id}}\">\n                    <span class=\"value\">Pod <a title=\"Go to the pod detail page\" ng-href=\"{{pod | kubernetesPageLink}}\">{{pod.idAbbrev}}</a></span>\n                  </div>\n                  <div class=\"service-view-detail-pod-ip\">\n                    IP:\n                    <span class=\"value\">{{pod.status.podIP}}</span>\n                  </div>\n                </td>\n                <td>\n                  <div class=\"service-view-detail-pod-ports\">\n                    ports: <span class=\"value\">{{pod.$containerPorts.join(\", \")}}</span>\n                  </div>\n                  <div class=\"service-view-detail-pod-minion\">\n                    minion:\n                    <span class=\"value\">\n                      <a ng-show=\"pod.spec.host\" ng-href=\"/kubernetes/hosts/{{pod.spec.host}}\">{{pod.spec.host}}</a>\n                    </span>\n                  </div>\n                </td>\n                <td class=\"service-view-detail-pod-expand\" ng-click=\"collapsePod(pod)\">\n                  <i class=\"fa fa-chevron-left\"></i>\n                </td>\n              </tr>\n            </table>\n            <!--\n                                      <div class=\"service-view-detail-pod-status\">\n                                        status:\n                                        <span class=\"value\">{{pod.status}}</span>\n                                      </div>\n            -->\n          </div>\n\n          <div ng-hide=\"podExpanded(pod)\" class=\"service-view-detail-pod-summary\">\n            <table>\n              <tr>\n                <td class=\"service-view-detail-pod-status\">\n                  <i ng-class=\"pod.statusClass\"></i>\n                </td>\n                <td class=\"service-view-detail-pod-connect\" ng-show=\"pod.$jolokiaUrl\"\n                    ng-controller=\"Kubernetes.ConnectController\">\n                  <a class=\"clickable\"\n                     ng-click=\"doConnect(pod)\"\n                     title=\"Open a new window and connect to this container\">\n                    <i class=\"fa fa-sign-in\"></i>\n                  </a>\n                </td>\n                <td>\n                  <div class=\"service-view-detail-pod-id\" title=\"{{pod.id}}\">\n                    <span class=\"value\">Pod <a title=\"Go to the pod detail page\" ng-href=\"{{pod | kubernetesPageLink}}\">{{pod.idAbbrev}}</a></span>\n                  </div>\n                  <div class=\"service-view-detail-pod-ip\">\n                    IP:\n                    <span class=\"value\">{{pod.status.podIP}}</span>\n                  </div>\n                </td>\n                <td class=\"service-view-detail-pod-expand\" ng-click=\"expandPod(pod)\">\n                  <i class=\"fa fa-chevron-right\"></i>\n                </td>\n              </tr>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  </script>\n\n\n  <div ng-hide=\"appSelectorShow\">\n    <div class=\"row filter-header\">\n      <div class=\"col-md-12\">\n        <span ng-include=\"\'namespaceSelector.html\'\"></span>\n        <span ng-show=\"model.apps.length && !id\">\n          <hawtio-filter ng-model=\"tableConfig.filterOptions.filterText\"\n                         css-class=\"input-xxlarge\"\n                         placeholder=\"Filter apps...\"></hawtio-filter>\n        </span>\n        <span ng-hide=\"id\" class=\"pull-right\">\n          <div class=\"btn-group\">\n            <a class=\"btn\" ng-disabled=\"mode == \'list\'\" href=\"\" ng-click=\"mode = \'list\'\">\n              <i class=\"fa fa-list\"></i></a>\n            <a class=\"btn\" ng-disabled=\"mode == \'detail\'\" href=\"\" ng-click=\"mode = \'detail\'\">\n              <i class=\"fa fa-table\"></i></a>\n          </div>\n        </span>\n        <span class=\"pull-right\">&nbsp;</span>\n        <button ng-show=\"model.apps.length && mode == \'list\'\"\n                class=\"btn btn-danger pull-right\"\n                ng-disabled=\"!id && tableConfig.selectedItems.length == 0\"\n                ng-click=\"deletePrompt(id || tableConfig.selectedItems)\">\n          <i class=\"fa fa-remove\"></i> Delete\n        </button>\n        <span class=\"pull-right\">&nbsp;</span>\n        <button ng-show=\"model.appFolders.length\"\n                class=\"btn btn-success pull-right\"\n                ng-click=\"appSelectorShow = true\"\n                title=\"Run an application\">\n          <i class=\"fa fa-play-circle\"></i> Run ...\n        </button>\n        <span class=\"pull-right\">&nbsp;</span>\n        <button ng-show=\"model.templates.length\"\n                class=\"btn btn-success pull-right\"\n                ng-click=\"viewTemplates()\"\n                title=\"Run an application from a template\">\n          <i class=\"fa fa-play-circle\"></i> Run ...\n        </button>\n        <span class=\"pull-right\">&nbsp;</span>\n        <button ng-show=\"id\"\n                class=\"btn btn-primary pull-right\"\n                ng-click=\"id = undefined\"><i class=\"fa fa-list\"></i></button>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div ng-hide=\"model.fetched\">\n          <div class=\"align-center\">\n            <i class=\"fa fa-spinner fa-spin\"></i>\n          </div>\n        </div>\n        <div ng-show=\"model.fetched && !id\">\n          <div ng-hide=\"model.apps.length\" class=\"align-center\">\n            <p class=\"alert alert-info\">There are no apps currently available.</p>\n          </div>\n          <div ng-show=\"model.apps.length\">\n            <div ng-show=\"mode == \'list\'\">\n              <table class=\"table table-condensed table-striped\" hawtio-simple-table=\"tableConfig\"></table>\n            </div>\n            <div ng-show=\"mode == \'detail\'\">\n              <div class=\"app-detail\" ng-repeat=\"item in model.apps | filter:tableConfig.filterOptions.filterText | orderBy:\'$name\' track by $index\">\n                <ng-include src=\"\'appDetailTemplate.html\'\"/>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div ng-show=\"model.fetched && id\">\n          <div class=\"app-detail\">\n            <ng-include src=\"\'appDetailTemplate.html\'\"/>\n          </div>\n        </div>\n      </div>\n    </div>\n\n  </div>\n  <div ng-show=\"appSelectorShow\">\n    <div class=\"col-md-7\">\n      <div class=\"row\">\n        <hawtio-filter ng-model=\"appSelector.filterText\"\n                       css-class=\"input-xxlarge\"\n                       placeholder=\"Filter apps...\"></hawtio-filter>\n      </div>\n      <div class=\"row\">\n        <ul>\n          <li class=\"no-list profile-selector-folder\" ng-repeat=\"folder in model.appFolders\"\n              ng-show=\"appSelector.showFolder(folder)\">\n            <div class=\"expandable\" ng-class=\"appSelector.isOpen(folder)\">\n              <div title=\"{{folder.path}}\" class=\"title\">\n                <i class=\"expandable-indicator folder\"></i> <span class=\"folder-title\" ng-show=\"folder.path\">{{folder.path.capitalize(true)}}</span><span\n                      class=\"folder-title\" ng-hide=\"folder.path\">Uncategorized</span>\n              </div>\n              <div class=\"expandable-body\">\n                <ul>\n                  <li class=\"no-list profile\" ng-repeat=\"profile in folder.apps\" ng-show=\"appSelector.showApp(profile)\">\n                    <div class=\"profile-selector-item\">\n                      <div class=\"inline-block profile-selector-checkbox\">\n                        <input type=\"checkbox\" ng-model=\"profile.selected\"\n                               ng-change=\"appSelector.updateSelected()\">\n                      </div>\n                      <div class=\"inline-block profile-selector-name\" ng-class=\"appSelector.getSelectedClass(profile)\">\n                        <span class=\"contained c-max\">\n                          <a href=\"\" ng-click=\"appSelector.select(profile, !profile.selected)\"\n                             title=\"Details for {{profile.id}}\">\n                            <img ng-show=\"profile.$iconUrl\" class=\"icon-small-app\" ng-src=\"{{profile.$iconUrl}}\">\n                            <span class=\"app-name\">{{profile.name}}</span>\n                          </a>\n                        </span>\n                      </div>\n                    </div>\n\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </li>\n        </ul>\n      </div>\n    </div>\n    <div class=\"col-md-5\">\n      <div class=\"row\">\n        <button class=\"btn btn-primary pull-right\"\n                ng-click=\"appSelectorShow = undefined\"><i class=\"fa fa-circle-arrow-left\"></i> Back\n        </button>\n        <span class=\"pull-right\">&nbsp;</span>\n        <button class=\"btn pull-right\"\n                ng-disabled=\"!appSelector.selectedApps.length\"\n                title=\"Clears the selected Apps\"\n                ng-click=\"appSelector.clearSelected()\"><i class=\"fa fa-check-empty\"></i> Clear\n        </button>\n        <span class=\"pull-right\">&nbsp;</span>\n        <button class=\"btn btn-success pull-right\"\n                ng-disabled=\"!appSelector.selectedApps.length\"\n                ng-click=\"appSelector.runSelectedApps()\"\n                title=\"Run the selected apps\">\n          <i class=\"fa fa-play-circle\"></i>\n          <ng-pluralize count=\"appSelector.selectedApps.length\"\n                        when=\"{\'0\': \'No App Selected\',\n                                       \'1\': \'Run App\',\n                                       \'other\': \'Run {} Apps\'}\"></ng-pluralize>\n\n        </button>\n      </div>\n      <div class=\"row\">\n        <!--\n                <div ng-hide=\"appSelector.selectedApps.length\">\n                  <p class=\"alert pull-right\">\n                    Please select an App\n                  </p>\n                </div>\n        -->\n\n        <div ng-show=\"appSelector.selectedApps.length\">\n\n          <ul class=\"zebra-list pull-right\">\n            <li ng-repeat=\"app in appSelector.selectedApps\">\n              <img ng-show=\"app.$iconUrl\" class=\"icon-selected-app\" ng-src=\"{{app.$iconUrl}}\">\n              <strong class=\"green selected-app-name\">{{app.name}}</strong>\n              &nbsp;\n              <i class=\"red clickable fa fa-remove\"\n                 title=\"Remove appp\"\n                 ng-click=\"appSelector.select(app, false)\"></i>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n  <ng-include src=\"\'resizeDialog.html\'\"/>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/build.html","<div ng-controller=\"Kubernetes.BuildController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <a class=\"btn btn-default pull-right\"\n              href=\"/kubernetes/builds\"><i class=\"fa fa-list\"></i></a>\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\" ng-show=\"entity.$configLink\"\n              title=\"View the build configuration\"\n              href=\"{{entity.$configLink}}\">\n        Configuration\n      </a>\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\" ng-show=\"entity.$podLink\"\n              title=\"View the build pod\"\n              href=\"{{entity.$podLink}}\">\n        Pod\n      </a>\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-primary pull-right\" ng-show=\"entity.$logsLink\"\n              title=\"View the build logs\"\n              href=\"{{entity.$logsLink}}\">\n        View Log\n      </a>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div hawtio-object=\"entity\" config=\"config\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/buildConfig.html","<div ng-controller=\"Kubernetes.BuildConfigController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n              href=\"/kubernetes/buildConfigs\"><i class=\"fa fa-list\"></i></a>\n      <div class=\"pull-right\" ng-repeat=\"view in entity.$fabric8Views | orderBy:\'label\'\">\n        <a title=\"{{view.description}}\" ng-show=\"view.url\" ng-href=\"{{view.url}}\" class=\"btn btn-default\">\n          <i class=\"{{view.iconClass}}\" ng-show=\"view.iconClass\"></i>\n          {{view.label}}\n        </a>\n        <span class=\"pull-right\" ng-show=\"view.url\" >&nbsp;</span>\n      </div>\n      <span class=\"pull-right\">&nbsp;</span>\n      <button class=\"btn btn-primary pull-right\"\n         title=\"Trigger this build\"\n         ng-disabled=\"!entity.$triggerUrl\"\n         ng-click=\"triggerBuild(entity)\"><i class=\"fa fa-play-circle-o\"></i> Trigger</button>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div hawtio-object=\"entity\" config=\"config\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/buildConfigCreate.html","<div ng-controller=\"Kubernetes.BuildConfigController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n              href=\"/kubernetes/buildConfigs\"><i class=\"fa fa-list\"></i></a>\n      <button class=\"btn btn-primary pull-right\"\n              title=\"Saves changes to this build configuration\"\n              ng-click=\"save()\">\n        Create Build Configuration\n      </button>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div hawtio-form-2=\"config\" entity=\"entity\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/buildConfigEdit.html","<div ng-controller=\"Kubernetes.BuildConfigController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n              href=\"/kubernetes/buildConfigs\"><i class=\"fa fa-list\"></i></a>\n      <button class=\"btn btn-primary pull-right\"\n              title=\"Saves changes to this build configuration\"\n              ng-click=\"save()\">\n        Save\n      </button>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div hawtio-form-2=\"config\" entity=\"entity\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/buildConfigs.html","<div class=\"row\" ng-controller=\"Kubernetes.BuildConfigsController\">\n  <script type=\"text/ng-template\" id=\"buildConfigLinkTemplate.html\">\n    <div class=\"ngCellText\">\n      <a title=\"View details for this build configuration\"\n         href=\"/kubernetes/buildConfigs/{{row.entity.metadata.name}}\">\n<!--\n        <img class=\"app-icon-small\" ng-src=\"{{row.entity.$iconUrl}}\">\n-->\n        {{row.entity.metadata.name}}</a>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"buildConfigViewsTemplate.html\">\n    <div class=\"ngCellText\">\n      <span ng-repeat=\"view in row.entity.$fabric8Views track by $index\">\n        <a title=\"{{view.description}}\" ng-show=\"view.url\" ng-href=\"{{view.url}}\" class=\"btn btn-default\">\n          <i class=\"{{view.iconClass}}\" ng-show=\"view.iconClass\"></i>\n          {{view.label}}\n        </a>\n      </span>\n    </div>\n  </script>\n  <div class=\"row filter-header\">\n    <div class=\"col-md-12\">\n      <span>\n        <span ng-include=\"\'namespaceSelector.html\'\"></span>\n        <hawtio-filter ng-show=\"buildConfigs.length\"\n                       ng-model=\"tableConfig.filterOptions.filterText\"\n                       css-class=\"input-xxlarge\"\n                       placeholder=\"Filter build configurations...\"></hawtio-filter>\n      </span>\n      <button ng-show=\"fetched\"\n              title=\"Delete the selected build configuration\"\n              class=\"btn btn-danger pull-right\"\n              ng-disabled=\"tableConfig.selectedItems.length == 0\"\n              ng-click=\"deletePrompt(tableConfig.selectedItems)\">\n        <i class=\"fa fa-remove\"></i> Delete\n      </button>\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n         title=\"Add a build configuration for an existing project\"\n         href=\"/kubernetes/buildConfigCreate\"><i class=\"fa fa-wrench\"></i> Add Build</a>\n      <span class=\"pull-right\">&nbsp;</span>\n\n      <a class=\"btn btn-primary pull-right\" href=\"/forge/command/project-new\"\n         ng-show=\"isLoggedIntoGogs()\"\n         title=\"Create a new project and repository\">\n        <i class=\"fa fa-plus\"></i> Create Project</a>\n      </a>\n      <span class=\"pull-right\" ng-show=\"isLoggedIntoGogs()\">&nbsp;</span>\n\n      <a class=\"btn btn-primary pull-right\" href=\"/forge/repos\"\n         ng-hide=\"isLoggedIntoGogs()\"\n         title=\"Sign in to gogs so that you can create a new project\">\n        <i class=\"fa fa-sign-in\"></i> Sign In</a>\n      </a>\n      <span class=\"pull-right\" ng-hide=\"isLoggedIntoGogs()\">&nbsp;</span>\n\n      <button class=\"btn btn-default pull-right\"\n         title=\"Trigger the given build\"\n         ng-disabled=\"tableConfig.selectedItems.length != 1 || !tableConfig.selectedItems[0].$triggerUrl\"\n         ng-click=\"triggerBuild(tableConfig.selectedItems[0])\"><i class=\"fa fa-play-circle-o\"></i> Trigger</button>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div ng-hide=\"buildConfigs.length\" class=\"align-center\">\n          <p class=\"alert alert-info\">There are no build configurations available.</p>\n          <a class=\"btn btn-primary\" href=\"/kubernetes/buildConfigCreate\"><i class=\"fa fa-wrench\"></i> Add Build Configuration</a>\n        </div>\n        <div ng-show=\"buildConfigs.length\">\n          <table class=\"table table-condensed table-striped\" ui-if=\"kubernetes.selectedNamespace\"\n                 hawtio-simple-table=\"tableConfig\"></table>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/buildLogs.html","<div ng-controller=\"Kubernetes.BuildLogsController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\" ng-show=\"entity.$viewLink\"\n         title=\"View the build detail\"\n         href=\"{{entity.$viewLink}}\">\n        Build\n      </a>\n      <a class=\"btn btn-primary pull-right\" ng-show=\"entity.$configLink\"\n         title=\"View the build configuration\"\n         href=\"{{entity.$configLink}}\">\n        Configuration\n      </a>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <h3>logs for {{entity.$configId}}</h3>\n\n        <p>\n          <pre>\n            <code>\n              {{logsText}}\n            </code>\n          </pre>\n        </p>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/builds.html","<div class=\"row\" ng-controller=\"Kubernetes.BuildsController\">\n  <script type=\"text/ng-template\" id=\"buildLinkTemplate.html\">\n    <div class=\"ngCellText\">\n      <a title=\"View details for this build: {{row.entity.$name}}\"\n         href=\"/kubernetes/builds/{{row.entity.metadata.name}}\">\n        <!--\n                <img class=\"app-icon-small\" ng-src=\"{{row.entity.$iconUrl}}\">\n        -->\n        {{row.entity.$shortName}}\n      </a>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"buildPodTemplate.html\">\n    <div class=\"ngCellText\">\n      <a title=\"View the pod for this build: {{row.entity.podName}}\" ng-show=\"row.entity.$podLink\"\n         href=\"{{row.entity.$podLink}}\">\n        {{row.entity.$podShortName}}</a>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"buildLogsTemplate.html\">\n    <div class=\"ngCellText\">\n      <a title=\"View the log for this build\" ng-show=\"row.entity.$logsLink\"\n         href=\"{{row.entity.$logsLink}}\">\n        <i class=\"fa fa-file-text-o\"></i>  Logs\n      </a>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"buildRepositoryTemplate.html\">\n    <div class=\"ngCellText\">\n      <a ng-show=\"row.entity.parameters.source.git.uri\" target=\"gitRepository\"\n         title=\"View the git based source repository\"\n         href=\"{{row.entity.parameters.source.git.uri}}\">\n        {{row.entity.parameters.source.git.uri}}\n      </a>\n      <span ng-hide=\"row.entity.parameters.source.git.uri\">\n        {{row.entity.parameters.source.git.uri}}\n      </span>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"buildStatusTemplate.html\">\n    <div class=\"ngCellText\" ng-switch=\"row.entity.status\">\n      <span ng-switch-when=\"New\" class=\"text-primary\">\n        <i class=\"fa fa-spin fa-spinner\"></i> New\n      </span>\n      <span ng-switch-when=\"Pending\" class=\"text-primary\">\n        <i class=\"fa fa-spin fa-spinner\"></i> Pending\n      </span>\n      <span ng-switch-when=\"Running\" class=\"text-primary\">\n        <i class=\"fa fa-spin fa-spinner\"></i> Running\n      </span>\n      <span ng-switch-when=\"Complete\" class=\"text-success\">\n        <i class=\"fa fa-check-circle\"></i> Complete\n      </span>\n      <span ng-switch-when=\"Failed\" class=\"text-danger\">\n        <i class=\"fa fa-exclamation-circle\"></i> Failed\n      </span>\n      <span ng-switch-default class=\"text-warning\">\n        <i class=\"fa fa-exclamation-triangle\"></i> {{row.entity.status}}\n      </span>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"buildTimeTemplate.html\">\n    <div class=\"ngCellText\" title=\"built at: {{row.entity.$creationDate | date : \'h:mm:ss a, EEE MMM yyyy\'}}\">\n      {{row.entity.$creationDate.relative()}}\n    </div>\n  </script>\n  <div class=\"row filter-header\">\n    <div class=\"col-md-12\" >\n      <span ng-show=\"!id\">\n        <span ng-include=\"\'namespaceSelector.html\'\"></span>\n        <hawtio-filter ng-show=\"builds.length\" \n                       ng-model=\"tableConfig.filterOptions.filterText\"\n                       css-class=\"input-xxlarge\"\n                       placeholder=\"Filter builds...\"></hawtio-filter>\n      </span>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div ng-hide=\"builds.length\" class=\"align-center\">\n          <p class=\"alert alert-info\">There are no builds currently running.</p>\n        </div>\n        <div ng-show=\"builds.length\">\n          <table class=\"table table-condensed table-striped\" ui-if=\"kubernetes.selectedNamespace\"\n                 hawtio-simple-table=\"tableConfig\"></table>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/deploymentConfig.html","<div ng-controller=\"Kubernetes.DeploymentConfigController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n              href=\"/kubernetes/deploymentConfigs\"><i class=\"fa fa-list\"></i></a>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div hawtio-object=\"entity\" config=\"config\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/deploymentConfigs.html","<div class=\"row\" ng-controller=\"Kubernetes.DeploymentConfigsController\">\n  <script type=\"text/ng-template\" id=\"deploymentConfigLinkTemplate.html\">\n    <div class=\"ngCellText\">\n      <a title=\"View details for this build configuration\"\n         href=\"/kubernetes/deploymentConfigs/{{row.entity.metadata.name}}\">\n<!--\n        <img class=\"app-icon-small\" ng-src=\"{{row.entity.$iconUrl}}\">\n-->\n        {{row.entity.metadata.name}}</a>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"deploymentConfigLabelTemplate.html\">\n    <div class=\"ngCellText\">\n      <span ng-repeat=\"(key, label) in row.entity.template.controllerTemplate.template.metadata.labels track by $index\"\n            class=\"pod-label badge\"\n            ng-class=\"labelClass(key)\"\n            ng-click=\"clickTag(entity, key, label)\"\n            title=\"{{key}}\">{{label}}</span>\n    </div>\n  </script>\n  <div class=\"row filter-header\">\n    <div class=\"col-md-12\">\n      <span>\n        <span ng-include=\"\'namespaceSelector.html\'\"></span>\n        <hawtio-filter ng-show=\"deploymentConfigs.length\"\n                       ng-model=\"tableConfig.filterOptions.filterText\"\n                       css-class=\"input-xxlarge\"\n                       placeholder=\"Filter deployment configurations...\"></hawtio-filter>\n      </span>\n      <button ng-show=\"fetched && deploymentConfigs.length\"\n              title=\"Delete the selected build configuration\"\n              class=\"btn btn-danger pull-right\"\n              ng-disabled=\"tableConfig.selectedItems.length == 0\"\n              ng-click=\"deletePrompt(tableConfig.selectedItems)\">\n        <i class=\"fa fa-remove\"></i> Delete\n      </button>\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n         title=\"Create a new build configuration\"\n         href=\"/kubernetes/buildConfigCreate\"><i class=\"fa fa-plus\"></i> Create</a>\n      <span class=\"pull-right\">&nbsp;</span>\n      <button class=\"btn btn-primary pull-right\"\n         ng-show=\"fetched && deploymentConfigs.length\"\n         title=\"Trigger the given build\"\n         ng-disabled=\"tableConfig.selectedItems.length != 1 || !tableConfig.selectedItems[0].$triggerUrl\"\n         ng-click=\"triggerBuild(tableConfig.selectedItems[0])\"><i class=\"fa fa-play-circle-o\"></i> Trigger</button>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div ng-hide=\"deploymentConfigs.length\" class=\"align-center\">\n          <p class=\"alert alert-info\">There are no deployment configurations available.</p>\n          <a class=\"btn btn-primary\" href=\"/kubernetes/deploymentConfigCreate\"><i class=\"fa fa-plus\"></i> Create Deployment Configuration</a>\n        </div>\n        <div ng-show=\"deploymentConfigs.length\">\n          <table class=\"table table-condensed table-striped\" ui-if=\"kubernetes.selectedNamespace\"\n                 hawtio-simple-table=\"tableConfig\"></table>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/host.html","<div ng-controller=\"Kubernetes.HostController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n              href=\"/kubernetes/hosts\"><i class=\"fa fa-list\"></i></a>\n      <a class=\"btn pull-right\"\n         ng-click=\"flipRaw()\"\n         title=\"{{rawMode ? \'Raw mode\' : \'Form mode\'}}\">{{rawMode ? \'From\' : \'Raw\'}}</a>\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-primary pull-right\"\n              title=\"View all the pods on this host\"\n              href=\"/kubernetes/pods/?q=host={{item.id}}\">\n        Pods\n      </a>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"model.fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"model.fetched && !rawMode\">\n        <div hawtio-object=\"item\" config=\"itemConfig\"></div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"span12\">\n    <div ng-hide=\"model.fetched\">\n      <div class=\"align-center\">\n        <i class=\"fa fa-spinner fa-spin\"></i>\n      </div>\n    </div>\n    <div ng-show=\"model.fetched && rawMode\">\n      <div class=\"row-fluid wiki-fixed form-horizontal\">\n        <div class=\"control-group editor-autoresize\">\n          <textarea id=\"source\" ui-codemirror=\"codeMirrorOptions\" readonly=\"true\" ng-model=\"rawModel\" style=\"width: 90%; height: 700px\"></textarea>\n        </div>\n      </div>\n    </div>\n  </div>\n\n</div>\n");
$templateCache.put("plugins/kubernetes/html/hosts.html","<div class=\"row\" ng-controller=\"Kubernetes.HostsController\">\n  <script type=\"text/ng-template\" id=\"hostLinkTemplate.html\">\n    <div class=\"ngCellText\">\n      </div>\n  </script>\n  <div class=\"row filter-header\">\n    <div class=\"col-md-12\">\n      <span ng-show=\"!id\">\n        <span ng-include=\"\'namespaceSelector.html\'\"></span>\n        <hawtio-filter ng-show=\"model.hosts.length\"\n                       ng-model=\"tableConfig.filterOptions.filterText\"\n                       css-class=\"input-xxlarge\"\n                       placeholder=\"Filter hosts...\"></hawtio-filter>\n      </span>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"model.fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"model.fetched\">\n        <div ng-hide=\"model.hosts.length\" class=\"align-center\">\n          <p class=\"alert alert-info\">There are no hosts currently running.</p>\n        </div>\n        <div ng-show=\"model.hosts.length\">\n          <table class=\"table table-condensed table-striped\" ui-if=\"kubernetes.selectedNamespace\"\n                 hawtio-simple-table=\"tableConfig\"></table>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/imageRepositories.html","<div class=\"row\" ng-controller=\"Kubernetes.ImageRepositoriesController\">\n  <script type=\"text/ng-template\" id=\"imageRegistryLabelTemplate.html\">\n    <div class=\"ngCellText\">\n      <span ng-repeat=\"(key, label) in row.entity.tags track by $index\"\n            class=\"pod-label badge\"\n            ng-class=\"labelClass(key)\"\n            ng-click=\"clickTag(entity, key, label)\"\n            title=\"{{key}}\">{{label}}</span>\n    </div>\n  </script>\n  <div class=\"row filter-header\">\n    <div class=\"col-md-12\">\n      <span>\n        <span ng-include=\"\'namespaceSelector.html\'\"></span>\n        <hawtio-filter ng-show=\"imageRepositories.length\"\n                       ng-model=\"tableConfig.filterOptions.filterText\"\n                       css-class=\"input-xxlarge\"\n                       placeholder=\"Filter image repositories...\"></hawtio-filter>\n      </span>\n      <button ng-show=\"fetched && imageRepositories.length\"\n              title=\"Delete the selected build configuration\"\n              class=\"btn btn-danger pull-right\"\n              ng-disabled=\"tableConfig.selectedItems.length == 0\"\n              ng-click=\"deletePrompt(tableConfig.selectedItems)\">\n        <i class=\"fa fa-remove\"></i> Delete\n      </button>\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n         title=\"Create a new image repository\"\n         href=\"/kubernetes/imageRepositoryCreate\"><i class=\"fa fa-plus\"></i> Create</a>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div ng-hide=\"imageRepositories.length\" class=\"align-center\">\n          <p class=\"alert alert-info\">There are no image repositories available.</p>\n          <a class=\"btn btn-primary\" href=\"/kubernetes/imageRepositoryCreate\"><i class=\"fa fa-plus\"></i> Create Image Repository</a>\n        </div>\n        <div ng-show=\"imageRepositories.length\">\n          <table class=\"table table-condensed table-striped\" ui-if=\"kubernetes.selectedNamespace\"\n                 hawtio-simple-table=\"tableConfig\"></table>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/kubernetesJsonDirective.html","<div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div class=\"fabric-page-header row\">\n\n        <div class=\"pull-left\" ng-show=\"iconURL\">\n          <div class=\"app-logo\">\n            <img ng-src=\"{{iconURL}}\">&nbsp;\n          </div>\n        </div>\n        <div class=\"pull-left\">\n            <h2 class=\"list-inline\"><span class=\"contained c-wide3\">&nbsp;{{displayName || appTitle}}</span></h2>\n        </div>\n        <div class=\"pull-right\">\n          <button class=\"btn btn-success pull-right\"\n                  title=\"Run this application\"\n                  ng-disabled=\"!config || config.error\"\n                  ng-click=\"apply()\">\n            <i class=\"fa fa-play-circle\"></i> Run\n          </button>\n        </div>\n        <div class=\"pull-left col-md-10 profile-summary-wide\">\n          <div\n               ng-show=\"summaryHtml\"\n               ng-bind-html-unsafe=\"summaryHtml\"></div>\n        </div>\n      </div>\n\n    </div>\n  </div>\n\n</div>\n");
$templateCache.put("plugins/kubernetes/html/layoutKubernetes.html","<script type=\"text/ng-template\" id=\"idTemplate.html\">\n  <div class=\"ngCellText\">\n    <a href=\"\" \n       title=\"View details for {{row.entity.metadata.name || row.entity.name}}\"\n       ng-href=\"{{row.entity | kubernetesPageLink}}\">\n      <img class=\"app-icon-small\" ng-src=\"{{row.entity.$iconUrl}}\">\n      {{row.entity.metadata.name || row.entity.name}}</a>\n  </div>\n</script>\n<script type=\"text/ng-template\" id=\"selectorTemplate.html\">\n  <div class=\"ngCellText\">\n    <span ng-repeat=\"(name, value) in row.entity.spec.selector track by $index\">\n      <strong>{{name}}</strong>: {{value}}\n    </span>\n  </div>\n</script>\n<script type=\"text/ng-template\" id=\"podCountsAndLinkTemplate.html\">\n  <div class=\"ngCellText\" title=\"Number of running pods for this controller\">\n    <a ng-show=\"row.entity.$podCounters.podsLink\" href=\"{{row.entity.$podCounters.podsLink}}\" title=\"View pods\">\n      <span ng-show=\"row.entity.$podCounters.valid\" class=\"badge badge-success\">{{row.entity.$podCounters.valid}}</span>\n      <span ng-show=\"row.entity.$podCounters.waiting\" class=\"badge\">{{row.entity.$podCounters.waiting}}</span>\n      <span ng-show=\"row.entity.$podCounters.error\" class=\"badge badge-warning\">{{row.entity.$podCounters.error}}</span>\n    </a>\n  </div>\n</script>\n<script type=\"text/ng-template\" id=\"labelTemplate.html\">\n  <div class=\"ngCellText\" ng-init=\"entity=row.entity\" ng-controller=\"Kubernetes.Labels\">\n    <p ng-show=\"data\"><strong>Labels</strong></p>\n    <span ng-repeat=\"label in labels track by $index\"\n          class=\"pod-label badge\"\n          ng-class=\"labelClass(label.key)\"\n          ng-click=\"handleClick(entity, label.key, label)\"\n          title=\"{{label.key}}\">{{label.title}}</span>\n  </div>\n</script>\n<script type=\"text/ng-template\" id=\"hostTemplate.html\">\n  <div class=\"ngCellText\" ng-init=\"host=row.entity.spec.host\">\n    <span class=\"pod-label badge\"\n          class=\"background-light-grey mouse-pointer\"\n          ng-click=\"$emit(\'labelFilterUpdate\', \'host=\' + host)\">{{host}}</span>\n  </div>\n</script>\n<script type=\"text/ng-template\" id=\"portalAddress.html\">\n  <div class=\"ngCellText\">\n    <div ng-repeat=\"port in row.entity.$ports\">\n      <a target=\"openService\" href=\"{{row.entity.$connectUrl}}\"\n         ng-show=\"row.entity.$connectUrl && row.entity.$podCounters.valid\" title=\"Protocol {{row.entity.spec.protocol}}\">\n        {{row.entity.$host}}\n      </a>\n      <span ng-hide=\"row.entity.spec.portalIP && row.entity.$podCounters.valid\">{{row.entity.spec.portalIP}}:{{port}}</span>\n    </div>\n  </div>\n</script>\n<script type=\"text/ng-template\" id=\"iconCellTemplate.html\">\n  <div class=\"ngCellText\">\n    <img class=\"app-icon-small\" ng-src=\"{{row.entity.$iconUrl}}\">\n  </div>\n</script>\n<script type=\"text/ng-template\" id=\"statusTemplate.html\">\n  <div class=\"ngCellText\" ng-init=\"entity=row.entity\" ng-controller=\"Kubernetes.PodStatus\" title=\"Pod {{entity.id}} is {{entity.status.phase}}\">\n    <!-- in detail view -->\n    <p ng-show=\"data\"><strong>Status: </strong></p>\n    <i class=\"fa\" ng-class=\"statusMapping(entity.status.phase)\"></i>\n    <span ng-show=\"data\">{{data}}</span>\n    <!-- in table -->\n    <span ng-show=\"entity.$jolokiaUrl\" ng-controller=\"Kubernetes.ConnectController\">\n      <a class=\"clickable\"\n         ng-click=\"doConnect(row.entity)\"\n         title=\"Open a new window and connect to this container\">\n        <i class=\"fa fa-sign-in\"></i>\n      </a>\n    </span>\n  </div>\n</script>\n<script type=\"text/ng-template\" id=\"resizeDialog.html\">\n  <div modal=\"resizeDialog.dialog.show\">\n      <form class=\"form-horizontal\" ng-submit=\"resizeDialog.onOk()\">\n          <div class=\"modal-header\"><h4>Resize {{resizeDialog.controller.id}}</h4></div>\n          <div class=\"modal-body\">\n            <div class=\"control-group\">\n              <label class=\"control-label\" for=\"replicas\">Replica count</label>\n\n              <div class=\"controls\">\n                <input type=\"number\" min=\"0\" id=\"replicas\" ng-model=\"resizeDialog.newReplicas\">\n              </div>\n            </div>\n\n          </div>\n          <div class=\"modal-footer\">\n            <input class=\"btn btn-primary\" type=\"submit\"\n                   ng-disabled=\"resizeDialog.newReplicas === resizeDialog.controller.status.replicas\"\n                   value=\"Resize\">\n            <button class=\"btn btn-warning cancel\" type=\"button\" ng-click=\"resizeDialog.close()\">Cancel</button>\n          </div>\n        </form>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"namespaceSelector.html\">\n		<span ng-controller=\"Kubernetes.NamespaceController\">\n    namespace: <select ng-model=\"namespace\" ng-options=\"namespace for namespace in namespaces\" title=\"choose the namespace - which is a selection of resources in kubernetes\">\n    </select>\n		</span>\n  </script>\n<div class=\"row\" ng-controller=\"Kubernetes.TopLevel\">\n  <div class=\"wiki-icon-view\" ng-controller=\"Kubernetes.FileDropController\" nv-file-drop nv-file-over uploader=\"uploader\" over-class=\"ready-drop\">\n    <div class=\"row kubernetes-view\" ng-view></div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/overview.html","<div ng-controller=\"Kubernetes.OverviewController\">\n  <script type=\"text/ng-template\" id=\"serviceBoxTemplate.html\">\n    <div class=\"row\">\n      <div class=\"col-md-3 align-left node-body\">{{entity.$portsText}}</div>\n      <div class=\"col-md-9 align-right node-header\" title=\"{{entity._key}}\">{{entity._key}}</div>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"serviceTemplate.html\">\n    <div class=\"kubernetes-overview-row\">\n      <div class=\"kubernetes-overview-cell\">\n        <div id=\"{{service._key}}\"\n             namespace=\"{{service.metadata.namespace}}\"\n             connect-to=\"{{service.connectTo}}\"\n             data-type=\"service\"\n             class=\"jsplumb-node kubernetes-node kubernetes-service-node\"\n             ng-controller=\"Kubernetes.OverviewBoxController\"\n             ng-init=\"entity=getEntity(\'service\', \'{{service._key}}\')\"\n             ng-mouseenter=\"mouseEnter($event)\"\n             ng-mouseleave=\"mouseLeave($event)\"\n             ng-click=\"viewDetails(entity, \'services\')\">\n          <div ng-init=\"entity=entity\" ng-include=\"\'serviceBoxTemplate.html\'\"></div>\n        </div>\n      </div>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"overviewHostTemplate.html\">\n    <div class=\"kubernetes-overview-row\">\n      <div class=\"kubernetes-overview-cell\">\n        <div id=\"{{host.elementId}}\"\n             data-type=\"host\"\n             class=\"kubernetes-host-container host\">\n             <h5><img ng-src=\"{{host.$iconUrl}}\" style=\"width: 32px; height: 32px;\">\n               <a ng-href=\"/kubernetes/hosts/{{host.id}}\">{{host.id}}</a>\n             </h5>\n          <div class=\"pod-container\"></div>\n        </div>\n      </div>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"podTemplate.html\">\n    <div id=\"{{pod._key}}\"\n         data-type=\"pod\"\n         title=\"Pod ID: {{pod.metadata.name}}\"\n         class=\"jsplumb-node kubernetes-node kubernetes-pod-node\"\n         ng-mouseenter=\"mouseEnter($event)\"\n         ng-mouseleave=\"mouseLeave($event)\"\n         ng-controller=\"Kubernetes.OverviewBoxController\"\n         ng-init=\"entity=getEntity(\'pod\', \'{{pod._key}}\')\"\n         ng-click=\"viewDetails(entity, \'pods\')\">\n      <div class=\"css-table\">\n        <div class=\"css-table-row\">\n          <div class=\"pod-status-cell css-table-cell\">\n            <span ng-init=\"row={ entity: entity }\" ng-include=\"\'statusTemplate.html\'\"></span>\n          </div>\n          <div class=\"pod-label-cell css-table-cell\">\n            <span ng-init=\"row={ entity: entity }\" ng-include=\"\'labelTemplate.html\'\"></span>\n          </div>\n        </div>\n      </div>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"replicationControllerTemplate.html\">\n    <div class=\"kubernetes-overview-row\">\n      <div class=\"kubernetes-overview-cell\">\n        <div\n            id=\"{{replicationController._key}}\"\n            title=\"{{replicationController.id}}\"\n            data-type=\"replicationController\"\n            data-placement=\"top\"\n            connect-to=\"{{replicationController.connectTo}}\"\n            ng-mouseenter=\"mouseEnter($event)\"\n            ng-mouseleave=\"mouseLeave($event)\"\n            class=\"jsplumb-node kubernetes-replicationController-node kubernetes-node\"\n            ng-controller=\"Kubernetes.OverviewBoxController\"\n            ng-init=\"entity=getEntity(\'replicationController\', \'{{replicationController._key}}\')\"\n            ng-click=\"viewDetails(entity, \'replicationControllers\')\">\n            <img class=\"app-icon-medium\" ng-src=\"{{replicationController.$iconUrl}}\">\n        </div>\n      </div>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"overviewTemplate.html\">\n    <div class=\"kubernetes-overview\"\n         hawtio-jsplumb\n         draggable=\"false\"\n         layout=\"false\"\n         node-sep=\"50\"\n         rank-sep=\"300\">\n      <div class=\"kubernetes-overview-row\">\n        <div class=\"kubernetes-overview-cell\">\n          <div class=\"kubernetes-overview services\">\n            <h6>Services</h6>\n          </div>\n        </div>\n        <div class=\"kubernetes-overview-cell\">\n          <div class=\"kubernetes-overview hosts\">\n            <h6>Hosts and Pods</h6>\n          </div>\n        </div>\n        <div class=\"kubernetes-overview-cell\">\n          <div class=\"kubernetes-overview replicationControllers\">\n            <h6>Replication controllers</h6>\n          </div>\n        </div>\n      </div>\n   </div>\n  </script>\n  <div class=\"align-center\" ng-include=\"\'namespaceSelector.html\'\"></div>\n  <kubernetes-overview ui-if=\"kubernetes.selectedNamespace\"></kubernetes-overview>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/pipelines.html","<div class=\"row\" ng-controller=\"Kubernetes.PipelinesController\">\n  <script type=\"text/ng-template\" id=\"hostLinkTemplate.html\">\n    <div class=\"ngCellText\">\n    </div>\n  </script>\n  <div class=\"row filter-header\">\n    <div class=\"col-md-12\">\n      <span>\n        <span ng-include=\"\'namespaceSelector.html\'\"></span>\n        <hawtio-filter ng-show=\"pipelines.length\" \n                       ng-model=\"filterText\"\n                       css-class=\"input-xxlarge\"\n                       placeholder=\"Filter builds...\"></hawtio-filter>\n      </span>\n      <a class=\"btn btn-default pull-right\"\n         title=\"Create a new project\"\n         ng-show=\"forgeEnabled\"\n         href=\"/forge/command/project-new\"><i class=\"fa fa-plus\"></i> Create Project</a>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div ng-hide=\"pipelines.length\" class=\"align-center\">\n          <p class=\"alert alert-info\">There are no build pipelines available.</p>\n          <a class=\"btn btn-primary\" href=\"/kubernetes/buildConfig\">Create Build Configuration</a>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div ng-show=\"fetched && pipelines.length\">\n    <div ng-repeat=\"pipeline in pipelines | filter:filterText\">\n      <div class=\"row\">\n\n        <div class=\"pipeline-row\">\n          <div ng-repeat=\"step in pipeline.triggersSteps\">\n            <div ng-switch=\"step.buildConfig.kind\">\n              <div ng-switch-default=\"\">\n                <div class=\"col-md-1\" ng-hide=\"$first\">\n                  <div class=\"pipeline-arrow\">\n                    <i class=\"fa fa-long-arrow-right\"></i>\n                  </div>\n                </div>\n\n                <div class=\"col-md-2 pipeline-build\" title=\"Build configuration\">\n                  <span class=\"pipeline-build-details\">\n                    <a title=\"View details for this build configuration\"\n                       href=\"/kubernetes/buildConfigs/{{step.buildConfig.metadata.name}}\">\n                      <i class=\"fa fa-cog\"></i>\n                      {{step.buildConfig.metadata.name}}\n                    </a>\n                  </span>\n                  &nbsp;&nbsp;&nbsp;\n                  <span class=\"pipeline-last-build\" ng-show=\"step.buildConfig.$lastBuild\">\n                    <a href=\"{{step.buildConfig.$lastBuild.$viewLink}}\" title=\"view this build\">\n                      <i class=\"fa fa-info\"></i>\n                      build\n                    </a>\n                  </span>\n\n                  <div class=\"ngCellText\" class=\"pipeline-last-build-time\"\n                       title=\"last build was at: {{step.buildConfig.$lastBuild.$creationDate | date : \'h:mm:ss a, EEE MMM yyyy\'}}\">\n                    <div ng-switch=\"step.buildConfig.$lastBuild.status\">\n                        <span ng-switch-when=\"New\" class=\"text-primary\">\n                          <i class=\"fa fa-spin fa-spinner\"></i> new: {{step.buildConfig.$lastBuild.$creationDate.relative()}}\n                        </span>\n                        <span ng-switch-when=\"Pending\" class=\"text-primary\">\n                          <i class=\"fa fa-spin fa-spinner\"></i> pending: {{step.buildConfig.$lastBuild.$creationDate.relative()}}\n                        </span>\n                        <span ng-switch-when=\"Running\" class=\"text-primary\">\n                          <i class=\"fa fa-spin fa-spinner\"></i> running {{step.buildConfig.$lastBuild.$creationDate.relative()}}\n                        </span>\n                        <span ng-switch-when=\"Complete\" class=\"text-success\">\n                          <i class=\"fa fa-check-circle\"></i> completed {{step.buildConfig.$lastBuild.$creationDate.relative()}}\n                        </span>\n                        <span ng-switch-when=\"Failed\" class=\"text-danger\">\n                          <i class=\"fa fa-exclamation-circle\"></i> failed {{step.buildConfig.$lastBuild.$creationDate.relative()}}\n                        </span>\n                        <span ng-switch-default class=\"text-warning\">\n                          <i class=\"fa fa-exclamation-triangle\"></i> {{step.buildConfig.$lastBuild.status}}: {{step.buildConfig.$lastBuild.$creationDate.relative()}}\n                        </span>\n                    </div>\n                  </div>\n                  <div class=\"pipeline-last-build-logs\">\n                    <a href=\"{{step.buildConfig.$lastBuild.$logsLink}}\" title=\"view the logs of this build\">\n                      <i class=\"fa fa-file-text-o\"></i>\n                      logs\n                    </a>\n                  </div>\n                </div>\n              </div>\n              <div ng-switch-when=\"DeploymentConfig\">\n                <div class=\"col-md-1\">\n                  <div class=\"pipeline-arrow\">\n                    <i class=\"fa fa-long-arrow-right\"></i>\n                  </div>\n                </div>\n\n                <div class=\"col-md-2 pipeline-deploy\" title=\"Deployment Configuration\">\n                  <div class=\"pipeline-build-details\">\n                    <a title=\"View details for this deployment configuration\"\n                       href=\"/kubernetes/deploymentConfigs/{{step.buildConfig.metadata.name}}\">\n                      <i class=\"fa fa-cogs\"></i>\n                      {{step.buildConfig.metadata.name}}\n                    </a>\n                  </div>\n                  <div class=\"pipeline-deploy-pods\">\n                    <div class=\"pipeline-pod-counts\" ng-show=\"step.$podCounters\">pods:\n                      <a ng-show=\"step.$podCounters.podsLink\" target=\"pods\" href=\"{{step.$podCounters.podsLink}}\"\n                         title=\"View pods for this deployment\">\n                        <span class=\"badge badge-success\">{{step.$podCounters.valid}}</span>\n                        <span ng-show=\"step.$podCounters.waiting\" class=\"badge\">{{step.$podCounters.waiting}}</span>\n                        <span ng-show=\"step.$podCounters.error\"\n                              class=\"badge badge-warning\">{{step.$podCounters.error}}</span>\n                      </a>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/pod.html","<div ng-controller=\"Kubernetes.PodController\">\n  <div class=\"row row-header\">\n    <div class=\"col-md-12\">\n      <span ng-show=\"model.fetched && !rawMode\" class=\"icon-heading\">\n          <img ng-show=\"item.$iconUrl\" class=\"icon-selected-app\" ng-src=\"{{item.$iconUrl}}\">&nbsp;{{item.metadata.name}}\n      </span>\n\n      <button class=\"btn btn-danger pull-right\"\n              title=\"Delete this Pod\"\n              ng-click=\"deleteEntity()\">\n        <i class=\"fa fa-remove\"></i> Delete\n      </button>\n      <span class=\"pull-right\">&nbsp;</span>\n\n      <a class=\"btn btn-default pull-right\"\n              href=\"/kubernetes/pods?namespace={{item.metadata.namespace}}\"><i class=\"fa fa-list\"></i></a>\n      <span ng-show=\"hasServiceKibana()\" class=\"pull-right\">&nbsp;</span>\n      <button ng-show=\"hasServiceKibana()\"\n              class=\"btn btn-default pull-right\"\n              title=\"View the logs for this pod\"\n              ng-click=\"openLogs()\">\n        <i class=\"fa fa-file-text-o\"></i> Logs\n      </button>\n\n      <a class=\"btn pull-right\"\n         ng-click=\"flipRaw()\"\n         title=\"{{rawMode ? \'Raw mode\' : \'Form mode\'}}\">{{rawMode ? \'From\' : \'Raw\'}}</a>\n      <span class=\"pull-right\">&nbsp;</span>\n\n      <div ng-show=\"item.$jolokiaUrl\" ng-controller=\"Kubernetes.ConnectController\" class=\"pull-right\">\n        <span>&nbsp;</span>\n        <a class=\"btn btn-primary pull-right\"\n           ng-click=\"doConnect(item)\"\n           title=\"Open a new window and connect to this container\">\n          <i class=\"fa fa-sign-in\"></i> Connect\n        </a>\n      </div>\n    </div>\n  </div>\n\n  <div ng-hide=\"model.fetched\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div ng-show=\"model.fetched && !rawMode\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div hawtio-object=\"item\" config=\"itemConfig\"></div>\n      </div>\n    </div>\n  </div>\n\n  <div ng-show=\"model.fetched && rawMode\">\n    <div class=\"raw-json-view\">\n      <textarea ui-codemirror=\"codeMirrorOptions\" readonly=\"true\" ng-model=\"rawModel\" class=\"raw-json-view\"></textarea>\n    </div>\n  </div>\n\n</div>\n");
$templateCache.put("plugins/kubernetes/html/podCreate.html","<div ng-controller=\"Kubernetes.PodEditController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n         title=\"Go back to viewing all the pods\"\n              href=\"/kubernetes/pods\"><i class=\"fa fa-list\"></i></a>\n      <button class=\"btn btn-primary pull-right\"\n              title=\"Create a new pod\"\n              ng-click=\"save()\">\n        Create Pod\n      </button>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div hawtio-form-2=\"config\" entity=\"entity\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/podEdit.html","<div ng-controller=\"Kubernetes.PodEditController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n         title=\"Go back to viewing all the pods\"\n              href=\"/kubernetes/pods\"><i class=\"fa fa-list\"></i></a>\n      <button class=\"btn btn-primary pull-right\"\n              title=\"Saves changes to this pod\"\n              ng-click=\"save()\">\n        Save\n      </button>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div hawtio-form-2=\"config\" entity=\"entity\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/pods.html","<div class=\"row\" ng-controller=\"Kubernetes.Pods\">\n  <script type=\"text/ng-template\" id=\"imageTemplate.html\">\n    <div class=\"ngCellText\">\n      <!-- in table -->\n      <span ng-hide=\"data\">\n        <span ng-repeat=\"container in row.entity.spec.containers\">\n          <span ng-hide=\"container.$imageLink\">{{container.image}}</span>\n          <a ng-show=\"container.$imageLink\" target=\"dockerRegistry\" href=\"{{container.$imageLink}}\" title=\"{{container.name}}\">{{container.image}}</a>\n        </span>\n      </span>\n      <!-- in detail view -->\n      <span ng-show=\"data\">\n        <a target=\"dockerRegistry\" ng-href=\"https://registry.hub.docker.com/u/{{data}}\" title=\"{{data}}\">{{data}}</a>\n      </span>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"configDetail.html\">\n    <pre>{{data}}</pre>\n  </script>\n  <script type=\"text/ng-template\" id=\"envItemTemplate.html\">\n    <span ng-controller=\"Kubernetes.EnvItem\">\n      <span class=\"blue\">{{key}}</span>=<span class=\"green\">{{value}}</span>\n    </span>\n  </script>\n  <div class=\"row filter-header\">\n    <div class=\"col-md-12\" ng-hide=\"model.pods.length\">\n      <span ng-include=\"\'namespaceSelector.html\'\"></span>\n      <p></p>\n    </div>\n    <div class=\"col-md-12\" ng-show=\"model.pods.length\">\n      <span ng-include=\"\'namespaceSelector.html\'\"></span>\n      <span ng-show=\"!id\">\n        <hawtio-filter ng-model=\"tableConfig.filterOptions.filterText\"\n                       css-class=\"input-xxlarge\"\n                       placeholder=\"Filter pods...\"></hawtio-filter>\n      </span>\n      <button ng-show=\"model.fetched\"\n              class=\"btn btn-danger pull-right\"\n              ng-disabled=\"!id && tableConfig.selectedItems.length == 0\"\n              ng-click=\"deletePrompt(id || tableConfig.selectedItems)\">\n        <i class=\"fa fa-remove\"></i> Delete\n      </button>\n      <span class=\"pull-right\">&nbsp;</span>\n      <button ng-show=\"id\"\n              class=\"btn btn-primary pull-right\"\n              ng-click=\"id = undefined\"><i class=\"fa fa-list\"></i></button>\n      <span class=\"pull-right\">&nbsp;</span>\n      <button ng-show=\"hasServiceKibana()\"\n              class=\"btn btn-primary pull-right\"\n              title=\"View the logs for the selected pods\"\n              ng-disabled=\"!id && tableConfig.selectedItems.length == 0\"\n              ng-click=\"openLogs()\">\n        <i class=\"fa fa-file-text-o\"></i> Logs\n      </button>\n      <span ng-show=\"hasServiceKibana()\" class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n         title=\"Create a new pod\"\n              href=\"/kubernetes/namespace/{{namespace}}/podCreate\"><i class=\"fa fa-plus\"></i> Create</a>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"model.fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"model.fetched\">\n        <div ng-hide=\"model.pods.length\" class=\"align-center\">\n          <p class=\"alert alert-info\">There are no pods currently running.</p>\n        </div>\n        <div ng-show=\"model.pods.length\">\n          <table class=\"table table-condensed table-striped\" ui-if=\"kubernetes.selectedNamespace\"\n                 hawtio-simple-table=\"tableConfig\"></table>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/replicationController.html","<div ng-controller=\"Kubernetes.ReplicationControllerController\">\n  <div class=\"row row-header\">\n    <div class=\"col-md-12\">\n      <span ng-show=\"model.fetched && !rawMode\" class=\"icon-heading\">\n          <img ng-show=\"item.$iconUrl\" class=\"icon-selected-app\" ng-src=\"{{item.$iconUrl}}\">&nbsp;{{item.metadata.name}}\n      </span>\n\n      <button class=\"btn btn-danger pull-right\"\n              title=\"Delete this ReplicationController\"\n              ng-click=\"deleteEntity()\">\n        <i class=\"fa fa-remove\"></i> Delete\n      </button>\n      <span class=\"pull-right\">&nbsp;</span>\n\n      <a class=\"btn btn-default pull-right\"\n         title=\"Return to table of controllers\"\n              href=\"/kubernetes/replicationControllers?namespace={{item.metadata.namespace}}\"><i class=\"fa fa-list\"></i></a>\n      <span class=\"pull-right\">&nbsp;</span>\n\n      <a class=\"btn pull-right\"\n         ng-click=\"flipRaw()\"\n         title=\"{{rawMode ? \'Raw mode\' : \'Form mode\'}}\">{{rawMode ? \'From\' : \'Raw\'}}</a>\n      <span class=\"pull-right\">&nbsp;</span>\n\n      <a class=\"btn btn-primary pull-right\"\n              ng-click=\"resizeDialog.open(item)\"\n              title=\"Resize the number of replicas of this controller\">Resize</a>\n      <span class=\"pull-right\">&nbsp;</span>\n\n      <span class=\"pull-right controller-pod-counts\" ng-show=\"item.$podCounters\">Pods:\n        <a ng-show=\"item.$podCounters.podsLink\" href=\"{{item.$podCounters.podsLink}}\" title=\"View pods\">\n          <span ng-show=\"item.$podCounters.valid\" class=\"badge badge-success\">{{item.$podCounters.valid}}</span>\n          <span ng-show=\"item.$podCounters.waiting\" class=\"badge\">{{item.$podCounters.waiting}}</span>\n          <span ng-show=\"item.$podCounters.error\" class=\"badge badge-warning\">{{item.$podCounters.error}}</span>\n        </a>\n      </span>\n    </div>\n  </div>\n\n  <div ng-hide=\"model.fetched\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div ng-show=\"model.fetched && !rawMode\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div hawtio-object=\"item\" config=\"itemConfig\"></div>\n      </div>\n    </div>\n  </div>\n\n  <div ng-show=\"model.fetched && rawMode\">\n    <div class=\"raw-json-view\">\n      <textarea ui-codemirror=\"codeMirrorOptions\" readonly=\"true\" ng-model=\"rawModel\" class=\"\"></textarea>\n    </div>\n  </div>\n\n  <ng-include src=\"\'resizeDialog.html\'\"/>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/replicationControllerCreate.html","<div ng-controller=\"Kubernetes.ReplicationControllerEditController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n         title=\"Go back to viewing all the replication controllers\"\n              href=\"/kubernetes/replicationControllers\"><i class=\"fa fa-list\"></i></a>\n      <button class=\"btn btn-primary pull-right\"\n              title=\"Create a new controller\"\n              ng-click=\"save()\">\n        Create Controller\n      </button>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div hawtio-form-2=\"config\" entity=\"entity\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/replicationControllerEdit.html","<div ng-controller=\"Kubernetes.ReplicationControllerEditController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n         title=\"Go back to viewing all the replication controllers\"\n              href=\"/kubernetes/replicationControllers\"><i class=\"fa fa-list\"></i></a>\n      <button class=\"btn btn-primary pull-right\"\n              title=\"Saves changes to the controller\"\n              ng-click=\"save()\">\n        Save\n      </button>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div hawtio-form-2=\"config\" entity=\"entity\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/replicationControllers.html","<div ng-controller=\"Kubernetes.ReplicationControllers\">\n  <script type=\"text/ng-template\" id=\"currentReplicasTemplate.html\">\n    <div class=\"ngCellText\" title=\"Number of running pods for this controller\">\n      <a ng-show=\"row.entity.podsLink\" href=\"{{row.entity.podsLink}}\">\n        <span class=\"badge {{row.entity.status.replicas > 0 ? \'badge-success\' : \'badge-warning\'}}\">{{row.entity.status.replicas}}</span>\n      </a>\n      <span ng-hide=\"row.entity.podsLink\" class=\"badge\">{{row.entity.status.replicas}}</span>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"desiredReplicas.html\">\n    <div class=\"ngCellText\">\n      <a href=\"\" class=\"badge badge-info\" \n         ng-click=\"$parent.$parent.resizeDialog.open(row.entity)\" \n         title=\"Edit the number of replicas of this controller\">{{row.entity.spec.replicas || 0}}</a>\n    </div>\n  </script>\n  <div class=\"row filter-header\">\n    <div class=\"col-md-12\" ng-hide=\"model.replicationControllers.length\">\n      <span ng-include=\"\'namespaceSelector.html\'\"></span>\n    </div>\n    <div class=\"col-md-12\" ng-show=\"model.replicationControllers.length\">\n      <span ng-include=\"\'namespaceSelector.html\'\"></span>\n      <span ng-show=\"!id\">\n        <hawtio-filter ng-model=\"tableConfig.filterOptions.filterText\"\n                       css-class=\"input-xxlarge\"\n                       placeholder=\"Filter replication controllers...\"\n                       save-as=\"kubernetes-replication-controllers-text-filter\"></hawtio-filter>\n      </span>\n      <button ng-show=\"model.fetched\"\n              class=\"btn btn-danger pull-right\"\n              ng-disabled=\"!id && tableConfig.selectedItems.length == 0\"\n              ng-click=\"deletePrompt(id || tableConfig.selectedItems)\">\n        <i class=\"fa fa-remove\"></i> Delete\n      </button>\n      <span class=\"pull-right\">&nbsp;</span>\n      <button ng-show=\"id\"\n              class=\"btn btn-primary pull-right\"\n              ng-click=\"id = undefined\"><i class=\"fa fa-list\"></i></button>\n      <span ng-show=\"id\" class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n         title=\"Create a new replication controller\"\n              href=\"/kubernetes/namespace/{{namespace}}/replicationControllerCreate\"><i class=\"fa fa-plus\"></i> Create</a>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"model.fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"model.fetched\">\n        <div ng-hide=\"model.replicationControllers.length\" class=\"align-center\">\n          <p class=\"alert alert-info\">There are no replication controllers currently available.</p>\n        </div>\n        <div ng-show=\"model.replicationControllers.length\">\n          <table class=\"table table-condensed table-striped\"\n                 hawtio-simple-table=\"tableConfig\"></table>\n        </div>\n      </div>\n    </div>\n  </div>\n  <ng-include src=\"\'resizeDialog.html\'\"/>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/service.html","<div ng-controller=\"Kubernetes.ServiceController\">\n  <div class=\"row row-header\">\n    <div class=\"col-md-12\">\n      <span ng-show=\"model.fetched && !rawMode\" class=\"icon-heading\">\n          <img ng-show=\"item.$iconUrl\" class=\"icon-selected-app\" ng-src=\"{{item.$iconUrl}}\">&nbsp;{{item.metadata.name}}\n      </span>\n\n      <button class=\"btn btn-danger pull-right\"\n              title=\"Delete this Service\"\n              ng-click=\"deleteEntity()\">\n        <i class=\"fa fa-remove\"></i> Delete\n      </button>\n      <span class=\"pull-right\">&nbsp;</span>\n\n      <a class=\"btn btn-default pull-right\"\n              href=\"/kubernetes/services?namespace={{item.metadata.namespace}}\"><i class=\"fa fa-list\"></i></a>\n\n      <a class=\"btn pull-right\"\n         ng-click=\"flipRaw()\"\n         title=\"{{rawMode ? \'Raw mode\' : \'Form mode\'}}\">{{rawMode ? \'From\' : \'Raw\'}}</a>\n      <span class=\"pull-right\">&nbsp;</span>\n\n      <a class=\"btn btn-primary pull-right\"\n         title=\"Open this service in your browser\"\n         ng-show=\"item.$connectUrl\" href=\"{{item.$connectUrl}}\">\n        <i class=\"fa fa-sign-in\"></i> Connect\n      </a>\n    </div>\n  </div>\n\n  <div ng-hide=\"model.fetched\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div ng-show=\"model.fetched && !rawMode\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div hawtio-object=\"item\" config=\"itemConfig\"></div>\n      </div>\n    </div>\n  </div>\n\n  <div ng-show=\"model.fetched && rawMode\">\n    <div class=\"raw-json-view\">\n      <textarea ui-codemirror=\"codeMirrorOptions\" readonly=\"true\" ng-model=\"rawModel\" class=\"raw-json-view\"></textarea>\n    </div>\n  </div>\n\n</div>\n");
$templateCache.put("plugins/kubernetes/html/serviceCreate.html","<div ng-controller=\"Kubernetes.ServiceEditController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n         title=\"Go back to viewing all the services\"\n              href=\"/kubernetes/services\"><i class=\"fa fa-list\"></i></a>\n      <button class=\"btn btn-primary pull-right\"\n              title=\"Create a new service\"\n              ng-click=\"save()\">\n        Create Service\n      </button>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div hawtio-form-2=\"config\" entity=\"entity\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/serviceEdit.html","<div ng-controller=\"Kubernetes.ServiceEditController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n         title=\"Go back to viewing all the services\"\n              href=\"/kubernetes/services\"><i class=\"fa fa-list\"></i></a>\n      <button class=\"btn btn-primary pull-right\"\n              title=\"Save changes to this service\"\n              ng-click=\"save()\">\n        Save\n      </button>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div hawtio-form-2=\"config\" entity=\"entity\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/services.html","<div ng-controller=\"Kubernetes.Services\">\n  <div class=\"row filter-header\">\n    <div class=\"col-md-12\" ng-hide=\"model.services.length\">\n      <span ng-include=\"\'namespaceSelector.html\'\"></span>\n    </div>\n    <div class=\"col-md-12\" ng-show=\"model.services.length\">\n      <span ng-include=\"\'namespaceSelector.html\'\"></span>\n      <span ng-show=\"!id\">\n        <hawtio-filter ng-model=\"tableConfig.filterOptions.filterText\"\n                       css-class=\"input-xxlarge\"\n                       placeholder=\"Filter services...\"\n                       save-as=\"kubernetes-services-text-filter\"></hawtio-filter>\n      </span>\n      <button ng-show=\"model.fetched\"\n              class=\"btn btn-danger pull-right\"\n              ng-disabled=\"!id && tableConfig.selectedItems.length == 0\"\n              ng-click=\"deletePrompt(id || tableConfig.selectedItems)\">\n        <i class=\"fa fa-remove\"></i> Delete\n      </button>\n      <span class=\"pull-right\">&nbsp;</span>\n      <button ng-show=\"id\"\n              class=\"btn btn-primary pull-right\"\n              ng-click=\"id = undefined\"><i class=\"fa fa-list\"></i></button>\n      <span ng-show=\"id\" class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n         title=\"Create a new service\"\n              href=\"/kubernetes/namespace/{{namespace}}/serviceCreate\"><i class=\"fa fa-plus\"></i> Create</a>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"model.fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"model.fetched\">\n        <div ng-hide=\"model.services.length\" class=\"align-center\">\n          <p class=\"alert alert-info\">There are no services currently available.</p>\n        </div>\n        <div ng-show=\"model.services.length\">\n          <table class=\"table table-condensed table-striped\" ui-if=\"kubernetes.selectedNamespace\"\n                 hawtio-simple-table=\"tableConfig\"></table>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/templates.html","<div ng-controller=\"Kubernetes.TemplateController\">\n  <div class=\"row filter-header\">\n    <div class=\"col-md-12\">\n      <span ng-show=\"model.templates.length\">\n        <hawtio-filter ng-model=\"filterText\"\n                       css-class=\"input-xxlarge\"\n                       placeholder=\"Filter templates...\"></hawtio-filter>\n      </span>\n      <button class=\"btn btn-info pull-right\"\n              ng-click=\"cancel()\"\n              title=\"Go back to app view\">\n              Cancel\n      </button>\n    </div>\n  </div>\n  <div class=\"row\" ng-hide=\"formConfig\">\n    <div class=\"col-md-12\">\n      <div class=\"column-box\" \n           ng-repeat=\"template in model.templates | filter:filterTemplates | orderBy:\'metadata.name\' track by $index\">\n          <div class=\"row\">\n            <div class=\"col-md-2\">\n              <img style=\"width: 64px; height: 64px;\" ng-src=\"{{getIconUrl(template)}}\">\n            </div>\n            <div class=\"col-md-9\">\n              <h3 ng-bind=\"template.metadata.name\"></h3>\n            </div>\n            <div class=\"col-md-1\">\n              <a href=\"\" ng-click=\"deleteTemplate(template)\"><i class=\"fa fa-remove red\"></i></a>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-md-10\">\n              <div ng-bind-html=\"getDescription(template)\"></div>\n            </div>\n            <div class=\"col-md-2\">\n              <a href=\"\" \n                 title=\"Click to deploy this app\" \n                 ng-click=\"deployTemplate(template)\">\n                <i class=\"fa fa-play-circle green fa-3x\"></i>\n              </a>\n            </div>\n          </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"row\" ng-show=\"formConfig\">\n    <div class=\"col-md-3\">\n    </div>\n    <div class=\"col-md-4\">\n      <div hawtio-form-2=\"formConfig\" entity=\"entity\"></div>\n      <a href=\"\" \n        class=\"btn btn-success pull-right\"\n        title=\"Click to deploy this app\" \n        ng-click=\"substituteAndDeployTemplate()\">\n        <i class=\"fa fa-play-circle\"></i> Run\n      </a>\n    </div>\n    <div class=\"col-md-3\">\n    </div>\n\n  </div>\n</div>\n");
$templateCache.put("plugins/project/html/projectCreate.html","<div ng-controller=\"Project.ProjectController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <form>\n          <div class=\"form-group\">\n            <label for=\"projectName\">Project name</label>\n            <input type=\"text\" class=\"form-control\" id=\"projectName\" placeholder=\"Enter project name\" ng-model=\"entity.name\">\n          </div>\n          <button type=\"submit\" ng-disabled=\"!entity.name\" ng-click=\"create()\"\n                  class=\"btn btn-primary\">Create Project</button>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>\n");}]); hawtioPluginLoader.addModule("hawtio-kubernetes-templates");