/// <reference path="../libs/hawtio-forms/defs.d.ts"/>
/// <reference path="../libs/hawtio-ui/defs.d.ts"/>
/// <reference path="../libs/hawtio-utilities/defs.d.ts"/>
/// <reference path="../libs/hawtio-wiki/defs.d.ts"/>

/// <reference path="../../includes.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.context = '/kubernetes';
    Kubernetes.hash = '#' + Kubernetes.context;
    Kubernetes.defaultRoute = Kubernetes.hash + '/apps';
    Kubernetes.pluginName = 'Kubernetes';
    Kubernetes.pluginPath = 'plugins/kubernetes/';
    Kubernetes.templatePath = Kubernetes.pluginPath + 'html/';
    Kubernetes.log = Logger.get(Kubernetes.pluginName);
    Kubernetes.keepPollingModel = true;
    Kubernetes.defaultIconUrl = Core.url("/img/kubernetes.svg");
    Kubernetes.hostIconUrl = Core.url("/img/host.svg");
    Kubernetes.defaultApiVersion = "v1beta2";
    Kubernetes.defaultOSApiVersion = "v1beta1";
    Kubernetes.labelFilterTextSeparator = ",";
    Kubernetes.defaultNamespace = "default";
    Kubernetes.appSuffix = ".app";
    Kubernetes.osapiPrefix = "/kubernetes/osapi/";
    Kubernetes.buildConfigsRestURL = Kubernetes.osapiPrefix + Kubernetes.defaultOSApiVersion + "/buildConfigs";
    Kubernetes.buildConfigHooksRestURL = Kubernetes.osapiPrefix + Kubernetes.defaultOSApiVersion + "/buildConfigHooks";
    Kubernetes.buildsRestURL = Kubernetes.osapiPrefix + Kubernetes.defaultOSApiVersion + "/builds";
    Kubernetes.buildsLogsRestURL = Kubernetes.osapiPrefix + Kubernetes.defaultOSApiVersion + "/proxy/buildLogs";
    Kubernetes.routesRestURL = Kubernetes.osapiPrefix + Kubernetes.defaultOSApiVersion + "/routes";
    Kubernetes.deploymentConfigsRestURL = Kubernetes.osapiPrefix + Kubernetes.defaultOSApiVersion + "/deploymentConfigs";
    Kubernetes.imageRepositoriesRestURL = Kubernetes.osapiPrefix + Kubernetes.defaultOSApiVersion + "/imageRepositories";
    //var fabricDomain = Fabric.jmxDomain;
    var fabricDomain = "io.fabric8";
    Kubernetes.mbean = fabricDomain + ":type=Kubernetes";
    Kubernetes.managerMBean = fabricDomain + ":type=KubernetesManager";
    Kubernetes.appViewMBean = fabricDomain + ":type=AppView";
    function isKubernetes(workspace) {
        // return workspace.treeContainsDomainAndProperties(fabricDomain, {type: "Kubernetes"});
        return true;
    }
    Kubernetes.isKubernetes = isKubernetes;
    function isKubernetesTemplateManager(workspace) {
        // return workspace.treeContainsDomainAndProperties(fabricDomain, {type: "KubernetesTemplateManager"});
        return true;
    }
    Kubernetes.isKubernetesTemplateManager = isKubernetesTemplateManager;
    function isAppView(workspace) {
        // return workspace.treeContainsDomainAndProperties(fabricDomain, {type: "AppView"});
        return true;
    }
    Kubernetes.isAppView = isAppView;
    /**
     * Updates the namespaces value in the kubernetes object from the namespace values in the pods, controllers, services
     */
    function updateNamespaces(kubernetes, pods, replicationControllers, services) {
        if (pods === void 0) { pods = []; }
        if (replicationControllers === void 0) { replicationControllers = []; }
        if (services === void 0) { services = []; }
        var byNamespace = function (thing) {
            return thing.namespace;
        };
        function pushIfNotExists(array, items) {
            angular.forEach(items, function (value) {
                if ($.inArray(value, array) < 0) {
                    array.push(value);
                }
            });
        }
        var namespaces = [];
        pushIfNotExists(namespaces, pods.map(byNamespace));
        pushIfNotExists(namespaces, services.map(byNamespace));
        pushIfNotExists(namespaces, replicationControllers.map(byNamespace));
        namespaces = namespaces.sort();
        kubernetes.namespaces = namespaces;
        kubernetes.selectedNamespace = kubernetes.selectedNamespace || namespaces[0];
    }
    Kubernetes.updateNamespaces = updateNamespaces;
    function setJson($scope, id, collection) {
        $scope.id = id;
        if (!$scope.fetched) {
            return;
        }
        if (!id) {
            $scope.json = '';
            return;
        }
        if (!collection) {
            return;
        }
        var item = collection.find(function (item) {
            return item.id === id;
        });
        if (item) {
            $scope.json = angular.toJson(item, true);
            $scope.item = item;
        }
        else {
            $scope.id = undefined;
            $scope.json = '';
            $scope.item = undefined;
        }
    }
    Kubernetes.setJson = setJson;
    /**
     * Returns the labels text string using the <code>key1=value1,key2=value2,....</code> format
     */
    function labelsToString(labels, seperatorText) {
        if (seperatorText === void 0) { seperatorText = Kubernetes.labelFilterTextSeparator; }
        var answer = "";
        angular.forEach(labels, function (value, key) {
            var separator = answer ? seperatorText : "";
            answer += separator + key + "=" + value;
        });
        return answer;
    }
    Kubernetes.labelsToString = labelsToString;
    function initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL) {
        if (!KubernetesState.selectedNamespace) {
            KubernetesState.selectedNamespace = $routeParams.namespace || $location.search()["namespace"];
        }
        if (!KubernetesState.selectedNamespace) {
            if (angular.isArray(KubernetesState.namespaces) && KubernetesState.namespaces.length) {
                KubernetesState.selectedNamespace = KubernetesState.namespaces[0];
            }
        }
        var injector = HawtioCore.injector;
        if (injector) {
            var ServiceRegistry = injector.get("ServiceRegistry");
            if (ServiceRegistry) {
                $scope.hasService = function (name) { return ServiceRegistry.hasService(name); };
            }
        }
        $scope.namespace = KubernetesState.selectedNamespace || Kubernetes.defaultNamespace;
        $scope.forgeEnabled = isForgeEnabled();
        $scope.resizeDialog = {
            controller: null,
            newReplicas: 0,
            dialog: new UI.Dialog(),
            onOk: function () {
                var resizeDialog = $scope.resizeDialog;
                resizeDialog.dialog.close();
                resizeController($http, KubernetesApiURL, resizeDialog.controller, resizeDialog.newReplicas, function () {
                    // lets immediately update the replica count to avoid waiting for the next poll
                    ($scope.resizeDialog.controller.currentState || {}).replicas = $scope.resizeDialog.newReplicas;
                    Core.$apply($scope);
                });
            },
            open: function (controller) {
                var resizeDialog = $scope.resizeDialog;
                resizeDialog.controller = controller;
                resizeDialog.newReplicas = Core.pathGet(controller, ["currentState", "replicas"]);
                resizeDialog.dialog.open();
                $timeout(function () {
                    $('#replicas').focus();
                }, 50);
            },
            close: function () {
                $scope.resizeDialog.dialog.close();
            }
        };
        $scope.triggerBuild = function (buildConfig) {
            var url = buildConfig.$triggerUrl;
            console.log("triggering build at url: " + url);
            if (url) {
                //var data = {};
                var data = null;
                var config = {
                    headers: {
                        'Content-Type': "application/json"
                    }
                };
                var name = Core.pathGet(buildConfig, ["metadata", "name"]);
                Core.notification('info', "Triggering build " + name);
                $http.post(url, data, config).success(function (data, status, headers, config) {
                    console.log("trigger worked! got data " + angular.toJson(data, true));
                    // TODO should we show some link to the build
                    Core.notification('info', "Building " + name);
                }).error(function (data, status, headers, config) {
                    Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
                    Core.notification('error', "Failed to trigger build for " + name + ". Returned code: " + status + " " + data);
                });
            }
            ;
        };
        // update the URL if the filter is changed
        $scope.$watch("tableConfig.filterOptions.filterText", function (text) {
            $location.search("q", text);
        });
        $scope.$on("labelFilterUpdate", function ($event, text) {
            var filterOptions = ($scope.tableConfig || {}).filterOptions || {};
            var currentFilter = filterOptions.filterText;
            if (Core.isBlank(currentFilter)) {
                filterOptions.filterText = text;
            }
            else {
                var expressions = currentFilter.split(/\s+/);
                if (expressions.any(text)) {
                    // lets exclude this filter expression
                    expressions = expressions.remove(text);
                    filterOptions.filterText = expressions.join(" ");
                }
                else {
                    filterOptions.filterText = currentFilter + " " + text;
                }
            }
            $scope.id = undefined;
        });
    }
    Kubernetes.initShared = initShared;
    /**
     * Given the list of pods lets iterate through them and find all pods matching the selector
     * and return counters based on the status of the pod
     */
    function createPodCounters(selector, pods, outputPods, podLinkQuery) {
        if (outputPods === void 0) { outputPods = []; }
        if (podLinkQuery === void 0) { podLinkQuery = null; }
        var filterFn;
        if (angular.isFunction(selector)) {
            filterFn = selector;
        }
        else {
            filterFn = function (pod) { return selectorMatches(selector, pod.labels); };
        }
        var answer = {
            podsLink: "",
            valid: 0,
            waiting: 0,
            error: 0
        };
        if (selector) {
            if (!podLinkQuery) {
                podLinkQuery = Kubernetes.labelsToString(selector, " ");
            }
            answer.podsLink = Core.url("/kubernetes/pods?q=" + encodeURIComponent(podLinkQuery));
            angular.forEach(pods, function (pod) {
                if (filterFn(pod)) {
                    outputPods.push(pod);
                    var status = (pod.currentState || {}).status;
                    if (status) {
                        var lower = status.toLowerCase();
                        if (lower.startsWith("run")) {
                            answer.valid += 1;
                        }
                        else if (lower.startsWith("wait")) {
                            answer.waiting += 1;
                        }
                        else if (lower.startsWith("term") || lower.startsWith("error") || lower.startsWith("fail")) {
                            answer.error += 1;
                        }
                    }
                    else {
                        answer.error += 1;
                    }
                }
            });
        }
        return answer;
    }
    Kubernetes.createPodCounters = createPodCounters;
    /**
     * Converts the given json into an array of items. If the json contains a nested set of items then that is sorted; so that services
     * are processed first; then turned into an array. Otherwise the json is put into an array so it can be processed polymorphically
     */
    function convertKubernetesJsonToItems(json) {
        var items = json.items;
        if (angular.isArray(items)) {
            // TODO we could check for List or Config types here and warn if not
            // sort the services first
            var answer = [];
            items.forEach(function (item) {
                if (item.kind === "Service") {
                    answer.push(item);
                }
            });
            items.forEach(function (item) {
                if (item.kind !== "Service") {
                    answer.push(item);
                }
            });
            return answer;
        }
        else {
            return [json];
        }
    }
    Kubernetes.convertKubernetesJsonToItems = convertKubernetesJsonToItems;
    function isV1beta1Or2() {
        return Kubernetes.defaultApiVersion === "v1beta1" || Kubernetes.defaultApiVersion === "v1beta2";
    }
    Kubernetes.isV1beta1Or2 = isV1beta1Or2;
    /**
     * Returns a link to the detail page for the given entity
     */
    function entityPageLink(entity) {
        if (entity) {
            var id = entity.id;
            var kind = entity.kind;
            if (kind && id) {
                var path = kind.substring(0, 1).toLowerCase() + kind.substring(1) + "s";
                var namespace = entity.namespace;
                if (namespace && !isIgnoreNamespaceKind(kind)) {
                    return UrlHelpers.join('/kubernetes/namespace', namespace, path, id);
                }
                else {
                    return UrlHelpers.join('/kubernetes', path, id);
                }
            }
        }
        return null;
    }
    Kubernetes.entityPageLink = entityPageLink;
    function resourceKindToUriPath(kind) {
        var kindPath = kind.toLowerCase() + "s";
        if (kindPath === "replicationcontrollers" && isV1beta1Or2()) {
            kindPath = "replicationControllers";
        }
        return kindPath;
    }
    Kubernetes.resourceKindToUriPath = resourceKindToUriPath;
    function isIgnoreNamespaceKind(kind) {
        return kind === "Host" || kind === "Minion";
    }
    /**
     * Returns the root URL for the kind
     */
    function kubernetesUrlForKind(KubernetesApiURL, kind, namespace, path) {
        if (namespace === void 0) { namespace = null; }
        if (path === void 0) { path = null; }
        var pathSegment = "";
        if (path) {
            pathSegment = "/" + Core.trimLeading(path, "/");
        }
        var kindPath = resourceKindToUriPath(kind);
        var ignoreNamespace = isIgnoreNamespaceKind(kind);
        if (isV1beta1Or2() || ignoreNamespace) {
            var postfix = "";
            if (namespace && !ignoreNamespace) {
                postfix = "?namespace=" + namespace;
            }
            return UrlHelpers.join(KubernetesApiURL, "/api/" + Kubernetes.defaultApiVersion + "/" + kindPath + pathSegment + postfix);
        }
        else {
            return UrlHelpers.join(KubernetesApiURL, "/api/" + Kubernetes.defaultApiVersion + "/ns/" + namespace + "/" + kindPath + pathSegment + postfix);
        }
    }
    Kubernetes.kubernetesUrlForKind = kubernetesUrlForKind;
    ;
    /**
     * Returns the base URL for the kind of kubernetes resource or null if it cannot be found
     */
    function kubernetesUrlForItemKind(KubernetesApiURL, json) {
        var kind = json.kind;
        if (kind) {
            return kubernetesUrlForKind(KubernetesApiURL, kind, json.namespace);
        }
        else {
            Kubernetes.log.warn("Ignoring missing kind " + kind + " for kubernetes json: " + angular.toJson(json));
            return null;
        }
    }
    Kubernetes.kubernetesUrlForItemKind = kubernetesUrlForItemKind;
    function kubernetesProxyUrlForService(KubernetesApiURL, service, path) {
        if (path === void 0) { path = null; }
        var pathSegment = "";
        if (path) {
            pathSegment = "/" + Core.trimLeading(path, "/");
        }
        else {
            pathSegment = "/";
        }
        var namespace = service.namespace;
        if (isV1beta1Or2()) {
            var postfix = "?namespace=" + namespace;
            return KubernetesApiURL.then(function (KubernetesApiURL) {
                return UrlHelpers.join(KubernetesApiURL, "/api/" + Kubernetes.defaultApiVersion + "/proxy/services/" + service.id + pathSegment + postfix);
            });
        }
        else {
            return KubernetesApiURL.then(function (KubernetesApiURL) {
                return UrlHelpers.join(KubernetesApiURL, "/api/" + Kubernetes.defaultApiVersion + "/ns/" + namespace + "/services/" + service.name + pathSegment);
            });
        }
    }
    Kubernetes.kubernetesProxyUrlForService = kubernetesProxyUrlForService;
    function buildConfigRestUrl(id) {
        return UrlHelpers.join(Kubernetes.buildConfigsRestURL, id);
    }
    Kubernetes.buildConfigRestUrl = buildConfigRestUrl;
    function deploymentConfigRestUrl(id) {
        return UrlHelpers.join(Kubernetes.deploymentConfigsRestURL, id);
    }
    Kubernetes.deploymentConfigRestUrl = deploymentConfigRestUrl;
    function imageRepositoryRestUrl(id) {
        return UrlHelpers.join(Kubernetes.imageRepositoriesRestURL, id);
    }
    Kubernetes.imageRepositoryRestUrl = imageRepositoryRestUrl;
    function buildRestUrl(id) {
        return UrlHelpers.join(Kubernetes.buildsRestURL, id);
    }
    Kubernetes.buildRestUrl = buildRestUrl;
    function buildLogsRestUrl(id) {
        return UrlHelpers.join(Kubernetes.buildsLogsRestURL, id);
    }
    Kubernetes.buildLogsRestUrl = buildLogsRestUrl;
    /**
     * Runs the given application JSON
     */
    function runApp($location, $scope, $http, KubernetesApiURL, json, name, onSuccessFn, namespace, onCompleteFn) {
        if (name === void 0) { name = "App"; }
        if (onSuccessFn === void 0) { onSuccessFn = null; }
        if (namespace === void 0) { namespace = null; }
        if (onCompleteFn === void 0) { onCompleteFn = null; }
        if (json) {
            if (angular.isString(json)) {
                json = angular.fromJson(json);
            }
            name = name || "App";
            var postfix = namespace ? " in namespace " + namespace : "";
            Core.notification('info', "Running " + name + postfix);
            KubernetesApiURL.then(function (KubernetesApiURL) {
                var items = convertKubernetesJsonToItems(json);
                angular.forEach(items, function (item) {
                    var url = kubernetesUrlForItemKind(KubernetesApiURL, item);
                    if (url) {
                        $http.post(url, item).success(function (data, status, headers, config) {
                            Kubernetes.log.debug("Got status: " + status + " on url: " + url + " data: " + data + " after posting: " + angular.toJson(item));
                            if (angular.isFunction(onCompleteFn)) {
                                onCompleteFn();
                            }
                            Core.$apply($scope);
                        }).error(function (data, status, headers, config) {
                            var message = null;
                            if (angular.isObject(data)) {
                                message = data.message;
                                var reason = data.reason;
                                if (reason === "AlreadyExists") {
                                    // lets ignore duplicates
                                    Kubernetes.log.debug("entity already exists at " + url);
                                    return;
                                }
                            }
                            if (!message) {
                                message = "Failed to POST to " + url + " got status: " + status;
                            }
                            Kubernetes.log.warn("Failed to save " + url + " status: " + status + " response: " + angular.toJson(data, true));
                            Core.notification('error', message);
                        });
                    }
                });
            });
        }
    }
    Kubernetes.runApp = runApp;
    /**
     * Returns true if the current status of the pod is running
     */
    function isRunning(podCurrentState) {
        var status = (podCurrentState || {}).status;
        if (status) {
            var lower = status.toLowerCase();
            return lower.startsWith("run");
        }
        else {
            return false;
        }
    }
    Kubernetes.isRunning = isRunning;
    /**
     * Returns true if the labels object has all of the key/value pairs from the selector
     */
    function selectorMatches(selector, labels) {
        if (angular.isObject(labels)) {
            var answer = true;
            var count = 0;
            angular.forEach(selector, function (value, key) {
                count++;
                if (answer && labels[key] !== value) {
                    answer = false;
                }
            });
            return answer && count > 0;
        }
        else {
            return false;
        }
    }
    Kubernetes.selectorMatches = selectorMatches;
    /**
     * Returns a link to the kibana logs web application
     */
    function kibanaLogsLink(ServiceRegistry) {
        var link = ServiceRegistry.serviceLink("kibana-service");
        if (link) {
            if (!link.endsWith("/")) {
                link += "/";
            }
            return link + "#/discover/Fabric8";
        }
        else {
            return null;
        }
    }
    Kubernetes.kibanaLogsLink = kibanaLogsLink;
    function openLogsForPods(ServiceRegistry, $window, namespace, pods) {
        var link = kibanaLogsLink(ServiceRegistry);
        if (link) {
            var query = "";
            var count = 0;
            angular.forEach(pods, function (item) {
                var id = item.id;
                if (id) {
                    var space = query ? " OR " : "";
                    count++;
                    query += space + '"' + id + '"';
                }
            });
            if (query) {
                if (count > 1) {
                    query = "(" + query + ")";
                }
                query = 'pod_namespace:"' + namespace + '" AND pod:' + query;
                link += "?_a=(query:'" + query + "')";
                var newWindow = $window.open(link, "viewLogs");
            }
        }
    }
    Kubernetes.openLogsForPods = openLogsForPods;
    function resizeController($http, KubernetesApiURL, replicationController, newReplicas, onCompleteFn) {
        if (onCompleteFn === void 0) { onCompleteFn = null; }
        var id = replicationController.id;
        var namespace = replicationController.namespace || "";
        KubernetesApiURL.then(function (KubernetesApiURL) {
            var url = kubernetesUrlForKind(KubernetesApiURL, "ReplicationController", namespace, id);
            $http.get(url).success(function (data, status, headers, config) {
                if (data) {
                    var desiredState = data.desiredState;
                    if (!desiredState) {
                        desiredState = {};
                        data.desiredState = desiredState;
                    }
                    desiredState.replicas = newReplicas;
                    $http.put(url, data).success(function (data, status, headers, config) {
                        Kubernetes.log.debug("updated controller " + url);
                        if (angular.isFunction(onCompleteFn)) {
                            onCompleteFn();
                        }
                    }).error(function (data, status, headers, config) {
                        Kubernetes.log.warn("Failed to save " + url + " " + data + " " + status);
                    });
                }
            }).error(function (data, status, headers, config) {
                Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
            });
        }, function (response) {
            Kubernetes.log.debug("Failed to get rest API URL, can't resize controller " + id + " resource: ", response);
        });
    }
    Kubernetes.resizeController = resizeController;
    function statusTextToCssClass(text) {
        if (text) {
            var lower = text.toLowerCase();
            if (lower.startsWith("run") || lower.startsWith("ok")) {
                return 'fa fa-play-circle green';
            }
            else if (lower.startsWith("wait")) {
                return 'fa fa-download';
            }
            else if (lower.startsWith("term") || lower.startsWith("error") || lower.startsWith("fail")) {
                return 'fa fa-off orange';
            }
            else if (lower.startsWith("succeeded")) {
                return 'fa fa-check-circle-o green';
            }
        }
        return 'fa fa-question red';
    }
    Kubernetes.statusTextToCssClass = statusTextToCssClass;
    function podStatus(pod) {
        var currentStatus = (pod || {}).currentState || {};
        return currentStatus.status;
    }
    Kubernetes.podStatus = podStatus;
    function createAppViewPodCounters(appView) {
        var array = [];
        var map = {};
        var pods = appView.pods;
        var lowestDate = null;
        angular.forEach(pods, function (pod) {
            var selector = pod.labels;
            var selectorText = Kubernetes.labelsToString(selector, " ");
            var answer = map[selector];
            if (!answer) {
                answer = {
                    labelText: selectorText,
                    podsLink: Core.url("/kubernetes/pods?q=" + encodeURIComponent(selectorText)),
                    valid: 0,
                    waiting: 0,
                    error: 0
                };
                map[selector] = answer;
                array.push(answer);
            }
            var status = (podStatus(pod) || "Error").toLowerCase();
            if (status.startsWith("run") || status.startsWith("ok")) {
                answer.valid += 1;
            }
            else if (status.startsWith("wait")) {
                answer.waiting += 1;
            }
            else {
                answer.error += 1;
            }
            var creationTimestamp = pod.creationTimestamp;
            if (creationTimestamp) {
                var d = new Date(creationTimestamp);
                if (!lowestDate || d < lowestDate) {
                    lowestDate = d;
                }
            }
        });
        appView.$creationDate = lowestDate;
        return array;
    }
    Kubernetes.createAppViewPodCounters = createAppViewPodCounters;
    function createAppViewServiceViews(appView) {
        var array = [];
        var pods = appView.pods;
        angular.forEach(pods, function (pod) {
            var id = pod.id;
            if (id) {
                var abbrev = id;
                var idx = id.indexOf("-");
                if (idx > 1) {
                    abbrev = id.substring(0, idx);
                }
                pod.idAbbrev = abbrev;
            }
            pod.statusClass = statusTextToCssClass(podStatus(pod));
        });
        var services = appView.services || [];
        var replicationControllers = appView.replicationControllers || [];
        var size = Math.max(services.length, replicationControllers.length, 1);
        var appName = appView.$info.name;
        for (var i = 0; i < size; i++) {
            var service = services[i];
            var replicationController = replicationControllers[i];
            var controllerId = (replicationController || {}).id;
            var name = (service || {}).id || controllerId;
            var address = (service || {}).portalIP;
            if (!name && pods.length) {
                name = pods[0].idAbbrev;
            }
            if (!appView.$info.name) {
                appView.$info.name = name;
            }
            if (!appView.id && pods.length) {
                appView.id = pods[0].id;
            }
            if (i > 0) {
                appName = name;
            }
            var podCount = pods.length;
            var podCountText = podCount + " pod" + (podCount > 1 ? "s" : "");
            var view = {
                appName: appName || name,
                name: name,
                createdDate: appView.$creationDate,
                podCountText: podCountText,
                address: address,
                controllerId: controllerId,
                service: service,
                replicationController: replicationController,
                pods: pods
            };
            array.push(view);
        }
        return array;
    }
    Kubernetes.createAppViewServiceViews = createAppViewServiceViews;
    /**
     * converts a git path into an accessible URL for the browser
     */
    function gitPathToUrl(iconPath, branch) {
        if (branch === void 0) { branch = "master"; }
        return (HawtioCore.injector.get('AppLibraryURL') || '') + "/git/" + branch + iconPath;
    }
    Kubernetes.gitPathToUrl = gitPathToUrl;
    function enrichBuildConfig(buildConfig, sortedBuilds) {
        if (buildConfig) {
            var triggerUrl = null;
            var name = Core.pathGet(buildConfig, ["metadata", "name"]);
            buildConfig.$name = name;
            if (name) {
                angular.forEach([false, true], function (flag) {
                    angular.forEach(buildConfig.triggers, function (trigger) {
                        if (!triggerUrl) {
                            var type = trigger.type;
                            if (type === "generic" || flag) {
                                var generic = trigger[type];
                                if (type && generic) {
                                    var secret = generic.secret;
                                    if (secret) {
                                        triggerUrl = UrlHelpers.join(Kubernetes.buildConfigHooksRestURL, name, secret, type);
                                        buildConfig.$triggerUrl = triggerUrl;
                                    }
                                }
                            }
                        }
                    });
                });
                // lets find the latest build...
                if (sortedBuilds) {
                    buildConfig.$lastBuild = _.find(sortedBuilds, {
                        metadata: {
                            labels: {
                                buildconfig: name
                            }
                        }
                    });
                }
            }
        }
    }
    Kubernetes.enrichBuildConfig = enrichBuildConfig;
    function enrichBuildConfigs(buildConfigs, sortedBuilds) {
        angular.forEach(buildConfigs, function (buildConfig) {
            enrichBuildConfig(buildConfig, sortedBuilds);
        });
        return buildConfigs;
    }
    Kubernetes.enrichBuildConfigs = enrichBuildConfigs;
    function enrichBuilds(builds) {
        angular.forEach(builds, function (build) {
            enrichBuild(build);
        });
        return _.sortBy(builds, "$creationDate").reverse();
    }
    Kubernetes.enrichBuilds = enrichBuilds;
    function enrichBuild(build) {
        if (build) {
            var metadata = build.metadata || {};
            var name = metadata.name;
            var namespace = metadata.namespace;
            build.$name = name;
            build.$namespace = namespace;
            var nameArray = name.split("-");
            var nameArrayLength = nameArray.length;
            build.$shortName = (nameArrayLength > 4) ? nameArray.slice(0, nameArrayLength - 4).join("-") : name.substring(0, 30);
            var labels = metadata.labels || {};
            var configId = labels.buildconfig;
            build.$configId = configId;
            if (configId) {
                build.$configLink = UrlHelpers.join("kubernetes/buildConfigs", configId);
            }
            var creationTimestamp = metadata.creationTimestamp;
            if (creationTimestamp) {
                var d = new Date(creationTimestamp);
                build.$creationDate = d;
            }
            if (name) {
                build.$viewLink = UrlHelpers.join("kubernetes/builds", name);
                build.$logsLink = UrlHelpers.join("kubernetes/buildLogs", name);
            }
            var podName = build.podName;
            if (podName && namespace) {
                var podNameArray = podName.split("-");
                var podNameArrayLength = podNameArray.length;
                build.$podShortName = (podNameArrayLength > 5) ? podNameArray[podNameArrayLength - 5] : podName.substring(0, 30);
                build.$podLink = UrlHelpers.join("kubernetes/namespace", namespace, "pods", podName);
            }
        }
        return build;
    }
    Kubernetes.enrichBuild = enrichBuild;
    function enrichDeploymentConfig(deploymentConfig) {
        if (deploymentConfig) {
            var triggerUrl = null;
            var name = Core.pathGet(deploymentConfig, ["metadata", "name"]);
            deploymentConfig.$name = name;
            var found = false;
            angular.forEach(deploymentConfig.triggers, function (trigger) {
                var type = trigger.type;
                if (!deploymentConfig.$imageChangeParams && type === "ImageChange") {
                    var imageChangeParams = trigger.imageChangeParams;
                    if (imageChangeParams) {
                        var containerNames = imageChangeParams.containerNames || [];
                        imageChangeParams.$containerNames = containerNames.join(" ");
                        deploymentConfig.$imageChangeParams = imageChangeParams;
                    }
                }
            });
        }
    }
    Kubernetes.enrichDeploymentConfig = enrichDeploymentConfig;
    function enrichDeploymentConfigs(deploymentConfigs) {
        angular.forEach(deploymentConfigs, function (deploymentConfig) {
            enrichDeploymentConfig(deploymentConfig);
        });
        return deploymentConfigs;
    }
    Kubernetes.enrichDeploymentConfigs = enrichDeploymentConfigs;
    function enrichImageRepository(imageRepository) {
        if (imageRepository) {
            var triggerUrl = null;
            var name = Core.pathGet(imageRepository, ["metadata", "name"]);
            imageRepository.$name = name;
        }
    }
    Kubernetes.enrichImageRepository = enrichImageRepository;
    function enrichImageRepositories(imageRepositories) {
        angular.forEach(imageRepositories, function (imageRepository) {
            enrichImageRepository(imageRepository);
        });
        return imageRepositories;
    }
    Kubernetes.enrichImageRepositories = enrichImageRepositories;
    var labelColors = {
        'version': 'background-blue',
        'name': 'background-light-green',
        'container': 'background-light-grey'
    };
    function containerLabelClass(labelType) {
        if (!(labelType in labelColors)) {
            return 'mouse-pointer';
        }
        else
            return labelColors[labelType] + ' mouse-pointer';
    }
    Kubernetes.containerLabelClass = containerLabelClass;
    /**
     * Returns true if the fabric8 forge plugin is enabled
     */
    function isForgeEnabled() {
        // TODO should return true if the service "fabric8-forge" is valid
        return true;
    }
    Kubernetes.isForgeEnabled = isForgeEnabled;
    /**
     * Configures the json schema
     */
    function configureSchema() {
        angular.forEach(Kubernetes.schema.definitions, function (definition, name) {
            var properties = definition.properties;
            if (properties) {
                var hideProperties = ["creationTimestamp", "kind", "apiVersion", "annotations", "additionalProperties", "namespace", "resourceVersion", "selfLink", "uid"];
                angular.forEach(hideProperties, function (propertyName) {
                    var property = properties[propertyName];
                    if (property) {
                        property["hidden"] = true;
                    }
                });
                angular.forEach(properties, function (property, propertyName) {
                    var ref = property["$ref"];
                    var type = property["type"];
                    if (ref && (!type || type === "object")) {
                        property["type"] = ref;
                    }
                    if (type === "array") {
                        var items = property["items"];
                        if (items) {
                            var ref = items["$ref"];
                            var type = items["type"];
                            if (ref && (!type || type === "object")) {
                                items["type"] = ref;
                            }
                        }
                    }
                });
            }
            Kubernetes.schema.definitions.os_build_WebHookTrigger.properties.secret.type = "password";
        });
    }
    Kubernetes.configureSchema = configureSchema;
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
var Kubernetes;
(function (Kubernetes) {
    function byId(thing) {
        return thing.id;
    }
    function createKey(namespace, id) {
        return (namespace || "") + "-" + id;
    }
    function populateKey(item) {
        var result = item;
        result['_key'] = createKey(item.namespace, item.id);
        return result;
    }
    function populateKeys(items) {
        var result = [];
        angular.forEach(items, function (item) {
            result.push(populateKey(item));
        });
        return result;
    }
    function selectPods(pods, namespace, labels) {
        return pods.filter(function (pod) {
            return pod.namespace === namespace && Kubernetes.selectorMatches(labels, pod.labels);
        });
    }
    /**
     * The object which keeps track of all the pods, replication controllers, services and their associations
     */
    var KubernetesModelService = (function () {
        function KubernetesModelService() {
            this.kubernetes = null;
            this.apps = [];
            this.services = [];
            this.replicationControllers = [];
            this.pods = [];
            this.hosts = [];
            this.namespaces = [];
            this.routes = [];
            this.redraw = false;
            this.resourceVersions = {};
            // various views on the data
            this.podsByHost = {};
            this.servicesByKey = {};
            this.replicationControllersByKey = {};
            this.podsByKey = {};
            this.appInfos = [];
            this.appViews = [];
            this.appFolders = [];
            this.fetched = false;
            this.isOpenShift = false;
            this.fetch = function () {
            };
        }
        KubernetesModelService.prototype.$keepPolling = function () {
            return Kubernetes.keepPollingModel;
        };
        KubernetesModelService.prototype.orRedraw = function (flag) {
            this.redraw = this.redraw || flag;
        };
        KubernetesModelService.prototype.getService = function (namespace, id) {
            return this.servicesByKey[createKey(namespace, id)];
        };
        KubernetesModelService.prototype.getReplicationController = function (namespace, id) {
            return this.replicationControllersByKey[createKey(namespace, id)];
        };
        KubernetesModelService.prototype.getPod = function (namespace, id) {
            return this.podsByKey[createKey(namespace, id)];
        };
        KubernetesModelService.prototype.podsForNamespace = function (namespace) {
            if (namespace === void 0) { namespace = this.currentNamespace(); }
            return _.filter(this.pods, { namespace: namespace });
        };
        /**
         * Returns the current selected namespace or the default namespace
         */
        KubernetesModelService.prototype.currentNamespace = function () {
            var answer = null;
            if (this.kubernetes) {
                answer = this.kubernetes.selectedNamespace;
            }
            return answer || Kubernetes.defaultNamespace;
        };
        KubernetesModelService.prototype.updateIconUrlAndAppInfo = function (entity, nameField) {
            var answer = null;
            var id = entity.id;
            if (id && nameField) {
                (this.appInfos || []).forEach(function (appInfo) {
                    var iconPath = appInfo.iconPath;
                    if (iconPath && !answer) {
                        var iconUrl = Kubernetes.gitPathToUrl(iconPath);
                        var ids = Core.pathGet(appInfo, ["names", nameField]);
                        angular.forEach(ids, function (appId) {
                            if (appId === id) {
                                entity.$iconUrl = iconUrl;
                                entity.appPath = appInfo.appPath;
                                entity.$info = appInfo;
                            }
                        });
                    }
                });
            }
            if (!entity.$iconUrl) {
                entity.$iconUrl = Kubernetes.defaultIconUrl;
            }
        };
        KubernetesModelService.prototype.maybeInit = function () {
            var _this = this;
            this.fetched = true;
            if (this.services && this.replicationControllers && this.pods) {
                this.servicesByKey = {};
                this.podsByKey = {};
                this.replicationControllersByKey = {};
                var podsByHost = {};
                this.pods.forEach(function (pod) {
                    if (!pod.kind)
                        pod.kind = "Pod";
                    _this.podsByKey[pod._key] = pod;
                    var host = pod.currentState.host;
                    podsByHost[host] = podsByHost[host] || [];
                    podsByHost[host].push(pod);
                    pod.$labelsText = Kubernetes.labelsToString(pod.labels);
                    if (host) {
                        pod.$labelsText += Kubernetes.labelFilterTextSeparator + "host=" + host;
                    }
                    pod.$iconUrl = Kubernetes.defaultIconUrl;
                    _this.discoverPodConnections(pod);
                    pod.$containerPorts = [];
                    angular.forEach(Core.pathGet(pod, ["desiredState", "manifest", "containers"]), function (container) {
                        angular.forEach(container.ports, function (port) {
                            var containerPort = port.containerPort;
                            if (containerPort) {
                                pod.$containerPorts.push(containerPort);
                            }
                        });
                    });
                });
                this.services.forEach(function (service) {
                    if (!service.kind)
                        service.kind = "Service";
                    _this.servicesByKey[service._key] = service;
                    var selector = service.selector;
                    service.$pods = [];
                    service.$podCounters = selector ? Kubernetes.createPodCounters(selector, _this.pods, service.$pods) : null;
                    var selectedPods = service.$pods;
                    service.connectTo = selectedPods.map(function (pod) {
                        return pod._key;
                    }).join(',');
                    service.$labelsText = Kubernetes.labelsToString(service.labels);
                    _this.updateIconUrlAndAppInfo(service, "serviceNames");
                    var iconUrl = service.$iconUrl;
                    if (iconUrl && selectedPods) {
                        selectedPods.forEach(function (pod) {
                            pod.$iconUrl = iconUrl;
                        });
                    }
                });
                this.replicationControllers.forEach(function (replicationController) {
                    if (!replicationController.kind)
                        replicationController.kind = "ReplicationController";
                    _this.replicationControllersByKey[replicationController._key] = replicationController;
                    var selector = replicationController.desiredState.replicaSelector;
                    replicationController.$pods = [];
                    replicationController.$podCounters = selector ? Kubernetes.createPodCounters(selector, _this.pods, replicationController.$pods) : null;
                    var selectedPods = replicationController.$pods;
                    replicationController.connectTo = selectedPods.map(function (pod) {
                        return pod._key;
                    }).join(',');
                    replicationController.$labelsText = Kubernetes.labelsToString(replicationController.labels);
                    _this.updateIconUrlAndAppInfo(replicationController, "replicationControllerNames");
                    var iconUrl = replicationController.$iconUrl;
                    if (iconUrl && selectedPods) {
                        selectedPods.forEach(function (pod) {
                            pod.$iconUrl = iconUrl;
                        });
                    }
                });
                var tmpHosts = [];
                this.podsByHost = podsByHost;
                for (var hostKey in podsByHost) {
                    var hostPods = [];
                    var podCounters = Kubernetes.createPodCounters(function (pod) { return (pod.currentState || {}).host === hostKey; }, this.pods, hostPods, "host=" + hostKey);
                    var hostIP = null;
                    if (hostPods.length) {
                        var pod = hostPods[0];
                        var currentState = pod.currentState;
                        if (currentState) {
                            hostIP = currentState.hostIP;
                        }
                    }
                    var hostDetails = {
                        id: hostKey,
                        hostIP: hostIP,
                        pods: hostPods,
                        kind: "Host",
                        $podCounters: podCounters,
                        $iconUrl: Kubernetes.hostIconUrl
                    };
                    tmpHosts.push(hostDetails);
                }
                this.orRedraw(ArrayHelpers.removeElements(this.hosts, tmpHosts));
                tmpHosts.forEach(function (newHost) {
                    var oldHost = _this.hosts.find(function (h) {
                        return h.id === newHost.id;
                    });
                    if (!oldHost) {
                        _this.redraw = true;
                        _this.hosts.push(newHost);
                    }
                    else {
                        _this.orRedraw(ArrayHelpers.sync(oldHost.pods, newHost.pods));
                    }
                });
                this.updateApps();
                Kubernetes.updateNamespaces(this.kubernetes, this.pods, this.replicationControllers, this.services);
            }
        };
        KubernetesModelService.prototype.updateApps = function () {
            var _this = this;
            // lets create the app views by trying to join controllers / services / pods that are related
            var appViews = [];
            this.replicationControllers.forEach(function (replicationController) {
                var name = replicationController.name || replicationController.id;
                var $iconUrl = replicationController.$iconUrl;
                appViews.push({
                    appPath: "/dummyPath/" + name,
                    $name: name,
                    $info: {
                        $iconUrl: $iconUrl
                    },
                    $iconUrl: $iconUrl,
                    replicationControllers: [replicationController],
                    pods: replicationController.$pods || [],
                    services: []
                });
            });
            this.services.forEach(function (service) {
                // now lets see if we can find an app with an RC of the same selector
                var matchesApp = null;
                appViews.forEach(function (appView) {
                    appView.replicationControllers.forEach(function (replicationController) {
                        var repSelector = Core.pathGet(replicationController, ["desiredState", "replicaSelector"]);
                        if (repSelector && Kubernetes.selectorMatches(repSelector, service.selector) && service.namespace == replicationController.namespace) {
                            matchesApp = appView;
                        }
                    });
                });
                if (matchesApp) {
                    matchesApp.services.push(service);
                }
                else {
                    var name = service.name || service.id;
                    var $iconUrl = service.$iconUrl;
                    appViews.push({
                        appPath: "/dummyPath/" + name,
                        $name: name,
                        $info: {
                            $iconUrl: $iconUrl
                        },
                        $iconUrl: $iconUrl,
                        replicationControllers: [],
                        pods: service.$pods || [],
                        services: [service]
                    });
                }
            });
            angular.forEach(this.routes, function (route) {
                var metadata = route.metadata || {};
                var serviceName = route.serviceName;
                var host = route.host;
                var namespace = metadata.namespace || Kubernetes.defaultNamespace;
                if (serviceName && host) {
                    var service = _this.getService(namespace, serviceName);
                    if (service) {
                        service.$host = host;
                    }
                    else {
                        console.log("Could not find service " + serviceName + " namespace " + namespace + " for route: " + metadata.name);
                    }
                }
            });
            this.appViews = appViews;
            if (this.appInfos && this.appViews) {
                var folderMap = {};
                var folders = [];
                var appMap = {};
                angular.forEach(this.appInfos, function (appInfo) {
                    if (!appInfo.$iconUrl) {
                        appInfo.$iconUrl = Kubernetes.gitPathToUrl(appInfo.iconPath);
                    }
                    var appPath = appInfo.appPath;
                    if (appPath) {
                        appMap[appPath] = appInfo;
                        var idx = appPath.lastIndexOf("/");
                        var folderPath = "";
                        if (idx >= 0) {
                            folderPath = appPath.substring(0, idx);
                        }
                        folderPath = Core.trimLeading(folderPath, "/");
                        var folder = folderMap[folderPath];
                        if (!folder) {
                            folder = {
                                path: folderPath,
                                expanded: true,
                                apps: []
                            };
                            folders.push(folder);
                            folderMap[folderPath] = folder;
                        }
                        folder.apps.push(appInfo);
                    }
                });
                this.appFolders = folders.sortBy("path");
                var apps = [];
                var defaultInfo = {
                    $iconUrl: Kubernetes.defaultIconUrl
                };
                angular.forEach(this.appViews, function (appView) {
                    var appPath = appView.appPath;
                    /*
                     TODO
                     appView.$select = () => {
                     Kubernetes.setJson($scope, appView.id, $scope.model.apps);
                     };
                     */
                    var appInfo = angular.copy(defaultInfo);
                    if (appPath) {
                        appInfo = appMap[appPath] || appInfo;
                    }
                    if (!appView.$info) {
                        appView.$info = defaultInfo;
                        appView.$info = appInfo;
                    }
                    appView.id = appPath;
                    if (!appView.$name) {
                        appView.$name = appInfo.name || appView.$name;
                    }
                    if (!appView.$iconUrl) {
                        appView.$iconUrl = appInfo.$iconUrl;
                    }
                    apps.push(appView);
                    appView.$podCounters = Kubernetes.createAppViewPodCounters(appView);
                    appView.$serviceViews = Kubernetes.createAppViewServiceViews(appView);
                });
                //this.apps = apps;
                this.apps = this.appViews;
            }
        };
        KubernetesModelService.prototype.discoverPodConnections = function (entity) {
            var info = Core.pathGet(entity, ["currentState", "info"]);
            var hostPort = null;
            var currentState = entity.currentState || {};
            var desiredState = entity.desiredState || {};
            var podId = entity.id || entity.name;
            var host = currentState["host"];
            var podIP = currentState["podIP"];
            var hasDocker = false;
            var foundContainerPort = null;
            if (desiredState) {
                var containers = Core.pathGet(desiredState, ["manifest", "containers"]);
                angular.forEach(containers, function (container) {
                    if (!hostPort) {
                        var ports = container.ports;
                        angular.forEach(ports, function (port) {
                            if (!hostPort) {
                                var containerPort = port.containerPort;
                                var portName = port.name;
                                var containerHostPort = port.hostPort;
                                if (containerPort === 8778 || "jolokia" === portName) {
                                    if (containerPort) {
                                        if (podIP) {
                                            foundContainerPort = containerPort;
                                        }
                                        if (containerHostPort) {
                                            hostPort = containerHostPort;
                                        }
                                    }
                                }
                            }
                        });
                    }
                });
            }
            if (Kubernetes.isRunning(currentState) && podId && foundContainerPort) {
                entity.$jolokiaUrl = "/kubernetes/api/" + Kubernetes.defaultApiVersion + "/proxy/pods/" + podId + ":" + foundContainerPort + "/jolokia/";
            }
        };
        return KubernetesModelService;
    })();
    Kubernetes.KubernetesModelService = KubernetesModelService;
    /**
     * Creates a model service which keeps track of all the pods, replication controllers and services along
     * with their associations and status
     */
    function createKubernetesModel($rootScope, $http, AppLibraryURL, KubernetesApiURL, KubernetesState, KubernetesServices, KubernetesReplicationControllers, KubernetesPods) {
        var $scope = new KubernetesModelService();
        $scope.kubernetes = KubernetesState;
        KubernetesServices.then(function (KubernetesServices) {
            KubernetesReplicationControllers.then(function (KubernetesReplicationControllers) {
                KubernetesPods.then(function (KubernetesPods) {
                    $scope.fetch = PollHelpers.setupPolling($scope, function (next) {
                        var ready = 0;
                        var numServices = 5;
                        var dataChanged = false;
                        var changedResourceVersion = null;
                        function maybeNext(count) {
                            ready = count;
                            // log.debug("Completed: ", ready);
                            if (ready >= numServices) {
                                // log.debug("Fetching another round");
                                if (dataChanged) {
                                    Kubernetes.log.debug("kube model changed: resourceVersion: " + changedResourceVersion);
                                    $scope.maybeInit();
                                    $rootScope.$broadcast('kubernetesModelUpdated');
                                }
                                next();
                            }
                        }
                        function hasChanged(response, name) {
                            var resourceVersion = response.resourceVersion;
                            var lastResourceVersion = $scope.resourceVersions[name] || 0;
                            if (!resourceVersion || resourceVersion > lastResourceVersion) {
                                if (resourceVersion) {
                                    $scope.resourceVersions[name] = resourceVersion;
                                    changedResourceVersion = resourceVersion;
                                }
                                dataChanged = true;
                                return true;
                            }
                            return false;
                        }
                        KubernetesServices.query(function (response) {
                            if (response && hasChanged(response, "services")) {
                                var items = populateKeys((response.items || []).sortBy(byId));
                                angular.forEach(items, function (item) {
                                    Kubernetes.kubernetesProxyUrlForService(KubernetesApiURL, item).then(function (url) {
                                        item.proxyUrl = url;
                                    });
                                });
                                $scope.services = items;
                            }
                            maybeNext(ready + 1);
                        });
                        KubernetesReplicationControllers.query(function (response) {
                            if (response && hasChanged(response, "replicationControllers")) {
                                var items = populateKeys((response.items || []).sortBy(byId));
                                $scope.replicationControllers = items;
                            }
                            maybeNext(ready + 1);
                        });
                        KubernetesPods.query(function (response) {
                            if (response && hasChanged(response, "pods")) {
                                var items = populateKeys((response.items || []).sortBy(byId));
                                $scope.pods = items;
                            }
                            maybeNext(ready + 1);
                        });
                        var appsUrl = AppLibraryURL + "/apps";
                        var etags = $scope.resourceVersions["appLibrary"];
                        $http.get(appsUrl, {
                            headers: {
                                "If-None-Match": etags
                            }
                        }).success(function (data, status, headers, config) {
                            if (angular.isArray(data) && status === 200) {
                                var newETags = headers("etag") || headers("ETag");
                                if (!newETags || newETags !== etags) {
                                    if (newETags) {
                                        $scope.resourceVersions["appLibrary"] = newETags;
                                    }
                                    $scope.appInfos = data;
                                    dataChanged = true;
                                }
                            }
                            maybeNext(ready + 1);
                        }).error(function (data, status, headers, config) {
                            maybeNext(ready + 1);
                        });
                        var url = Kubernetes.routesRestURL;
                        $http.get(url).success(function (data, status, headers, config) {
                            if (data) {
                                $scope.routes = data.items;
                                $scope.isOpenShift = true;
                                maybeNext(ready + 1);
                            }
                        }).error(function (data, status, headers, config) {
                            Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
                            maybeNext(ready + 1);
                        });
                    });
                    $scope.fetch();
                });
            });
        });
        function selectPods(pods, namespace, labels) {
            return pods.filter(function (pod) {
                return pod.namespace === namespace && Kubernetes.selectorMatches(labels, pod.labels);
            });
        }
        return $scope;
    }
    Kubernetes.createKubernetesModel = createKubernetesModel;
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesModel.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes._module = angular.module(Kubernetes.pluginName, ['hawtio-core', 'hawtio-ui', 'wiki', 'restmod']);
    Kubernetes.controller = PluginHelpers.createControllerFunction(Kubernetes._module, Kubernetes.pluginName);
    Kubernetes.route = PluginHelpers.createRoutingFunction(Kubernetes.templatePath);
    Kubernetes._module.config(['$routeProvider', function ($routeProvider) {
        $routeProvider.when(UrlHelpers.join(Kubernetes.context, '/pods'), Kubernetes.route('pods.html', false)).when(UrlHelpers.join(Kubernetes.context, '/namespace/:namespace/podCreate'), Kubernetes.route('podCreate.html', false)).when(UrlHelpers.join(Kubernetes.context, '/namespace/:namespace/podEdit/:id'), Kubernetes.route('podEdit.html', false)).when(UrlHelpers.join(Kubernetes.context, '/namespace/:namespace/pods'), Kubernetes.route('pods.html', false)).when(UrlHelpers.join(Kubernetes.context, '/namespace/:namespace/pods/:id'), Kubernetes.route('pod.html', false)).when(UrlHelpers.join(Kubernetes.context, 'replicationControllers'), Kubernetes.route('replicationControllers.html', false)).when(UrlHelpers.join(Kubernetes.context, '/namespace/:namespace/replicationControllers'), Kubernetes.route('replicationControllers.html', false)).when(UrlHelpers.join(Kubernetes.context, '/namespace/:namespace/replicationControllers/:id'), Kubernetes.route('replicationController.html', false)).when(UrlHelpers.join(Kubernetes.context, '/namespace/:namespace/replicationControllerCreate'), Kubernetes.route('replicationControllerCreate.html', false)).when(UrlHelpers.join(Kubernetes.context, '/namespace/:namespace/replicationControllerEdit/:id'), Kubernetes.route('replicationControllerEdit.html', false)).when(UrlHelpers.join(Kubernetes.context, 'services'), Kubernetes.route('services.html', false)).when(UrlHelpers.join(Kubernetes.context, '/namespace/:namespace/services'), Kubernetes.route('services.html', false)).when(UrlHelpers.join(Kubernetes.context, '/namespace/:namespace/services/:id'), Kubernetes.route('service.html', false)).when(UrlHelpers.join(Kubernetes.context, '/namespace/:namespace/serviceCreate'), Kubernetes.route('serviceCreate.html', false)).when(UrlHelpers.join(Kubernetes.context, '/namespace/:namespace/serviceEdit/:id'), Kubernetes.route('serviceEdit.html', false)).when(UrlHelpers.join(Kubernetes.context, 'apps'), Kubernetes.route('apps.html', false)).when(UrlHelpers.join(Kubernetes.context, 'apps/:namespace'), Kubernetes.route('apps.html', false)).when(UrlHelpers.join(Kubernetes.context, 'hosts'), Kubernetes.route('hosts.html', false)).when(UrlHelpers.join(Kubernetes.context, 'hosts/:id'), Kubernetes.route('host.html', true)).when(UrlHelpers.join(Kubernetes.context, 'builds'), Kubernetes.route('builds.html', false)).when(UrlHelpers.join(Kubernetes.context, 'builds/:id'), Kubernetes.route('build.html', true)).when(UrlHelpers.join(Kubernetes.context, 'buildLogs/:id'), Kubernetes.route('buildLogs.html', true)).when(UrlHelpers.join(Kubernetes.context, 'buildConfigs'), Kubernetes.route('buildConfigs.html', false)).when(UrlHelpers.join(Kubernetes.context, 'buildConfigs/:id'), Kubernetes.route('buildConfig.html', true)).when(UrlHelpers.join(Kubernetes.context, 'buildConfigEdit/:id'), Kubernetes.route('buildConfigEdit.html', true)).when(UrlHelpers.join(Kubernetes.context, 'buildConfigCreate'), Kubernetes.route('buildConfigCreate.html', true)).when(UrlHelpers.join(Kubernetes.context, 'deploymentConfigs'), Kubernetes.route('deploymentConfigs.html', false)).when(UrlHelpers.join(Kubernetes.context, 'deploymentConfigs/:id'), Kubernetes.route('deploymentConfig.html', true)).when(UrlHelpers.join(Kubernetes.context, 'imageRepositories'), Kubernetes.route('imageRepositories.html', false)).when(UrlHelpers.join(Kubernetes.context, 'pipelines'), Kubernetes.route('pipelines.html', false)).when(UrlHelpers.join(Kubernetes.context, 'overview'), Kubernetes.route('overview.html', true)).when(Kubernetes.context, { redirectTo: UrlHelpers.join(Kubernetes.context, 'apps') });
    }]);
    // set up a promise that supplies the API URL for Kubernetes, proxied if necessary
    Kubernetes._module.factory('KubernetesApiURL', ['jolokiaUrl', 'jolokia', '$q', '$rootScope', function (jolokiaUrl, jolokia, $q, $rootScope) {
        var url = "/kubernetes/";
        var answer = $q.defer();
        answer.resolve(url);
        return answer.promise;
    }]);
    Kubernetes._module.factory('AppLibraryURL', ['$rootScope', function ($rootScope) {
        return "/kubernetes/api/" + Kubernetes.defaultApiVersion + "/proxy/services/app-library";
    }]);
    Kubernetes._module.factory('WikiGitUrlPrefix', function () {
        return "kubernetes/api/" + Kubernetes.defaultApiVersion + "/proxy/services/app-library";
    });
    Kubernetes._module.factory('wikiRepository', ["$location", "localStorage", function ($location, localStorage) {
        // TODO lets switch to using REST rather than jolokia soon for the wiki
        var url = "/kubernetes/api/" + Kubernetes.defaultApiVersion + "/proxy/services/app-library-jolokia/jolokia";
        // TODO what to use here...
        var user = "admin";
        var password = "admin";
        var jolokia = Core.createJolokia(url, user, password);
        var workspace = Core.createRemoteWorkspace(jolokia, $location, localStorage);
        return new Wiki.GitWikiRepository(function () {
            console.log("Creating a using the jolokia URL: " + url);
            var gitRepo = Git.createGitRepository(workspace, jolokia, localStorage);
            console.log("Got git based repo: " + gitRepo);
            return gitRepo;
        });
    }]);
    Kubernetes._module.factory('ConnectDialogService', ['$rootScope', function ($rootScope) {
        return {
            dialog: new UI.Dialog(),
            saveCredentials: false,
            userName: null,
            password: null,
            jolokiaUrl: null,
            containerName: null,
            view: null
        };
    }]);
    Kubernetes._module.filter('kubernetesPageLink', function () { return Kubernetes.entityPageLink; });
    function createResource(deferred, thing, urlTemplate, $rootScope, $resource, KubernetesApiURL) {
        KubernetesApiURL.then(function (KubernetesApiURL) {
            var url = UrlHelpers.escapeColons(KubernetesApiURL);
            Kubernetes.log.debug("Url for ", thing, ": ", url);
            var resource = $resource(UrlHelpers.join(url, urlTemplate), null, {
                query: { method: 'GET', isArray: false },
                save: { method: 'PUT', params: { id: '@id' } }
            });
            deferred.resolve(resource);
            Core.$apply($rootScope);
        }, function (response) {
            Kubernetes.log.debug("Failed to get rest API URL, can't create " + thing + " resource: ", response);
            deferred.reject(response);
            Core.$apply($rootScope);
        });
    }
    Kubernetes._module.factory('KubernetesVersion', ['$q', '$rootScope', '$resource', 'KubernetesApiURL', function ($q, $rootScope, $resource, KubernetesApiURL) {
        var answer = $q.defer();
        createResource(answer, 'pods', '/version', $rootScope, $resource, KubernetesApiURL);
        return answer.promise;
    }]);
    Kubernetes._module.factory('KubernetesPods', ['$q', '$rootScope', '$resource', 'KubernetesApiURL', function ($q, $rootScope, $resource, KubernetesApiURL) {
        var answer = $q.defer();
        createResource(answer, 'pods', '/api/' + Kubernetes.defaultApiVersion + '/pods/:id', $rootScope, $resource, KubernetesApiURL);
        return answer.promise;
    }]);
    Kubernetes._module.factory('KubernetesReplicationControllers', ['$q', '$rootScope', '$resource', 'KubernetesApiURL', function ($q, $rootScope, $resource, KubernetesApiURL) {
        var answer = $q.defer();
        createResource(answer, 'replication controllers', '/api/' + Kubernetes.defaultApiVersion + '/replicationControllers/:id', $rootScope, $resource, KubernetesApiURL);
        return answer.promise;
    }]);
    Kubernetes._module.factory('KubernetesServices', ['$q', '$rootScope', '$resource', 'KubernetesApiURL', function ($q, $rootScope, $resource, KubernetesApiURL) {
        var answer = $q.defer();
        createResource(answer, 'services', '/api/' + Kubernetes.defaultApiVersion + '/services/:id', $rootScope, $resource, KubernetesApiURL);
        return answer.promise;
    }]);
    Kubernetes._module.factory('KubernetesBuilds', ['restmod', function (restmod) {
        return restmod.model(Kubernetes.buildConfigsRestURL);
    }]);
    Kubernetes._module.factory('KubernetesSchema', ['SchemaRegistry', function (SchemaRegistry) {
        Kubernetes.configureSchema();
        SchemaRegistry.addSchema('kubernetes', Kubernetes.schema);
        // now lets iterate and add all the definitions too
        angular.forEach(Kubernetes.schema.definitions, function (definition, typeName) {
            SchemaRegistry.addSchema(typeName, definition);
            SchemaRegistry.addSchema("#/definitions/" + typeName, definition);
        });
        return Kubernetes.schema;
    }]);
    Kubernetes._module.factory('KubernetesState', [function () {
        return {
            namespaces: [],
            selectedNamespace: null
        };
    }]);
    Kubernetes._module.factory('ServiceRegistry', [function () {
        return new Kubernetes.ServiceRegistryService();
    }]);
    Kubernetes._module.factory('KubernetesModel', ['$rootScope', '$http', 'AppLibraryURL', 'KubernetesApiURL', 'KubernetesState', 'KubernetesServices', 'KubernetesReplicationControllers', 'KubernetesPods', function ($rootScope, $http, AppLibraryURL, KubernetesApiURL, KubernetesState, KubernetesServices, KubernetesReplicationControllers, KubernetesPods) {
        return Kubernetes.createKubernetesModel($rootScope, $http, AppLibraryURL, KubernetesApiURL, KubernetesState, KubernetesServices, KubernetesReplicationControllers, KubernetesPods);
    }]);
    Kubernetes._module.run(['viewRegistry', 'workspace', 'ServiceRegistry', 'HawtioNav', function (viewRegistry, workspace, ServiceRegistry, HawtioNav) {
        Kubernetes.log.debug("Running");
        viewRegistry['kubernetes'] = Kubernetes.templatePath + 'layoutKubernetes.html';
        var builder = HawtioNav.builder();
        var apps = builder.id('kube-apps').href(function () { return UrlHelpers.join(Kubernetes.context, 'apps'); }).title(function () { return 'Apps'; }).build();
        var services = builder.id('kube-services').href(function () { return UrlHelpers.join(Kubernetes.context, 'services'); }).title(function () { return 'Services'; }).build();
        var controllers = builder.id('kube-controllers').href(function () { return UrlHelpers.join(Kubernetes.context, 'replicationControllers'); }).title(function () { return 'Controllers'; }).build();
        var pods = builder.id('kube-pods').href(function () { return UrlHelpers.join(Kubernetes.context, 'pods'); }).title(function () { return 'Pods'; }).build();
        var hosts = builder.id('kube-hosts').href(function () { return UrlHelpers.join(Kubernetes.context, 'hosts'); }).title(function () { return 'Hosts'; }).build();
        var builds = builder.id('kube-builds').href(function () { return UrlHelpers.join(Kubernetes.context, 'builds'); }).title(function () { return 'Builds'; }).build();
        var buildConfigs = builder.id('kube-buildConfigs').href(function () { return UrlHelpers.join(Kubernetes.context, 'buildConfigs'); }).title(function () { return 'Build Configs'; }).build();
        var deploys = builder.id('kube-deploys').href(function () { return UrlHelpers.join(Kubernetes.context, 'deploymentConfigs'); }).title(function () { return 'Deploys'; }).build();
        var imageRepositories = builder.id('kube-imageRepositories').href(function () { return UrlHelpers.join(Kubernetes.context, 'imageRepositories'); }).title(function () { return 'Registries'; }).build();
        var pipelines = builder.id('kube-pipelines').href(function () { return UrlHelpers.join(Kubernetes.context, 'pipelines'); }).title(function () { return 'Pipelines'; }).build();
        var overview = builder.id('kube-overview').href(function () { return UrlHelpers.join(Kubernetes.context, 'overview'); }).title(function () { return 'Diagram'; }).build();
        var mainTab = builder.id('kubernetes').rank(200).defaultPage({
            rank: 200,
            isValid: function (yes, no) {
                // TODO not sure if we need the tree loaded for this
                var name = 'KubernetesDefaultPage';
                workspace.addNamedTreePostProcessor(name, function (tree) {
                    workspace.removeNamedTreePostProcessor(name);
                    if (!Core.isRemoteConnection() && Kubernetes.isKubernetes(workspace)) {
                        yes();
                    }
                    else {
                        no();
                    }
                });
            }
        }).href(function () { return Kubernetes.context; }).title(function () { return 'Kubernetes'; }).isValid(function () { return Kubernetes.isKubernetes(workspace); }).tabs(apps, services, controllers, pods, hosts, overview, builds, buildConfigs, deploys, imageRepositories, pipelines).build();
        HawtioNav.add(mainTab);
        // lets disable connect
        var navItems = HawtioNav.items || [];
        var connect = navItems.find(function (item) { return item.id === "jvm"; });
        if (connect) {
            connect.isValid = function () { return false; };
        }
        // images plugin doesn't work yet...
        var dockerRegistry = navItems.find(function (item) { return item.id === "docker-registry"; });
        if (dockerRegistry) {
            dockerRegistry.isValid = function () { return false; };
        }
        // disable the forge plugin tab
        var forge = navItems.find(function (item) { return item.id === "forge"; });
        if (forge) {
            forge.isValid = function () { return false; };
        }
        workspace.topLevelTabs.push({
            id: 'library',
            content: 'Library',
            title: 'View the library of applications',
            isValid: function (workspace) { return ServiceRegistry.hasService("app-library") && ServiceRegistry.hasService("app-library-jolokia"); },
            href: function () { return "/wiki/view"; },
            isActive: function (workspace) { return false; }
        });
        workspace.topLevelTabs.push({
            id: 'kibana',
            content: 'Logs',
            title: 'View and search all logs across all containers using Kibana and ElasticSearch',
            isValid: function (workspace) { return ServiceRegistry.hasService("kibana-service"); },
            href: function () { return Kubernetes.kibanaLogsLink(ServiceRegistry); },
            isActive: function (workspace) { return false; }
        });
        workspace.topLevelTabs.push({
            id: 'grafana',
            content: 'Metrics',
            title: 'Views metrics across all containers using Grafana and InfluxDB',
            isValid: function (workspace) { return ServiceRegistry.hasService("grafana-service"); },
            href: function () { return ServiceRegistry.serviceLink("grafana-service"); },
            isActive: function (workspace) { return false; }
        });
        // TODO we should move this to a nicer link inside the Library soon - also lets hide until it works...
        workspace.topLevelTabs.push({
            id: 'createProject',
            content: 'Create',
            title: 'Creates a new project',
            isValid: function (workspace) { return ServiceRegistry.hasService("app-library") && false; },
            href: function () { return "/project/create"; }
        });
    }]);
    hawtioPluginLoader.addModule(Kubernetes.pluginName);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.Apps = Kubernetes.controller("Apps", ["$scope", "KubernetesModel", "KubernetesServices", "KubernetesReplicationControllers", "KubernetesPods", "KubernetesState", "KubernetesApiURL", "$templateCache", "$location", "$routeParams", "$http", "$dialog", "$timeout", "workspace", "jolokia", function ($scope, KubernetesModel, KubernetesServices, KubernetesReplicationControllers, KubernetesPods, KubernetesState, KubernetesApiURL, $templateCache, $location, $routeParams, $http, $dialog, $timeout, workspace, jolokia) {
        $scope.model = KubernetesModel;
        $scope.$on('kubernetesModelUpdated', function () {
            Core.$apply($scope);
        });
        $scope.apps = [];
        $scope.allApps = [];
        $scope.kubernetes = KubernetesState;
        $scope.fetched = false;
        $scope.json = '';
        ControllerHelpers.bindModelToSearchParam($scope, $location, 'id', '_id', undefined);
        ControllerHelpers.bindModelToSearchParam($scope, $location, 'appSelectorShow', 'openApp', undefined);
        ControllerHelpers.bindModelToSearchParam($scope, $location, 'mode', 'mode', 'detail');
        var branch = $scope.branch || "master";
        var namespace = null;
        function appMatches(app) {
            var filterText = $scope.appSelector.filterText;
            if (filterText) {
                return Core.matchFilterIgnoreCase(app.groupId, filterText) || Core.matchFilterIgnoreCase(app.artifactId, filterText) || Core.matchFilterIgnoreCase(app.name, filterText) || Core.matchFilterIgnoreCase(app.description, filterText);
            }
            else {
                return true;
            }
        }
        function appRunning(app) {
            return $scope.model.apps.any(function (running) { return running.appPath === app.appPath; });
        }
        $scope.tableConfig = {
            data: 'model.apps',
            showSelectionCheckbox: true,
            enableRowClickSelection: false,
            multiSelect: true,
            selectedItems: [],
            filterOptions: {
                filterText: $location.search()["q"] || ''
            },
            columnDefs: [
                { field: 'icon', displayName: 'App', cellTemplate: $templateCache.get("appIconTemplate.html") },
                { field: 'services', displayName: 'Services', cellTemplate: $templateCache.get("appServicesTemplate.html") },
                { field: 'replicationControllers', displayName: 'Controllers', cellTemplate: $templateCache.get("appReplicationControllerTemplate.html") },
                { field: '$podsLink', displayName: 'Pods', cellTemplate: $templateCache.get("appPodCountsAndLinkTemplate.html") },
                { field: '$deployedText', displayName: 'Deployed', cellTemplate: $templateCache.get("appDeployedTemplate.html") },
                { field: 'namespace', displayName: 'Namespace' }
            ]
        };
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.expandedPods = [];
        $scope.podExpanded = function (pod) {
            var id = (pod || {}).id;
            return id && ($scope.expandedPods || []).indexOf(id) >= 0;
        };
        $scope.expandPod = function (pod) {
            var id = pod.id;
            if (id) {
                $scope.expandedPods.push(id);
            }
        };
        $scope.collapsePod = function (pod) {
            var id = pod.id;
            if (id) {
                $scope.expandedPods = $scope.expandedPods.remove(function (v) { return id === v; });
            }
        };
        $scope.$on('$routeUpdate', function ($event) {
            Kubernetes.setJson($scope, $location.search()['_id'], $scope.model.apps);
        });
        function deleteApp(app, onCompleteFn) {
            function deleteServices(services, service, onCompletedFn) {
                if (!service || !services) {
                    return onCompletedFn();
                }
                var id = service.id;
                if (!id) {
                    Kubernetes.log.warn("No ID for service " + angular.toJson(service));
                }
                else {
                    KubernetesServices.then(function (KubernetesServices) {
                        KubernetesServices.delete({
                            id: id
                        }, undefined, function () {
                            Kubernetes.log.debug("Deleted service: ", id);
                            deleteServices(services, services.shift(), onCompletedFn);
                        }, function (error) {
                            Kubernetes.log.debug("Error deleting service: ", error);
                            deleteServices(services, services.shift(), onCompletedFn);
                        });
                    });
                }
            }
            function deleteReplicationControllers(replicationControllers, replicationController, onCompletedFn) {
                if (!replicationController || !replicationControllers) {
                    return onCompletedFn();
                }
                var id = replicationController.id;
                if (!id) {
                    Kubernetes.log.warn("No ID for replicationController " + angular.toJson(replicationController));
                }
                else {
                    KubernetesReplicationControllers.then(function (KubernetesReplicationControllers) {
                        KubernetesReplicationControllers.delete({
                            id: id
                        }, undefined, function () {
                            Kubernetes.log.debug("Deleted replicationController: ", id);
                            deleteReplicationControllers(replicationControllers, replicationControllers.shift(), onCompletedFn);
                        }, function (error) {
                            Kubernetes.log.debug("Error deleting replicationController: ", error);
                            deleteReplicationControllers(replicationControllers, replicationControllers.shift(), onCompletedFn);
                        });
                    });
                }
            }
            function deletePods(pods, pod, onCompletedFn) {
                if (!pod || !pods) {
                    return onCompletedFn();
                }
                var id = pod.id;
                if (!id) {
                    Kubernetes.log.warn("No ID for pod " + angular.toJson(pod));
                }
                else {
                    KubernetesPods.then(function (KubernetesPods) {
                        KubernetesPods.delete({
                            id: id
                        }, undefined, function () {
                            Kubernetes.log.debug("Deleted pod: ", id);
                            deletePods(pods, pods.shift(), onCompletedFn);
                        }, function (error) {
                            Kubernetes.log.debug("Error deleting pod: ", error);
                            deletePods(pods, pods.shift(), onCompletedFn);
                        });
                    });
                }
            }
            var services = [].concat(app.services);
            deleteServices(services, services.shift(), function () {
                var replicationControllers = [].concat(app.replicationControllers);
                deleteReplicationControllers(replicationControllers, replicationControllers.shift(), function () {
                    var pods = [].concat(app.pods);
                    deletePods(pods, pods.shift(), onCompleteFn);
                });
            });
        }
        $scope.deletePrompt = function (selected) {
            if (angular.isString(selected)) {
                selected = [{
                    id: selected
                }];
            }
            UI.multiItemConfirmActionDialog({
                collection: selected,
                index: '$name',
                onClose: function (result) {
                    if (result) {
                        function deleteSelected(selected, next) {
                            if (next) {
                                var id = next.name;
                                Kubernetes.log.debug("deleting: ", id);
                                deleteApp(next, function () {
                                    Kubernetes.log.debug("deleted: ", id);
                                    deleteSelected(selected, selected.shift());
                                });
                            }
                        }
                        deleteSelected(selected, selected.shift());
                    }
                },
                title: 'Delete Apps?',
                action: 'The following Apps will be deleted:',
                okText: 'Delete',
                okClass: 'btn-danger',
                custom: "This operation is permanent once completed!",
                customClass: "alert alert-warning"
            }).open();
        };
        $scope.appSelector = {
            filterText: "",
            folders: [],
            selectedApps: [],
            isOpen: function (folder) {
                if ($scope.appSelector.filterText !== '' || folder.expanded) {
                    return "opened";
                }
                return "closed";
            },
            getSelectedClass: function (app) {
                if (app.abstract) {
                    return "abstract";
                }
                if (app.selected) {
                    return "selected";
                }
                return "";
            },
            showApp: function (app) {
                return appMatches(app) && !appRunning(app);
            },
            showFolder: function (folder) {
                return !$scope.appSelector.filterText || folder.apps.some(function (app) { return appMatches(app) && !appRunning(app); });
            },
            clearSelected: function () {
                angular.forEach($scope.model.appFolders, function (folder) {
                    angular.forEach(folder.apps, function (app) {
                        app.selected = false;
                    });
                });
                $scope.appSelector.selectedApps = [];
                Core.$apply($scope);
            },
            updateSelected: function () {
                // lets update the selected apps
                var selectedApps = [];
                angular.forEach($scope.model.appFolders, function (folder) {
                    var apps = folder.apps.filter(function (app) { return app.selected; });
                    if (apps) {
                        selectedApps = selectedApps.concat(apps);
                    }
                });
                $scope.appSelector.selectedApps = selectedApps.sortBy("name");
            },
            select: function (app, flag) {
                app.selected = flag;
                $scope.appSelector.updateSelected();
            },
            hasSelection: function () {
                return $scope.model.appFolders.any(function (folder) { return folder.apps.any(function (app) { return app.selected; }); });
            },
            runSelectedApps: function () {
                // lets run all the selected apps
                angular.forEach($scope.appSelector.selectedApps, function (app) {
                    var name = app.name;
                    var metadataPath = app.metadataPath;
                    if (metadataPath) {
                        // lets load the json/yaml
                        //var url = gitPathToUrl(Wiki.gitRelativeURL(branch, metadataPath));
                        var url = Kubernetes.gitPathToUrl(metadataPath, branch);
                        if (url) {
                            $http.get(url).success(function (data, status, headers, config) {
                                if (data) {
                                    // lets convert the json object structure into a string
                                    var json = angular.toJson(data);
                                    var fn = function () {
                                    };
                                    Kubernetes.runApp($location, $scope, $http, KubernetesApiURL, json, name, fn, namespace);
                                }
                            }).error(function (data, status, headers, config) {
                                $scope.summaryHtml = null;
                                Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
                            });
                        }
                    }
                });
                // lets go back to the apps view
                $scope.appSelector.clearSelected();
                $scope.appSelectorShow = false;
            }
        };
        ;
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.BuildController = Kubernetes.controller("BuildController", ["$scope", "KubernetesModel", "KubernetesState", "KubernetesSchema", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesState, KubernetesSchema, $templateCache, $location, $routeParams, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.id = $routeParams["id"];
        $scope.schema = KubernetesSchema;
        $scope.config = KubernetesSchema.definitions.os_build_Build;
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.$on('kubernetesModelUpdated', function () {
            updateData();
        });
        $scope.$on('$routeUpdate', function ($event) {
            updateData();
        });
        updateData();
        function updateData() {
            $scope.item = null;
            if ($scope.id) {
                var url = Kubernetes.buildRestUrl($scope.id);
                $http.get(url).success(function (data, status, headers, config) {
                    if (data) {
                        $scope.entity = Kubernetes.enrichBuild(data);
                    }
                    $scope.fetched = true;
                    Core.$apply($scope);
                }).error(function (data, status, headers, config) {
                    Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
                });
            }
            else {
                $scope.fetched = true;
                Core.$apply($scope);
            }
        }
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.BuildConfigController = Kubernetes.controller("BuildConfigController", ["$scope", "KubernetesModel", "KubernetesState", "KubernetesSchema", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesState, KubernetesSchema, $templateCache, $location, $routeParams, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.id = $routeParams["id"];
        $scope.schema = KubernetesSchema;
        $scope.config = KubernetesSchema.definitions.os_build_BuildConfig;
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.$on('kubernetesModelUpdated', function () {
            updateData();
        });
        $scope.$on('$routeUpdate', function ($event) {
            updateData();
        });
        updateData();
        function updateData() {
            $scope.item = null;
            if ($scope.id) {
                var url = Kubernetes.buildConfigRestUrl($scope.id);
                $http.get(url).success(function (data, status, headers, config) {
                    if (data) {
                        $scope.entity = data;
                        var sortedBuilds = null;
                        Kubernetes.enrichBuildConfig(data, sortedBuilds);
                    }
                    $scope.fetched = true;
                    Core.$apply($scope);
                }).error(function (data, status, headers, config) {
                    Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
                });
            }
            else {
                $scope.fetched = true;
                Core.$apply($scope);
            }
        }
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.BuildConfigEditController = Kubernetes.controller("BuildConfigEditController", ["$scope", "KubernetesModel", "KubernetesState", "KubernetesSchema", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesState, KubernetesSchema, $templateCache, $location, $routeParams, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.id = $routeParams["id"];
        $scope.schema = KubernetesSchema;
        $scope.config = KubernetesSchema.definitions.os_build_BuildConfig;
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.$on('kubernetesModelUpdated', function () {
            updateData();
        });
        $scope.$on('$routeUpdate', function ($event) {
            updateData();
        });
        updateData();
        function updateData() {
            $scope.item = null;
            if ($scope.id) {
                var url = Kubernetes.buildConfigRestUrl;
                $http.get(url).success(function (data, status, headers, config) {
                    if (data) {
                        $scope.entity = data;
                    }
                    $scope.fetched = true;
                    Core.$apply($scope);
                }).error(function (data, status, headers, config) {
                    Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
                });
            }
            else {
                $scope.fetched = true;
                // TODO default to the right registry URL...
                var defaultRegistry = "172.30.17.189:5000";
                $scope.entity = {
                    "apiVersion": "v1beta1",
                    "kind": "BuildConfig",
                    "metadata": {
                        "name": "",
                        "labels": {
                            "name": ""
                        }
                    },
                    "parameters": {
                        "output": {
                            "imageTag": "",
                            "registry": defaultRegistry
                        },
                        "source": {
                            "git": {
                                "uri": ""
                            },
                            "type": "Git"
                        },
                        "strategy": {
                            "stiStrategy": {
                                "builderImage": "fabric8/base-sti"
                            },
                            "type": "STI"
                        }
                    },
                    "triggers": []
                };
                Core.$apply($scope);
            }
        }
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.BuildConfigsController = Kubernetes.controller("BuildConfigsController", ["$scope", "KubernetesModel", "KubernetesBuilds", "KubernetesState", "$dialog", "$window", "$templateCache", "$routeParams", "$location", "localStorage", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesBuilds, KubernetesState, $dialog, $window, $templateCache, $routeParams, $location, localStorage, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.KubernetesBuilds = KubernetesBuilds;
        $scope.$on('kubernetesModelUpdated', function () {
            Core.$apply($scope);
        });
        $scope.tableConfig = {
            data: 'buildConfigs',
            showSelectionCheckbox: true,
            enableRowClickSelection: false,
            multiSelect: true,
            selectedItems: [],
            filterOptions: {
                filterText: $location.search()["q"] || ''
            },
            columnDefs: [
                {
                    field: 'metadata.name',
                    displayName: 'Name',
                    cellTemplate: $templateCache.get("buildConfigLinkTemplate.html")
                },
                {
                    field: 'parameters.source.type',
                    displayName: 'Source'
                },
                {
                    field: 'parameters.source.git.uri',
                    displayName: 'Repository'
                },
                {
                    field: 'parameters.strategy.type',
                    displayName: 'Strategy'
                },
                {
                    field: 'parameters.strategy.stiStrategy.image',
                    displayName: 'Source Image'
                },
                {
                    field: 'parameters.output.imageTag',
                    displayName: 'Output Image'
                }
            ]
        };
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.deletePrompt = function (selected) {
            UI.multiItemConfirmActionDialog({
                collection: selected,
                index: '$name',
                onClose: function (result) {
                    if (result) {
                        function deleteSelected(selected, next) {
                            if (next) {
                                deleteEntity(next, function () {
                                    deleteSelected(selected, selected.shift());
                                });
                            }
                            else {
                                updateData();
                            }
                        }
                        deleteSelected(selected, selected.shift());
                    }
                },
                title: 'Delete Build Configs?',
                action: 'The following Build Configs will be deleted:',
                okText: 'Delete',
                okClass: 'btn-danger',
                custom: "This operation is permanent once completed!",
                customClass: "alert alert-warning"
            }).open();
        };
        function deleteEntity(selection, nextCallback) {
            var name = (selection || {}).$name;
            if (name) {
                console.log("About to delete build config: " + name);
                var url = Kubernetes.buildConfigRestUrl(name);
                $http.delete(url).success(function (data, status, headers, config) {
                    nextCallback();
                }).error(function (data, status, headers, config) {
                    Kubernetes.log.warn("Failed to delete build config on " + url + " " + data + " " + status);
                });
            }
            else {
                console.log("warning: no name for selection: " + angular.toJson(selection));
            }
        }
        function updateData() {
            var url = Kubernetes.buildConfigsRestURL;
            $http.get(url).success(function (data, status, headers, config) {
                if (data) {
                    //console.log("got data " + angular.toJson(data, true));
                    var sortedBuilds = null;
                    $scope.buildConfigs = Kubernetes.enrichBuildConfigs(data.items, sortedBuilds);
                    $scope.fetched = true;
                    Core.$apply($scope);
                }
            }).error(function (data, status, headers, config) {
                Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
            });
        }
        updateData();
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.BuildLogsController = Kubernetes.controller("BuildLogsController", ["$scope", "KubernetesModel", "KubernetesState", "KubernetesSchema", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesState, KubernetesSchema, $templateCache, $location, $routeParams, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.id = $routeParams["id"];
        $scope.schema = KubernetesSchema;
        $scope.config = KubernetesSchema.definitions.os_build_Build;
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.$on('kubernetesModelUpdated', function () {
            updateData();
        });
        $scope.$on('$routeUpdate', function ($event) {
            updateData();
        });
        $scope.logsText = "Loading logs...";
        updateData();
        function updateData() {
            $scope.item = null;
            if ($scope.id) {
                var url = Kubernetes.buildRestUrl($scope.id);
                $http.get(url).success(function (data, status, headers, config) {
                    if (data) {
                        $scope.entity = Kubernetes.enrichBuild(data);
                    }
                    $scope.fetched = true;
                    Core.$apply($scope);
                }).error(function (data, status, headers, config) {
                    Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
                });
                url = Kubernetes.buildLogsRestUrl($scope.id);
                $http.get(url).success(function (data, status) {
                    $scope.logsText = data;
                    Core.$apply($scope);
                }).error(function (data, status) {
                    $scope.logsText = "Failed to load logs from: " + url + " " + data + " status: " + status;
                    Core.$apply($scope);
                }).catch(function (error) {
                    $scope.logsText = "Failed to load logs: " + angular.toJson(error, true);
                    Core.$apply($scope);
                });
            }
            else {
                $scope.fetched = true;
                Core.$apply($scope);
            }
        }
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.BuildsController = Kubernetes.controller("BuildsController", ["$scope", "KubernetesModel", "KubernetesBuilds", "KubernetesState", "$dialog", "$window", "$templateCache", "$routeParams", "$location", "localStorage", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesBuilds, KubernetesState, $dialog, $window, $templateCache, $routeParams, $location, localStorage, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.KubernetesBuilds = KubernetesBuilds;
        $scope.$on('kubernetesModelUpdated', function () {
            Core.$apply($scope);
        });
        $scope.tableConfig = {
            data: 'builds',
            showSelectionCheckbox: true,
            enableRowClickSelection: false,
            multiSelect: true,
            selectedItems: [],
            filterOptions: {
                filterText: $location.search()["q"] || ''
            },
            columnDefs: [
                {
                    field: 'metadata.name',
                    displayName: 'Name',
                    cellTemplate: $templateCache.get("buildLinkTemplate.html")
                },
                {
                    field: '$creationDate',
                    displayName: 'Time',
                    defaultSort: true,
                    cellTemplate: $templateCache.get("buildTimeTemplate.html")
                },
                {
                    field: 'status',
                    displayName: 'Status',
                    cellTemplate: $templateCache.get("buildStatusTemplate.html")
                },
                {
                    field: '$logsLink',
                    displayName: 'Logs',
                    cellTemplate: $templateCache.get("buildLogsTemplate.html")
                },
                {
                    field: '$podLink',
                    displayName: 'Build Pod',
                    cellTemplate: $templateCache.get("buildPodTemplate.html")
                },
                {
                    field: 'parameters.source.git.uri',
                    displayName: 'Repository',
                    cellTemplate: $templateCache.get("buildRepositoryTemplate.html")
                },
                {
                    field: 'parameters.strategy.type',
                    displayName: 'Strategy'
                },
                {
                    field: 'parameters.strategy.stiStrategy.image',
                    displayName: 'Source Image'
                },
                {
                    field: 'parameters.output.imageTag',
                    displayName: 'Output Image'
                }
            ]
        };
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.$keepPolling = function () { return Kubernetes.keepPollingModel; };
        $scope.fetch = PollHelpers.setupPolling($scope, function (next) {
            var url = Kubernetes.buildsRestURL;
            $http.get(url).success(function (data, status, headers, config) {
                if (data) {
                    //console.log("got data " + angular.toJson(data, true));
                    $scope.builds = Kubernetes.enrichBuilds(data.items);
                    $scope.fetched = true;
                }
                Core.$apply($scope);
                next();
            }).error(function (data, status, headers, config) {
                Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
                Core.$apply($scope);
                next();
            });
        });
        $scope.fetch();
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    // controller for connecting to a remote container via jolokia
    Kubernetes.ConnectController = Kubernetes.controller("ConnectController", [
        "$scope",
        "localStorage",
        "userDetails",
        "ConnectDialogService",
        function ($scope, localStorage, userDetails, ConnectDialogService) {
            $scope.connect = ConnectDialogService;
            $scope.onOK = function () {
                var userName = $scope.connect.userName;
                var password = $scope.connect.password;
                if (!userDetails.password) {
                    // this can get unset if the user happens to refresh and hasn't checked rememberMe
                    userDetails.password = password;
                }
                if ($scope.connect.saveCredentials) {
                    $scope.connect.saveCredentials = false;
                    if (userName) {
                        localStorage['kuberentes.userName'] = userName;
                    }
                    if (password) {
                        localStorage['kuberentes.password'] = password;
                    }
                }
                Kubernetes.log.info("Connecting to " + $scope.connect.jolokiaUrl + " for container: " + $scope.connect.containerName + " user: " + $scope.connect.userName);
                var options = Core.createConnectOptions({
                    jolokiaUrl: $scope.connect.jolokiaUrl,
                    userName: userName,
                    password: password,
                    useProxy: true,
                    view: $scope.connect.view,
                    name: $scope.connect.containerName
                });
                Core.connectToServer(localStorage, options);
                setTimeout(function () {
                    $scope.connect.dialog.close();
                    Core.$apply($scope);
                }, 100);
            };
            $scope.doConnect = function (entity) {
                if (userDetails) {
                    $scope.connect.userName = userDetails.username;
                    $scope.connect.password = userDetails.password;
                }
                $scope.connect.jolokiaUrl = entity.$jolokiaUrl;
                $scope.connect.containerName = entity.id;
                //$scope.connect.view = "#/openlogs";
                var alwaysPrompt = localStorage['fabricAlwaysPrompt'];
                if ((alwaysPrompt && alwaysPrompt !== "false") || !$scope.connect.userName || !$scope.connect.password) {
                    $scope.connect.dialog.open();
                }
                else {
                    $scope.connect.onOK();
                }
            };
        }
    ]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.DeploymentConfigController = Kubernetes.controller("DeploymentConfigController", ["$scope", "KubernetesModel", "KubernetesState", "KubernetesSchema", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesState, KubernetesSchema, $templateCache, $location, $routeParams, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.id = $routeParams["id"];
        $scope.schema = KubernetesSchema;
        $scope.config = KubernetesSchema.definitions.os_deploy_DeploymentConfig;
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.$on('kubernetesModelUpdated', function () {
            updateData();
        });
        $scope.$on('$routeUpdate', function ($event) {
            updateData();
        });
        updateData();
        function updateData() {
            $scope.item = null;
            if ($scope.id) {
                var url = Kubernetes.deploymentConfigRestUrl($scope.id);
                $http.get(url).success(function (data, status, headers, config) {
                    if (data) {
                        $scope.entity = data;
                        Kubernetes.enrichDeploymentConfig(data);
                    }
                    $scope.fetched = true;
                    Core.$apply($scope);
                }).error(function (data, status, headers, config) {
                    Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
                });
            }
            else {
                $scope.fetched = true;
                Core.$apply($scope);
            }
        }
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.DeploymentConfigsController = Kubernetes.controller("DeploymentConfigsController", ["$scope", "KubernetesModel", "KubernetesBuilds", "KubernetesState", "$dialog", "$window", "$templateCache", "$routeParams", "$location", "localStorage", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesBuilds, KubernetesState, $dialog, $window, $templateCache, $routeParams, $location, localStorage, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.KubernetesBuilds = KubernetesBuilds;
        $scope.$on('kubernetesModelUpdated', function () {
            Core.$apply($scope);
        });
        $scope.labelClass = Kubernetes.containerLabelClass;
        $scope.tableConfig = {
            data: 'deploymentConfigs',
            showSelectionCheckbox: true,
            enableRowClickSelection: false,
            multiSelect: true,
            selectedItems: [],
            filterOptions: {
                filterText: $location.search()["q"] || ''
            },
            columnDefs: [
                {
                    field: 'metadata.name',
                    displayName: 'Name',
                    cellTemplate: $templateCache.get("deploymentConfigLinkTemplate.html")
                },
                {
                    field: 'metadata.namespace',
                    displayName: 'Namespace'
                },
                {
                    field: '$imageChangeParams.automatic',
                    displayName: 'Automatic'
                },
                {
                    field: '$imageChangeParams.$containerNames',
                    displayName: 'Container Names'
                },
                {
                    field: '$imageChangeParams.from.name',
                    displayName: 'From image'
                },
                {
                    field: '$imageChangeParams.tag',
                    displayName: 'Tag'
                },
                {
                    field: 'template.controllerTemplate.podTemplate.tags',
                    displayName: 'Labels',
                    cellTemplate: $templateCache.get("deploymentConfigLabelTemplate.html")
                }
            ]
        };
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.deletePrompt = function (selected) {
            UI.multiItemConfirmActionDialog({
                collection: selected,
                index: '$name',
                onClose: function (result) {
                    if (result) {
                        function deleteSelected(selected, next) {
                            if (next) {
                                deleteEntity(next, function () {
                                    deleteSelected(selected, selected.shift());
                                });
                            }
                            else {
                                updateData();
                            }
                        }
                        deleteSelected(selected, selected.shift());
                    }
                },
                title: 'Delete Deployment?',
                action: 'The following Deployments will be deleted:',
                okText: 'Delete',
                okClass: 'btn-danger',
                custom: "This operation is permanent once completed!",
                customClass: "alert alert-warning"
            }).open();
        };
        function deleteEntity(selection, nextCallback) {
            var name = (selection || {}).$name;
            if (name) {
                console.log("About to delete deployment config: " + name);
                var url = Kubernetes.deploymentConfigRestUrl(name);
                $http.delete(url).success(function (data, status, headers, config) {
                    nextCallback();
                }).error(function (data, status, headers, config) {
                    Kubernetes.log.warn("Failed to delete deployment config on " + url + " " + data + " " + status);
                });
            }
            else {
                console.log("warning: no name for selection: " + angular.toJson(selection));
            }
        }
        function updateData() {
            var url = Kubernetes.deploymentConfigsRestURL;
            $http.get(url).success(function (data, status, headers, config) {
                if (data) {
                    //console.log("got data " + angular.toJson(data, true));
                    $scope.deploymentConfigs = Kubernetes.enrichDeploymentConfigs(data.items);
                    $scope.fetched = true;
                    Core.$apply($scope);
                }
            }).error(function (data, status, headers, config) {
                Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
            });
        }
        updateData();
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.HostController = Kubernetes.controller("HostController", ["$scope", "KubernetesModel", "KubernetesState", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesState, $templateCache, $location, $routeParams, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.itemConfig = {
            properties: {}
        };
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.$on('kubernetesModelUpdated', function () {
            updateData();
        });
        $scope.$on('$routeUpdate', function ($event) {
            updateData();
        });
        updateData();
        function updateData() {
            $scope.id = $routeParams["id"];
            $scope.item = null;
            if ($scope.id) {
                KubernetesApiURL.then(function (KubernetesApiURL) {
                    var url = UrlHelpers.join(KubernetesApiURL, "/api/" + Kubernetes.defaultApiVersion + "/" + "minions", $scope.id);
                    $http.get(url).success(function (data, status, headers, config) {
                        if (data) {
                            $scope.item = data;
                        }
                        Core.$apply($scope);
                    }).error(function (data, status, headers, config) {
                        Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
                    });
                });
            }
            else {
                Core.$apply($scope);
            }
        }
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.HostsController = Kubernetes.controller("HostsController", ["$scope", "KubernetesModel", "KubernetesPods", "KubernetesState", "ServiceRegistry", "$dialog", "$window", "$templateCache", "$routeParams", "$location", "localStorage", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesPods, KubernetesState, ServiceRegistry, $dialog, $window, $templateCache, $routeParams, $location, localStorage, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.$on('kubernetesModelUpdated', function () {
            Core.$apply($scope);
        });
        $scope.tableConfig = {
            data: 'model.hosts',
            showSelectionCheckbox: true,
            enableRowClickSelection: false,
            multiSelect: true,
            selectedItems: [],
            filterOptions: {
                filterText: $location.search()["q"] || ''
            },
            columnDefs: [
                {
                    field: 'id',
                    displayName: 'Name',
                    defaultSort: true,
                    cellTemplate: $templateCache.get("idTemplate.html")
                },
                {
                    field: 'hostIP',
                    displayName: 'IP'
                },
                { field: '$podsLink', displayName: 'Pods', cellTemplate: $templateCache.get("podCountsAndLinkTemplate.html") }
            ]
        };
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.ImageRepositoriesController = Kubernetes.controller("ImageRepositoriesController", ["$scope", "KubernetesModel", "KubernetesBuilds", "KubernetesState", "$dialog", "$window", "$templateCache", "$routeParams", "$location", "localStorage", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesBuilds, KubernetesState, $dialog, $window, $templateCache, $routeParams, $location, localStorage, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.KubernetesBuilds = KubernetesBuilds;
        $scope.$on('kubernetesModelUpdated', function () {
            Core.$apply($scope);
        });
        $scope.tableConfig = {
            data: 'imageRepositories',
            showSelectionCheckbox: true,
            enableRowClickSelection: false,
            multiSelect: true,
            selectedItems: [],
            filterOptions: {
                filterText: $location.search()["q"] || ''
            },
            columnDefs: [
                {
                    field: 'metadata.name',
                    displayName: 'Name'
                },
                {
                    field: 'metadata.namespace',
                    displayName: 'Namespace'
                },
                {
                    field: 'status.dockerImageRepository',
                    displayName: 'Docker Registry'
                },
                {
                    field: 'tags',
                    displayName: 'Tags',
                    cellTemplate: $templateCache.get('imageRegistryLabelTemplate.html')
                }
            ]
        };
        var labelColors = {
            'prod': 'background-blue',
            'valid': 'background-light-green',
            'test': 'background-light-grey'
        };
        $scope.labelClass = function (labelType) {
            if (!(labelType in labelColors)) {
                return 'mouse-pointer';
            }
            else
                return labelColors[labelType] + ' mouse-pointer';
        };
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.deletePrompt = function (selected) {
            UI.multiItemConfirmActionDialog({
                collection: selected,
                index: '$name',
                onClose: function (result) {
                    if (result) {
                        function deleteSelected(selected, next) {
                            if (next) {
                                deleteEntity(next, function () {
                                    deleteSelected(selected, selected.shift());
                                });
                            }
                            else {
                                updateData();
                            }
                        }
                        deleteSelected(selected, selected.shift());
                    }
                },
                title: 'Delete Image Repository?',
                action: 'The following Image Repositories will be deleted:',
                okText: 'Delete',
                okClass: 'btn-danger',
                custom: "This operation is permanent once completed!",
                customClass: "alert alert-warning"
            }).open();
        };
        function deleteEntity(selection, nextCallback) {
            var name = (selection || {}).$name;
            if (name) {
                console.log("About to delete image repository: " + name);
                var url = Kubernetes.imageRepositoryRestUrl(name);
                $http.delete(url).success(function (data, status, headers, config) {
                    nextCallback();
                }).error(function (data, status, headers, config) {
                    Kubernetes.log.warn("Failed to delete image repository on " + url + " " + data + " " + status);
                });
            }
            else {
                console.log("warning: no name for selection: " + angular.toJson(selection));
            }
        }
        function updateData() {
            var url = Kubernetes.imageRepositoriesRestURL;
            $http.get(url).success(function (data, status, headers, config) {
                if (data) {
                    //console.log("got data " + angular.toJson(data, true));
                    $scope.imageRepositories = Kubernetes.enrichImageRepositories(data.items);
                    $scope.fetched = true;
                    Core.$apply($scope);
                }
            }).error(function (data, status, headers, config) {
                Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
            });
        }
        updateData();
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.KubernetesJsonDirective = Kubernetes._module.directive("kubernetesJson", [function () {
        return {
            restrict: 'A',
            replace: true,
            templateUrl: Kubernetes.templatePath + 'kubernetesJsonDirective.html',
            scope: {
                config: '=kubernetesJson'
            },
            controller: ["$scope", "$location", "$http", "KubernetesApiURL", "marked", function ($scope, $location, $http, KubernetesApiURL, marked) {
                $scope.$watch('config', function (config) {
                    if (config) {
                        if (config.error) {
                            Kubernetes.log.debug("Error parsing kubernetes config: ", config.error);
                        }
                        else {
                            Kubernetes.log.debug("Got kubernetes configuration: ", config);
                        }
                    }
                    else {
                        Kubernetes.log.debug("Kubernetes config unset");
                    }
                });
                $scope.$on('Wiki.ViewPage.Children', function ($event, pageId, children) {
                    // log.debug("Got broadcast, pageId: ", pageId, " children: ", children);
                    $scope.appTitle = pageId;
                    if (children) {
                        var summaryFile = children.find(function (child) {
                            return child.name.toLowerCase() === "summary.md";
                        });
                        var summaryURL = null;
                        if (summaryFile) {
                            summaryURL = Wiki.gitRestURL(summaryFile.branch, summaryFile.path);
                            $http.get(summaryURL).success(function (data, status, headers, config) {
                                var summaryMarkdown = data;
                                if (summaryMarkdown) {
                                    $scope.summaryHtml = marked(summaryMarkdown);
                                }
                                else {
                                    $scope.summaryHtml = null;
                                }
                            }).error(function (data, status, headers, config) {
                                $scope.summaryHtml = null;
                                Kubernetes.log.warn("Failed to load " + summaryURL + " " + data + " " + status);
                            });
                        }
                        var iconFile = children.find(function (child) {
                            return child.name.toLowerCase().startsWith("icon");
                        });
                        if (iconFile) {
                            $scope.iconURL = Wiki.gitRestURL(iconFile.branch, iconFile.path);
                        }
                        var fabric8PropertiesFile = children.find(function (child) {
                            return child.name.toLowerCase() === "fabric8.properties";
                        });
                        var fabric8PropertiesURL = null;
                        if (fabric8PropertiesFile) {
                            fabric8PropertiesURL = Wiki.gitRestURL(fabric8PropertiesFile.branch, fabric8PropertiesFile.path);
                            $http.get(fabric8PropertiesURL).success(function (data, status, headers, config) {
                                var fabric8Properties = data;
                                if (fabric8Properties) {
                                    var nameRE = /(?:name)\s*=\s*(.+)[\n|$]/;
                                    var matches = fabric8Properties.match(nameRE);
                                    if (matches[1]) {
                                        $scope.displayName = matches[1].replace(/\\/g, '');
                                    }
                                }
                            }).error(function (data, status, headers, config) {
                                Kubernetes.log.warn("Failed to load " + fabric8PropertiesURL + " " + data + " " + status);
                            });
                        }
                    }
                });
                $scope.apply = function () {
                    var json = angular.toJson($scope.config);
                    var name = $scope.appTitle || "App";
                    Kubernetes.runApp($location, $scope, $http, KubernetesApiURL, json, name, function () {
                        // now lets navigate to the apps page so folks see things happen
                        $location.url("/kubernetes/apps");
                    });
                };
            }]
        };
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.FileDropController = Kubernetes.controller("FileDropController", ["$scope", "jolokiaUrl", "jolokia", "FileUploader", function ($scope, jolokiaUrl, jolokia, FileUploader) {
        $scope.uploader = new FileUploader({
            autoUpload: true,
            removeAfterUpload: true,
            url: jolokiaUrl
        });
        FileUpload.useJolokiaTransport($scope, $scope.uploader, jolokia, function (json) {
            Kubernetes.log.debug("Json: ", json);
            return {
                'type': 'exec',
                mbean: Kubernetes.managerMBean,
                operation: 'apply',
                arguments: [json]
            };
        });
        $scope.uploader.onBeforeItem = function (item) {
            Core.notification('info', 'Uploading ' + item);
        };
        $scope.uploader.onSuccessItem = function (item) {
            Kubernetes.log.debug("onSuccessItem: ", item);
        };
        $scope.uploader.onErrorItem = function (item, response, status) {
            Kubernetes.log.debug("Failed to apply, response: ", response, " status: ", status);
        };
    }]);
    Kubernetes.TopLevel = Kubernetes.controller("TopLevel", ["$scope", "workspace", "KubernetesVersion", "KubernetesState", function ($scope, workspace, KubernetesVersion, KubernetesState) {
        $scope.version = undefined;
        $scope.showAppView = Kubernetes.isAppView(workspace);
        $scope.isActive = function (href) {
            return workspace.isLinkActive(href);
        };
        $scope.kubernetes = KubernetesState;
        KubernetesVersion.then(function (KubernetesVersion) {
            KubernetesVersion.query(function (response) {
                $scope.version = response;
            });
        });
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    var OverviewDirective = Kubernetes._module.directive("kubernetesOverview", ["$templateCache", "$compile", "$interpolate", "$timeout", "$window", "KubernetesState", 'KubernetesModel', function ($templateCache, $compile, $interpolate, $timeout, $window, KubernetesState, KubernetesModel) {
        return {
            restrict: 'E',
            replace: true,
            link: function (scope, element, attr) {
                scope.model = KubernetesModel;
                element.css({ visibility: 'hidden' });
                scope.getEntity = function (type, key) {
                    switch (type) {
                        case 'host':
                            return scope.model.podsByHost[key];
                        case 'pod':
                            return scope.model.podsByKey[key];
                        case 'replicationController':
                            return scope.model.replicationControllersByKey[key];
                        case 'service':
                            return scope.model.servicesByKey[key];
                        default:
                            return undefined;
                    }
                };
                scope.kubernetes = KubernetesState;
                scope.customizeDefaultOptions = function (options) {
                    options.Endpoint = ['Blank', {}];
                };
                scope.mouseEnter = function ($event) {
                    if (scope.jsPlumb) {
                        angular.element($event.currentTarget).addClass("hovered");
                        scope.jsPlumb.getEndpoints($event.currentTarget).forEach(function (endpoint) {
                            endpoint.connections.forEach(function (connection) {
                                if (!connection.isHover()) {
                                    connection.setHover(true);
                                    connection.endpoints.forEach(function (e) {
                                        scope.mouseEnter({
                                            currentTarget: e.element
                                        });
                                    });
                                }
                            });
                        });
                    }
                };
                scope.mouseLeave = function ($event) {
                    if (scope.jsPlumb) {
                        angular.element($event.currentTarget).removeClass("hovered");
                        scope.jsPlumb.getEndpoints($event.currentTarget).forEach(function (endpoint) {
                            endpoint.connections.forEach(function (connection) {
                                if (connection.isHover()) {
                                    connection.setHover(false);
                                    connection.endpoints.forEach(function (e) {
                                        scope.mouseLeave({
                                            currentTarget: e.element
                                        });
                                    });
                                }
                            });
                        });
                    }
                };
                /*
                scope.customizeEndpointOptions = (jsPlumb, node, options) => {
                  var type = node.el.attr('data-type');
                  // log.debug("endpoint type: ", type);
                  switch (type) {
                    case 'pod':
                      break;
                    case 'service':
                      break;
                    case 'replicationController':
                      break;
                  }
                };
                */
                scope.customizeConnectionOptions = function (jsPlumb, edge, params, options) {
                    var type = edge.source.el.attr('data-type');
                    options.connector = ["Bezier", { curviness: 50, stub: 25, alwaysRespectStubs: true }];
                    params.paintStyle = {
                        lineWidth: 2,
                        strokeStyle: '#5555cc'
                    };
                    switch (type) {
                        case 'pod':
                            break;
                        case 'service':
                            params.anchors = [
                                ["ContinuousRight", {}],
                                ["ContinuousLeft", {}]
                            ];
                            break;
                        case 'replicationController':
                            params.anchors = [
                                ["Perimeter", { shape: "Circle" }],
                                ["ContinuousRight", {}]
                            ];
                            break;
                    }
                    //log.debug("connection source type: ", type);
                    return options;
                };
                function interpolate(template, config) {
                    return $interpolate(template)(config);
                }
                function createElement(template, thingName, thing) {
                    var config = {};
                    config[thingName] = thing;
                    return interpolate(template, config);
                }
                function createElements(template, thingName, things) {
                    return things.map(function (thing) {
                        return createElement(template, thingName, thing);
                    });
                }
                function appendNewElements(parentEl, template, thingName, things) {
                    things.forEach(function (thing) {
                        var key = thing['_key'] || thing['id'];
                        var existing = parentEl.find("#" + key);
                        if (!existing.length) {
                            parentEl.append($compile(createElement(template, thingName, thing))(scope));
                        }
                    });
                }
                function namespaceFilter(item) {
                    return item.namespace === scope.kubernetes.selectedNamespace;
                }
                function firstDraw() {
                    Kubernetes.log.debug("First draw");
                    var services = scope.model.services;
                    var replicationControllers = scope.model.replicationControllers;
                    var pods = scope.model.pods;
                    var hosts = scope.model.hosts;
                    // log.debug("hosts: ", scope.model.hosts);
                    var parentEl = angular.element($templateCache.get("overviewTemplate.html"));
                    var servicesEl = parentEl.find(".services");
                    var hostsEl = parentEl.find(".hosts");
                    var replicationControllersEl = parentEl.find(".replicationControllers");
                    servicesEl.append(createElements($templateCache.get("serviceTemplate.html"), 'service', services.filter(namespaceFilter)));
                    replicationControllersEl.append(createElements($templateCache.get("replicationControllerTemplate.html"), 'replicationController', replicationControllers.filter(namespaceFilter)));
                    hosts.forEach(function (host) {
                        var hostEl = angular.element(createElement($templateCache.get("hostTemplate.html"), 'host', host));
                        var podContainer = angular.element(hostEl.find('.pod-container'));
                        podContainer.append(createElements($templateCache.get("podTemplate.html"), "pod", host.pods.filter(namespaceFilter)));
                        hostsEl.append(hostEl);
                    });
                    //parentEl.append(createElements($templateCache.get("podTemplate.html"), 'pod', pods));
                    element.append($compile(parentEl)(scope));
                    $timeout(function () {
                        element.css({ visibility: 'visible' });
                    }, 250);
                }
                function update() {
                    scope.$emit('jsplumbDoWhileSuspended', function () {
                        Kubernetes.log.debug("Update");
                        var services = scope.model.services.filter(namespaceFilter);
                        var replicationControllers = scope.model.replicationControllers.filter(namespaceFilter);
                        var pods = scope.model.pods.filter(namespaceFilter);
                        var hosts = scope.model.hosts;
                        var parentEl = element.find('[hawtio-jsplumb]');
                        var children = parentEl.find('.jsplumb-node');
                        children.each(function (index, c) {
                            var child = angular.element(c);
                            var key = child.attr('id');
                            if (Core.isBlank(key)) {
                                return;
                            }
                            var type = child.attr('data-type');
                            switch (type) {
                                case 'host':
                                    Kubernetes.log.debug('key: ', key);
                                    if (key in scope.model.podsByHost) {
                                        return;
                                    }
                                    break;
                                case 'service':
                                    if (key in scope.model.servicesByKey && scope.model.servicesByKey[key].namespace == scope.kubernetes.selectedNamespace) {
                                        var service = scope.model.servicesByKey[key];
                                        child.attr('connect-to', service.connectTo);
                                        return;
                                    }
                                    break;
                                case 'pod':
                                    /*
                                    if (hasId(pods, id)) {
                                      return;
                                    }
                                    */
                                    if (key in scope.model.podsByKey && scope.model.podsByKey[key].namespace == scope.kubernetes.selectedNamespace) {
                                        return;
                                    }
                                    break;
                                case 'replicationController':
                                    if (key in scope.model.replicationControllersByKey && scope.model.replicationControllersByKey[key].namespace == scope.kubernetes.selectedNamespace) {
                                        var replicationController = scope.model.replicationControllersByKey[key];
                                        child.attr('connect-to', replicationController.connectTo);
                                        return;
                                    }
                                    break;
                                default:
                                    Kubernetes.log.debug("Ignoring element with unknown type");
                                    return;
                            }
                            Kubernetes.log.debug("Removing: ", key);
                            child.remove();
                        });
                        var servicesEl = parentEl.find(".services");
                        var hostsEl = parentEl.find(".hosts");
                        var replicationControllersEl = parentEl.find(".replicationControllers");
                        appendNewElements(servicesEl, $templateCache.get("serviceTemplate.html"), "service", services.filter(namespaceFilter));
                        appendNewElements(replicationControllersEl, $templateCache.get("replicationControllerTemplate.html"), "replicationController", replicationControllers.filter(namespaceFilter));
                        appendNewElements(hostsEl, $templateCache.get("hostTemplate.html"), "host", hosts);
                        hosts.forEach(function (host) {
                            var hostEl = parentEl.find("#" + host._key);
                            appendNewElements(hostEl, $templateCache.get("podTemplate.html"), "pod", host.pods.filter(namespaceFilter));
                        });
                    });
                }
                function refreshDrawing() {
                    if (element.children().length === 0) {
                        firstDraw();
                    }
                    else {
                        update();
                    }
                    Core.$apply(scope);
                }
                scope.$on('kubernetesModelUpdated', refreshDrawing);
                // detect the view changing after the last time the model changed
                scope.$on("$routeChangeSuccess", function () {
                    setTimeout(refreshDrawing, 100);
                });
            }
        };
    }]);
    var OverviewBoxController = Kubernetes.controller("OverviewBoxController", ["$scope", "$location", function ($scope, $location) {
        $scope.viewDetails = function (entity, path) {
            if (entity) {
                var namespace = entity.namespace;
                var id = entity.id;
                $location.path(UrlHelpers.join('/kubernetes/namespace', namespace, path, id));
            }
            else {
                Kubernetes.log.warn("No entity for viewDetails!");
            }
        };
    }]);
    var scopeName = "OverviewController";
    var OverviewController = Kubernetes.controller(scopeName, ["$scope", "$location", "$http", "$timeout", "$routeParams", "KubernetesModel", "KubernetesState", "KubernetesApiURL", function ($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL) {
        $scope.name = scopeName;
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        ControllerHelpers.bindModelToSearchParam($scope, $location, 'kubernetes.selectedNamespace', 'namespace', undefined);
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.PipelinesController = Kubernetes.controller("PipelinesController", ["$scope", "KubernetesModel", "KubernetesBuilds", "KubernetesState", "$dialog", "$window", "$templateCache", "$routeParams", "$location", "localStorage", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesBuilds, KubernetesState, $dialog, $window, $templateCache, $routeParams, $location, localStorage, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.KubernetesBuilds = KubernetesBuilds;
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        /**
         * Lets update the various data to join them together to a pipeline model
         */
        function updateData() {
            var pipelineSteps = {};
            if ($scope.buildConfigs && $scope.builds && $scope.deploymentConfigs) {
                Kubernetes.enrichBuildConfigs($scope.buildConfigs, $scope.builds);
                $scope.fetched = true;
                angular.forEach($scope.buildConfigs, function (buildConfig) {
                    var pipelineKey = createPipelineKey(buildConfig);
                    if (pipelineKey) {
                        pipelineSteps[pipelineKey] = {
                            buildConfig: buildConfig,
                            builds: [],
                            triggeredBy: null,
                            triggersSteps: [],
                            $class: 'pipeline-build'
                        };
                    }
                });
                angular.forEach($scope.builds, function (build) {
                    var pipelineKey = createPipelineKey(build);
                    if (pipelineKey) {
                        var pipeline = pipelineSteps[pipelineKey];
                        if (!pipeline) {
                            //console.log("warning no pipeline generated for buildConfig for key " + pipelineKey + " for build " + angular.toJson(build, true));
                            console.log("warning no pipeline generated for buildConfig for key " + pipelineKey + " for build " + build.$name);
                        }
                        else {
                            pipeline.builds.push(build);
                        }
                    }
                });
                // TODO now we need to look at the triggers to figure out which pipelineSteps triggers each pipelineStep
                // now lets create an array of all pipelines, starting from the first known step with a list of the steps
                var pipelines = [];
                angular.forEach(pipelineSteps, function (pipelineStep, key) {
                    if (!pipelineStep.triggeredBy) {
                        // we are a root step....
                        pipelines.push(pipelineStep);
                        // now lets add all the steps for this key...
                        pipelineStep.triggersSteps.push(pipelineStep);
                        angular.forEach(pipelineSteps, function (step) {
                            if (step.triggeredBy === key) {
                                pipelineStep.triggersSteps.push(step);
                            }
                        });
                    }
                });
                angular.forEach($scope.deploymentConfigs, function (deploymentConfig) {
                    if (!deploymentConfig.kind) {
                        deploymentConfig.kind = "DeploymentConfig";
                    }
                    angular.forEach(deploymentConfig.triggers, function (trigger) {
                        var type = trigger.type;
                        var imageChangeParams = trigger.imageChangeParams;
                        if (imageChangeParams && type === "ImageChange") {
                            var from = imageChangeParams.from;
                            if (from) {
                                var name = from.name;
                                if (from.kind === "ImageRepository") {
                                    var tag = imageChangeParams.tag || "latest";
                                    if (name) {
                                        // now lets find a pipeline step which fires from this
                                        angular.forEach(pipelineSteps, function (pipelineStep, key) {
                                            var to = Core.pathGet(pipelineStep, ["buildConfig", "parameters", "output", "to"]);
                                            if (to && to.kind === "ImageRepository") {
                                                var toName = to.name;
                                                if (toName === name) {
                                                    var selector = Core.pathGet(deploymentConfig, ["template", "controllerTemplate", "replicaSelector"]);
                                                    var pods = [];
                                                    var $podCounters = selector ? Kubernetes.createPodCounters(selector, KubernetesModel.podsForNamespace(), pods) : null;
                                                    var deployPipelineStep = {
                                                        buildConfig: deploymentConfig,
                                                        $class: 'pipeline-deploy',
                                                        $podCounters: $podCounters,
                                                        $pods: pods
                                                    };
                                                    pipelineStep.triggersSteps.push(deployPipelineStep);
                                                }
                                            }
                                        });
                                    }
                                }
                            }
                        }
                    });
                });
                $scope.pipelines = pipelines;
            }
        }
        /**
         * Lets create a unique key for build / config we can use to do linking of builds / configs / triggers
         */
        function createPipelineKey(buildConfig) {
            return Core.pathGet(buildConfig, ["parameters", "source", "git", "uri"]);
        }
        $scope.$keepPolling = function () { return Kubernetes.keepPollingModel; };
        $scope.fetch = PollHelpers.setupPolling($scope, function (next) {
            var ready = 0;
            var numServices = 3;
            function maybeNext() {
                if (++ready >= numServices) {
                    next();
                }
            }
            var url = Kubernetes.buildsRestURL;
            $http.get(url).success(function (data, status, headers, config) {
                if (data) {
                    $scope.builds = Kubernetes.enrichBuilds(data.items);
                    updateData();
                }
                maybeNext();
            }).error(function (data, status, headers, config) {
                Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
                maybeNext();
            });
            url = Kubernetes.buildConfigsRestURL;
            $http.get(url).success(function (data, status, headers, config) {
                if (data) {
                    $scope.buildConfigs = data.items;
                    updateData();
                }
                maybeNext();
            }).error(function (data, status, headers, config) {
                Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
                maybeNext();
            });
            url = Kubernetes.deploymentConfigsRestURL;
            $http.get(url).success(function (data, status, headers, config) {
                if (data) {
                    $scope.deploymentConfigs = data.items;
                    updateData();
                }
                maybeNext();
            }).error(function (data, status, headers, config) {
                Kubernetes.log.warn("Failed to load " + url + " " + data + " " + status);
                maybeNext();
            });
        });
        $scope.fetch();
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.PodController = Kubernetes.controller("PodController", ["$scope", "KubernetesModel", "KubernetesState", "ServiceRegistry", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "$window", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesState, ServiceRegistry, $templateCache, $location, $routeParams, $http, $timeout, $window, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.itemConfig = {
            properties: {
                'manifest/containers/image$': {
                    template: $templateCache.get('imageTemplate.html')
                },
                'currentState/status': {
                    template: $templateCache.get('statusTemplate.html')
                },
                '\\/Env\\/': {
                    template: $templateCache.get('envItemTemplate.html')
                },
                '^\\/labels$': {
                    template: $templateCache.get('labelTemplate.html')
                },
                '\\/env\\/key$': {
                    hidden: true
                }
            }
        };
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.$on('kubernetesModelUpdated', function () {
            updateData();
        });
        $scope.$on('$routeUpdate', function ($event) {
            updateData();
        });
        $scope.openLogs = function () {
            var pods = [$scope.item];
            Kubernetes.openLogsForPods(ServiceRegistry, $window, KubernetesModel.currentNamespace(), pods);
        };
        updateData();
        function updateData() {
            $scope.id = $routeParams["id"];
            $scope.item = $scope.model.getPod(KubernetesState.selectedNamespace, $scope.id);
            Core.$apply($scope);
        }
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.PodEditController = Kubernetes.controller("PodEditController", ["$scope", "KubernetesModel", "KubernetesState", "KubernetesSchema", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesState, KubernetesSchema, $templateCache, $location, $routeParams, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.id = $routeParams["id"];
        $scope.schema = KubernetesSchema;
        $scope.config = KubernetesSchema.definitions.kubernetes_v1beta2_Pod;
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.$on('$routeUpdate', function ($event) {
            updateData();
        });
        updateData();
        function updateData() {
            if ($scope.id) {
                $scope.entity = $scope.model.getPod(KubernetesState.selectedNamespace, $scope.id);
                Core.$apply($scope);
                $scope.fetched = true;
            }
            else {
                $scope.fetched = true;
            }
        }
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.EnvItem = Kubernetes.controller("EnvItem", ["$scope", function ($scope) {
        var parts = $scope.data.split('=');
        $scope.key = parts.shift();
        $scope.value = parts.join('=');
    }]);
    // main controller for the page
    Kubernetes.Pods = Kubernetes.controller("Pods", ["$scope", "KubernetesModel", "KubernetesPods", "KubernetesState", "ServiceRegistry", "$dialog", "$window", "$templateCache", "$routeParams", "$location", "localStorage", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesPods, KubernetesState, ServiceRegistry, $dialog, $window, $templateCache, $routeParams, $location, localStorage, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.$on('kubernetesModelUpdated', function () {
            Core.$apply($scope);
        });
        $scope.itemSchema = Forms.createFormConfiguration();
        $scope.tableConfig = {
            data: 'model.pods',
            showSelectionCheckbox: true,
            enableRowClickSelection: false,
            multiSelect: true,
            selectedItems: [],
            filterOptions: {
                filterText: $location.search()["q"] || ''
            },
            columnDefs: [
                {
                    field: 'id',
                    displayName: 'ID',
                    defaultSort: true,
                    cellTemplate: $templateCache.get("idTemplate.html")
                },
                {
                    field: 'currentState.status',
                    displayName: 'Status',
                    cellTemplate: $templateCache.get("statusTemplate.html")
                },
                {
                    field: 'containerImages',
                    displayName: 'Images',
                    cellTemplate: $templateCache.get("imageTemplate.html")
                },
                {
                    field: 'currentState.host',
                    displayName: 'Host',
                    cellTemplate: $templateCache.get("hostTemplate.html")
                },
                {
                    field: 'labels',
                    displayName: 'Labels',
                    cellTemplate: $templateCache.get("labelTemplate.html")
                },
                {
                    field: 'currentState.podIP',
                    displayName: 'Pod IP'
                }
            ]
        };
        $scope.openLogs = function () {
            var pods = $scope.tableConfig.selectedItems;
            if (!pods || !pods.length) {
                if ($scope.id) {
                    var item = $scope.item;
                    if (item) {
                        pods = [item];
                    }
                }
            }
            Kubernetes.openLogsForPods(ServiceRegistry, $window, KubernetesModel.currentNamespace(), pods);
        };
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        KubernetesPods.then(function (KubernetesPods) {
            $scope.deletePrompt = function (selected) {
                if (angular.isString(selected)) {
                    selected = [{
                        id: selected
                    }];
                }
                UI.multiItemConfirmActionDialog({
                    collection: selected,
                    index: 'id',
                    onClose: function (result) {
                        if (result) {
                            function deleteSelected(selected, next) {
                                if (next) {
                                    Kubernetes.log.debug("deleting: ", next.id);
                                    KubernetesPods.delete({
                                        id: next.id
                                    }, undefined, function () {
                                        Kubernetes.log.debug("deleted: ", next.id);
                                        deleteSelected(selected, selected.shift());
                                    }, function (error) {
                                        Kubernetes.log.debug("Error deleting: ", error);
                                        deleteSelected(selected, selected.shift());
                                    });
                                }
                            }
                            deleteSelected(selected, selected.shift());
                        }
                    },
                    title: 'Delete pods?',
                    action: 'The following pods will be deleted:',
                    okText: 'Delete',
                    okClass: 'btn-danger',
                    custom: "This operation is permanent once completed!",
                    customClass: "alert alert-warning"
                }).open();
            };
        });
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.ReplicationControllerController = Kubernetes.controller("ReplicationControllerController", ["$scope", "KubernetesModel", "KubernetesState", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesState, $templateCache, $location, $routeParams, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.itemConfig = {
            properties: {
                '^\\/labels$': {
                    template: $templateCache.get('labelTemplate.html')
                }
            }
        };
        $scope.$on('kubernetesModelUpdated', function () {
            updateData();
        });
        $scope.$on('$routeUpdate', function ($event) {
            updateData();
        });
        updateData();
        function updateData() {
            $scope.id = $routeParams["id"];
            $scope.item = $scope.model.getReplicationController(KubernetesState.selectedNamespace, $scope.id);
            Core.$apply($scope);
        }
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.ReplicationControllerEditController = Kubernetes.controller("ReplicationControllerEditController", ["$scope", "KubernetesModel", "KubernetesState", "KubernetesSchema", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesState, KubernetesSchema, $templateCache, $location, $routeParams, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.id = $routeParams["id"];
        $scope.schema = KubernetesSchema;
        $scope.config = KubernetesSchema.definitions.kubernetes_v1beta2_ReplicationController;
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.$on('$routeUpdate', function ($event) {
            updateData();
        });
        updateData();
        function updateData() {
            if ($scope.id) {
                $scope.entity = $scope.model.getReplicationController(KubernetesState.selectedNamespace, $scope.id);
                Core.$apply($scope);
                $scope.fetched = true;
            }
            else {
                $scope.fetched = true;
            }
        }
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.ReplicationControllers = Kubernetes.controller("ReplicationControllers", ["$scope", "KubernetesModel", "KubernetesReplicationControllers", "KubernetesPods", "KubernetesState", "$templateCache", "$location", "$routeParams", "jolokia", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesReplicationControllers, KubernetesPods, KubernetesState, $templateCache, $location, $routeParams, jolokia, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.$on('kubernetesModelUpdated', function () {
            Core.$apply($scope);
        });
        $scope.tableConfig = {
            data: 'model.replicationControllers',
            showSelectionCheckbox: true,
            enableRowClickSelection: false,
            multiSelect: true,
            selectedItems: [],
            filterOptions: {
                filterText: $location.search()["q"] || ''
            },
            columnDefs: [
                { field: 'id', displayName: 'ID', cellTemplate: $templateCache.get("idTemplate.html") },
                { field: '$podsLink', displayName: 'Pods', cellTemplate: $templateCache.get("podCountsAndLinkTemplate.html") },
                { field: 'desiredState.replicas', displayName: 'Replicas', cellTemplate: $templateCache.get("desiredReplicas.html") },
                { field: 'labelsText', displayName: 'Labels', cellTemplate: $templateCache.get("labelTemplate.html") },
                { field: 'namespace', displayName: 'Namespace' }
            ]
        };
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        KubernetesReplicationControllers.then(function (KubernetesReplicationControllers) {
            KubernetesPods.then(function (KubernetesPods) {
                $scope.deletePrompt = function (selected) {
                    if (angular.isString(selected)) {
                        selected = [{
                            id: selected
                        }];
                    }
                    UI.multiItemConfirmActionDialog({
                        collection: selected,
                        index: 'id',
                        onClose: function (result) {
                            if (result) {
                                function deleteSelected(selected, next) {
                                    if (next) {
                                        Kubernetes.log.debug("deleting: ", next.id);
                                        KubernetesReplicationControllers.delete({
                                            id: next.id
                                        }, undefined, function () {
                                            Kubernetes.log.debug("deleted: ", next.id);
                                            deleteSelected(selected, selected.shift());
                                        }, function (error) {
                                            Kubernetes.log.debug("Error deleting: ", error);
                                            deleteSelected(selected, selected.shift());
                                        });
                                    }
                                }
                                deleteSelected(selected, selected.shift());
                            }
                        },
                        title: 'Delete replication controllers?',
                        action: 'The following replication controllers will be deleted:',
                        okText: 'Delete',
                        okClass: 'btn-danger',
                        custom: "This operation is permanent once completed!",
                        customClass: "alert alert-warning"
                    }).open();
                };
            });
        });
        function maybeInit() {
        }
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.schema = {
        "$schema": "http://json-schema.org/schema#",
        "additionalProperties": true,
        "definitions": {
            "docker_Config": {
                "additionalProperties": true,
                "javaType": "io.fabric8.docker.client.dockerclient.Config",
                "properties": {
                    "AttachStderr": {
                        "type": "boolean"
                    },
                    "AttachStdin": {
                        "type": "boolean"
                    },
                    "AttachStdout": {
                        "type": "boolean"
                    },
                    "Cmd": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "CpuSet": {
                        "type": "string"
                    },
                    "CpuShares": {
                        "type": "integer"
                    },
                    "Dns": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "Domainname": {
                        "type": "string"
                    },
                    "Entrypoint": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "Env": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "ExposedPorts": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,Object>",
                        "type": "object"
                    },
                    "Hostname": {
                        "type": "string"
                    },
                    "Image": {
                        "type": "string"
                    },
                    "Memory": {
                        "type": "integer"
                    },
                    "MemorySwap": {
                        "type": "integer"
                    },
                    "NetworkDisabled": {
                        "type": "boolean"
                    },
                    "OpenStdin": {
                        "type": "boolean"
                    },
                    "PortSpecs": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "StdinOnce": {
                        "type": "boolean"
                    },
                    "Tty": {
                        "type": "boolean"
                    },
                    "User": {
                        "type": "string"
                    },
                    "Volumes": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,Object>",
                        "type": "object"
                    },
                    "VolumesFrom": {
                        "type": "string"
                    },
                    "WorkingDir": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "docker_Image": {
                "additionalProperties": true,
                "javaType": "io.fabric8.docker.client.dockerclient.Image",
                "properties": {
                    "Architecture": {
                        "type": "string"
                    },
                    "Author": {
                        "type": "string"
                    },
                    "Comment": {
                        "type": "string"
                    },
                    "Config": {
                        "$ref": "#/definitions/docker_Config",
                        "javaType": "io.fabric8.docker.client.dockerclient.Config"
                    },
                    "Container": {
                        "type": "string"
                    },
                    "ContainerConfig": {
                        "$ref": "#/definitions/docker_Config",
                        "javaType": "io.fabric8.docker.client.dockerclient.Config"
                    },
                    "Created": {
                        "type": "string"
                    },
                    "DockerVersion": {
                        "type": "string"
                    },
                    "Id": {
                        "type": "string"
                    },
                    "Parent": {
                        "type": "string"
                    },
                    "Size": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "kubernetes_base_Container": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.Container",
                "properties": {
                    "command": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "cpu": {
                        "$ref": "#/definitions/kubernetes_resource_Quantity",
                        "javaType": "io.fabric8.kubernetes.api.model.resource.Quantity"
                    },
                    "env": {
                        "items": {
                            "$ref": "#/definitions/kubernetes_base_EnvVar",
                            "javaType": "io.fabric8.kubernetes.api.model.base.EnvVar"
                        },
                        "type": "array"
                    },
                    "image": {
                        "type": "string"
                    },
                    "imagePullPolicy": {
                        "type": "string"
                    },
                    "lifecycle": {
                        "$ref": "#/definitions/kubernetes_base_Lifecycle",
                        "javaType": "io.fabric8.kubernetes.api.model.base.Lifecycle"
                    },
                    "livenessProbe": {
                        "$ref": "#/definitions/kubernetes_base_LivenessProbe",
                        "javaType": "io.fabric8.kubernetes.api.model.base.LivenessProbe"
                    },
                    "memory": {
                        "$ref": "#/definitions/kubernetes_resource_Quantity",
                        "javaType": "io.fabric8.kubernetes.api.model.resource.Quantity"
                    },
                    "name": {
                        "type": "string"
                    },
                    "ports": {
                        "items": {
                            "$ref": "#/definitions/kubernetes_base_Port",
                            "javaType": "io.fabric8.kubernetes.api.model.base.Port"
                        },
                        "type": "array"
                    },
                    "privileged": {
                        "type": "boolean"
                    },
                    "terminationMessagePath": {
                        "type": "string"
                    },
                    "volumeMounts": {
                        "items": {
                            "$ref": "#/definitions/kubernetes_base_VolumeMount",
                            "javaType": "io.fabric8.kubernetes.api.model.base.VolumeMount"
                        },
                        "type": "array"
                    },
                    "workingDir": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_base_EmptyDir": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.EmptyDir",
                "type": "object"
            },
            "kubernetes_base_EnvVar": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.EnvVar",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_base_ExecAction": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.ExecAction",
                "properties": {
                    "command": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "kubernetes_base_GCEPersistentDisk": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.GCEPersistentDisk",
                "properties": {
                    "fsType": {
                        "type": "string"
                    },
                    "partition": {
                        "type": "integer"
                    },
                    "pdName": {
                        "type": "string"
                    },
                    "readOnly": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "kubernetes_base_GitRepo": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.GitRepo",
                "properties": {
                    "repository": {
                        "type": "string"
                    },
                    "revision": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_base_HTTPGetAction": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.HTTPGetAction",
                "properties": {
                    "host": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "port": {
                        "$ref": "#/definitions/kubernetes_util_IntOrString",
                        "javaType": "io.fabric8.kubernetes.api.model.util.IntOrString"
                    }
                },
                "type": "object"
            },
            "kubernetes_base_Handler": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.Handler",
                "properties": {
                    "exec": {
                        "$ref": "#/definitions/kubernetes_base_ExecAction",
                        "javaType": "io.fabric8.kubernetes.api.model.base.ExecAction"
                    },
                    "httpGet": {
                        "$ref": "#/definitions/kubernetes_base_HTTPGetAction",
                        "javaType": "io.fabric8.kubernetes.api.model.base.HTTPGetAction"
                    }
                },
                "type": "object"
            },
            "kubernetes_base_HostDir": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.HostDir",
                "properties": {
                    "path": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_base_Lifecycle": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.Lifecycle",
                "properties": {
                    "postStart": {
                        "$ref": "#/definitions/kubernetes_base_Handler",
                        "javaType": "io.fabric8.kubernetes.api.model.base.Handler"
                    },
                    "preStop": {
                        "$ref": "#/definitions/kubernetes_base_Handler",
                        "javaType": "io.fabric8.kubernetes.api.model.base.Handler"
                    }
                },
                "type": "object"
            },
            "kubernetes_base_ListMeta": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.ListMeta",
                "properties": {
                    "resourceVersion": {
                        "type": "string"
                    },
                    "selfLink": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_base_LivenessProbe": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.LivenessProbe",
                "properties": {
                    "exec": {
                        "$ref": "#/definitions/kubernetes_base_ExecAction",
                        "javaType": "io.fabric8.kubernetes.api.model.base.ExecAction"
                    },
                    "httpGet": {
                        "$ref": "#/definitions/kubernetes_base_HTTPGetAction",
                        "javaType": "io.fabric8.kubernetes.api.model.base.HTTPGetAction"
                    },
                    "initialDelaySeconds": {
                        "type": "integer"
                    },
                    "tcpSocket": {
                        "$ref": "#/definitions/kubernetes_base_TCPSocketAction",
                        "javaType": "io.fabric8.kubernetes.api.model.base.TCPSocketAction"
                    }
                },
                "type": "object"
            },
            "kubernetes_base_ObjectMeta": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.ObjectMeta",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "creationTimestamp": {
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "type": "string"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_base_ObjectReference": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.ObjectReference",
                "properties": {
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "fieldPath": {
                        "type": "string"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "type": "string"
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_base_PodSpec": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.PodSpec",
                "properties": {
                    "containers": {
                        "items": {
                            "$ref": "#/definitions/kubernetes_base_Container",
                            "javaType": "io.fabric8.kubernetes.api.model.base.Container"
                        },
                        "type": "array"
                    },
                    "dnsPolicy": {
                        "type": "string"
                    },
                    "host": {
                        "type": "string"
                    },
                    "nodeSelector": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "restartPolicy": {
                        "$ref": "#/definitions/kubernetes_base_RestartPolicy",
                        "javaType": "io.fabric8.kubernetes.api.model.base.RestartPolicy"
                    },
                    "volumes": {
                        "items": {
                            "$ref": "#/definitions/kubernetes_base_Volume",
                            "javaType": "io.fabric8.kubernetes.api.model.base.Volume"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "kubernetes_base_PodTemplateSpec": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.PodTemplateSpec",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "creationTimestamp": {
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "type": "string"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "spec": {
                        "$ref": "#/definitions/kubernetes_base_PodSpec",
                        "javaType": "io.fabric8.kubernetes.api.model.base.PodSpec"
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_base_Port": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.Port",
                "properties": {
                    "containerPort": {
                        "type": "integer"
                    },
                    "hostIP": {
                        "type": "string"
                    },
                    "hostPort": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "protocol": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_base_ReplicationControllerSpec": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.ReplicationControllerSpec",
                "properties": {
                    "replicas": {
                        "type": "integer"
                    },
                    "selector": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "template": {
                        "$ref": "#/definitions/kubernetes_base_PodTemplateSpec",
                        "javaType": "io.fabric8.kubernetes.api.model.base.PodTemplateSpec"
                    },
                    "templateRef": {
                        "$ref": "#/definitions/kubernetes_base_ObjectReference",
                        "javaType": "io.fabric8.kubernetes.api.model.base.ObjectReference"
                    }
                },
                "type": "object"
            },
            "kubernetes_base_RestartPolicy": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.RestartPolicy",
                "properties": {
                    "always": {
                        "$ref": "#/definitions/kubernetes_base_RestartPolicyAlways",
                        "javaType": "io.fabric8.kubernetes.api.model.base.RestartPolicyAlways"
                    },
                    "never": {
                        "$ref": "#/definitions/kubernetes_base_RestartPolicyNever",
                        "javaType": "io.fabric8.kubernetes.api.model.base.RestartPolicyNever"
                    },
                    "onFailure": {
                        "$ref": "#/definitions/kubernetes_base_RestartPolicyOnFailure",
                        "javaType": "io.fabric8.kubernetes.api.model.base.RestartPolicyOnFailure"
                    }
                },
                "type": "object"
            },
            "kubernetes_base_RestartPolicyAlways": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.RestartPolicyAlways",
                "type": "object"
            },
            "kubernetes_base_RestartPolicyNever": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.RestartPolicyNever",
                "type": "object"
            },
            "kubernetes_base_RestartPolicyOnFailure": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.RestartPolicyOnFailure",
                "type": "object"
            },
            "kubernetes_base_Status": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.Status",
                "properties": {
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "code": {
                        "type": "integer"
                    },
                    "details": {
                        "$ref": "#/definitions/kubernetes_base_StatusDetails",
                        "javaType": "io.fabric8.kubernetes.api.model.base.StatusDetails"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "reason": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "type": "string"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_base_StatusCause": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.StatusCause",
                "properties": {
                    "field": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "reason": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_base_StatusDetails": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.StatusDetails",
                "properties": {
                    "causes": {
                        "items": {
                            "$ref": "#/definitions/kubernetes_base_StatusCause",
                            "javaType": "io.fabric8.kubernetes.api.model.base.StatusCause"
                        },
                        "type": "array"
                    },
                    "id": {
                        "type": "string"
                    },
                    "kind": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_base_TCPSocketAction": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.TCPSocketAction",
                "properties": {
                    "port": {
                        "$ref": "#/definitions/kubernetes_util_IntOrString",
                        "javaType": "io.fabric8.kubernetes.api.model.util.IntOrString"
                    }
                },
                "type": "object"
            },
            "kubernetes_base_TypeMeta": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.TypeMeta",
                "properties": {
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "kind": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_base_Volume": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.Volume",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "source": {
                        "$ref": "#/definitions/kubernetes_base_VolumeSource",
                        "javaType": "io.fabric8.kubernetes.api.model.base.VolumeSource"
                    }
                },
                "type": "object"
            },
            "kubernetes_base_VolumeMount": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.VolumeMount",
                "properties": {
                    "mountPath": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "readOnly": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "kubernetes_base_VolumeSource": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.base.VolumeSource",
                "properties": {
                    "emptyDir": {
                        "$ref": "#/definitions/kubernetes_base_EmptyDir",
                        "javaType": "io.fabric8.kubernetes.api.model.base.EmptyDir"
                    },
                    "gitRepo": {
                        "$ref": "#/definitions/kubernetes_base_GitRepo",
                        "javaType": "io.fabric8.kubernetes.api.model.base.GitRepo"
                    },
                    "hostDir": {
                        "$ref": "#/definitions/kubernetes_base_HostDir",
                        "javaType": "io.fabric8.kubernetes.api.model.base.HostDir"
                    },
                    "persistentDisk": {
                        "$ref": "#/definitions/kubernetes_base_GCEPersistentDisk",
                        "javaType": "io.fabric8.kubernetes.api.model.base.GCEPersistentDisk"
                    }
                },
                "type": "object"
            },
            "kubernetes_errors_StatusError": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.errors.StatusError",
                "properties": {
                    "ErrStatus": {
                        "$ref": "#/definitions/kubernetes_base_Status",
                        "javaType": "io.fabric8.kubernetes.api.model.base.Status"
                    }
                },
                "type": "object"
            },
            "kubernetes_resource_Quantity": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.resource.Quantity",
                "properties": {
                    "Amount": {
                        "$ref": "#/definitions/speter_inf_Dec",
                        "javaType": "io.fabric8.openshift.client.util.Dec"
                    },
                    "Format": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_runtime_RawExtension": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.runtime.RawExtension",
                "properties": {
                    "RawJSON": {
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "kubernetes_util_IntOrString": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.util.IntOrString",
                "properties": {
                    "IntVal": {
                        "type": "integer"
                    },
                    "Kind": {
                        "type": "integer"
                    },
                    "StrVal": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_Container": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.Container",
                "properties": {
                    "command": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "cpu": {
                        "type": "integer"
                    },
                    "env": {
                        "items": {
                            "$ref": "#/definitions/kubernetes_v1beta2_EnvVar",
                            "javaType": "io.fabric8.kubernetes.api.model.v1beta2.EnvVar"
                        },
                        "type": "array"
                    },
                    "image": {
                        "type": "string"
                    },
                    "imagePullPolicy": {
                        "type": "string"
                    },
                    "lifecycle": {
                        "$ref": "#/definitions/kubernetes_v1beta2_Lifecycle",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.Lifecycle"
                    },
                    "livenessProbe": {
                        "$ref": "#/definitions/kubernetes_v1beta2_LivenessProbe",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.LivenessProbe"
                    },
                    "memory": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "ports": {
                        "items": {
                            "$ref": "#/definitions/kubernetes_v1beta2_Port",
                            "javaType": "io.fabric8.kubernetes.api.model.v1beta2.Port"
                        },
                        "type": "array"
                    },
                    "privileged": {
                        "type": "boolean"
                    },
                    "terminationMessagePath": {
                        "type": "string"
                    },
                    "volumeMounts": {
                        "items": {
                            "$ref": "#/definitions/kubernetes_v1beta2_VolumeMount",
                            "javaType": "io.fabric8.kubernetes.api.model.v1beta2.VolumeMount"
                        },
                        "type": "array"
                    },
                    "workingDir": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_ContainerManifest": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.ContainerManifest",
                "properties": {
                    "containers": {
                        "items": {
                            "$ref": "#/definitions/kubernetes_v1beta2_Container",
                            "javaType": "io.fabric8.kubernetes.api.model.v1beta2.Container"
                        },
                        "type": "array"
                    },
                    "dnsPolicy": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "restartPolicy": {
                        "$ref": "#/definitions/kubernetes_v1beta2_RestartPolicy",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.RestartPolicy"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "volumes": {
                        "items": {
                            "$ref": "#/definitions/kubernetes_v1beta2_Volume",
                            "javaType": "io.fabric8.kubernetes.api.model.v1beta2.Volume"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_ContainerState": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.ContainerState",
                "properties": {
                    "running": {
                        "$ref": "#/definitions/kubernetes_v1beta2_ContainerStateRunning",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.ContainerStateRunning"
                    },
                    "termination": {
                        "$ref": "#/definitions/kubernetes_v1beta2_ContainerStateTerminated",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.ContainerStateTerminated"
                    },
                    "waiting": {
                        "$ref": "#/definitions/kubernetes_v1beta2_ContainerStateWaiting",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.ContainerStateWaiting"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_ContainerStateRunning": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.ContainerStateRunning",
                "properties": {
                    "startedAt": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_ContainerStateTerminated": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.ContainerStateTerminated",
                "properties": {
                    "exitCode": {
                        "type": "integer"
                    },
                    "finishedAt": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "reason": {
                        "type": "string"
                    },
                    "signal": {
                        "type": "integer"
                    },
                    "startedAt": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_ContainerStateWaiting": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.ContainerStateWaiting",
                "properties": {
                    "reason": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_ContainerStatus": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.ContainerStatus",
                "properties": {
                    "containerID": {
                        "type": "string"
                    },
                    "image": {
                        "type": "string"
                    },
                    "podIP": {
                        "type": "string"
                    },
                    "restartCount": {
                        "type": "integer"
                    },
                    "state": {
                        "$ref": "#/definitions/kubernetes_v1beta2_ContainerState",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.ContainerState"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_EmptyDir": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.EmptyDir",
                "type": "object"
            },
            "kubernetes_v1beta2_Endpoints": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.Endpoints",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "creationTimestamp": {
                        "type": "string"
                    },
                    "endpoints": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "type": "string"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "type": "integer"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_EndpointsList": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.EndpointsList",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "creationTimestamp": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/definitions/kubernetes_v1beta2_Endpoints",
                            "javaType": "io.fabric8.kubernetes.api.model.v1beta2.Endpoints"
                        },
                        "type": "array"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "type": "integer"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_EnvVar": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.EnvVar",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_ExecAction": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.ExecAction",
                "properties": {
                    "command": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_GCEPersistentDisk": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.GCEPersistentDisk",
                "properties": {
                    "fsType": {
                        "type": "string"
                    },
                    "partition": {
                        "type": "integer"
                    },
                    "pdName": {
                        "type": "string"
                    },
                    "readOnly": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_GitRepo": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.GitRepo",
                "properties": {
                    "repository": {
                        "type": "string"
                    },
                    "revision": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_HTTPGetAction": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.HTTPGetAction",
                "properties": {
                    "host": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "port": {
                        "$ref": "#/definitions/kubernetes_util_IntOrString",
                        "javaType": "io.fabric8.kubernetes.api.model.util.IntOrString"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_Handler": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.Handler",
                "properties": {
                    "exec": {
                        "$ref": "#/definitions/kubernetes_v1beta2_ExecAction",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.ExecAction"
                    },
                    "httpGet": {
                        "$ref": "#/definitions/kubernetes_v1beta2_HTTPGetAction",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.HTTPGetAction"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_HostDir": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.HostDir",
                "properties": {
                    "path": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_Lifecycle": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.Lifecycle",
                "properties": {
                    "postStart": {
                        "$ref": "#/definitions/kubernetes_v1beta2_Handler",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.Handler"
                    },
                    "preStop": {
                        "$ref": "#/definitions/kubernetes_v1beta2_Handler",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.Handler"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_List": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.KubernetesList",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "creationTimestamp": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/definitions/kubernetes_runtime_RawExtension",
                            "javaType": "io.fabric8.kubernetes.api.model.runtime.RawExtension"
                        },
                        "type": "array"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "type": "integer"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_LivenessProbe": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.LivenessProbe",
                "properties": {
                    "exec": {
                        "$ref": "#/definitions/kubernetes_v1beta2_ExecAction",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.ExecAction"
                    },
                    "httpGet": {
                        "$ref": "#/definitions/kubernetes_v1beta2_HTTPGetAction",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.HTTPGetAction"
                    },
                    "initialDelaySeconds": {
                        "type": "integer"
                    },
                    "tcpSocket": {
                        "$ref": "#/definitions/kubernetes_v1beta2_TCPSocketAction",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.TCPSocketAction"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_Minion": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.Minion",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "creationTimestamp": {
                        "type": "string"
                    },
                    "hostIP": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "type": "integer"
                    },
                    "resources": {
                        "$ref": "#/definitions/kubernetes_v1beta2_NodeResources",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.NodeResources"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/definitions/kubernetes_v1beta2_NodeStatus",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.NodeStatus"
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_MinionList": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.MinionList",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "creationTimestamp": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/definitions/kubernetes_v1beta2_Minion",
                            "javaType": "io.fabric8.kubernetes.api.model.v1beta2.Minion"
                        },
                        "type": "array"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "type": "integer"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_NodeCondition": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.NodeCondition",
                "properties": {
                    "kind": {
                        "type": "string"
                    },
                    "lastTransitionTime": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "reason": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_NodeResources": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.NodeResources",
                "properties": {
                    "capacity": {
                        "additionalProperties": {
                            "$ref": "#/definitions/kubernetes_util_IntOrString",
                            "javaType": "io.fabric8.kubernetes.api.model.util.IntOrString"
                        },
                        "javaType": "java.util.Map<String,io.fabric8.kubernetes.api.model.util.IntOrString>",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_NodeStatus": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.NodeStatus",
                "properties": {
                    "conditions": {
                        "items": {
                            "$ref": "#/definitions/kubernetes_v1beta2_NodeCondition",
                            "javaType": "io.fabric8.kubernetes.api.model.v1beta2.NodeCondition"
                        },
                        "type": "array"
                    },
                    "phase": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_Pod": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.Pod",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "creationTimestamp": {
                        "type": "string"
                    },
                    "currentState": {
                        "$ref": "#/definitions/kubernetes_v1beta2_PodState",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.PodState"
                    },
                    "desiredState": {
                        "$ref": "#/definitions/kubernetes_v1beta2_PodState",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.PodState"
                    },
                    "id": {
                        "type": "string"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "nodeSelector": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "resourceVersion": {
                        "type": "integer"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_PodList": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.PodList",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "creationTimestamp": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/definitions/kubernetes_v1beta2_Pod",
                            "javaType": "io.fabric8.kubernetes.api.model.v1beta2.Pod"
                        },
                        "type": "array"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "type": "integer"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_PodState": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.PodState",
                "properties": {
                    "host": {
                        "type": "string"
                    },
                    "hostIP": {
                        "type": "string"
                    },
                    "info": {
                        "additionalProperties": {
                            "$ref": "#/definitions/kubernetes_v1beta2_ContainerStatus",
                            "javaType": "io.fabric8.kubernetes.api.model.v1beta2.ContainerStatus"
                        },
                        "javaType": "java.util.Map<String,io.fabric8.kubernetes.api.model.v1beta2.ContainerStatus>",
                        "type": "object"
                    },
                    "manifest": {
                        "$ref": "#/definitions/kubernetes_v1beta2_ContainerManifest",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.ContainerManifest"
                    },
                    "message": {
                        "type": "string"
                    },
                    "podIP": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_PodTemplate": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.PodTemplate",
                "properties": {
                    "desiredState": {
                        "$ref": "#/definitions/kubernetes_v1beta2_PodState",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.PodState"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_Port": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.Port",
                "properties": {
                    "containerPort": {
                        "type": "integer"
                    },
                    "hostIP": {
                        "type": "string"
                    },
                    "hostPort": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "protocol": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_ReplicationController": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.ReplicationController",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "creationTimestamp": {
                        "type": "string"
                    },
                    "currentState": {
                        "$ref": "#/definitions/kubernetes_v1beta2_ReplicationControllerState",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.ReplicationControllerState"
                    },
                    "desiredState": {
                        "$ref": "#/definitions/kubernetes_v1beta2_ReplicationControllerState",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.ReplicationControllerState"
                    },
                    "id": {
                        "type": "string"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "type": "integer"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_ReplicationControllerList": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.ReplicationControllerList",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "creationTimestamp": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/definitions/kubernetes_v1beta2_ReplicationController",
                            "javaType": "io.fabric8.kubernetes.api.model.v1beta2.ReplicationController"
                        },
                        "type": "array"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "type": "integer"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_ReplicationControllerState": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.ReplicationControllerState",
                "properties": {
                    "podTemplate": {
                        "$ref": "#/definitions/kubernetes_v1beta2_PodTemplate",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.PodTemplate"
                    },
                    "replicaSelector": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "replicas": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_RestartPolicy": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.RestartPolicy",
                "properties": {
                    "always": {
                        "$ref": "#/definitions/kubernetes_v1beta2_RestartPolicyAlways",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.RestartPolicyAlways"
                    },
                    "never": {
                        "$ref": "#/definitions/kubernetes_v1beta2_RestartPolicyNever",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.RestartPolicyNever"
                    },
                    "onFailure": {
                        "$ref": "#/definitions/kubernetes_v1beta2_RestartPolicyOnFailure",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.RestartPolicyOnFailure"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_RestartPolicyAlways": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.RestartPolicyAlways",
                "type": "object"
            },
            "kubernetes_v1beta2_RestartPolicyNever": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.RestartPolicyNever",
                "type": "object"
            },
            "kubernetes_v1beta2_RestartPolicyOnFailure": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.RestartPolicyOnFailure",
                "type": "object"
            },
            "kubernetes_v1beta2_Service": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.Service",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "containerPort": {
                        "$ref": "#/definitions/kubernetes_util_IntOrString",
                        "javaType": "io.fabric8.kubernetes.api.model.util.IntOrString"
                    },
                    "createExternalLoadBalancer": {
                        "type": "boolean"
                    },
                    "creationTimestamp": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "port": {
                        "type": "integer"
                    },
                    "portalIP": {
                        "type": "string"
                    },
                    "protocol": {
                        "type": "string"
                    },
                    "proxyPort": {
                        "type": "integer"
                    },
                    "publicIPs": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "resourceVersion": {
                        "type": "integer"
                    },
                    "selector": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "sessionAffinity": {
                        "type": "string"
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_ServiceList": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.ServiceList",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "creationTimestamp": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/definitions/kubernetes_v1beta2_Service",
                            "javaType": "io.fabric8.kubernetes.api.model.v1beta2.Service"
                        },
                        "type": "array"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "type": "integer"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_TCPSocketAction": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.TCPSocketAction",
                "properties": {
                    "port": {
                        "$ref": "#/definitions/kubernetes_util_IntOrString",
                        "javaType": "io.fabric8.kubernetes.api.model.util.IntOrString"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_TypeMeta": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.TypeMeta",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "creationTimestamp": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "type": "integer"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_Volume": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.Volume",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "source": {
                        "$ref": "#/definitions/kubernetes_v1beta2_VolumeSource",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.VolumeSource"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_VolumeMount": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.VolumeMount",
                "properties": {
                    "mountPath": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "readOnly": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "kubernetes_v1beta2_VolumeSource": {
                "additionalProperties": true,
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.VolumeSource",
                "properties": {
                    "emptyDir": {
                        "$ref": "#/definitions/kubernetes_v1beta2_EmptyDir",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.EmptyDir"
                    },
                    "gitRepo": {
                        "$ref": "#/definitions/kubernetes_v1beta2_GitRepo",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.GitRepo"
                    },
                    "hostDir": {
                        "$ref": "#/definitions/kubernetes_v1beta2_HostDir",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.HostDir"
                    },
                    "persistentDisk": {
                        "$ref": "#/definitions/kubernetes_v1beta2_GCEPersistentDisk",
                        "javaType": "io.fabric8.kubernetes.api.model.v1beta2.GCEPersistentDisk"
                    }
                },
                "type": "object"
            },
            "os_build_Build": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.build.Build",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "cancelled": {
                        "type": "boolean"
                    },
                    "creationTimestamp": {
                        "type": "string"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "parameters": {
                        "$ref": "#/definitions/os_build_BuildParameters",
                        "javaType": "io.fabric8.openshift.api.model.build.BuildParameters"
                    },
                    "podName": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "type": "string"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_build_BuildConfig": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.build.BuildConfig",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "creationTimestamp": {
                        "type": "string"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "parameters": {
                        "$ref": "#/definitions/os_build_BuildParameters",
                        "javaType": "io.fabric8.openshift.api.model.build.BuildParameters"
                    },
                    "resourceVersion": {
                        "type": "string"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "triggers": {
                        "items": {
                            "$ref": "#/definitions/os_build_BuildTriggerPolicy",
                            "javaType": "io.fabric8.openshift.api.model.build.BuildTriggerPolicy"
                        },
                        "type": "array"
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_build_BuildConfigList": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.build.BuildConfigList",
                "properties": {
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/definitions/os_build_BuildConfig",
                            "javaType": "io.fabric8.openshift.api.model.build.BuildConfig"
                        },
                        "type": "array"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "type": "string"
                    },
                    "selfLink": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_build_BuildList": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.build.BuildList",
                "properties": {
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/definitions/os_build_Build",
                            "javaType": "io.fabric8.openshift.api.model.build.Build"
                        },
                        "type": "array"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "type": "string"
                    },
                    "selfLink": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_build_BuildOutput": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.build.BuildOutput",
                "properties": {
                    "imageTag": {
                        "type": "string"
                    },
                    "registry": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_build_BuildParameters": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.build.BuildParameters",
                "properties": {
                    "output": {
                        "$ref": "#/definitions/os_build_BuildOutput",
                        "javaType": "io.fabric8.openshift.api.model.build.BuildOutput"
                    },
                    "revision": {
                        "$ref": "#/definitions/os_build_SourceRevision",
                        "javaType": "io.fabric8.openshift.api.model.build.SourceRevision"
                    },
                    "source": {
                        "$ref": "#/definitions/os_build_BuildSource",
                        "javaType": "io.fabric8.openshift.api.model.build.BuildSource"
                    },
                    "strategy": {
                        "$ref": "#/definitions/os_build_BuildStrategy",
                        "javaType": "io.fabric8.openshift.api.model.build.BuildStrategy"
                    }
                },
                "type": "object"
            },
            "os_build_BuildSource": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.build.BuildSource",
                "properties": {
                    "git": {
                        "$ref": "#/definitions/os_build_GitBuildSource",
                        "javaType": "io.fabric8.openshift.api.model.build.GitBuildSource"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_build_BuildStrategy": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.build.BuildStrategy",
                "properties": {
                    "customStrategy": {
                        "$ref": "#/definitions/os_build_CustomBuildStrategy",
                        "javaType": "io.fabric8.openshift.api.model.build.CustomBuildStrategy"
                    },
                    "dockerStrategy": {
                        "$ref": "#/definitions/os_build_DockerBuildStrategy",
                        "javaType": "io.fabric8.openshift.api.model.build.DockerBuildStrategy"
                    },
                    "stiStrategy": {
                        "$ref": "#/definitions/os_build_STIBuildStrategy",
                        "javaType": "io.fabric8.openshift.api.model.build.STIBuildStrategy"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_build_BuildTriggerPolicy": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.build.BuildTriggerPolicy",
                "properties": {
                    "generic": {
                        "$ref": "#/definitions/os_build_WebHookTrigger",
                        "javaType": "io.fabric8.openshift.api.model.build.WebHookTrigger"
                    },
                    "github": {
                        "$ref": "#/definitions/os_build_WebHookTrigger",
                        "javaType": "io.fabric8.openshift.api.model.build.WebHookTrigger"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_build_CustomBuildStrategy": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.build.CustomBuildStrategy",
                "properties": {
                    "env": {
                        "items": {
                            "$ref": "#/definitions/kubernetes_base_EnvVar",
                            "javaType": "io.fabric8.kubernetes.api.model.base.EnvVar"
                        },
                        "type": "array"
                    },
                    "exposeDockerSocket": {
                        "type": "boolean"
                    },
                    "image": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_build_DockerBuildStrategy": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.build.DockerBuildStrategy",
                "properties": {
                    "contextDir": {
                        "type": "string"
                    },
                    "noCache": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "os_build_GitBuildSource": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.build.GitBuildSource",
                "properties": {
                    "ref": {
                        "type": "string"
                    },
                    "uri": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_build_GitSourceRevision": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.build.GitSourceRevision",
                "properties": {
                    "author": {
                        "$ref": "#/definitions/os_build_SourceControlUser",
                        "javaType": "io.fabric8.openshift.api.model.build.SourceControlUser"
                    },
                    "commit": {
                        "type": "string"
                    },
                    "committer": {
                        "$ref": "#/definitions/os_build_SourceControlUser",
                        "javaType": "io.fabric8.openshift.api.model.build.SourceControlUser"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_build_STIBuildStrategy": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.build.STIBuildStrategy",
                "properties": {
                    "clean": {
                        "type": "boolean"
                    },
                    "image": {
                        "type": "string"
                    },
                    "scripts": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_build_SourceControlUser": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.build.SourceControlUser",
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_build_SourceRevision": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.build.SourceRevision",
                "properties": {
                    "git": {
                        "$ref": "#/definitions/os_build_GitSourceRevision",
                        "javaType": "io.fabric8.openshift.api.model.build.GitSourceRevision"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_build_WebHookTrigger": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.build.WebHookTrigger",
                "properties": {
                    "secret": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_config_Config": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.config.Config",
                "properties": {
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "items": {
                        "items": {},
                        "type": "array"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "type": "string"
                    },
                    "selfLink": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_deploy_CustomDeploymentStrategyParams": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.deploy.CustomDeploymentStrategyParams",
                "properties": {
                    "command": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "environment": {
                        "items": {
                            "$ref": "#/definitions/kubernetes_base_EnvVar",
                            "javaType": "io.fabric8.kubernetes.api.model.base.EnvVar"
                        },
                        "type": "array"
                    },
                    "image": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_deploy_Deployment": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.deploy.Deployment",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "controllerTemplate": {
                        "$ref": "#/definitions/kubernetes_base_ReplicationControllerSpec",
                        "javaType": "io.fabric8.kubernetes.api.model.base.ReplicationControllerSpec"
                    },
                    "creationTimestamp": {
                        "type": "string"
                    },
                    "details": {
                        "$ref": "#/definitions/os_deploy_DeploymentDetails",
                        "javaType": "io.fabric8.openshift.api.model.deploy.DeploymentDetails"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "type": "string"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "strategy": {
                        "$ref": "#/definitions/os_deploy_DeploymentStrategy",
                        "javaType": "io.fabric8.openshift.api.model.deploy.DeploymentStrategy"
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_deploy_DeploymentCause": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.deploy.DeploymentCause",
                "properties": {
                    "imageTrigger": {
                        "$ref": "#/definitions/os_deploy_DeploymentCauseImageTrigger",
                        "javaType": "io.fabric8.openshift.api.model.deploy.DeploymentCauseImageTrigger"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_deploy_DeploymentCauseImageTrigger": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.deploy.DeploymentCauseImageTrigger",
                "properties": {
                    "repositoryName": {
                        "type": "string"
                    },
                    "tag": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_deploy_DeploymentConfig": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.deploy.DeploymentConfig",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "creationTimestamp": {
                        "type": "string"
                    },
                    "details": {
                        "$ref": "#/definitions/os_deploy_DeploymentDetails",
                        "javaType": "io.fabric8.openshift.api.model.deploy.DeploymentDetails"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "latestVersion": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "type": "string"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "template": {
                        "$ref": "#/definitions/os_deploy_DeploymentTemplate",
                        "javaType": "io.fabric8.openshift.api.model.deploy.DeploymentTemplate"
                    },
                    "triggers": {
                        "items": {
                            "$ref": "#/definitions/os_deploy_DeploymentTriggerPolicy",
                            "javaType": "io.fabric8.openshift.api.model.deploy.DeploymentTriggerPolicy"
                        },
                        "type": "array"
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_deploy_DeploymentConfigList": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.deploy.DeploymentConfigList",
                "properties": {
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/definitions/os_deploy_DeploymentConfig",
                            "javaType": "io.fabric8.openshift.api.model.deploy.DeploymentConfig"
                        },
                        "type": "array"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "type": "string"
                    },
                    "selfLink": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_deploy_DeploymentDetails": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.deploy.DeploymentDetails",
                "properties": {
                    "causes": {
                        "items": {
                            "$ref": "#/definitions/os_deploy_DeploymentCause",
                            "javaType": "io.fabric8.openshift.api.model.deploy.DeploymentCause"
                        },
                        "type": "array"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_deploy_DeploymentList": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.deploy.DeploymentList",
                "properties": {
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/definitions/os_deploy_Deployment",
                            "javaType": "io.fabric8.openshift.api.model.deploy.Deployment"
                        },
                        "type": "array"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "type": "string"
                    },
                    "selfLink": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_deploy_DeploymentStrategy": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.deploy.DeploymentStrategy",
                "properties": {
                    "customParams": {
                        "$ref": "#/definitions/os_deploy_CustomDeploymentStrategyParams",
                        "javaType": "io.fabric8.openshift.api.model.deploy.CustomDeploymentStrategyParams"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_deploy_DeploymentTemplate": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.deploy.DeploymentTemplate",
                "properties": {
                    "controllerTemplate": {
                        "$ref": "#/definitions/kubernetes_base_ReplicationControllerSpec",
                        "javaType": "io.fabric8.kubernetes.api.model.base.ReplicationControllerSpec"
                    },
                    "strategy": {
                        "$ref": "#/definitions/os_deploy_DeploymentStrategy",
                        "javaType": "io.fabric8.openshift.api.model.deploy.DeploymentStrategy"
                    }
                },
                "type": "object"
            },
            "os_deploy_DeploymentTriggerImageChangeParams": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.deploy.DeploymentTriggerImageChangeParams",
                "properties": {
                    "automatic": {
                        "type": "boolean"
                    },
                    "containerNames": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "repositoryName": {
                        "type": "string"
                    },
                    "tag": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_deploy_DeploymentTriggerPolicy": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.deploy.DeploymentTriggerPolicy",
                "properties": {
                    "imageChangeParams": {
                        "$ref": "#/definitions/os_deploy_DeploymentTriggerImageChangeParams",
                        "javaType": "io.fabric8.openshift.api.model.deploy.DeploymentTriggerImageChangeParams"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_image_Image": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.image.Image",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "creationTimestamp": {
                        "type": "string"
                    },
                    "dockerImageMetadata": {
                        "$ref": "#/definitions/docker_Image",
                        "javaType": "io.fabric8.docker.client.dockerclient.Image"
                    },
                    "dockerImageReference": {
                        "type": "string"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "type": "string"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_image_ImageList": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.image.ImageList",
                "properties": {
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/definitions/os_image_Image",
                            "javaType": "io.fabric8.openshift.api.model.image.Image"
                        },
                        "type": "array"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "type": "string"
                    },
                    "selfLink": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_image_ImageRepository": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.image.ImageRepository",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "creationTimestamp": {
                        "type": "string"
                    },
                    "dockerImageRepository": {
                        "type": "string"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "type": "string"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/definitions/os_image_ImageRepositoryStatus",
                        "javaType": "io.fabric8.openshift.api.model.image.ImageRepositoryStatus"
                    },
                    "tags": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_image_ImageRepositoryList": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.image.ImageRepositoryList",
                "properties": {
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/definitions/os_image_ImageRepository",
                            "javaType": "io.fabric8.openshift.api.model.image.ImageRepository"
                        },
                        "type": "array"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "type": "string"
                    },
                    "selfLink": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_image_ImageRepositoryStatus": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.image.ImageRepositoryStatus",
                "properties": {
                    "dockerImageRepository": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_route_Route": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.route.Route",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "creationTimestamp": {
                        "type": "string"
                    },
                    "host": {
                        "type": "string"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "type": "string"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_route_RouteList": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.route.RouteList",
                "properties": {
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/definitions/os_route_Route",
                            "javaType": "io.fabric8.openshift.api.model.route.Route"
                        },
                        "type": "array"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "type": "string"
                    },
                    "selfLink": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_template_Parameter": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.template.Parameter",
                "properties": {
                    "Description": {
                        "type": "string"
                    },
                    "From": {
                        "type": "string"
                    },
                    "Generate": {
                        "type": "string"
                    },
                    "Name": {
                        "type": "string"
                    },
                    "Value": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "os_template_Template": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.api.model.template.Template",
                "properties": {
                    "ObjectLabels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "Objects": {
                        "items": {},
                        "type": "array"
                    },
                    "Parameters": {
                        "items": {
                            "$ref": "#/definitions/os_template_Parameter",
                            "javaType": "io.fabric8.openshift.api.model.template.Parameter"
                        },
                        "type": "array"
                    },
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "apiVersion": {
                        "default": "v1beta2",
                        "type": "string"
                    },
                    "creationTimestamp": {
                        "type": "string"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "javaType": "java.util.Map<String,String>",
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "type": "string"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "speter_inf_Dec": {
                "additionalProperties": true,
                "javaType": "io.fabric8.openshift.client.util.Dec",
                "type": "object"
            }
        },
        "id": "http://fabric8.io/fabric8/v2/Schema#",
        "properties": {
            "BuildConfigList": {
                "$ref": "#/definitions/os_build_BuildConfigList",
                "javaType": "io.fabric8.openshift.api.model.build.BuildConfigList"
            },
            "BuildList": {
                "$ref": "#/definitions/os_build_BuildList",
                "javaType": "io.fabric8.openshift.api.model.build.BuildList"
            },
            "Config": {
                "$ref": "#/definitions/os_config_Config",
                "javaType": "io.fabric8.openshift.api.model.config.Config"
            },
            "ContainerStatus": {
                "$ref": "#/definitions/kubernetes_v1beta2_ContainerStatus",
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.ContainerStatus"
            },
            "DeploymentConfigList": {
                "$ref": "#/definitions/os_deploy_DeploymentConfigList",
                "javaType": "io.fabric8.openshift.api.model.deploy.DeploymentConfigList"
            },
            "DeploymentList": {
                "$ref": "#/definitions/os_deploy_DeploymentList",
                "javaType": "io.fabric8.openshift.api.model.deploy.DeploymentList"
            },
            "Endpoints": {
                "$ref": "#/definitions/kubernetes_v1beta2_Endpoints",
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.Endpoints"
            },
            "EndpointsList": {
                "$ref": "#/definitions/kubernetes_v1beta2_EndpointsList",
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.EndpointsList"
            },
            "EnvVar": {
                "$ref": "#/definitions/kubernetes_v1beta2_EnvVar",
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.EnvVar"
            },
            "ImageList": {
                "$ref": "#/definitions/os_image_ImageList",
                "javaType": "io.fabric8.openshift.api.model.image.ImageList"
            },
            "ImageRepositoryList": {
                "$ref": "#/definitions/os_image_ImageRepositoryList",
                "javaType": "io.fabric8.openshift.api.model.image.ImageRepositoryList"
            },
            "KubernetesList": {
                "$ref": "#/definitions/kubernetes_v1beta2_List",
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.KubernetesList"
            },
            "Minion": {
                "$ref": "#/definitions/kubernetes_v1beta2_Minion",
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.Minion"
            },
            "MinionList": {
                "$ref": "#/definitions/kubernetes_v1beta2_MinionList",
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.MinionList"
            },
            "PodList": {
                "$ref": "#/definitions/kubernetes_v1beta2_PodList",
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.PodList"
            },
            "ReplicationControllerList": {
                "$ref": "#/definitions/kubernetes_v1beta2_ReplicationControllerList",
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.ReplicationControllerList"
            },
            "RouteList": {
                "$ref": "#/definitions/os_route_RouteList",
                "javaType": "io.fabric8.openshift.api.model.route.RouteList"
            },
            "ServiceList": {
                "$ref": "#/definitions/kubernetes_v1beta2_ServiceList",
                "javaType": "io.fabric8.kubernetes.api.model.v1beta2.ServiceList"
            },
            "StatusError": {
                "$ref": "#/definitions/kubernetes_errors_StatusError",
                "javaType": "io.fabric8.kubernetes.api.model.errors.StatusError"
            },
            "Template": {
                "$ref": "#/definitions/os_template_Template",
                "javaType": "io.fabric8.openshift.api.model.template.Template"
            }
        },
        "type": "object"
    };
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.ServiceController = Kubernetes.controller("ServiceController", ["$scope", "KubernetesModel", "KubernetesState", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesState, $templateCache, $location, $routeParams, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.itemConfig = {
            properties: {
                '^\\/labels$': {
                    template: $templateCache.get('labelTemplate.html')
                }
            }
        };
        $scope.$on('kubernetesModelUpdated', function () {
            updateData();
        });
        $scope.$on('$routeUpdate', function ($event) {
            updateData();
        });
        updateData();
        function updateData() {
            $scope.id = $routeParams["id"];
            $scope.item = $scope.model.getService(KubernetesState.selectedNamespace, $scope.id);
            Core.$apply($scope);
        }
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.ServiceEditController = Kubernetes.controller("ServiceEditController", ["$scope", "KubernetesModel", "KubernetesState", "KubernetesSchema", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesState, KubernetesSchema, $templateCache, $location, $routeParams, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.id = $routeParams["id"];
        $scope.schema = KubernetesSchema;
        $scope.config = KubernetesSchema.definitions.kubernetes_v1beta2_Service;
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.$on('$routeUpdate', function ($event) {
            updateData();
        });
        updateData();
        function updateData() {
            if ($scope.id) {
                $scope.entity = $scope.model.getService(KubernetesState.selectedNamespace, $scope.id);
                Core.$apply($scope);
                $scope.fetched = true;
            }
            else {
                $scope.fetched = true;
            }
        }
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
/// <reference path="kubernetesModel.ts"/>
var Kubernetes;
(function (Kubernetes) {
    /**
     * Represents a simple interface to service discovery that can be used early on in the application lifecycle before the
     * underlying model has been created via dependency injection
     */
    var ServiceRegistryService = (function () {
        function ServiceRegistryService() {
            this.model = null;
        }
        /**
         * Returns true if there is a service available for the given ID or false
         */
        ServiceRegistryService.prototype.hasService = function (serviceName) {
            return this.findService(serviceName) ? true : false;
        };
        /**
         * Returns the service for the given service name (ID) or null if it cannot be found
         *
         * @param serviceName the name of the service to look for
         * @return {null}
         */
        ServiceRegistryService.prototype.findService = function (serviceName) {
            var answer = null;
            if (serviceName) {
                var model = this.getModel();
                if (model) {
                    var namespace = model.currentNamespace();
                    return model.getService(namespace, serviceName);
                }
            }
            return answer;
        };
        /**
         * Returns the service link for the given service name
         *
         * @param serviceName the name of the service
         * @return {null}
         */
        ServiceRegistryService.prototype.serviceLink = function (serviceName) {
            var service = this.findService(serviceName);
            if (service) {
                var portalIP = service.$host;
                // lets assume no custom port for now for external routes
                var port = null;
                if (!portalIP) {
                    portalIP = service.portalIP;
                    port = service.port;
                }
                // TODO use annotations to support other kinds of protocol?
                var protocol = "http://";
                if (portalIP) {
                    if (port) {
                        return protocol + portalIP + ":" + port + "/";
                    }
                    else {
                        return protocol + portalIP;
                    }
                }
            }
            return "";
        };
        ServiceRegistryService.prototype.getModel = function () {
            var answer = this.model;
            // lets allow lazy load so we can be invoked before the injector has been created
            if (!answer) {
                var injector = HawtioCore.injector;
                if (injector) {
                    this.model = injector.get('KubernetesModel');
                }
            }
            answer = this.model;
            return answer;
        };
        return ServiceRegistryService;
    })();
    Kubernetes.ServiceRegistryService = ServiceRegistryService;
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    Kubernetes.Services = Kubernetes.controller("Services", ["$scope", "KubernetesModel", "KubernetesServices", "KubernetesPods", "KubernetesState", "$templateCache", "$location", "$routeParams", "jolokia", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, KubernetesServices, KubernetesPods, KubernetesState, $templateCache, $location, $routeParams, jolokia, $http, $timeout, KubernetesApiURL) {
        $scope.kubernetes = KubernetesState;
        $scope.model = KubernetesModel;
        $scope.tableConfig = {
            data: 'model.services',
            showSelectionCheckbox: true,
            enableRowClickSelection: false,
            multiSelect: true,
            selectedItems: [],
            filterOptions: {
                filterText: $location.search()["q"] || ''
            },
            columnDefs: [
                { field: 'id', displayName: 'ID', cellTemplate: $templateCache.get("idTemplate.html") },
                { field: '$podsLink', displayName: 'Pods', cellTemplate: $templateCache.get("podCountsAndLinkTemplate.html") },
                { field: 'selector', displayName: 'Selector', cellTemplate: $templateCache.get("selectorTemplate.html") },
                { field: 'portalIP', displayName: 'Address', cellTemplate: $templateCache.get("portalAddress.html") },
                { field: 'labelsText', displayName: 'Labels', cellTemplate: $templateCache.get("labelTemplate.html") },
                { field: 'namespace', displayName: 'Namespace' }
            ]
        };
        Kubernetes.initShared($scope, $location, $http, $timeout, $routeParams, KubernetesModel, KubernetesState, KubernetesApiURL);
        $scope.$on('kubernetesModelUpdated', function () {
            Core.$apply($scope);
        });
        KubernetesServices.then(function (KubernetesServices) {
            KubernetesPods.then(function (KubernetesPods) {
                $scope.deletePrompt = function (selected) {
                    if (angular.isString(selected)) {
                        selected = [{
                            id: selected
                        }];
                    }
                    UI.multiItemConfirmActionDialog({
                        collection: selected,
                        index: 'id',
                        onClose: function (result) {
                            if (result) {
                                function deleteSelected(selected, next) {
                                    if (next) {
                                        Kubernetes.log.debug("deleting: ", next.id);
                                        KubernetesServices.delete({
                                            id: next.id
                                        }, undefined, function () {
                                            Kubernetes.log.debug("deleted: ", next.id);
                                            deleteSelected(selected, selected.shift());
                                        }, function (error) {
                                            Kubernetes.log.debug("Error deleting: ", error);
                                            deleteSelected(selected, selected.shift());
                                        });
                                    }
                                }
                                deleteSelected(selected, selected.shift());
                            }
                        },
                        title: 'Delete services?',
                        action: 'The following services will be deleted:',
                        okText: 'Delete',
                        okClass: 'btn-danger',
                        custom: "This operation is permanent once completed!",
                        customClass: "alert alert-warning"
                    }).open();
                };
            });
        });
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="kubernetesHelpers.ts"/>
/// <reference path="kubernetesPlugin.ts"/>
var Kubernetes;
(function (Kubernetes) {
    // controller for the status icon cell
    Kubernetes.PodStatus = Kubernetes.controller("PodStatus", ["$scope", function ($scope) {
        $scope.statusMapping = function (text) {
            return Kubernetes.statusTextToCssClass(text);
        };
    }]);
    // controller that deals with the labels per pod
    Kubernetes.Labels = Kubernetes.controller("Labels", ["$scope", "workspace", "jolokia", "$location", function ($scope, workspace, jolokia, $location) {
        $scope.labels = [];
        var labelKeyWeights = {
            "name": 1,
            "replicationController": 2,
            "group": 3
        };
        $scope.$watch('entity', function (newValue, oldValue) {
            if (newValue) {
                // log.debug("labels: ", newValue);
                // massage the labels a bit
                $scope.labels = [];
                angular.forEach($scope.entity.labels, function (value, key) {
                    if (key === 'fabric8') {
                        // TODO not sure what this is for, the container type?
                        return;
                    }
                    $scope.labels.push({
                        key: key,
                        title: value
                    });
                });
                //  lets sort by key but lets make sure that we weight certain labels so they are first
                $scope.labels = $scope.labels.sort(function (a, b) {
                    function getWeight(key) {
                        return labelKeyWeights[key] || 1000;
                    }
                    var n1 = a["key"];
                    var n2 = b["key"];
                    var w1 = getWeight(n1);
                    var w2 = getWeight(n2);
                    var diff = w1 - w2;
                    if (diff < 0) {
                        return -1;
                    }
                    else if (diff > 0) {
                        return 1;
                    }
                    if (n1 && n2) {
                        if (n1 > n2) {
                            return 1;
                        }
                        else if (n1 < n2) {
                            return -1;
                        }
                        else {
                            return 0;
                        }
                    }
                    else {
                        if (n1 === n2) {
                            return 0;
                        }
                        else if (n1) {
                            return 1;
                        }
                        else {
                            return -1;
                        }
                    }
                });
            }
        });
        $scope.handleClick = function (entity, labelType, value) {
            // log.debug("handleClick, entity: ", entity, " key: ", labelType, " value: ", value);
            var filterTextSection = labelType + "=" + value.title;
            $scope.$emit('labelFilterUpdate', filterTextSection);
        };
        $scope.labelClass = Kubernetes.containerLabelClass;
    }]);
})(Kubernetes || (Kubernetes = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="../../kubernetes/ts/kubernetesHelpers.ts"/>
var Project;
(function (Project) {
    Project.context = '/project';
    Project.hash = '#' + Project.context;
    Project.pluginName = 'Project';
    Project.log = Logger.get(Project.pluginName);
    Project.pluginPath = 'plugins/project/';
    Project.templatePath = Project.pluginPath + 'html/';
    Project.gogsRestURL = "/kubernetes/api/" + Kubernetes.defaultApiVersion + "/proxy/services/gogs-http-service/api/v1";
    Project.gogsUserRepoRestURL = Project.gogsRestURL + "/user/repos";
})(Project || (Project = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="../../kubernetes/ts/kubernetesHelpers.ts"/>
/// <reference path="projectHelpers.ts"/>
var Project;
(function (Project) {
    Project._module = angular.module(Project.pluginName, [Kubernetes.pluginName]);
    Project.controller = PluginHelpers.createControllerFunction(Project._module, Project.pluginName);
    Project.route = PluginHelpers.createRoutingFunction(Project.templatePath);
    Project._module.config(['$routeProvider', function ($routeProvider) {
        $routeProvider.when(UrlHelpers.join(Project.context, '/create'), Project.route('projectCreate.html', false));
    }]);
    Project._module.factory('ForgeApiURL', ['jolokiaUrl', 'jolokia', '$q', '$rootScope', function (jolokiaUrl, jolokia, $q, $rootScope) {
        return "kubernetes/api/" + Kubernetes.defaultApiVersion + "/proxy/services/fabric8-forge/api/forge";
    }]);
    hawtioPluginLoader.addModule(Project.pluginName);
})(Project || (Project = {}));

/// <reference path="../../includes.ts"/>
/// <reference path="projectHelpers.ts"/>
/// <reference path="projectPlugin.ts"/>
var Project;
(function (Project) {
    Project.ProjectController = Project.controller("ProjectController", ["$scope", "KubernetesModel", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "KubernetesApiURL", function ($scope, KubernetesModel, $templateCache, $location, $routeParams, $http, $timeout, KubernetesApiURL) {
        $scope.model = KubernetesModel;
        $scope.entity = {
            name: ""
        };
        $scope.$on('$routeUpdate', function ($event) {
            updateData();
        });
        // TODO add actual login/pwd or OAuth
        var authorizationHeader = "Basic TODO";
        // TODO take this from the service host!
        $scope.create = function () {
            var url = Project.gogsUserRepoRestURL;
            console.log("Creating project " + angular.toJson($scope.entity, true));
            console.log("Posting to url: " + url);
            var data = $scope.entity;
            var config = {
                headers: {
                    'withCredentials': true,
                    'Authorization': authorizationHeader,
                    'Content-Type': "application/json"
                }
            };
            $http.post(url, data, config).success(function (data, status, headers, config) {
                console.log("project created! got data " + angular.toJson(data, true));
                createProject(data);
            }).error(function (data, status, headers, config) {
                Project.log.warn("Failed to load " + url + " " + data + " " + status);
                Core.notification('error', "Failed to create git repository " + name + ". Returned code: " + status + " " + data);
            });
        };
        updateData();
        function createProject(data) {
            var full_name = data.full_name;
            if (full_name) {
                var gitUrl = Core.url(Project.gogsRestURL + "/" + full_name + ".git");
                console.log("Creating a git repo for " + full_name + " at : " + gitUrl);
            }
            // TODO lets forward to the create project wizard...
        }
        function updateData() {
            $scope.builds = [];
            var url = Project.gogsUserRepoRestURL;
            var config = {
                headers: {
                    'withCredentials': true,
                    'Authorization': authorizationHeader
                }
            };
            delete $http.defaults.headers.common["Accept"];
            $http.get(url, config).success(function (data, status, headers, config) {
                if (data) {
                    console.log("got repos: " + angular.toJson(data, true));
                    $scope.builds = data;
                }
                $scope.fetched = true;
                Core.$apply($scope);
            }).error(function (data, status, headers, config) {
                $scope.fetched = true;
                Project.log.warn("Failed to load " + url + " " + data + " " + status);
            });
        }
    }]);
})(Project || (Project = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2UvamF2YS9oYXd0aW8ta3ViZXJuZXRlcy9pbmNsdWRlcy50cyIsIi93b3Jrc3BhY2UvamF2YS9oYXd0aW8ta3ViZXJuZXRlcy9rdWJlcm5ldGVzL3RzL2t1YmVybmV0ZXNIZWxwZXJzLnRzIiwiL3dvcmtzcGFjZS9qYXZhL2hhd3Rpby1rdWJlcm5ldGVzL2t1YmVybmV0ZXMvdHMva3ViZXJuZXRlc01vZGVsLnRzIiwiL3dvcmtzcGFjZS9qYXZhL2hhd3Rpby1rdWJlcm5ldGVzL2t1YmVybmV0ZXMvdHMva3ViZXJuZXRlc1BsdWdpbi50cyIsIi93b3Jrc3BhY2UvamF2YS9oYXd0aW8ta3ViZXJuZXRlcy9rdWJlcm5ldGVzL3RzL2FwcHMudHMiLCIvd29ya3NwYWNlL2phdmEvaGF3dGlvLWt1YmVybmV0ZXMva3ViZXJuZXRlcy90cy9idWlsZC50cyIsIi93b3Jrc3BhY2UvamF2YS9oYXd0aW8ta3ViZXJuZXRlcy9rdWJlcm5ldGVzL3RzL2J1aWxkQ29uZmlnLnRzIiwiL3dvcmtzcGFjZS9qYXZhL2hhd3Rpby1rdWJlcm5ldGVzL2t1YmVybmV0ZXMvdHMvYnVpbGRDb25maWdFZGl0LnRzIiwiL3dvcmtzcGFjZS9qYXZhL2hhd3Rpby1rdWJlcm5ldGVzL2t1YmVybmV0ZXMvdHMvYnVpbGRDb25maWdzLnRzIiwiL3dvcmtzcGFjZS9qYXZhL2hhd3Rpby1rdWJlcm5ldGVzL2t1YmVybmV0ZXMvdHMvYnVpbGRMb2dzLnRzIiwiL3dvcmtzcGFjZS9qYXZhL2hhd3Rpby1rdWJlcm5ldGVzL2t1YmVybmV0ZXMvdHMvYnVpbGRzLnRzIiwiL3dvcmtzcGFjZS9qYXZhL2hhd3Rpby1rdWJlcm5ldGVzL2t1YmVybmV0ZXMvdHMvY29ubmVjdC50cyIsIi93b3Jrc3BhY2UvamF2YS9oYXd0aW8ta3ViZXJuZXRlcy9rdWJlcm5ldGVzL3RzL2RlcGxveW1lbnRDb25maWcudHMiLCIvd29ya3NwYWNlL2phdmEvaGF3dGlvLWt1YmVybmV0ZXMva3ViZXJuZXRlcy90cy9kZXBsb3ltZW50Q29uZmlncy50cyIsIi93b3Jrc3BhY2UvamF2YS9oYXd0aW8ta3ViZXJuZXRlcy9rdWJlcm5ldGVzL3RzL2hvc3QudHMiLCIvd29ya3NwYWNlL2phdmEvaGF3dGlvLWt1YmVybmV0ZXMva3ViZXJuZXRlcy90cy9ob3N0cy50cyIsIi93b3Jrc3BhY2UvamF2YS9oYXd0aW8ta3ViZXJuZXRlcy9rdWJlcm5ldGVzL3RzL2ltYWdlUmVwb3NpdG9yaWVzLnRzIiwiL3dvcmtzcGFjZS9qYXZhL2hhd3Rpby1rdWJlcm5ldGVzL2t1YmVybmV0ZXMvdHMva3ViZXJuZXRlc0pzb25EaXJlY3RpdmUudHMiLCIvd29ya3NwYWNlL2phdmEvaGF3dGlvLWt1YmVybmV0ZXMva3ViZXJuZXRlcy90cy9rdWJlcm5ldGVzVG9wTGV2ZWwudHMiLCIvd29ya3NwYWNlL2phdmEvaGF3dGlvLWt1YmVybmV0ZXMva3ViZXJuZXRlcy90cy9vdmVydmlldy50cyIsIi93b3Jrc3BhY2UvamF2YS9oYXd0aW8ta3ViZXJuZXRlcy9rdWJlcm5ldGVzL3RzL3BpcGVsaW5lcy50cyIsIi93b3Jrc3BhY2UvamF2YS9oYXd0aW8ta3ViZXJuZXRlcy9rdWJlcm5ldGVzL3RzL3BvZC50cyIsIi93b3Jrc3BhY2UvamF2YS9oYXd0aW8ta3ViZXJuZXRlcy9rdWJlcm5ldGVzL3RzL3BvZEVkaXQudHMiLCIvd29ya3NwYWNlL2phdmEvaGF3dGlvLWt1YmVybmV0ZXMva3ViZXJuZXRlcy90cy9wb2RzLnRzIiwiL3dvcmtzcGFjZS9qYXZhL2hhd3Rpby1rdWJlcm5ldGVzL2t1YmVybmV0ZXMvdHMvcmVwbGljYXRpb25Db250cm9sbGVyLnRzIiwiL3dvcmtzcGFjZS9qYXZhL2hhd3Rpby1rdWJlcm5ldGVzL2t1YmVybmV0ZXMvdHMvcmVwbGljYXRpb25Db250cm9sbGVyRWRpdC50cyIsIi93b3Jrc3BhY2UvamF2YS9oYXd0aW8ta3ViZXJuZXRlcy9rdWJlcm5ldGVzL3RzL3JlcGxpY2F0aW9uQ29udHJvbGxlcnMudHMiLCIvd29ya3NwYWNlL2phdmEvaGF3dGlvLWt1YmVybmV0ZXMva3ViZXJuZXRlcy90cy9zY2hlbWEudHMiLCIvd29ya3NwYWNlL2phdmEvaGF3dGlvLWt1YmVybmV0ZXMva3ViZXJuZXRlcy90cy9zZXJ2aWNlLnRzIiwiL3dvcmtzcGFjZS9qYXZhL2hhd3Rpby1rdWJlcm5ldGVzL2t1YmVybmV0ZXMvdHMvc2VydmljZUVkaXQudHMiLCIvd29ya3NwYWNlL2phdmEvaGF3dGlvLWt1YmVybmV0ZXMva3ViZXJuZXRlcy90cy9zZXJ2aWNlUmVnaXN0cnkudHMiLCIvd29ya3NwYWNlL2phdmEvaGF3dGlvLWt1YmVybmV0ZXMva3ViZXJuZXRlcy90cy9zZXJ2aWNlcy50cyIsIi93b3Jrc3BhY2UvamF2YS9oYXd0aW8ta3ViZXJuZXRlcy9rdWJlcm5ldGVzL3RzL3NoYXJlZENvbnRyb2xsZXJzLnRzIiwiL3dvcmtzcGFjZS9qYXZhL2hhd3Rpby1rdWJlcm5ldGVzL3Byb2plY3QvdHMvcHJvamVjdEhlbHBlcnMudHMiLCIvd29ya3NwYWNlL2phdmEvaGF3dGlvLWt1YmVybmV0ZXMvcHJvamVjdC90cy9wcm9qZWN0UGx1Z2luLnRzIiwiL3dvcmtzcGFjZS9qYXZhL2hhd3Rpby1rdWJlcm5ldGVzL3Byb2plY3QvdHMvcHJvamVjdC50cyJdLCJuYW1lcyI6WyJLdWJlcm5ldGVzIiwiS3ViZXJuZXRlcy5pc0t1YmVybmV0ZXMiLCJLdWJlcm5ldGVzLmlzS3ViZXJuZXRlc1RlbXBsYXRlTWFuYWdlciIsIkt1YmVybmV0ZXMuaXNBcHBWaWV3IiwiS3ViZXJuZXRlcy51cGRhdGVOYW1lc3BhY2VzIiwiS3ViZXJuZXRlcy51cGRhdGVOYW1lc3BhY2VzLnB1c2hJZk5vdEV4aXN0cyIsIkt1YmVybmV0ZXMuc2V0SnNvbiIsIkt1YmVybmV0ZXMubGFiZWxzVG9TdHJpbmciLCJLdWJlcm5ldGVzLmluaXRTaGFyZWQiLCJLdWJlcm5ldGVzLmNyZWF0ZVBvZENvdW50ZXJzIiwiS3ViZXJuZXRlcy5jb252ZXJ0S3ViZXJuZXRlc0pzb25Ub0l0ZW1zIiwiS3ViZXJuZXRlcy5pc1YxYmV0YTFPcjIiLCJLdWJlcm5ldGVzLmVudGl0eVBhZ2VMaW5rIiwiS3ViZXJuZXRlcy5yZXNvdXJjZUtpbmRUb1VyaVBhdGgiLCJLdWJlcm5ldGVzLmlzSWdub3JlTmFtZXNwYWNlS2luZCIsIkt1YmVybmV0ZXMua3ViZXJuZXRlc1VybEZvcktpbmQiLCJLdWJlcm5ldGVzLmt1YmVybmV0ZXNVcmxGb3JJdGVtS2luZCIsIkt1YmVybmV0ZXMua3ViZXJuZXRlc1Byb3h5VXJsRm9yU2VydmljZSIsIkt1YmVybmV0ZXMuYnVpbGRDb25maWdSZXN0VXJsIiwiS3ViZXJuZXRlcy5kZXBsb3ltZW50Q29uZmlnUmVzdFVybCIsIkt1YmVybmV0ZXMuaW1hZ2VSZXBvc2l0b3J5UmVzdFVybCIsIkt1YmVybmV0ZXMuYnVpbGRSZXN0VXJsIiwiS3ViZXJuZXRlcy5idWlsZExvZ3NSZXN0VXJsIiwiS3ViZXJuZXRlcy5ydW5BcHAiLCJLdWJlcm5ldGVzLmlzUnVubmluZyIsIkt1YmVybmV0ZXMuc2VsZWN0b3JNYXRjaGVzIiwiS3ViZXJuZXRlcy5raWJhbmFMb2dzTGluayIsIkt1YmVybmV0ZXMub3BlbkxvZ3NGb3JQb2RzIiwiS3ViZXJuZXRlcy5yZXNpemVDb250cm9sbGVyIiwiS3ViZXJuZXRlcy5zdGF0dXNUZXh0VG9Dc3NDbGFzcyIsIkt1YmVybmV0ZXMucG9kU3RhdHVzIiwiS3ViZXJuZXRlcy5jcmVhdGVBcHBWaWV3UG9kQ291bnRlcnMiLCJLdWJlcm5ldGVzLmNyZWF0ZUFwcFZpZXdTZXJ2aWNlVmlld3MiLCJLdWJlcm5ldGVzLmdpdFBhdGhUb1VybCIsIkt1YmVybmV0ZXMuZW5yaWNoQnVpbGRDb25maWciLCJLdWJlcm5ldGVzLmVucmljaEJ1aWxkQ29uZmlncyIsIkt1YmVybmV0ZXMuZW5yaWNoQnVpbGRzIiwiS3ViZXJuZXRlcy5lbnJpY2hCdWlsZCIsIkt1YmVybmV0ZXMuZW5yaWNoRGVwbG95bWVudENvbmZpZyIsIkt1YmVybmV0ZXMuZW5yaWNoRGVwbG95bWVudENvbmZpZ3MiLCJLdWJlcm5ldGVzLmVucmljaEltYWdlUmVwb3NpdG9yeSIsIkt1YmVybmV0ZXMuZW5yaWNoSW1hZ2VSZXBvc2l0b3JpZXMiLCJLdWJlcm5ldGVzLmNvbnRhaW5lckxhYmVsQ2xhc3MiLCJLdWJlcm5ldGVzLmlzRm9yZ2VFbmFibGVkIiwiS3ViZXJuZXRlcy5jb25maWd1cmVTY2hlbWEiLCJLdWJlcm5ldGVzLmJ5SWQiLCJLdWJlcm5ldGVzLmNyZWF0ZUtleSIsIkt1YmVybmV0ZXMucG9wdWxhdGVLZXkiLCJLdWJlcm5ldGVzLnBvcHVsYXRlS2V5cyIsIkt1YmVybmV0ZXMuc2VsZWN0UG9kcyIsIkt1YmVybmV0ZXMuS3ViZXJuZXRlc01vZGVsU2VydmljZSIsIkt1YmVybmV0ZXMuS3ViZXJuZXRlc01vZGVsU2VydmljZS5jb25zdHJ1Y3RvciIsIkt1YmVybmV0ZXMuS3ViZXJuZXRlc01vZGVsU2VydmljZS4ka2VlcFBvbGxpbmciLCJLdWJlcm5ldGVzLkt1YmVybmV0ZXNNb2RlbFNlcnZpY2Uub3JSZWRyYXciLCJLdWJlcm5ldGVzLkt1YmVybmV0ZXNNb2RlbFNlcnZpY2UuZ2V0U2VydmljZSIsIkt1YmVybmV0ZXMuS3ViZXJuZXRlc01vZGVsU2VydmljZS5nZXRSZXBsaWNhdGlvbkNvbnRyb2xsZXIiLCJLdWJlcm5ldGVzLkt1YmVybmV0ZXNNb2RlbFNlcnZpY2UuZ2V0UG9kIiwiS3ViZXJuZXRlcy5LdWJlcm5ldGVzTW9kZWxTZXJ2aWNlLnBvZHNGb3JOYW1lc3BhY2UiLCJLdWJlcm5ldGVzLkt1YmVybmV0ZXNNb2RlbFNlcnZpY2UuY3VycmVudE5hbWVzcGFjZSIsIkt1YmVybmV0ZXMuS3ViZXJuZXRlc01vZGVsU2VydmljZS51cGRhdGVJY29uVXJsQW5kQXBwSW5mbyIsIkt1YmVybmV0ZXMuS3ViZXJuZXRlc01vZGVsU2VydmljZS5tYXliZUluaXQiLCJLdWJlcm5ldGVzLkt1YmVybmV0ZXNNb2RlbFNlcnZpY2UudXBkYXRlQXBwcyIsIkt1YmVybmV0ZXMuS3ViZXJuZXRlc01vZGVsU2VydmljZS5kaXNjb3ZlclBvZENvbm5lY3Rpb25zIiwiS3ViZXJuZXRlcy5jcmVhdGVLdWJlcm5ldGVzTW9kZWwiLCJLdWJlcm5ldGVzLmNyZWF0ZUt1YmVybmV0ZXNNb2RlbC5tYXliZU5leHQiLCJLdWJlcm5ldGVzLmNyZWF0ZUt1YmVybmV0ZXNNb2RlbC5oYXNDaGFuZ2VkIiwiS3ViZXJuZXRlcy5jcmVhdGVLdWJlcm5ldGVzTW9kZWwuc2VsZWN0UG9kcyIsIkt1YmVybmV0ZXMuY3JlYXRlUmVzb3VyY2UiLCJLdWJlcm5ldGVzLmFwcE1hdGNoZXMiLCJLdWJlcm5ldGVzLmFwcFJ1bm5pbmciLCJLdWJlcm5ldGVzLmRlbGV0ZUFwcCIsIkt1YmVybmV0ZXMuZGVsZXRlQXBwLmRlbGV0ZVNlcnZpY2VzIiwiS3ViZXJuZXRlcy5kZWxldGVBcHAuZGVsZXRlUmVwbGljYXRpb25Db250cm9sbGVycyIsIkt1YmVybmV0ZXMuZGVsZXRlQXBwLmRlbGV0ZVBvZHMiLCJLdWJlcm5ldGVzLmRlbGV0ZVNlbGVjdGVkIiwiS3ViZXJuZXRlcy51cGRhdGVEYXRhIiwiS3ViZXJuZXRlcy5kZWxldGVFbnRpdHkiLCJLdWJlcm5ldGVzLmludGVycG9sYXRlIiwiS3ViZXJuZXRlcy5jcmVhdGVFbGVtZW50IiwiS3ViZXJuZXRlcy5jcmVhdGVFbGVtZW50cyIsIkt1YmVybmV0ZXMuYXBwZW5kTmV3RWxlbWVudHMiLCJLdWJlcm5ldGVzLm5hbWVzcGFjZUZpbHRlciIsIkt1YmVybmV0ZXMuZmlyc3REcmF3IiwiS3ViZXJuZXRlcy51cGRhdGUiLCJLdWJlcm5ldGVzLnJlZnJlc2hEcmF3aW5nIiwiS3ViZXJuZXRlcy5jcmVhdGVQaXBlbGluZUtleSIsIkt1YmVybmV0ZXMubWF5YmVOZXh0IiwiS3ViZXJuZXRlcy5tYXliZUluaXQiLCJLdWJlcm5ldGVzLlNlcnZpY2VSZWdpc3RyeVNlcnZpY2UiLCJLdWJlcm5ldGVzLlNlcnZpY2VSZWdpc3RyeVNlcnZpY2UuY29uc3RydWN0b3IiLCJLdWJlcm5ldGVzLlNlcnZpY2VSZWdpc3RyeVNlcnZpY2UuaGFzU2VydmljZSIsIkt1YmVybmV0ZXMuU2VydmljZVJlZ2lzdHJ5U2VydmljZS5maW5kU2VydmljZSIsIkt1YmVybmV0ZXMuU2VydmljZVJlZ2lzdHJ5U2VydmljZS5zZXJ2aWNlTGluayIsIkt1YmVybmV0ZXMuU2VydmljZVJlZ2lzdHJ5U2VydmljZS5nZXRNb2RlbCIsIkt1YmVybmV0ZXMuZ2V0V2VpZ2h0IiwiUHJvamVjdCIsIlByb2plY3QuY3JlYXRlUHJvamVjdCIsIlByb2plY3QudXBkYXRlRGF0YSJdLCJtYXBwaW5ncyI6IkFBQUEsc0RBQXNEO0FBQ3RELG1EQUFtRDtBQUNuRCwwREFBMEQ7QUFDMUQscURBQXFEOztBQ0hyRCxBQUNBLHlDQUR5QztBQUN6QyxJQUFPLFVBQVUsQ0F5MkJoQjtBQXoyQkQsV0FBTyxVQUFVLEVBQUMsQ0FBQztJQUVOQSxrQkFBT0EsR0FBR0EsYUFBYUEsQ0FBQ0E7SUFDeEJBLGVBQUlBLEdBQUdBLEdBQUdBLEdBQUdBLGtCQUFPQSxDQUFDQTtJQUNyQkEsdUJBQVlBLEdBQUdBLGVBQUlBLEdBQUdBLE9BQU9BLENBQUNBO0lBQzlCQSxxQkFBVUEsR0FBR0EsWUFBWUEsQ0FBQ0E7SUFDMUJBLHFCQUFVQSxHQUFHQSxxQkFBcUJBLENBQUNBO0lBQ25DQSx1QkFBWUEsR0FBR0EscUJBQVVBLEdBQUdBLE9BQU9BLENBQUNBO0lBQ3BDQSxjQUFHQSxHQUFrQkEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EscUJBQVVBLENBQUNBLENBQUNBO0lBRTVDQSwyQkFBZ0JBLEdBQUdBLElBQUlBLENBQUNBO0lBRXhCQSx5QkFBY0EsR0FBR0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EscUJBQXFCQSxDQUFDQSxDQUFDQTtJQUNqREEsc0JBQVdBLEdBQUdBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLGVBQWVBLENBQUNBLENBQUNBO0lBRXhDQSw0QkFBaUJBLEdBQUdBLFNBQVNBLENBQUNBO0lBQzlCQSw4QkFBbUJBLEdBQUdBLFNBQVNBLENBQUNBO0lBQ2hD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QUlBLEdBQUdBLENBQUNBLE9BQU9BLElBQUlBLEVBQUVBLENBQUNBLENBQUNBLEVBQUVBLElBQUlBLFlBQVlBLENBQUNBO1lBQzlDQSxJQUFJQSxPQUFPQSxHQUFHQSxDQUFDQSxPQUFPQSxJQUFJQSxFQUFFQSxDQUFDQSxDQUFDQSxRQUFRQSxDQUFDQTtZQUN2Q0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsSUFBSUEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3pCQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxRQUFRQSxDQUFDQTtZQUMxQkEsQ0FBQ0E7WUFDREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3hCQSxPQUFPQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUM1QkEsQ0FBQ0E7WUFDREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsRUFBRUEsSUFBSUEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQy9CQSxPQUFPQSxDQUFDQSxFQUFFQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQTtZQUMxQkEsQ0FBQ0E7WUFDREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ1ZBLE9BQU9BLEdBQUdBLElBQUlBLENBQUNBO1lBQ2pCQSxDQUFDQTtZQUNEQSxJQUFJQSxRQUFRQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQTtZQUMzQkEsSUFBSUEsWUFBWUEsR0FBR0EsUUFBUUEsR0FBR0EsTUFBTUEsR0FBR0EsQ0FBQ0EsUUFBUUEsR0FBR0EsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7WUFDakVBLElBQUlBLElBQUlBLEdBQUdBO2dCQUNUQSxPQUFPQSxFQUFFQSxPQUFPQSxJQUFJQSxJQUFJQTtnQkFDeEJBLElBQUlBLEVBQUVBLElBQUlBO2dCQUNWQSxXQUFXQSxFQUFFQSxPQUFPQSxDQUFDQSxhQUFhQTtnQkFDbENBLFlBQVlBLEVBQUVBLFlBQVlBO2dCQUMxQkEsT0FBT0EsRUFBRUEsT0FBT0E7Z0JBQ2hCQSxZQUFZQSxFQUFFQSxZQUFZQTtnQkFDMUJBLE9BQU9BLEVBQUVBLE9BQU9BO2dCQUNoQkEscUJBQXFCQSxFQUFFQSxxQkFBcUJBO2dCQUM1Q0EsSUFBSUEsRUFBRUEsSUFBSUE7YUFDWEEsQ0FBQ0E7WUFDRkEsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDbkJBLENBQUNBO1FBQ0RBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBO0lBQ2ZBLENBQUNBO0lBdERlaEMsb0NBQXlCQSxHQUF6QkEseUJBc0RmQSxDQUFBQTtJQUVEQSxBQUdBQTs7T0FER0E7YUFDYUEsWUFBWUEsQ0FBQ0EsUUFBUUEsRUFBRUEsTUFBaUJBO1FBQWpCaUMsc0JBQWlCQSxHQUFqQkEsaUJBQWlCQTtRQUN0REEsTUFBTUEsQ0FBQ0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsZUFBZUEsQ0FBQ0EsSUFBSUEsRUFBRUEsQ0FBQ0EsR0FBR0EsT0FBT0EsR0FBR0EsTUFBTUEsR0FBR0EsUUFBUUEsQ0FBQ0E7SUFDeEZBLENBQUNBO0lBRmVqQyx1QkFBWUEsR0FBWkEsWUFFZkEsQ0FBQUE7SUFHREEsU0FBZ0JBLGlCQUFpQkEsQ0FBQ0EsV0FBV0EsRUFBRUEsWUFBWUE7UUFDekRrQyxFQUFFQSxDQUFDQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNoQkEsSUFBSUEsVUFBVUEsR0FBVUEsSUFBSUEsQ0FBQ0E7WUFDN0JBLElBQUlBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLFdBQVdBLEVBQUVBLENBQUNBLFVBQVVBLEVBQUVBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBO1lBQzNEQSxXQUFXQSxDQUFDQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUN6QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ1RBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLEtBQUtBLEVBQUVBLElBQUlBLENBQUNBLEVBQUVBLFVBQUNBLElBQUlBO29CQUNsQ0EsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsUUFBUUEsRUFBRUEsVUFBQ0EsT0FBT0E7d0JBQzVDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQSxDQUFDQTs0QkFDaEJBLElBQUlBLElBQUlBLEdBQUdBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBOzRCQUN4QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsS0FBS0EsU0FBU0EsSUFBSUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0NBQy9CQSxJQUFJQSxPQUFPQSxHQUFHQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtnQ0FDNUJBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLElBQUlBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBO29DQUNwQkEsSUFBSUEsTUFBTUEsR0FBR0EsT0FBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0E7b0NBQzVCQSxFQUFFQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTt3Q0FDWEEsVUFBVUEsR0FBR0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0Esa0NBQXVCQSxFQUFFQSxJQUFJQSxFQUFFQSxNQUFNQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTt3Q0FDMUVBLFdBQVdBLENBQUNBLFdBQVdBLEdBQUdBLFVBQVVBLENBQUNBO29DQUN2Q0EsQ0FBQ0E7Z0NBQ0hBLENBQUNBOzRCQUNIQSxDQUFDQTt3QkFDSEEsQ0FBQ0E7b0JBQ0hBLENBQUNBLENBQUNBLENBQUNBO2dCQUNMQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFFSEEsQUFDQUEsZ0NBRGdDQTtnQkFDaENBLEVBQUVBLENBQUNBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLENBQUNBO29CQUNqQkEsV0FBV0EsQ0FBQ0EsVUFBVUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsRUFBRUE7d0JBQzVDQSxRQUFRQSxFQUFFQTs0QkFDUkEsTUFBTUEsRUFBRUE7Z0NBQ05BLFdBQVdBLEVBQUVBLElBQUlBOzZCQUNsQkE7eUJBQ0ZBO3FCQUNGQSxDQUFDQSxDQUFDQTtnQkFDTEEsQ0FBQ0E7WUFDSEEsQ0FBQ0E7UUFDSEEsQ0FBQ0E7SUFDSEEsQ0FBQ0E7SUFwQ2VsQyw0QkFBaUJBLEdBQWpCQSxpQkFvQ2ZBLENBQUFBO0lBRURBLFNBQWdCQSxrQkFBa0JBLENBQUNBLFlBQVlBLEVBQUVBLFlBQVlBO1FBQzNEbUMsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsWUFBWUEsRUFBRUEsVUFBQ0EsV0FBV0E7WUFDeENBLGlCQUFpQkEsQ0FBQ0EsV0FBV0EsRUFBRUEsWUFBWUEsQ0FBQ0EsQ0FBQ0E7UUFDL0NBLENBQUNBLENBQUNBLENBQUNBO1FBQ0hBLE1BQU1BLENBQUNBLFlBQVlBLENBQUNBO0lBQ3RCQSxDQUFDQTtJQUxlbkMsNkJBQWtCQSxHQUFsQkEsa0JBS2ZBLENBQUFBO0lBRURBLFNBQWdCQSxZQUFZQSxDQUFDQSxNQUFNQTtRQUNqQ29DLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLE1BQU1BLEVBQUVBLFVBQUNBLEtBQUtBO1lBQzVCQSxXQUFXQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtRQUNyQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDSEEsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsRUFBRUEsZUFBZUEsQ0FBQ0EsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0E7SUFDckRBLENBQUNBO0lBTGVwQyx1QkFBWUEsR0FBWkEsWUFLZkEsQ0FBQUE7SUFFREEsU0FBZ0JBLFdBQVdBLENBQUNBLEtBQUtBO1FBQy9CcUMsRUFBRUEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDVkEsSUFBSUEsUUFBUUEsR0FBR0EsS0FBS0EsQ0FBQ0EsUUFBUUEsSUFBSUEsRUFBRUEsQ0FBQ0E7WUFDcENBLElBQUlBLElBQUlBLEdBQUdBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBO1lBQ3pCQSxJQUFJQSxTQUFTQSxHQUFHQSxRQUFRQSxDQUFDQSxTQUFTQSxDQUFDQTtZQUNuQ0EsS0FBS0EsQ0FBQ0EsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFDbkJBLEtBQUtBLENBQUNBLFVBQVVBLEdBQUdBLFNBQVNBLENBQUNBO1lBRTdCQSxJQUFJQSxTQUFTQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUNoQ0EsSUFBSUEsZUFBZUEsR0FBR0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0E7WUFDdkNBLEtBQUtBLENBQUNBLFVBQVVBLEdBQUdBLENBQUNBLGVBQWVBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLFNBQVNBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLEVBQUVBLGVBQWVBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLEVBQUVBLEVBQUVBLENBQUNBLENBQUNBO1lBRXJIQSxJQUFJQSxNQUFNQSxHQUFHQSxRQUFRQSxDQUFDQSxNQUFNQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUNuQ0EsSUFBSUEsUUFBUUEsR0FBR0EsTUFBTUEsQ0FBQ0EsV0FBV0EsQ0FBQ0E7WUFDbENBLEtBQUtBLENBQUNBLFNBQVNBLEdBQUdBLFFBQVFBLENBQUNBO1lBQzNCQSxFQUFFQSxDQUFDQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDYkEsS0FBS0EsQ0FBQ0EsV0FBV0EsR0FBR0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EseUJBQXlCQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQTtZQUMzRUEsQ0FBQ0E7WUFDREEsSUFBSUEsaUJBQWlCQSxHQUFHQSxRQUFRQSxDQUFDQSxpQkFBaUJBLENBQUNBO1lBQ25EQSxFQUFFQSxDQUFDQSxDQUFDQSxpQkFBaUJBLENBQUNBLENBQUNBLENBQUNBO2dCQUN0QkEsSUFBSUEsQ0FBQ0EsR0FBR0EsSUFBSUEsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxDQUFDQTtnQkFDcENBLEtBQUtBLENBQUNBLGFBQWFBLEdBQUdBLENBQUNBLENBQUNBO1lBQzFCQSxDQUFDQTtZQUNEQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDVEEsS0FBS0EsQ0FBQ0EsU0FBU0EsR0FBR0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsbUJBQW1CQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTtnQkFDN0RBLEtBQUtBLENBQUNBLFNBQVNBLEdBQUdBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLHNCQUFzQkEsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDbEVBLENBQUNBO1lBQ0RBLElBQUlBLE9BQU9BLEdBQUdBLEtBQUtBLENBQUNBLE9BQU9BLENBQUNBO1lBQzVCQSxFQUFFQSxDQUFDQSxDQUFDQSxPQUFPQSxJQUFJQSxTQUFTQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDekJBLElBQUlBLFlBQVlBLEdBQUdBLE9BQU9BLENBQUNBLEtBQUtBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUN0Q0EsSUFBSUEsa0JBQWtCQSxHQUFHQSxZQUFZQSxDQUFDQSxNQUFNQSxDQUFBQTtnQkFDNUNBLEtBQUtBLENBQUNBLGFBQWFBLEdBQUdBLENBQUNBLGtCQUFrQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsWUFBWUEsQ0FBQ0Esa0JBQWtCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxPQUFPQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQSxDQUFDQTtnQkFDakhBLEtBQUtBLENBQUNBLFFBQVFBLEdBQUdBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLHNCQUFzQkEsRUFBRUEsU0FBU0EsRUFBRUEsTUFBTUEsRUFBRUEsT0FBT0EsQ0FBQ0EsQ0FBQ0E7WUFDdkZBLENBQUNBO1FBQ0hBLENBQUNBO1FBQ0RBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBO0lBQ2ZBLENBQUNBO0lBcENlckMsc0JBQVdBLEdBQVhBLFdBb0NmQSxDQUFBQTtJQUdEQSxTQUFnQkEsc0JBQXNCQSxDQUFDQSxnQkFBZ0JBO1FBQ3JEc0MsRUFBRUEsQ0FBQ0EsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNyQkEsSUFBSUEsVUFBVUEsR0FBVUEsSUFBSUEsQ0FBQ0E7WUFDN0JBLElBQUlBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLGdCQUFnQkEsRUFBRUEsQ0FBQ0EsVUFBVUEsRUFBRUEsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDaEVBLGdCQUFnQkEsQ0FBQ0EsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFDOUJBLElBQUlBLEtBQUtBLEdBQUdBLEtBQUtBLENBQUNBO1lBQ2xCQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxnQkFBZ0JBLENBQUNBLFFBQVFBLEVBQUVBLFVBQUNBLE9BQU9BO2dCQUNqREEsSUFBSUEsSUFBSUEsR0FBR0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0E7Z0JBQ3hCQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxnQkFBZ0JBLENBQUNBLGtCQUFrQkEsSUFBSUEsSUFBSUEsS0FBS0EsYUFBYUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ25FQSxJQUFJQSxpQkFBaUJBLEdBQUdBLE9BQU9BLENBQUNBLGlCQUFpQkEsQ0FBQ0E7b0JBQ2xEQSxFQUFFQSxDQUFDQSxDQUFDQSxpQkFBaUJBLENBQUNBLENBQUNBLENBQUNBO3dCQUN0QkEsSUFBSUEsY0FBY0EsR0FBR0EsaUJBQWlCQSxDQUFDQSxjQUFjQSxJQUFJQSxFQUFFQSxDQUFDQTt3QkFDNURBLGlCQUFpQkEsQ0FBQ0EsZUFBZUEsR0FBR0EsY0FBY0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7d0JBQzdEQSxnQkFBZ0JBLENBQUNBLGtCQUFrQkEsR0FBR0EsaUJBQWlCQSxDQUFDQTtvQkFDMURBLENBQUNBO2dCQUNIQSxDQUFDQTtZQUNIQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNMQSxDQUFDQTtJQUNIQSxDQUFDQTtJQWxCZXRDLGlDQUFzQkEsR0FBdEJBLHNCQWtCZkEsQ0FBQUE7SUFFREEsU0FBZ0JBLHVCQUF1QkEsQ0FBQ0EsaUJBQWlCQTtRQUN2RHVDLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLGlCQUFpQkEsRUFBRUEsVUFBQ0EsZ0JBQWdCQTtZQUNsREEsc0JBQXNCQSxDQUFDQSxnQkFBZ0JBLENBQUNBLENBQUNBO1FBQzNDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNIQSxNQUFNQSxDQUFDQSxpQkFBaUJBLENBQUNBO0lBQzNCQSxDQUFDQTtJQUxldkMsa0NBQXVCQSxHQUF2QkEsdUJBS2ZBLENBQUFBO0lBRURBLFNBQWdCQSxxQkFBcUJBLENBQUNBLGVBQWVBO1FBQ25Ed0MsRUFBRUEsQ0FBQ0EsQ0FBQ0EsZUFBZUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDcEJBLElBQUlBLFVBQVVBLEdBQVVBLElBQUlBLENBQUNBO1lBQzdCQSxJQUFJQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxlQUFlQSxFQUFFQSxDQUFDQSxVQUFVQSxFQUFFQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUMvREEsZUFBZUEsQ0FBQ0EsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFDL0JBLENBQUNBO0lBQ0hBLENBQUNBO0lBTmV4QyxnQ0FBcUJBLEdBQXJCQSxxQkFNZkEsQ0FBQUE7SUFFREEsU0FBZ0JBLHVCQUF1QkEsQ0FBQ0EsaUJBQWlCQTtRQUN2RHlDLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLGlCQUFpQkEsRUFBRUEsVUFBQ0EsZUFBZUE7WUFDakRBLHFCQUFxQkEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsQ0FBQ0E7UUFDekNBLENBQUNBLENBQUNBLENBQUNBO1FBQ0hBLE1BQU1BLENBQUNBLGlCQUFpQkEsQ0FBQ0E7SUFDM0JBLENBQUNBO0lBTGV6QyxrQ0FBdUJBLEdBQXZCQSx1QkFLZkEsQ0FBQUE7SUFHREEsSUFBSUEsV0FBV0EsR0FBR0E7UUFDaEJBLFNBQVNBLEVBQUVBLGlCQUFpQkE7UUFDNUJBLE1BQU1BLEVBQUVBLHdCQUF3QkE7UUFDaENBLFdBQVdBLEVBQUVBLHVCQUF1QkE7S0FDckNBLENBQUNBO0lBRUZBLFNBQWdCQSxtQkFBbUJBLENBQUNBLFNBQWdCQTtRQUNsRDBDLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLFNBQVNBLElBQUlBLFdBQVdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ2hDQSxNQUFNQSxDQUFDQSxlQUFlQSxDQUFDQTtRQUN6QkEsQ0FBQ0E7UUFDREEsSUFBSUE7WUFBQ0EsTUFBTUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsR0FBR0EsZ0JBQWdCQSxDQUFDQTtJQUN4REEsQ0FBQ0E7SUFMZTFDLDhCQUFtQkEsR0FBbkJBLG1CQUtmQSxDQUFBQTtJQUdEQSxBQUdBQTs7T0FER0E7YUFDYUEsY0FBY0E7UUFDNUIyQyxBQUNBQSxrRUFEa0VBO1FBQ2xFQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtJQUNkQSxDQUFDQTtJQUhlM0MseUJBQWNBLEdBQWRBLGNBR2ZBLENBQUFBO0lBRURBLEFBR0FBOztPQURHQTthQUNhQSxlQUFlQTtRQUM3QjRDLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLGlCQUFNQSxDQUFDQSxXQUFXQSxFQUFFQSxVQUFDQSxVQUFVQSxFQUFFQSxJQUFJQTtZQUNuREEsSUFBSUEsVUFBVUEsR0FBR0EsVUFBVUEsQ0FBQ0EsVUFBVUEsQ0FBQ0E7WUFDdkNBLEVBQUVBLENBQUNBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBLENBQUNBO2dCQUNmQSxJQUFJQSxjQUFjQSxHQUFHQSxDQUFDQSxtQkFBbUJBLEVBQUVBLE1BQU1BLEVBQUVBLFlBQVlBLEVBQUVBLGFBQWFBLEVBQUVBLHNCQUFzQkEsRUFBRUEsV0FBV0EsRUFBRUEsaUJBQWlCQSxFQUFFQSxVQUFVQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQTtnQkFDM0pBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLGNBQWNBLEVBQUVBLFVBQUNBLFlBQVlBO29CQUMzQ0EsSUFBSUEsUUFBUUEsR0FBR0EsVUFBVUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0E7b0JBQ3hDQSxFQUFFQSxDQUFDQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTt3QkFDYkEsUUFBUUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsR0FBSUEsSUFBSUEsQ0FBQ0E7b0JBQzdCQSxDQUFDQTtnQkFDSEEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ0hBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLFVBQVVBLEVBQUVBLFVBQUNBLFFBQVFBLEVBQUVBLFlBQVlBO29CQUNqREEsSUFBSUEsR0FBR0EsR0FBR0EsUUFBUUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7b0JBQzNCQSxJQUFJQSxJQUFJQSxHQUFHQSxRQUFRQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtvQkFDNUJBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLElBQUlBLElBQUlBLElBQUlBLEtBQUtBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO3dCQUN4Q0EsUUFBUUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0E7b0JBQ3pCQSxDQUFDQTtvQkFDREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsS0FBS0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7d0JBQ3JCQSxJQUFJQSxLQUFLQSxHQUFHQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTt3QkFDOUJBLEVBQUVBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBOzRCQUNWQSxJQUFJQSxHQUFHQSxHQUFHQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTs0QkFDeEJBLElBQUlBLElBQUlBLEdBQUdBLEtBQUtBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBOzRCQUN6QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsSUFBSUEsSUFBSUEsS0FBS0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0NBQ3hDQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQTs0QkFDdEJBLENBQUNBO3dCQUNIQSxDQUFDQTtvQkFDSEEsQ0FBQ0E7Z0JBQ0hBLENBQUNBLENBQUNBLENBQUNBO1lBQ0xBLENBQUNBO1lBRURBLGlCQUFNQSxDQUFDQSxXQUFXQSxDQUFDQSx1QkFBdUJBLENBQUNBLFVBQVVBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLEdBQUdBLFVBQVVBLENBQUNBO1FBQ2pGQSxDQUFDQSxDQUFDQSxDQUFBQTtJQUNKQSxDQUFDQTtJQWhDZTVDLDBCQUFlQSxHQUFmQSxlQWdDZkEsQ0FBQUE7QUFFSEEsQ0FBQ0EsRUF6MkJNLFVBQVUsS0FBVixVQUFVLFFBeTJCaEI7O0FDMTJCRCx5Q0FBeUM7QUFDekMsNENBQTRDO0FBRTVDLElBQU8sVUFBVSxDQW9pQmhCO0FBcGlCRCxXQUFPLFVBQVUsRUFBQyxDQUFDO0lBRWpCQSxTQUFTQSxJQUFJQSxDQUFDQSxLQUFLQTtRQUNqQjZDLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLEVBQUVBLENBQUNBO0lBQ2xCQSxDQUFDQTtJQUVEN0MsU0FBU0EsU0FBU0EsQ0FBQ0EsU0FBU0EsRUFBRUEsRUFBRUE7UUFDOUI4QyxNQUFNQSxDQUFDQSxDQUFDQSxTQUFTQSxJQUFJQSxFQUFFQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxFQUFFQSxDQUFDQTtJQUN0Q0EsQ0FBQ0E7SUFFRDlDLFNBQVNBLFdBQVdBLENBQUNBLElBQUlBO1FBQ3ZCK0MsSUFBSUEsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFDbEJBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLEdBQUdBLFNBQVNBLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLEVBQUVBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO1FBQ3BEQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQTtJQUNoQkEsQ0FBQ0E7SUFFRC9DLFNBQVNBLFlBQVlBLENBQUNBLEtBQWdCQTtRQUNwQ2dELElBQUlBLE1BQU1BLEdBQUdBLEVBQUVBLENBQUNBO1FBQ2hCQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxLQUFLQSxFQUFFQSxVQUFDQSxJQUFJQTtZQUMxQkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDakNBLENBQUNBLENBQUNBLENBQUNBO1FBQ0hBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBO0lBQ2hCQSxDQUFDQTtJQUVEaEQsU0FBU0EsVUFBVUEsQ0FBQ0EsSUFBSUEsRUFBRUEsU0FBU0EsRUFBRUEsTUFBTUE7UUFDekNpRCxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxVQUFDQSxHQUFHQTtZQUNyQkEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsU0FBU0EsS0FBS0EsU0FBU0EsSUFBSUEsMEJBQWVBLENBQUNBLE1BQU1BLEVBQUVBLEdBQUdBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO1FBQzVFQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUNMQSxDQUFDQTtJQUdEakQsQUFHQUE7O09BREdBO1FBQ1VBLHNCQUFzQkE7UUFBbkNrRCxTQUFhQSxzQkFBc0JBO1lBQzFCQyxlQUFVQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUNsQkEsU0FBSUEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDVkEsYUFBUUEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDZEEsMkJBQXNCQSxHQUFHQSxFQUFFQSxDQUFDQTtZQUM1QkEsU0FBSUEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDVkEsVUFBS0EsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDWEEsZUFBVUEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDaEJBLFdBQU1BLEdBQUdBLEVBQUVBLENBQUNBO1lBQ1pBLFdBQU1BLEdBQUdBLEtBQUtBLENBQUNBO1lBQ2ZBLHFCQUFnQkEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFFN0JBLDRCQUE0QkE7WUFDckJBLGVBQVVBLEdBQUdBLEVBQUVBLENBQUNBO1lBQ2hCQSxrQkFBYUEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDbkJBLGdDQUEyQkEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDakNBLGNBQVNBLEdBQUdBLEVBQUVBLENBQUNBO1lBRWZBLGFBQVFBLEdBQUdBLEVBQUVBLENBQUNBO1lBQ2RBLGFBQVFBLEdBQUdBLEVBQUVBLENBQUNBO1lBQ2RBLGVBQVVBLEdBQUdBLEVBQUVBLENBQUNBO1lBRWhCQSxZQUFPQSxHQUFHQSxLQUFLQSxDQUFDQTtZQUNoQkEsZ0JBQVdBLEdBQUdBLEtBQUtBLENBQUNBO1lBRXBCQSxVQUFLQSxHQUFHQTtZQUNmQSxDQUFDQSxDQUFDQTtRQW9XSkEsQ0FBQ0E7UUFsV1FELDZDQUFZQSxHQUFuQkE7WUFDRUUsTUFBTUEsQ0FBQ0EsMkJBQWdCQSxDQUFDQTtRQUMxQkEsQ0FBQ0E7UUFFTUYseUNBQVFBLEdBQWZBLFVBQWdCQSxJQUFJQTtZQUNsQkcsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsSUFBSUEsSUFBSUEsQ0FBQ0E7UUFDcENBLENBQUNBO1FBRU1ILDJDQUFVQSxHQUFqQkEsVUFBa0JBLFNBQVNBLEVBQUVBLEVBQUVBO1lBQzdCSSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQSxTQUFTQSxDQUFDQSxTQUFTQSxFQUFFQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN0REEsQ0FBQ0E7UUFFTUoseURBQXdCQSxHQUEvQkEsVUFBZ0NBLFNBQVNBLEVBQUVBLEVBQUVBO1lBQzNDSyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSwyQkFBMkJBLENBQUNBLFNBQVNBLENBQUNBLFNBQVNBLEVBQUVBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1FBQ3BFQSxDQUFDQTtRQUVNTCx1Q0FBTUEsR0FBYkEsVUFBY0EsU0FBU0EsRUFBRUEsRUFBRUE7WUFDekJNLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLFNBQVNBLENBQUNBLFNBQVNBLEVBQUVBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1FBQ2xEQSxDQUFDQTtRQUVNTixpREFBZ0JBLEdBQXZCQSxVQUF3QkEsU0FBbUNBO1lBQW5DTyx5QkFBbUNBLEdBQW5DQSxZQUFZQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEVBQUVBO1lBQ3pEQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxFQUFFQSxFQUFFQSxTQUFTQSxFQUFFQSxTQUFTQSxFQUFFQSxDQUFDQSxDQUFDQTtRQUN2REEsQ0FBQ0E7UUFFRFA7O1dBRUdBO1FBQ0lBLGlEQUFnQkEsR0FBdkJBO1lBQ0VRLElBQUlBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBO1lBQ2xCQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDcEJBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLGlCQUFpQkEsQ0FBQ0E7WUFDN0NBLENBQUNBO1lBQ0RBLE1BQU1BLENBQUNBLE1BQU1BLElBQUlBLDJCQUFnQkEsQ0FBQ0E7UUFDcENBLENBQUNBO1FBRVNSLHdEQUF1QkEsR0FBakNBLFVBQWtDQSxNQUFNQSxFQUFFQSxTQUFpQkE7WUFDekRTLElBQUlBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBO1lBQ2xCQSxJQUFJQSxFQUFFQSxHQUFHQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQTtZQUNuQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsSUFBSUEsU0FBU0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3BCQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxJQUFJQSxFQUFFQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFDQSxPQUFPQTtvQkFDcENBLElBQUlBLFFBQVFBLEdBQUdBLE9BQU9BLENBQUNBLFFBQVFBLENBQUNBO29CQUNoQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsUUFBUUEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7d0JBQ3hCQSxJQUFJQSxPQUFPQSxHQUFHQSx1QkFBWUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7d0JBQ3JDQSxJQUFJQSxHQUFHQSxHQUFHQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQSxPQUFPQSxFQUFFQSxTQUFTQSxDQUFDQSxDQUFDQSxDQUFDQTt3QkFDdERBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLEVBQUVBLFVBQUNBLEtBQUtBOzRCQUN6QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsS0FBS0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0NBQ2pCQSxNQUFNQSxDQUFDQSxRQUFRQSxHQUFHQSxPQUFPQSxDQUFDQTtnQ0FDMUJBLE1BQU1BLENBQUNBLE9BQU9BLEdBQUdBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBO2dDQUNqQ0EsTUFBTUEsQ0FBQ0EsS0FBS0EsR0FBR0EsT0FBT0EsQ0FBQ0E7NEJBQ3pCQSxDQUFDQTt3QkFDSEEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ0xBLENBQUNBO2dCQUNIQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNMQSxDQUFDQTtZQUNEQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDckJBLE1BQU1BLENBQUNBLFFBQVFBLEdBQUdBLHlCQUFjQSxDQUFDQTtZQUNuQ0EsQ0FBQ0E7UUFDSEEsQ0FBQ0E7UUFFTVQsMENBQVNBLEdBQWhCQTtZQUFBVSxpQkFrSENBO1lBakhDQSxJQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUNwQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsSUFBSUEsSUFBSUEsQ0FBQ0Esc0JBQXNCQSxJQUFJQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDOURBLElBQUlBLENBQUNBLGFBQWFBLEdBQUdBLEVBQUVBLENBQUNBO2dCQUN4QkEsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsRUFBRUEsQ0FBQ0E7Z0JBQ3BCQSxJQUFJQSxDQUFDQSwyQkFBMkJBLEdBQUdBLEVBQUVBLENBQUNBO2dCQUN0Q0EsSUFBSUEsVUFBVUEsR0FBR0EsRUFBRUEsQ0FBQ0E7Z0JBRXBCQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFDQSxHQUFHQTtvQkFDcEJBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBO3dCQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxHQUFHQSxLQUFLQSxDQUFDQTtvQkFDaENBLEtBQUlBLENBQUNBLFNBQVNBLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBO29CQUMvQkEsSUFBSUEsSUFBSUEsR0FBR0EsR0FBR0EsQ0FBQ0EsWUFBWUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7b0JBQ2pDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQTtvQkFDMUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO29CQUMzQkEsR0FBR0EsQ0FBQ0EsV0FBV0EsR0FBR0EsVUFBVUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7b0JBQ3hEQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTt3QkFDVEEsR0FBR0EsQ0FBQ0EsV0FBV0EsSUFBSUEsbUNBQXdCQSxHQUFHQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQTtvQkFDL0RBLENBQUNBO29CQUNEQSxHQUFHQSxDQUFDQSxRQUFRQSxHQUFHQSx5QkFBY0EsQ0FBQ0E7b0JBQzlCQSxLQUFJQSxDQUFDQSxzQkFBc0JBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO29CQUNqQ0EsR0FBR0EsQ0FBQ0EsZUFBZUEsR0FBR0EsRUFBRUEsQ0FBQ0E7b0JBQ3pCQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxHQUFHQSxFQUFFQSxDQUFDQSxjQUFjQSxFQUFFQSxVQUFVQSxFQUFFQSxZQUFZQSxDQUFDQSxDQUFDQSxFQUFFQSxVQUFDQSxTQUFTQTt3QkFDdkZBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLFNBQVNBLENBQUNBLEtBQUtBLEVBQUVBLFVBQUNBLElBQUlBOzRCQUNwQ0EsSUFBSUEsYUFBYUEsR0FBR0EsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0E7NEJBQ3ZDQSxFQUFFQSxDQUFDQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUFDQSxDQUFDQTtnQ0FDbEJBLEdBQUdBLENBQUNBLGVBQWVBLENBQUNBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBOzRCQUMxQ0EsQ0FBQ0E7d0JBQ0hBLENBQUNBLENBQUNBLENBQUNBO29CQUNMQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDTEEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBRUhBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLE9BQU9BLENBQUNBLFVBQUNBLE9BQU9BO29CQUM1QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0E7d0JBQUNBLE9BQU9BLENBQUNBLElBQUlBLEdBQUdBLFNBQVNBLENBQUNBO29CQUM1Q0EsS0FBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsT0FBT0EsQ0FBQ0E7b0JBQzNDQSxJQUFJQSxRQUFRQSxHQUFHQSxPQUFPQSxDQUFDQSxRQUFRQSxDQUFDQTtvQkFDaENBLE9BQU9BLENBQUNBLEtBQUtBLEdBQUdBLEVBQUVBLENBQUNBO29CQUNuQkEsT0FBT0EsQ0FBQ0EsWUFBWUEsR0FBR0EsUUFBUUEsR0FBR0EsNEJBQWlCQSxDQUFDQSxRQUFRQSxFQUFFQSxLQUFJQSxDQUFDQSxJQUFJQSxFQUFFQSxPQUFPQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQTtvQkFDL0ZBLElBQUlBLFlBQVlBLEdBQUdBLE9BQU9BLENBQUNBLEtBQUtBLENBQUNBO29CQUNqQ0EsT0FBT0EsQ0FBQ0EsU0FBU0EsR0FBR0EsWUFBWUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsVUFBQ0EsR0FBR0E7d0JBQ3ZDQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQTtvQkFDbEJBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO29CQUNiQSxPQUFPQSxDQUFDQSxXQUFXQSxHQUFHQSxVQUFVQSxDQUFDQSxjQUFjQSxDQUFDQSxPQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtvQkFDaEVBLEtBQUlBLENBQUNBLHVCQUF1QkEsQ0FBQ0EsT0FBT0EsRUFBRUEsY0FBY0EsQ0FBQ0EsQ0FBQ0E7b0JBQ3REQSxJQUFJQSxPQUFPQSxHQUFHQSxPQUFPQSxDQUFDQSxRQUFRQSxDQUFDQTtvQkFDL0JBLEVBQUVBLENBQUNBLENBQUNBLE9BQU9BLElBQUlBLFlBQVlBLENBQUNBLENBQUNBLENBQUNBO3dCQUM1QkEsWUFBWUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBQ0EsR0FBR0E7NEJBQ3ZCQSxHQUFHQSxDQUFDQSxRQUFRQSxHQUFHQSxPQUFPQSxDQUFDQTt3QkFDekJBLENBQUNBLENBQUNBLENBQUNBO29CQUNMQSxDQUFDQTtnQkFDSEEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBRUhBLElBQUlBLENBQUNBLHNCQUFzQkEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBQ0EscUJBQXFCQTtvQkFDeERBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLHFCQUFxQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7d0JBQUNBLHFCQUFxQkEsQ0FBQ0EsSUFBSUEsR0FBR0EsdUJBQXVCQSxDQUFDQTtvQkFDdEZBLEtBQUlBLENBQUNBLDJCQUEyQkEsQ0FBQ0EscUJBQXFCQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxxQkFBcUJBLENBQUFBO29CQUNwRkEsSUFBSUEsUUFBUUEsR0FBR0EscUJBQXFCQSxDQUFDQSxZQUFZQSxDQUFDQSxlQUFlQSxDQUFDQTtvQkFDbEVBLHFCQUFxQkEsQ0FBQ0EsS0FBS0EsR0FBR0EsRUFBRUEsQ0FBQ0E7b0JBQ2pDQSxxQkFBcUJBLENBQUNBLFlBQVlBLEdBQUdBLFFBQVFBLEdBQUdBLDRCQUFpQkEsQ0FBQ0EsUUFBUUEsRUFBRUEsS0FBSUEsQ0FBQ0EsSUFBSUEsRUFBRUEscUJBQXFCQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQTtvQkFDM0hBLElBQUlBLFlBQVlBLEdBQUdBLHFCQUFxQkEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7b0JBQy9DQSxxQkFBcUJBLENBQUNBLFNBQVNBLEdBQUdBLFlBQVlBLENBQUNBLEdBQUdBLENBQUNBLFVBQUNBLEdBQUdBO3dCQUNyREEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0E7b0JBQ2xCQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtvQkFDYkEscUJBQXFCQSxDQUFDQSxXQUFXQSxHQUFHQSxVQUFVQSxDQUFDQSxjQUFjQSxDQUFDQSxxQkFBcUJBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO29CQUM1RkEsS0FBSUEsQ0FBQ0EsdUJBQXVCQSxDQUFDQSxxQkFBcUJBLEVBQUVBLDRCQUE0QkEsQ0FBQ0EsQ0FBQ0E7b0JBQ2xGQSxJQUFJQSxPQUFPQSxHQUFJQSxxQkFBcUJBLENBQUNBLFFBQVFBLENBQUNBO29CQUM5Q0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsT0FBT0EsSUFBSUEsWUFBWUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7d0JBQzVCQSxZQUFZQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFDQSxHQUFHQTs0QkFDdkJBLEdBQUdBLENBQUNBLFFBQVFBLEdBQUdBLE9BQU9BLENBQUNBO3dCQUN6QkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ0xBLENBQUNBO2dCQUNIQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDSEEsSUFBSUEsUUFBUUEsR0FBR0EsRUFBRUEsQ0FBQ0E7Z0JBQ2xCQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxVQUFVQSxDQUFDQTtnQkFFN0JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLE9BQU9BLElBQUlBLFVBQVVBLENBQUNBLENBQUNBLENBQUNBO29CQUMvQkEsSUFBSUEsUUFBUUEsR0FBR0EsRUFBRUEsQ0FBQ0E7b0JBQ2xCQSxJQUFJQSxXQUFXQSxHQUFHQSw0QkFBaUJBLENBQUNBLFVBQUNBLEdBQUdBLElBQUtBLE9BQUFBLENBQUNBLEdBQUdBLENBQUNBLFlBQVlBLElBQUlBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLEtBQUtBLE9BQU9BLEVBQXpDQSxDQUF5Q0EsRUFBRUEsSUFBSUEsQ0FBQ0EsSUFBSUEsRUFBRUEsUUFBUUEsRUFBRUEsT0FBT0EsR0FBR0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7b0JBQ2hJQSxJQUFJQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQTtvQkFDbEJBLEVBQUVBLENBQUNBLENBQUNBLFFBQVFBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBO3dCQUNwQkEsSUFBSUEsR0FBR0EsR0FBR0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7d0JBQ3RCQSxJQUFJQSxZQUFZQSxHQUFHQSxHQUFHQSxDQUFDQSxZQUFZQSxDQUFDQTt3QkFDcENBLEVBQUVBLENBQUNBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLENBQUNBOzRCQUNqQkEsTUFBTUEsR0FBR0EsWUFBWUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7d0JBQy9CQSxDQUFDQTtvQkFDSEEsQ0FBQ0E7b0JBQ0RBLElBQUlBLFdBQVdBLEdBQUdBO3dCQUNoQkEsRUFBRUEsRUFBRUEsT0FBT0E7d0JBQ1hBLE1BQU1BLEVBQUVBLE1BQU1BO3dCQUNkQSxJQUFJQSxFQUFFQSxRQUFRQTt3QkFDZEEsSUFBSUEsRUFBRUEsTUFBTUE7d0JBQ1pBLFlBQVlBLEVBQUVBLFdBQVdBO3dCQUN6QkEsUUFBUUEsRUFBRUEsc0JBQVdBO3FCQUN0QkEsQ0FBQ0E7b0JBQ0ZBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBO2dCQUM3QkEsQ0FBQ0E7Z0JBRURBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFlBQVlBLENBQUNBLGNBQWNBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLEVBQUVBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBO2dCQUVqRUEsUUFBUUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBQ0EsT0FBT0E7b0JBQ3ZCQSxJQUFJQSxPQUFPQSxHQUFPQSxLQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFDQSxDQUFDQTt3QkFDbENBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEVBQUVBLEtBQUtBLE9BQU9BLENBQUNBLEVBQUVBLENBQUFBO29CQUM1QkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ0hBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBO3dCQUNiQSxLQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQTt3QkFDbkJBLEtBQUlBLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO29CQUMzQkEsQ0FBQ0E7b0JBQUNBLElBQUlBLENBQUNBLENBQUNBO3dCQUNOQSxLQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxZQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxFQUFFQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDL0RBLENBQUNBO2dCQUNIQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFFSEEsSUFBSUEsQ0FBQ0EsVUFBVUEsRUFBRUEsQ0FBQ0E7Z0JBRWxCQSwyQkFBZ0JBLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLEVBQUVBLElBQUlBLENBQUNBLElBQUlBLEVBQUVBLElBQUlBLENBQUNBLHNCQUFzQkEsRUFBRUEsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7WUFFM0ZBLENBQUNBO1FBQ0hBLENBQUNBO1FBRVNWLDJDQUFVQSxHQUFwQkE7WUFBQVcsaUJBeUlDQTtZQXhJQ0EsQUFDQUEsNkZBRDZGQTtnQkFDekZBLFFBQVFBLEdBQUdBLEVBQUVBLENBQUNBO1lBRWxCQSxJQUFJQSxDQUFDQSxzQkFBc0JBLENBQUNBLE9BQU9BLENBQUNBLFVBQUNBLHFCQUFxQkE7Z0JBQ3hEQSxJQUFJQSxJQUFJQSxHQUFHQSxxQkFBcUJBLENBQUNBLElBQUlBLElBQUlBLHFCQUFxQkEsQ0FBQ0EsRUFBRUEsQ0FBQ0E7Z0JBQ2xFQSxJQUFJQSxRQUFRQSxHQUFHQSxxQkFBcUJBLENBQUNBLFFBQVFBLENBQUNBO2dCQUM5Q0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7b0JBQ1pBLE9BQU9BLEVBQUVBLGFBQWFBLEdBQUdBLElBQUlBO29CQUM3QkEsS0FBS0EsRUFBRUEsSUFBSUE7b0JBQ1hBLEtBQUtBLEVBQUVBO3dCQUNMQSxRQUFRQSxFQUFFQSxRQUFRQTtxQkFDbkJBO29CQUNEQSxRQUFRQSxFQUFFQSxRQUFRQTtvQkFDbEJBLHNCQUFzQkEsRUFBRUEsQ0FBQ0EscUJBQXFCQSxDQUFDQTtvQkFDL0NBLElBQUlBLEVBQUVBLHFCQUFxQkEsQ0FBQ0EsS0FBS0EsSUFBSUEsRUFBRUE7b0JBQ3ZDQSxRQUFRQSxFQUFFQSxFQUFFQTtpQkFDYkEsQ0FBQ0EsQ0FBQ0E7WUFDTEEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFSEEsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBQ0EsT0FBT0E7Z0JBQzVCQSxBQUNBQSxxRUFEcUVBO29CQUNqRUEsVUFBVUEsR0FBR0EsSUFBSUEsQ0FBQ0E7Z0JBQ3RCQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFDQSxPQUFPQTtvQkFDdkJBLE9BQU9BLENBQUNBLHNCQUFzQkEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBQ0EscUJBQXFCQTt3QkFDM0RBLElBQUlBLFdBQVdBLEdBQUdBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLHFCQUFxQkEsRUFBRUEsQ0FBQ0EsY0FBY0EsRUFBRUEsaUJBQWlCQSxDQUFDQSxDQUFDQSxDQUFDQTt3QkFDM0ZBLEVBQUVBLENBQUNBLENBQUNBLFdBQVdBLElBQUlBLDBCQUFlQSxDQUFDQSxXQUFXQSxFQUFFQSxPQUFPQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxPQUFPQSxDQUFDQSxTQUFTQSxJQUFJQSxxQkFBcUJBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLENBQUNBOzRCQUMxSEEsVUFBVUEsR0FBR0EsT0FBT0EsQ0FBQ0E7d0JBQ3ZCQSxDQUFDQTtvQkFDSEEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ0xBLENBQUNBLENBQUNBLENBQUNBO2dCQUVIQSxFQUFFQSxDQUFDQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDZkEsVUFBVUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3BDQSxDQUFDQTtnQkFBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7b0JBQ05BLElBQUlBLElBQUlBLEdBQUdBLE9BQU9BLENBQUNBLElBQUlBLElBQUlBLE9BQU9BLENBQUNBLEVBQUVBLENBQUNBO29CQUN0Q0EsSUFBSUEsUUFBUUEsR0FBR0EsT0FBT0EsQ0FBQ0EsUUFBUUEsQ0FBQ0E7b0JBQ2hDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQTt3QkFDWkEsT0FBT0EsRUFBRUEsYUFBYUEsR0FBR0EsSUFBSUE7d0JBQzdCQSxLQUFLQSxFQUFFQSxJQUFJQTt3QkFDWEEsS0FBS0EsRUFBRUE7NEJBQ0xBLFFBQVFBLEVBQUVBLFFBQVFBO3lCQUNuQkE7d0JBQ0RBLFFBQVFBLEVBQUVBLFFBQVFBO3dCQUNsQkEsc0JBQXNCQSxFQUFFQSxFQUFFQTt3QkFDMUJBLElBQUlBLEVBQUVBLE9BQU9BLENBQUNBLEtBQUtBLElBQUlBLEVBQUVBO3dCQUN6QkEsUUFBUUEsRUFBRUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7cUJBQ3BCQSxDQUFDQSxDQUFDQTtnQkFDTEEsQ0FBQ0E7WUFDSEEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDSEEsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsRUFBRUEsVUFBQ0EsS0FBS0E7Z0JBQ2pDQSxJQUFJQSxRQUFRQSxHQUFHQSxLQUFLQSxDQUFDQSxRQUFRQSxJQUFJQSxFQUFFQSxDQUFDQTtnQkFDcENBLElBQUlBLFdBQVdBLEdBQUdBLEtBQUtBLENBQUNBLFdBQVdBLENBQUNBO2dCQUNwQ0EsSUFBSUEsSUFBSUEsR0FBR0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0E7Z0JBQ3RCQSxJQUFJQSxTQUFTQSxHQUFHQSxRQUFRQSxDQUFDQSxTQUFTQSxJQUFJQSwyQkFBZ0JBLENBQUNBO2dCQUN2REEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsV0FBV0EsSUFBSUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ3hCQSxJQUFJQSxPQUFPQSxHQUFHQSxLQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxTQUFTQSxFQUFFQSxXQUFXQSxDQUFDQSxDQUFDQTtvQkFDdERBLEVBQUVBLENBQUNBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBO3dCQUNaQSxPQUFPQSxDQUFDQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQTtvQkFDdkJBLENBQUNBO29CQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTt3QkFDTkEsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EseUJBQXlCQSxHQUFHQSxXQUFXQSxHQUFHQSxhQUFhQSxHQUFHQSxTQUFTQSxHQUFHQSxjQUFjQSxHQUFHQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtvQkFDcEhBLENBQUNBO2dCQUNIQSxDQUFDQTtZQUNIQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUdIQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxRQUFRQSxDQUFDQTtZQUV6QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsSUFBSUEsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ25DQSxJQUFJQSxTQUFTQSxHQUFHQSxFQUFFQSxDQUFDQTtnQkFDbkJBLElBQUlBLE9BQU9BLEdBQUdBLEVBQUVBLENBQUNBO2dCQUNqQkEsSUFBSUEsTUFBTUEsR0FBR0EsRUFBRUEsQ0FBQ0E7Z0JBQ2hCQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxFQUFFQSxVQUFDQSxPQUFPQTtvQkFDckNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLE9BQU9BLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBO3dCQUN0QkEsT0FBT0EsQ0FBQ0EsUUFBUUEsR0FBR0EsdUJBQVlBLENBQUNBLE9BQU9BLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO29CQUNwREEsQ0FBQ0E7b0JBQ0RBLElBQUlBLE9BQU9BLEdBQUdBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBO29CQUM5QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7d0JBQ1pBLE1BQU1BLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLE9BQU9BLENBQUNBO3dCQUMxQkEsSUFBSUEsR0FBR0EsR0FBR0EsT0FBT0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7d0JBQ25DQSxJQUFJQSxVQUFVQSxHQUFHQSxFQUFFQSxDQUFDQTt3QkFDcEJBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBOzRCQUNiQSxVQUFVQSxHQUFHQSxPQUFPQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQTt3QkFDekNBLENBQUNBO3dCQUNEQSxVQUFVQSxHQUFHQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxVQUFVQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQTt3QkFDL0NBLElBQUlBLE1BQU1BLEdBQUdBLFNBQVNBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBO3dCQUNuQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7NEJBQ1pBLE1BQU1BLEdBQUdBO2dDQUNQQSxJQUFJQSxFQUFFQSxVQUFVQTtnQ0FDaEJBLFFBQVFBLEVBQUVBLElBQUlBO2dDQUNkQSxJQUFJQSxFQUFFQSxFQUFFQTs2QkFDVEEsQ0FBQ0E7NEJBQ0ZBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBOzRCQUNyQkEsU0FBU0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsR0FBR0EsTUFBTUEsQ0FBQ0E7d0JBQ2pDQSxDQUFDQTt3QkFDREEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7b0JBQzVCQSxDQUFDQTtnQkFDSEEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ0hBLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBLE9BQU9BLENBQUNBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO2dCQUV6Q0EsSUFBSUEsSUFBSUEsR0FBR0EsRUFBRUEsQ0FBQ0E7Z0JBQ2RBLElBQUlBLFdBQVdBLEdBQUdBO29CQUNoQkEsUUFBUUEsRUFBRUEseUJBQWNBO2lCQUN6QkEsQ0FBQ0E7Z0JBRUZBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLEVBQUVBLFVBQUNBLE9BQU9BO29CQUNyQ0EsSUFBSUEsT0FBT0EsR0FBR0EsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0E7b0JBRTlCQSxBQU9BQTs7Ozs7dUJBRkdBO3dCQUVDQSxPQUFPQSxHQUFHQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQTtvQkFDeENBLEVBQUVBLENBQUNBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBO3dCQUNaQSxPQUFPQSxHQUFHQSxNQUFNQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxPQUFPQSxDQUFDQTtvQkFDdkNBLENBQUNBO29CQUNEQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTt3QkFDbkJBLE9BQU9BLENBQUNBLEtBQUtBLEdBQUdBLFdBQVdBLENBQUNBO3dCQUM1QkEsT0FBT0EsQ0FBQ0EsS0FBS0EsR0FBR0EsT0FBT0EsQ0FBQ0E7b0JBQzFCQSxDQUFDQTtvQkFDREEsT0FBT0EsQ0FBQ0EsRUFBRUEsR0FBR0EsT0FBT0EsQ0FBQ0E7b0JBQ3JCQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTt3QkFDbkJBLE9BQU9BLENBQUNBLEtBQUtBLEdBQUdBLE9BQU9BLENBQUNBLElBQUlBLElBQUlBLE9BQU9BLENBQUNBLEtBQUtBLENBQUNBO29CQUNoREEsQ0FBQ0E7b0JBQ0RBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLE9BQU9BLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBO3dCQUN0QkEsT0FBT0EsQ0FBQ0EsUUFBUUEsR0FBR0EsT0FBT0EsQ0FBQ0EsUUFBUUEsQ0FBQ0E7b0JBQ3RDQSxDQUFDQTtvQkFDREEsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7b0JBQ25CQSxPQUFPQSxDQUFDQSxZQUFZQSxHQUFHQSxtQ0FBd0JBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO29CQUN6REEsT0FBT0EsQ0FBQ0EsYUFBYUEsR0FBR0Esb0NBQXlCQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtnQkFDN0RBLENBQUNBLENBQUNBLENBQUNBO2dCQUNIQSxBQUNBQSxtQkFEbUJBO2dCQUNuQkEsSUFBSUEsQ0FBQ0EsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0E7WUFDNUJBLENBQUNBO1FBQ0hBLENBQUNBO1FBRVNYLHVEQUFzQkEsR0FBaENBLFVBQWlDQSxNQUFNQTtZQUNyQ1ksSUFBSUEsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0EsY0FBY0EsRUFBRUEsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDMURBLElBQUlBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBO1lBQ3BCQSxJQUFJQSxZQUFZQSxHQUFHQSxNQUFNQSxDQUFDQSxZQUFZQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUM3Q0EsSUFBSUEsWUFBWUEsR0FBR0EsTUFBTUEsQ0FBQ0EsWUFBWUEsSUFBSUEsRUFBRUEsQ0FBQ0E7WUFDN0NBLElBQUlBLEtBQUtBLEdBQUdBLE1BQU1BLENBQUNBLEVBQUVBLElBQUlBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1lBQ3JDQSxJQUFJQSxJQUFJQSxHQUFHQSxZQUFZQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtZQUNoQ0EsSUFBSUEsS0FBS0EsR0FBR0EsWUFBWUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7WUFDbENBLElBQUlBLFNBQVNBLEdBQUdBLEtBQUtBLENBQUNBO1lBQ3RCQSxJQUFJQSxrQkFBa0JBLEdBQUdBLElBQUlBLENBQUNBO1lBQzlCQSxFQUFFQSxDQUFDQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDakJBLElBQUlBLFVBQVVBLEdBQUdBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLFlBQVlBLEVBQUVBLENBQUNBLFVBQVVBLEVBQUVBLFlBQVlBLENBQUNBLENBQUNBLENBQUNBO2dCQUN4RUEsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBVUEsRUFBRUEsVUFBQ0EsU0FBU0E7b0JBQ3BDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTt3QkFDZEEsSUFBSUEsS0FBS0EsR0FBR0EsU0FBU0EsQ0FBQ0EsS0FBS0EsQ0FBQ0E7d0JBQzVCQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxLQUFLQSxFQUFFQSxVQUFDQSxJQUFJQTs0QkFDMUJBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBO2dDQUNkQSxJQUFJQSxhQUFhQSxHQUFHQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQTtnQ0FDdkNBLElBQUlBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBLElBQUlBLENBQUNBO2dDQUN6QkEsSUFBSUEsaUJBQWlCQSxHQUFHQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQTtnQ0FDdENBLEVBQUVBLENBQUNBLENBQUNBLGFBQWFBLEtBQUtBLElBQUlBLElBQUlBLFNBQVNBLEtBQUtBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBO29DQUNyREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsYUFBYUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7d0NBQ2xCQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTs0Q0FDVkEsa0JBQWtCQSxHQUFHQSxhQUFhQSxDQUFDQTt3Q0FDckNBLENBQUNBO3dDQUNEQSxFQUFFQSxDQUFDQSxDQUFDQSxpQkFBaUJBLENBQUNBLENBQUNBLENBQUNBOzRDQUN0QkEsUUFBUUEsR0FBR0EsaUJBQWlCQSxDQUFDQTt3Q0FDL0JBLENBQUNBO29DQUNIQSxDQUFDQTtnQ0FDSEEsQ0FBQ0E7NEJBQ0hBLENBQUNBO3dCQUNIQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDTEEsQ0FBQ0E7Z0JBQ0hBLENBQUNBLENBQUNBLENBQUNBO1lBQ0xBLENBQUNBO1lBQ0RBLEVBQUVBLENBQUNBLENBQUNBLG9CQUFTQSxDQUFDQSxZQUFZQSxDQUFDQSxJQUFJQSxLQUFLQSxJQUFJQSxrQkFBa0JBLENBQUNBLENBQUNBLENBQUNBO2dCQUMzREEsTUFBTUEsQ0FBQ0EsV0FBV0EsR0FBR0Esa0JBQWtCQSxHQUFHQSw0QkFBaUJBLEdBQUdBLGNBQWNBLEdBQzFFQSxLQUFLQSxHQUFHQSxHQUFHQSxHQUFHQSxrQkFBa0JBLEdBQUdBLFdBQVdBLENBQUNBO1lBQ25EQSxDQUFDQTtRQUNIQSxDQUFDQTtRQUNIWiw2QkFBQ0E7SUFBREEsQ0E5WEFsRCxBQThYQ2tELElBQUFsRDtJQTlYWUEsaUNBQXNCQSxHQUF0QkEsc0JBOFhaQSxDQUFBQTtJQUdEQSxBQUlBQTs7O09BREdBO2FBQ2FBLHFCQUFxQkEsQ0FBQ0EsVUFBVUEsRUFBRUEsS0FBS0EsRUFBRUEsYUFBYUEsRUFBRUEsZ0JBQWdCQSxFQUFFQSxlQUFlQSxFQUFFQSxrQkFBa0JBLEVBQUVBLGdDQUFnQ0EsRUFBRUEsY0FBY0E7UUFDN0srRCxJQUFJQSxNQUFNQSxHQUFHQSxJQUFJQSxzQkFBc0JBLEVBQUVBLENBQUNBO1FBQzFDQSxNQUFNQSxDQUFDQSxVQUFVQSxHQUFHQSxlQUFlQSxDQUFDQTtRQUdwQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFDQSxrQkFBNkNBO1lBQ3BFQSxnQ0FBZ0NBLENBQUNBLElBQUlBLENBQUNBLFVBQUNBLGdDQUEyREE7Z0JBQ2hHQSxjQUFjQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFDQSxjQUF5Q0E7b0JBQzVEQSxNQUFNQSxDQUFDQSxLQUFLQSxHQUFHQSxXQUFXQSxDQUFDQSxZQUFZQSxDQUFDQSxNQUFNQSxFQUFFQSxVQUFDQSxJQUFlQTt3QkFDOURBLElBQUlBLEtBQUtBLEdBQUdBLENBQUNBLENBQUNBO3dCQUNkQSxJQUFJQSxXQUFXQSxHQUFHQSxDQUFDQSxDQUFDQTt3QkFDcEJBLElBQUlBLFdBQVdBLEdBQUdBLEtBQUtBLENBQUNBO3dCQUN4QkEsSUFBSUEsc0JBQXNCQSxHQUFHQSxJQUFJQSxDQUFDQTt3QkFFbENBLFNBQVNBLFNBQVNBLENBQUNBLEtBQUtBOzRCQUN0QkMsS0FBS0EsR0FBR0EsS0FBS0EsQ0FBQ0E7NEJBQ2RBLEFBQ0FBLG1DQURtQ0E7NEJBQ25DQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxJQUFJQSxXQUFXQSxDQUFDQSxDQUFDQSxDQUFDQTtnQ0FDekJBLEFBQ0FBLHVDQUR1Q0E7Z0NBQ3ZDQSxFQUFFQSxDQUFDQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQSxDQUFDQTtvQ0FDaEJBLGNBQUdBLENBQUNBLEtBQUtBLENBQUNBLHVDQUF1Q0EsR0FBR0Esc0JBQXNCQSxDQUFDQSxDQUFDQTtvQ0FDNUVBLE1BQU1BLENBQUNBLFNBQVNBLEVBQUVBLENBQUNBO29DQUNuQkEsVUFBVUEsQ0FBQ0EsVUFBVUEsQ0FBQ0Esd0JBQXdCQSxDQUFDQSxDQUFDQTtnQ0FDbERBLENBQUNBO2dDQUNEQSxJQUFJQSxFQUFFQSxDQUFDQTs0QkFDVEEsQ0FBQ0E7d0JBQ0hBLENBQUNBO3dCQUVERCxTQUFTQSxVQUFVQSxDQUFDQSxRQUFRQSxFQUFFQSxJQUFJQTs0QkFDaENFLElBQUlBLGVBQWVBLEdBQUdBLFFBQVFBLENBQUNBLGVBQWVBLENBQUNBOzRCQUMvQ0EsSUFBSUEsbUJBQW1CQSxHQUFHQSxNQUFNQSxDQUFDQSxnQkFBZ0JBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBOzRCQUM3REEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsZUFBZUEsSUFBSUEsZUFBZUEsR0FBR0EsbUJBQW1CQSxDQUFDQSxDQUFDQSxDQUFDQTtnQ0FDOURBLEVBQUVBLENBQUNBLENBQUNBLGVBQWVBLENBQUNBLENBQUNBLENBQUNBO29DQUNwQkEsTUFBTUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxlQUFlQSxDQUFDQTtvQ0FDaERBLHNCQUFzQkEsR0FBR0EsZUFBZUEsQ0FBQ0E7Z0NBQzNDQSxDQUFDQTtnQ0FDREEsV0FBV0EsR0FBR0EsSUFBSUEsQ0FBQ0E7Z0NBQ25CQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTs0QkFDZEEsQ0FBQ0E7NEJBQ0RBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBO3dCQUNmQSxDQUFDQTt3QkFFREYsa0JBQWtCQSxDQUFDQSxLQUFLQSxDQUFDQSxVQUFDQSxRQUFRQTs0QkFDaENBLEVBQUVBLENBQUNBLENBQUNBLFFBQVFBLElBQUlBLFVBQVVBLENBQUNBLFFBQVFBLEVBQUVBLFVBQVVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dDQUNqREEsSUFBSUEsS0FBS0EsR0FBR0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsS0FBS0EsSUFBSUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0NBQzlEQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxLQUFLQSxFQUFFQSxVQUFDQSxJQUFJQTtvQ0FDMUJBLHVDQUE0QkEsQ0FBQ0EsZ0JBQWdCQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFDQSxHQUFHQTt3Q0FDNURBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLEdBQUdBLENBQUNBO29DQUN0QkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0NBQ0xBLENBQUNBLENBQUNBLENBQUNBO2dDQUVIQSxNQUFNQSxDQUFDQSxRQUFRQSxHQUFHQSxLQUFLQSxDQUFDQTs0QkFFMUJBLENBQUNBOzRCQUNEQSxTQUFTQSxDQUFDQSxLQUFLQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTt3QkFDdkJBLENBQUNBLENBQUNBLENBQUNBO3dCQUNIQSxnQ0FBZ0NBLENBQUNBLEtBQUtBLENBQUNBLFVBQUNBLFFBQVFBOzRCQUM5Q0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsUUFBUUEsSUFBSUEsVUFBVUEsQ0FBQ0EsUUFBUUEsRUFBRUEsd0JBQXdCQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQ0FDL0RBLElBQUlBLEtBQUtBLEdBQUdBLFlBQVlBLENBQUNBLENBQUNBLFFBQVFBLENBQUNBLEtBQUtBLElBQUlBLEVBQUVBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO2dDQUM5REEsTUFBTUEsQ0FBQ0Esc0JBQXNCQSxHQUFHQSxLQUFLQSxDQUFDQTs0QkFFeENBLENBQUNBOzRCQUNEQSxTQUFTQSxDQUFDQSxLQUFLQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTt3QkFDdkJBLENBQUNBLENBQUNBLENBQUNBO3dCQUNIQSxjQUFjQSxDQUFDQSxLQUFLQSxDQUFDQSxVQUFDQSxRQUFRQTs0QkFDNUJBLEVBQUVBLENBQUNBLENBQUNBLFFBQVFBLElBQUlBLFVBQVVBLENBQUNBLFFBQVFBLEVBQUVBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dDQUM3Q0EsSUFBSUEsS0FBS0EsR0FBR0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsS0FBS0EsSUFBSUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0NBQzlEQSxNQUFNQSxDQUFDQSxJQUFJQSxHQUFHQSxLQUFLQSxDQUFDQTs0QkFFdEJBLENBQUNBOzRCQUNEQSxTQUFTQSxDQUFDQSxLQUFLQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTt3QkFDdkJBLENBQUNBLENBQUNBLENBQUNBO3dCQUVIQSxJQUFJQSxPQUFPQSxHQUFHQSxhQUFhQSxHQUFHQSxPQUFPQSxDQUFDQTt3QkFDdENBLElBQUlBLEtBQUtBLEdBQUdBLE1BQU1BLENBQUNBLGdCQUFnQkEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0E7d0JBQ2xEQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQSxPQUFPQSxFQUFFQTs0QkFDakJBLE9BQU9BLEVBQUVBO2dDQUNQQSxlQUFlQSxFQUFFQSxLQUFLQTs2QkFDdkJBO3lCQUNGQSxDQUFDQSxDQUNBQSxPQUFPQSxDQUFDQSxVQUFTQSxJQUFJQSxFQUFFQSxNQUFNQSxFQUFFQSxPQUFPQSxFQUFFQSxNQUFNQTs0QkFDNUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxNQUFNLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztnQ0FDNUMsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztnQ0FDbEQsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLElBQUksUUFBUSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7b0NBQ3BDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7d0NBQ2IsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxHQUFHLFFBQVEsQ0FBQztvQ0FDbkQsQ0FBQztvQ0FDRCxNQUFNLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztvQ0FDdkIsV0FBVyxHQUFHLElBQUksQ0FBQztnQ0FDckIsQ0FBQzs0QkFDSCxDQUFDOzRCQUNELFNBQVMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7d0JBQ3ZCLENBQUMsQ0FBQ0EsQ0FDRkEsS0FBS0EsQ0FBQ0EsVUFBU0EsSUFBSUEsRUFBRUEsTUFBTUEsRUFBRUEsT0FBT0EsRUFBRUEsTUFBTUE7NEJBQzFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7d0JBQ3ZCLENBQUMsQ0FBQ0EsQ0FBQ0E7d0JBRUxBLElBQUlBLEdBQUdBLEdBQUdBLHdCQUFhQSxDQUFDQTt3QkFDeEJBLEtBQUtBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQ1pBLE9BQU9BLENBQUNBLFVBQVVBLElBQUlBLEVBQUVBLE1BQU1BLEVBQUVBLE9BQU9BLEVBQUVBLE1BQU1BOzRCQUM3QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dDQUNULE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztnQ0FDM0IsTUFBTSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7Z0NBQzFCLFNBQVMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7NEJBQ3ZCLENBQUM7d0JBQ0gsQ0FBQyxDQUFDQSxDQUNGQSxLQUFLQSxDQUFDQSxVQUFVQSxJQUFJQSxFQUFFQSxNQUFNQSxFQUFFQSxPQUFPQSxFQUFFQSxNQUFNQTs0QkFDM0MsY0FBRyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUM7NEJBQzlELFNBQVMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7d0JBQ3ZCLENBQUMsQ0FBQ0EsQ0FBQ0E7b0JBRVBBLENBQUNBLENBQUNBLENBQUNBO29CQUNIQSxNQUFNQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtnQkFDakJBLENBQUNBLENBQUNBLENBQUNBO1lBQ0xBLENBQUNBLENBQUNBLENBQUNBO1FBQ0xBLENBQUNBLENBQUNBLENBQUNBO1FBRUhBLFNBQVNBLFVBQVVBLENBQUNBLElBQUlBLEVBQUVBLFNBQVNBLEVBQUVBLE1BQU1BO1lBQ3pDRyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxVQUFDQSxHQUFHQTtnQkFDckJBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLFNBQVNBLEtBQUtBLFNBQVNBLElBQUlBLDBCQUFlQSxDQUFDQSxNQUFNQSxFQUFFQSxHQUFHQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtZQUM1RUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDTEEsQ0FBQ0E7UUFDREgsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7SUFDaEJBLENBQUNBO0lBM0hlL0QsZ0NBQXFCQSxHQUFyQkEscUJBMkhmQSxDQUFBQTtBQUVIQSxDQUFDQSxFQXBpQk0sVUFBVSxLQUFWLFVBQVUsUUFvaUJoQjs7QUN2aUJELHlDQUF5QztBQUN6Qyw0Q0FBNEM7QUFDNUMsMENBQTBDO0FBRTFDLElBQU8sVUFBVSxDQW9UaEI7QUFwVEQsV0FBTyxVQUFVLEVBQUMsQ0FBQztJQUVOQSxrQkFBT0EsR0FBR0EsT0FBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EscUJBQVVBLEVBQUVBLENBQUNBLGFBQWFBLEVBQUVBLFdBQVdBLEVBQUVBLE1BQU1BLEVBQUVBLFNBQVNBLENBQUNBLENBQUNBLENBQUNBO0lBQ3RGQSxxQkFBVUEsR0FBR0EsYUFBYUEsQ0FBQ0Esd0JBQXdCQSxDQUFDQSxrQkFBT0EsRUFBRUEscUJBQVVBLENBQUNBLENBQUNBO0lBQ3pFQSxnQkFBS0EsR0FBR0EsYUFBYUEsQ0FBQ0EscUJBQXFCQSxDQUFDQSx1QkFBWUEsQ0FBQ0EsQ0FBQ0E7SUFFckVBLGtCQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxnQkFBZ0JBLEVBQUVBLFVBQUNBLGNBQXNDQTtRQUN2RUEsY0FBY0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0Esa0JBQU9BLEVBQUVBLE9BQU9BLENBQUNBLEVBQUVBLGdCQUFLQSxDQUFDQSxXQUFXQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUNsRUEsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0Esa0JBQU9BLEVBQUVBLGlDQUFpQ0EsQ0FBQ0EsRUFBRUEsZ0JBQUtBLENBQUNBLGdCQUFnQkEsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FDakdBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLGtCQUFPQSxFQUFFQSxtQ0FBbUNBLENBQUNBLEVBQUVBLGdCQUFLQSxDQUFDQSxjQUFjQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUNqR0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0Esa0JBQU9BLEVBQUVBLDRCQUE0QkEsQ0FBQ0EsRUFBRUEsZ0JBQUtBLENBQUNBLFdBQVdBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBLENBQ3ZGQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxrQkFBT0EsRUFBRUEsZ0NBQWdDQSxDQUFDQSxFQUFFQSxnQkFBS0EsQ0FBQ0EsVUFBVUEsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FDMUZBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLGtCQUFPQSxFQUFFQSx3QkFBd0JBLENBQUNBLEVBQUVBLGdCQUFLQSxDQUFDQSw2QkFBNkJBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBLENBQ3JHQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxrQkFBT0EsRUFBRUEsOENBQThDQSxDQUFDQSxFQUFFQSxnQkFBS0EsQ0FBQ0EsNkJBQTZCQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUMzSEEsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0Esa0JBQU9BLEVBQUVBLGtEQUFrREEsQ0FBQ0EsRUFBRUEsZ0JBQUtBLENBQUNBLDRCQUE0QkEsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FDOUhBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLGtCQUFPQSxFQUFFQSxtREFBbURBLENBQUNBLEVBQUVBLGdCQUFLQSxDQUFDQSxrQ0FBa0NBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBLENBQ3JJQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxrQkFBT0EsRUFBRUEscURBQXFEQSxDQUFDQSxFQUFFQSxnQkFBS0EsQ0FBQ0EsZ0NBQWdDQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUNySUEsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0Esa0JBQU9BLEVBQUVBLFVBQVVBLENBQUNBLEVBQUVBLGdCQUFLQSxDQUFDQSxlQUFlQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUN6RUEsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0Esa0JBQU9BLEVBQUVBLGdDQUFnQ0EsQ0FBQ0EsRUFBRUEsZ0JBQUtBLENBQUNBLGVBQWVBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBLENBQy9GQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxrQkFBT0EsRUFBRUEsb0NBQW9DQSxDQUFDQSxFQUFFQSxnQkFBS0EsQ0FBQ0EsY0FBY0EsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FDbEdBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLGtCQUFPQSxFQUFFQSxxQ0FBcUNBLENBQUNBLEVBQUVBLGdCQUFLQSxDQUFDQSxvQkFBb0JBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBLENBQ3pHQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxrQkFBT0EsRUFBRUEsdUNBQXVDQSxDQUFDQSxFQUFFQSxnQkFBS0EsQ0FBQ0Esa0JBQWtCQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUN6R0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0Esa0JBQU9BLEVBQUVBLE1BQU1BLENBQUNBLEVBQUVBLGdCQUFLQSxDQUFDQSxXQUFXQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUNqRUEsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0Esa0JBQU9BLEVBQUVBLGlCQUFpQkEsQ0FBQ0EsRUFBRUEsZ0JBQUtBLENBQUNBLFdBQVdBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBLENBQzVFQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxrQkFBT0EsRUFBRUEsT0FBT0EsQ0FBQ0EsRUFBRUEsZ0JBQUtBLENBQUNBLFlBQVlBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBLENBQ25FQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxrQkFBT0EsRUFBRUEsV0FBV0EsQ0FBQ0EsRUFBRUEsZ0JBQUtBLENBQUNBLFdBQVdBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBLENBQ3JFQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxrQkFBT0EsRUFBRUEsUUFBUUEsQ0FBQ0EsRUFBRUEsZ0JBQUtBLENBQUNBLGFBQWFBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBLENBQ3JFQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxrQkFBT0EsRUFBRUEsWUFBWUEsQ0FBQ0EsRUFBRUEsZ0JBQUtBLENBQUNBLFlBQVlBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBLENBQ3ZFQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxrQkFBT0EsRUFBRUEs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QSxDQUFDQTtvQkFDdENBLENBQUNBO29CQUNEOUYsSUFBSUEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7b0JBQ2xCQSxJQUFJQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtvQkFDbEJBLElBQUlBLEVBQUVBLEdBQUdBLFNBQVNBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO29CQUN2QkEsSUFBSUEsRUFBRUEsR0FBR0EsU0FBU0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7b0JBQ3ZCQSxJQUFJQSxJQUFJQSxHQUFHQSxFQUFFQSxHQUFHQSxFQUFFQSxDQUFDQTtvQkFDbkJBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO3dCQUNiQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDWkEsQ0FBQ0E7b0JBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO3dCQUNwQkEsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ1hBLENBQUNBO29CQUNEQSxFQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxJQUFJQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTt3QkFDYkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7NEJBQ1pBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBO3dCQUNYQSxDQUFDQTt3QkFBQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7NEJBQ25CQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTt3QkFDWkEsQ0FBQ0E7d0JBQUNBLElBQUlBLENBQUNBLENBQUNBOzRCQUNOQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTt3QkFDWEEsQ0FBQ0E7b0JBQ0hBLENBQUNBO29C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TUEsQ0FBQ0EsQ0FDcEJBLE9BQU9BLENBQUNBLFVBQVVBLElBQUlBLEVBQUVBLE1BQU1BLEVBQUVBLE9BQU9BLEVBQUVBLE1BQU1BO2dCQUM3QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUNULE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ3hELE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO2dCQUN2QixDQUFDO2dCQUNELE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO2dCQUN0QixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RCLENBQUMsQ0FBQ0EsQ0FDRkEsS0FBS0EsQ0FBQ0EsVUFBVUEsSUFBSUEsRUFBRUEsTUFBTUEsRUFBRUEsT0FBT0EsRUFBRUEsTUFBTUE7Z0JBQzNDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO2dCQUN0QixXQUFHLENBQUMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQztZQUNoRSxDQUFDLENBQUNBLENBQUNBO1FBQ1BBLENBQUNBO0lBQ0hGLENBQUNBLENBQUNBLENBQUNBLENBQUNBO0FBQ1ZBLENBQUNBLEVBcEZNLE9BQU8sS0FBUCxPQUFPLFFBb0ZiIiwiZmlsZSI6ImNvbXBpbGVkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2xpYnMvaGF3dGlvLWZvcm1zL2RlZnMuZC50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9saWJzL2hhd3Rpby11aS9kZWZzLmQudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vbGlicy9oYXd0aW8tdXRpbGl0aWVzL2RlZnMuZC50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9saWJzL2hhd3Rpby13aWtpL2RlZnMuZC50c1wiLz5cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9pbmNsdWRlcy50c1wiLz5cbm1vZHVsZSBLdWJlcm5ldGVzIHtcblxuICBleHBvcnQgdmFyIGNvbnRleHQgPSAnL2t1YmVybmV0ZXMnO1xuICBleHBvcnQgdmFyIGhhc2ggPSAnIycgKyBjb250ZXh0O1xuICBleHBvcnQgdmFyIGRlZmF1bHRSb3V0ZSA9IGhhc2ggKyAnL2FwcHMnO1xuICBleHBvcnQgdmFyIHBsdWdpbk5hbWUgPSAnS3ViZXJuZXRlcyc7XG4gIGV4cG9ydCB2YXIgcGx1Z2luUGF0aCA9ICdwbHVnaW5zL2t1YmVybmV0ZXMvJztcbiAgZXhwb3J0IHZhciB0ZW1wbGF0ZVBhdGggPSBwbHVnaW5QYXRoICsgJ2h0bWwvJztcbiAgZXhwb3J0IHZhciBsb2c6TG9nZ2luZy5Mb2dnZXIgPSBMb2dnZXIuZ2V0KHBsdWdpbk5hbWUpO1xuXG4gIGV4cG9ydCB2YXIga2VlcFBvbGxpbmdNb2RlbCA9IHRydWU7XG5cbiAgZXhwb3J0IHZhciBkZWZhdWx0SWNvblVybCA9IENvcmUudXJsKFwiL2ltZy9rdWJlcm5ldGVzLnN2Z1wiKTtcbiAgZXhwb3J0IHZhciBob3N0SWNvblVybCA9IENvcmUudXJsKFwiL2ltZy9ob3N0LnN2Z1wiKTtcblxuICBleHBvcnQgdmFyIGRlZmF1bHRBcGlWZXJzaW9uID0gXCJ2MWJldGEyXCI7XG4gIGV4cG9ydCB2YXIgZGVmYXVsdE9TQXBpVmVyc2lvbiA9IFwidjFiZXRhMVwiO1xuICBleHBvcnQgdmFyIGxhYmVsRmlsdGVyVGV4dFNlcGFyYXRvciA9IFwiLFwiO1xuXG4gIGV4cG9ydCB2YXIgZGVmYXVsdE5hbWVzcGFjZSA9IFwiZGVmYXVsdFwiO1xuXG4gIGV4cG9ydCB2YXIgYXBwU3VmZml4ID0gXCIuYXBwXCI7XG5cbiAgZXhwb3J0IHZhciBvc2FwaVByZWZpeCA9IFwiL2t1YmVybmV0ZXMvb3NhcGkvXCI7XG4gIGV4cG9ydCB2YXIgYnVpbGRDb25maWdzUmVzdFVSTCA9IG9zYXBpUHJlZml4ICsgZGVmYXVsdE9TQXBpVmVyc2lvbiArIFwiL2J1aWxkQ29uZmlnc1wiO1xuICBleHBvcnQgdmFyIGJ1aWxkQ29uZmlnSG9va3NSZXN0VVJMID0gb3NhcGlQcmVmaXggKyBkZWZhdWx0T1NBcGlWZXJzaW9uICsgXCIvYnVpbGRDb25maWdIb29rc1wiO1xuICBleHBvcnQgdmFyIGJ1aWxkc1Jlc3RVUkwgPSBvc2FwaVByZWZpeCArIGRlZmF1bHRPU0FwaVZlcnNpb24gKyBcIi9idWlsZHNcIjtcbiAgZXhwb3J0IHZhciBidWlsZHNMb2dzUmVzdFVSTCA9IG9zYXBpUHJlZml4ICsgZGVmYXVsdE9TQXBpVmVyc2lvbiArIFwiL3Byb3h5L2J1aWxkTG9nc1wiO1xuICBleHBvcnQgdmFyIHJvdXRlc1Jlc3RVUkwgPSBvc2FwaVByZWZpeCArIGRlZmF1bHRPU0FwaVZlcnNpb24gKyBcIi9yb3V0ZXNcIjtcbiAgZXhwb3J0IHZhciBkZXBsb3ltZW50Q29uZmlnc1Jlc3RVUkwgPSBvc2FwaVByZWZpeCArIGRlZmF1bHRPU0FwaVZlcnNpb24gKyBcIi9kZXBsb3ltZW50Q29uZmlnc1wiO1xuICBleHBvcnQgdmFyIGltYWdlUmVwb3NpdG9yaWVzUmVzdFVSTCA9IG9zYXBpUHJlZml4ICsgZGVmYXVsdE9TQXBpVmVyc2lvbiArIFwiL2ltYWdlUmVwb3NpdG9yaWVzXCI7XG5cbiAgZXhwb3J0IGludGVyZmFjZSBLdWJlUG9kIHtcbiAgICBpZDpzdHJpbmc7XG4gICAgbmFtZXNwYWNlOnN0cmluZztcbiAgfVxuXG4gIC8vdmFyIGZhYnJpY0RvbWFpbiA9IEZhYnJpYy5qbXhEb21haW47XG4gIHZhciBmYWJyaWNEb21haW4gPSBcImlvLmZhYnJpYzhcIjtcbiAgZXhwb3J0IHZhciBtYmVhbiA9IGZhYnJpY0RvbWFpbiArIFwiOnR5cGU9S3ViZXJuZXRlc1wiO1xuICBleHBvcnQgdmFyIG1hbmFnZXJNQmVhbiA9IGZhYnJpY0RvbWFpbiArIFwiOnR5cGU9S3ViZXJuZXRlc01hbmFnZXJcIjtcbiAgZXhwb3J0IHZhciBhcHBWaWV3TUJlYW4gPSBmYWJyaWNEb21haW4gKyBcIjp0eXBlPUFwcFZpZXdcIjtcblxuICBleHBvcnQgZnVuY3Rpb24gaXNLdWJlcm5ldGVzKHdvcmtzcGFjZSkge1xuICAgIC8vIHJldHVybiB3b3Jrc3BhY2UudHJlZUNvbnRhaW5zRG9tYWluQW5kUHJvcGVydGllcyhmYWJyaWNEb21haW4sIHt0eXBlOiBcIkt1YmVybmV0ZXNcIn0pO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGlzS3ViZXJuZXRlc1RlbXBsYXRlTWFuYWdlcih3b3Jrc3BhY2UpIHtcbiAgICAvLyByZXR1cm4gd29ya3NwYWNlLnRyZWVDb250YWluc0RvbWFpbkFuZFByb3BlcnRpZXMoZmFicmljRG9tYWluLCB7dHlwZTogXCJLdWJlcm5ldGVzVGVtcGxhdGVNYW5hZ2VyXCJ9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBpc0FwcFZpZXcod29ya3NwYWNlKSB7XG4gICAgLy8gcmV0dXJuIHdvcmtzcGFjZS50cmVlQ29udGFpbnNEb21haW5BbmRQcm9wZXJ0aWVzKGZhYnJpY0RvbWFpbiwge3R5cGU6IFwiQXBwVmlld1wifSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgbmFtZXNwYWNlcyB2YWx1ZSBpbiB0aGUga3ViZXJuZXRlcyBvYmplY3QgZnJvbSB0aGUgbmFtZXNwYWNlIHZhbHVlcyBpbiB0aGUgcG9kcywgY29udHJvbGxlcnMsIHNlcnZpY2VzXG4gICAqL1xuICBleHBvcnQgZnVuY3Rpb24gdXBkYXRlTmFtZXNwYWNlcyhrdWJlcm5ldGVzLCBwb2RzID0gW10sIHJlcGxpY2F0aW9uQ29udHJvbGxlcnMgPSBbXSwgc2VydmljZXMgPSBbXSkge1xuICAgIHZhciBieU5hbWVzcGFjZSA9ICh0aGluZykgPT4geyByZXR1cm4gdGhpbmcubmFtZXNwYWNlOyB9O1xuXG4gICAgZnVuY3Rpb24gcHVzaElmTm90RXhpc3RzKGFycmF5LCBpdGVtcykge1xuICAgICAgICBhbmd1bGFyLmZvckVhY2goaXRlbXMsICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCQuaW5BcnJheSh2YWx1ZSwgYXJyYXkpIDwgMCkge1xuICAgICAgICAgICAgICBhcnJheS5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBuYW1lc3BhY2VzID0gW107XG5cbiAgICBwdXNoSWZOb3RFeGlzdHMobmFtZXNwYWNlcywgcG9kcy5tYXAoYnlOYW1lc3BhY2UpKTtcbiAgICBwdXNoSWZOb3RFeGlzdHMobmFtZXNwYWNlcywgc2VydmljZXMubWFwKGJ5TmFtZXNwYWNlKSk7XG4gICAgcHVzaElmTm90RXhpc3RzKG5hbWVzcGFjZXMsIHJlcGxpY2F0aW9uQ29udHJvbGxlcnMubWFwKGJ5TmFtZXNwYWNlKSk7XG5cbiAgICBuYW1lc3BhY2VzID0gbmFtZXNwYWNlcy5zb3J0KCk7XG5cbiAgICBrdWJlcm5ldGVzLm5hbWVzcGFjZXMgPSBuYW1lc3BhY2VzO1xuICAgIGt1YmVybmV0ZXMuc2VsZWN0ZWROYW1lc3BhY2UgPSBrdWJlcm5ldGVzLnNlbGVjdGVkTmFtZXNwYWNlIHx8IG5hbWVzcGFjZXNbMF07XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gc2V0SnNvbigkc2NvcGUsIGlkLCBjb2xsZWN0aW9uKSB7XG4gICAgJHNjb3BlLmlkID0gaWQ7XG4gICAgaWYgKCEkc2NvcGUuZmV0Y2hlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIWlkKSB7XG4gICAgICAkc2NvcGUuanNvbiA9ICcnO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIWNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGl0ZW0gPSBjb2xsZWN0aW9uLmZpbmQoKGl0ZW0pID0+IHsgcmV0dXJuIGl0ZW0uaWQgPT09IGlkOyB9KTtcbiAgICBpZiAoaXRlbSkge1xuICAgICAgJHNjb3BlLmpzb24gPSBhbmd1bGFyLnRvSnNvbihpdGVtLCB0cnVlKTtcbiAgICAgICRzY29wZS5pdGVtID0gaXRlbTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHNjb3BlLmlkID0gdW5kZWZpbmVkO1xuICAgICAgJHNjb3BlLmpzb24gPSAnJztcbiAgICAgICRzY29wZS5pdGVtID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG5cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbGFiZWxzIHRleHQgc3RyaW5nIHVzaW5nIHRoZSA8Y29kZT5rZXkxPXZhbHVlMSxrZXkyPXZhbHVlMiwuLi4uPC9jb2RlPiBmb3JtYXRcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiBsYWJlbHNUb1N0cmluZyhsYWJlbHMsIHNlcGVyYXRvclRleHQgPSBsYWJlbEZpbHRlclRleHRTZXBhcmF0b3IpIHtcbiAgICB2YXIgYW5zd2VyID0gXCJcIjtcbiAgICBhbmd1bGFyLmZvckVhY2gobGFiZWxzLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgdmFyIHNlcGFyYXRvciA9IGFuc3dlciA/IHNlcGVyYXRvclRleHQgOiBcIlwiO1xuICAgICAgYW5zd2VyICs9IHNlcGFyYXRvciArIGtleSArIFwiPVwiICsgdmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFuc3dlcjtcbiAgfVxuXG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGluaXRTaGFyZWQoJHNjb3BlLCAkbG9jYXRpb24sICRodHRwLCAkdGltZW91dCwgJHJvdXRlUGFyYW1zLCBLdWJlcm5ldGVzTW9kZWwsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc0FwaVVSTCkge1xuICAgIGlmICghS3ViZXJuZXRlc1N0YXRlLnNlbGVjdGVkTmFtZXNwYWNlKSB7XG4gICAgICBLdWJlcm5ldGVzU3RhdGUuc2VsZWN0ZWROYW1lc3BhY2UgPSAkcm91dGVQYXJhbXMubmFtZXNwYWNlIHx8ICRsb2NhdGlvbi5zZWFyY2goKVtcIm5hbWVzcGFjZVwiXTtcbiAgICB9XG4gICAgaWYgKCFLdWJlcm5ldGVzU3RhdGUuc2VsZWN0ZWROYW1lc3BhY2UpIHtcbiAgICAgIGlmIChhbmd1bGFyLmlzQXJyYXkoS3ViZXJuZXRlc1N0YXRlLm5hbWVzcGFjZXMpICYmIEt1YmVybmV0ZXNTdGF0ZS5uYW1lc3BhY2VzLmxlbmd0aCkge1xuICAgICAgICBLdWJlcm5ldGVzU3RhdGUuc2VsZWN0ZWROYW1lc3BhY2UgPSBLdWJlcm5ldGVzU3RhdGUubmFtZXNwYWNlc1swXTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGluamVjdG9yID0gSGF3dGlvQ29yZS5pbmplY3RvcjtcbiAgICBpZiAoaW5qZWN0b3IpIHtcbiAgICAgIHZhciBTZXJ2aWNlUmVnaXN0cnkgPSBpbmplY3Rvci5nZXQoXCJTZXJ2aWNlUmVnaXN0cnlcIik7XG4gICAgICBpZiAoU2VydmljZVJlZ2lzdHJ5KSB7XG4gICAgICAgICRzY29wZS5oYXNTZXJ2aWNlID0gKG5hbWUpID0+IFNlcnZpY2VSZWdpc3RyeS5oYXNTZXJ2aWNlKG5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICAkc2NvcGUubmFtZXNwYWNlID0gS3ViZXJuZXRlc1N0YXRlLnNlbGVjdGVkTmFtZXNwYWNlIHx8IGRlZmF1bHROYW1lc3BhY2U7XG4gICAgJHNjb3BlLmZvcmdlRW5hYmxlZCA9IGlzRm9yZ2VFbmFibGVkKCk7XG4gICAgJHNjb3BlLnJlc2l6ZURpYWxvZyA9IHtcbiAgICAgIGNvbnRyb2xsZXI6IG51bGwsXG4gICAgICBuZXdSZXBsaWNhczogMCxcbiAgICAgIGRpYWxvZzogbmV3IFVJLkRpYWxvZygpLFxuICAgICAgb25PazogKCkgPT4ge1xuICAgICAgICB2YXIgcmVzaXplRGlhbG9nID0gJHNjb3BlLnJlc2l6ZURpYWxvZztcbiAgICAgICAgcmVzaXplRGlhbG9nLmRpYWxvZy5jbG9zZSgpO1xuICAgICAgICByZXNpemVDb250cm9sbGVyKCRodHRwLCBLdWJlcm5ldGVzQXBpVVJMLCByZXNpemVEaWFsb2cuY29udHJvbGxlciwgcmVzaXplRGlhbG9nLm5ld1JlcGxpY2FzLCAoKSA9PiB7XG4gICAgICAgICAgLy8gbGV0cyBpbW1lZGlhdGVseSB1cGRhdGUgdGhlIHJlcGxpY2EgY291bnQgdG8gYXZvaWQgd2FpdGluZyBmb3IgdGhlIG5leHQgcG9sbFxuICAgICAgICAgICgkc2NvcGUucmVzaXplRGlhbG9nLmNvbnRyb2xsZXIuY3VycmVudFN0YXRlIHx8IHt9KS5yZXBsaWNhcyA9ICRzY29wZS5yZXNpemVEaWFsb2cubmV3UmVwbGljYXM7XG4gICAgICAgICAgQ29yZS4kYXBwbHkoJHNjb3BlKTtcbiAgICAgICAgfSlcbiAgICAgIH0sXG4gICAgICBvcGVuOiAoY29udHJvbGxlcikgPT4ge1xuICAgICAgICB2YXIgcmVzaXplRGlhbG9nID0gJHNjb3BlLnJlc2l6ZURpYWxvZztcbiAgICAgICAgcmVzaXplRGlhbG9nLmNvbnRyb2xsZXIgPSBjb250cm9sbGVyO1xuICAgICAgICByZXNpemVEaWFsb2cubmV3UmVwbGljYXMgPSBDb3JlLnBhdGhHZXQoY29udHJvbGxlciwgW1wiY3VycmVudFN0YXRlXCIsIFwicmVwbGljYXNcIl0pO1xuICAgICAgICByZXNpemVEaWFsb2cuZGlhbG9nLm9wZW4oKTtcblxuICAgICAgICAkdGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgJCgnI3JlcGxpY2FzJykuZm9jdXMoKTtcbiAgICAgICAgfSwgNTApO1xuICAgICAgfSxcbiAgICAgIGNsb3NlOiAoKSA9PiB7XG4gICAgICAgICRzY29wZS5yZXNpemVEaWFsb2cuZGlhbG9nLmNsb3NlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgICRzY29wZS50cmlnZ2VyQnVpbGQgPSAoYnVpbGRDb25maWcpID0+IHtcbiAgICAgIHZhciB1cmwgPSBidWlsZENvbmZpZy4kdHJpZ2dlclVybDtcbiAgICAgIGNvbnNvbGUubG9nKFwidHJpZ2dlcmluZyBidWlsZCBhdCB1cmw6IFwiICsgdXJsKTtcbiAgICAgIGlmICh1cmwpIHtcbiAgICAgICAgLy92YXIgZGF0YSA9IHt9O1xuICAgICAgICB2YXIgZGF0YSA9IG51bGw7XG4gICAgICAgIHZhciBjb25maWcgPSB7XG4gICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgbmFtZSA9IENvcmUucGF0aEdldChidWlsZENvbmZpZywgW1wibWV0YWRhdGFcIiwgXCJuYW1lXCJdKTtcbiAgICAgICAgQ29yZS5ub3RpZmljYXRpb24oJ2luZm8nLCBcIlRyaWdnZXJpbmcgYnVpbGQgXCIgKyBuYW1lKTtcbiAgICAgICAgJGh0dHAucG9zdCh1cmwsIGRhdGEsIGNvbmZpZykuXG4gICAgICAgICAgc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidHJpZ2dlciB3b3JrZWQhIGdvdCBkYXRhIFwiICsgYW5ndWxhci50b0pzb24oZGF0YSwgdHJ1ZSkpO1xuICAgICAgICAgICAgLy8gVE9ETyBzaG91bGQgd2Ugc2hvdyBzb21lIGxpbmsgdG8gdGhlIGJ1aWxkXG4gICAgICAgICAgICBDb3JlLm5vdGlmaWNhdGlvbignaW5mbycsIFwiQnVpbGRpbmcgXCIgKyBuYW1lKTtcbiAgICAgICAgICB9KS5cbiAgICAgICAgICBlcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgIGxvZy53YXJuKFwiRmFpbGVkIHRvIGxvYWQgXCIgKyB1cmwgKyBcIiBcIiArIGRhdGEgKyBcIiBcIiArIHN0YXR1cyk7XG4gICAgICAgICAgICBDb3JlLm5vdGlmaWNhdGlvbignZXJyb3InLCBcIkZhaWxlZCB0byB0cmlnZ2VyIGJ1aWxkIGZvciBcIiArIG5hbWUgKyBcIi4gUmV0dXJuZWQgY29kZTogXCIgKyBzdGF0dXMgKyBcIiBcIiArIGRhdGEpO1xuICAgICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyB1cGRhdGUgdGhlIFVSTCBpZiB0aGUgZmlsdGVyIGlzIGNoYW5nZWRcbiAgICAkc2NvcGUuJHdhdGNoKFwidGFibGVDb25maWcuZmlsdGVyT3B0aW9ucy5maWx0ZXJUZXh0XCIsICh0ZXh0KSA9PiB7XG4gICAgICAkbG9jYXRpb24uc2VhcmNoKFwicVwiLCB0ZXh0KTtcbiAgICB9KTtcblxuICAgICRzY29wZS4kb24oXCJsYWJlbEZpbHRlclVwZGF0ZVwiLCAoJGV2ZW50LCB0ZXh0KSA9PiB7XG4gICAgICB2YXIgZmlsdGVyT3B0aW9ucyA9ICgkc2NvcGUudGFibGVDb25maWcgfHwge30pLmZpbHRlck9wdGlvbnMgfHwge307XG4gICAgICB2YXIgY3VycmVudEZpbHRlciA9IGZpbHRlck9wdGlvbnMuZmlsdGVyVGV4dDtcbiAgICAgIGlmIChDb3JlLmlzQmxhbmsoY3VycmVudEZpbHRlcikpIHtcbiAgICAgICAgZmlsdGVyT3B0aW9ucy5maWx0ZXJUZXh0ID0gdGV4dDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBleHByZXNzaW9ucyA9IGN1cnJlbnRGaWx0ZXIuc3BsaXQoL1xccysvKTtcbiAgICAgICAgaWYgKGV4cHJlc3Npb25zLmFueSh0ZXh0KSkge1xuICAgICAgICAgIC8vIGxldHMgZXhjbHVkZSB0aGlzIGZpbHRlciBleHByZXNzaW9uXG4gICAgICAgICAgZXhwcmVzc2lvbnMgPSBleHByZXNzaW9ucy5yZW1vdmUodGV4dCk7XG4gICAgICAgICAgZmlsdGVyT3B0aW9ucy5maWx0ZXJUZXh0ID0gZXhwcmVzc2lvbnMuam9pbihcIiBcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmlsdGVyT3B0aW9ucy5maWx0ZXJUZXh0ID0gY3VycmVudEZpbHRlciArIFwiIFwiICsgdGV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgJHNjb3BlLmlkID0gdW5kZWZpbmVkO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdpdmVuIHRoZSBsaXN0IG9mIHBvZHMgbGV0cyBpdGVyYXRlIHRocm91Z2ggdGhlbSBhbmQgZmluZCBhbGwgcG9kcyBtYXRjaGluZyB0aGUgc2VsZWN0b3JcbiAgICogYW5kIHJldHVybiBjb3VudGVycyBiYXNlZCBvbiB0aGUgc3RhdHVzIG9mIHRoZSBwb2RcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQb2RDb3VudGVycyhzZWxlY3RvciwgcG9kcywgb3V0cHV0UG9kcyA9IFtdLCBwb2RMaW5rUXVlcnkgPSBudWxsKSB7XG4gICAgdmFyIGZpbHRlckZuO1xuICAgIGlmIChhbmd1bGFyLmlzRnVuY3Rpb24oc2VsZWN0b3IpKSB7XG4gICAgICBmaWx0ZXJGbiA9IHNlbGVjdG9yO1xuICAgIH0gZWxzZSB7XG4gICAgICBmaWx0ZXJGbiA9IChwb2QpID0+IHNlbGVjdG9yTWF0Y2hlcyhzZWxlY3RvciwgcG9kLmxhYmVscyk7XG4gICAgfVxuICAgIHZhciBhbnN3ZXIgPSB7XG4gICAgICBwb2RzTGluazogXCJcIixcbiAgICAgIHZhbGlkOiAwLFxuICAgICAgd2FpdGluZzogMCxcbiAgICAgIGVycm9yOiAwXG4gICAgfTtcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmICghcG9kTGlua1F1ZXJ5KSB7XG4gICAgICAgIHBvZExpbmtRdWVyeSA9IEt1YmVybmV0ZXMubGFiZWxzVG9TdHJpbmcoc2VsZWN0b3IsIFwiIFwiKTtcbiAgICAgIH1cbiAgICAgIGFuc3dlci5wb2RzTGluayA9IENvcmUudXJsKFwiL2t1YmVybmV0ZXMvcG9kcz9xPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHBvZExpbmtRdWVyeSkpO1xuICAgICAgYW5ndWxhci5mb3JFYWNoKHBvZHMsIHBvZCA9PiB7XG4gICAgICAgIGlmIChmaWx0ZXJGbihwb2QpKSB7XG4gICAgICAgICAgb3V0cHV0UG9kcy5wdXNoKHBvZCk7XG4gICAgICAgICAgdmFyIHN0YXR1cyA9IChwb2QuY3VycmVudFN0YXRlIHx8IHt9KS5zdGF0dXM7XG5cbiAgICAgICAgICBpZiAoc3RhdHVzKSB7XG4gICAgICAgICAgICB2YXIgbG93ZXIgPSBzdGF0dXMudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGlmIChsb3dlci5zdGFydHNXaXRoKFwicnVuXCIpKSB7XG4gICAgICAgICAgICAgIGFuc3dlci52YWxpZCArPSAxO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsb3dlci5zdGFydHNXaXRoKFwid2FpdFwiKSkge1xuICAgICAgICAgICAgICBhbnN3ZXIud2FpdGluZyArPSAxO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsb3dlci5zdGFydHNXaXRoKFwidGVybVwiKSB8fCBsb3dlci5zdGFydHNXaXRoKFwiZXJyb3JcIikgfHwgbG93ZXIuc3RhcnRzV2l0aChcImZhaWxcIikpIHtcbiAgICAgICAgICAgICAgYW5zd2VyLmVycm9yICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFuc3dlci5lcnJvciArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBhbnN3ZXI7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgdGhlIGdpdmVuIGpzb24gaW50byBhbiBhcnJheSBvZiBpdGVtcy4gSWYgdGhlIGpzb24gY29udGFpbnMgYSBuZXN0ZWQgc2V0IG9mIGl0ZW1zIHRoZW4gdGhhdCBpcyBzb3J0ZWQ7IHNvIHRoYXQgc2VydmljZXNcbiAgICogYXJlIHByb2Nlc3NlZCBmaXJzdDsgdGhlbiB0dXJuZWQgaW50byBhbiBhcnJheS4gT3RoZXJ3aXNlIHRoZSBqc29uIGlzIHB1dCBpbnRvIGFuIGFycmF5IHNvIGl0IGNhbiBiZSBwcm9jZXNzZWQgcG9seW1vcnBoaWNhbGx5XG4gICAqL1xuICBleHBvcnQgZnVuY3Rpb24gY29udmVydEt1YmVybmV0ZXNKc29uVG9JdGVtcyhqc29uKSB7XG4gICAgdmFyIGl0ZW1zID0ganNvbi5pdGVtcztcbiAgICBpZiAoYW5ndWxhci5pc0FycmF5KGl0ZW1zKSkge1xuICAgICAgLy8gVE9ETyB3ZSBjb3VsZCBjaGVjayBmb3IgTGlzdCBvciBDb25maWcgdHlwZXMgaGVyZSBhbmQgd2FybiBpZiBub3RcblxuICAgICAgLy8gc29ydCB0aGUgc2VydmljZXMgZmlyc3RcbiAgICAgIHZhciBhbnN3ZXIgPSBbXTtcbiAgICAgIGl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgaWYgKGl0ZW0ua2luZCA9PT0gXCJTZXJ2aWNlXCIpIHtcbiAgICAgICAgICBhbnN3ZXIucHVzaChpdGVtKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIGlmIChpdGVtLmtpbmQgIT09IFwiU2VydmljZVwiKSB7XG4gICAgICAgICAgYW5zd2VyLnB1c2goaXRlbSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFuc3dlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFtqc29uXTtcbiAgICB9XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gaXNWMWJldGExT3IyKCkge1xuICAgIHJldHVybiBkZWZhdWx0QXBpVmVyc2lvbiA9PT0gXCJ2MWJldGExXCIgfHwgZGVmYXVsdEFwaVZlcnNpb24gPT09IFwidjFiZXRhMlwiO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBsaW5rIHRvIHRoZSBkZXRhaWwgcGFnZSBmb3IgdGhlIGdpdmVuIGVudGl0eVxuICAgKi9cbiAgZXhwb3J0IGZ1bmN0aW9uIGVudGl0eVBhZ2VMaW5rKGVudGl0eSkge1xuICAgIGlmIChlbnRpdHkpIHtcbiAgICAgIHZhciBpZCA9IGVudGl0eS5pZDtcbiAgICAgIHZhciBraW5kID0gZW50aXR5LmtpbmQ7XG4gICAgICBpZiAoa2luZCAmJiBpZCkge1xuICAgICAgICB2YXIgcGF0aCA9IGtpbmQuc3Vic3RyaW5nKDAsIDEpLnRvTG93ZXJDYXNlKCkgKyBraW5kLnN1YnN0cmluZygxKSArIFwic1wiO1xuICAgICAgICB2YXIgbmFtZXNwYWNlID0gZW50aXR5Lm5hbWVzcGFjZTtcbiAgICAgICAgaWYgKG5hbWVzcGFjZSAmJiAhaXNJZ25vcmVOYW1lc3BhY2VLaW5kKGtpbmQpKSB7XG4gICAgICAgICAgcmV0dXJuIFVybEhlbHBlcnMuam9pbignL2t1YmVybmV0ZXMvbmFtZXNwYWNlJywgbmFtZXNwYWNlLCBwYXRoLCBpZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFVybEhlbHBlcnMuam9pbignL2t1YmVybmV0ZXMnLCBwYXRoLCBpZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuXG4gIGV4cG9ydCBmdW5jdGlvbiByZXNvdXJjZUtpbmRUb1VyaVBhdGgoa2luZCkge1xuICAgIHZhciBraW5kUGF0aCA9IGtpbmQudG9Mb3dlckNhc2UoKSArIFwic1wiO1xuICAgIGlmIChraW5kUGF0aCA9PT0gXCJyZXBsaWNhdGlvbmNvbnRyb2xsZXJzXCIgJiYgaXNWMWJldGExT3IyKCkpIHtcbiAgICAgIGtpbmRQYXRoID0gXCJyZXBsaWNhdGlvbkNvbnRyb2xsZXJzXCI7XG4gICAgfVxuICAgIHJldHVybiBraW5kUGF0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzSWdub3JlTmFtZXNwYWNlS2luZChraW5kKSB7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwiSG9zdFwiIHx8IGtpbmQgPT09IFwiTWluaW9uXCI7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgcm9vdCBVUkwgZm9yIHRoZSBraW5kXG4gICAqL1xuICBleHBvcnQgZnVuY3Rpb24ga3ViZXJuZXRlc1VybEZvcktpbmQoS3ViZXJuZXRlc0FwaVVSTCwga2luZCwgbmFtZXNwYWNlID0gbnVsbCwgcGF0aCA9IG51bGwpIHtcbiAgICB2YXIgcGF0aFNlZ21lbnQgPSBcIlwiO1xuICAgIGlmIChwYXRoKSB7XG4gICAgICBwYXRoU2VnbWVudCA9IFwiL1wiICsgQ29yZS50cmltTGVhZGluZyhwYXRoLCBcIi9cIik7XG4gICAgfVxuICAgIHZhciBraW5kUGF0aCA9IHJlc291cmNlS2luZFRvVXJpUGF0aChraW5kKTtcbiAgICB2YXIgaWdub3JlTmFtZXNwYWNlID0gaXNJZ25vcmVOYW1lc3BhY2VLaW5kKGtpbmQpO1xuICAgIGlmIChpc1YxYmV0YTFPcjIoKSB8fCBpZ25vcmVOYW1lc3BhY2UpIHtcbiAgICAgIHZhciBwb3N0Zml4ID0gXCJcIjtcbiAgICAgIGlmIChuYW1lc3BhY2UgJiYgIWlnbm9yZU5hbWVzcGFjZSkge1xuICAgICAgICBwb3N0Zml4ID0gXCI/bmFtZXNwYWNlPVwiICsgbmFtZXNwYWNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFVybEhlbHBlcnMuam9pbihLdWJlcm5ldGVzQXBpVVJMLCBcIi9hcGkvXCIgKyBkZWZhdWx0QXBpVmVyc2lvbiArIFwiL1wiICsga2luZFBhdGggKyBwYXRoU2VnbWVudCArIHBvc3RmaXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gVXJsSGVscGVycy5qb2luKEt1YmVybmV0ZXNBcGlVUkwsIFwiL2FwaS9cIiArIGRlZmF1bHRBcGlWZXJzaW9uICsgXCIvbnMvXCIgKyBuYW1lc3BhY2UgKyBcIi9cIiArIGtpbmRQYXRoICsgcGF0aFNlZ21lbnQgKyBwb3N0Zml4KTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGJhc2UgVVJMIGZvciB0aGUga2luZCBvZiBrdWJlcm5ldGVzIHJlc291cmNlIG9yIG51bGwgaWYgaXQgY2Fubm90IGJlIGZvdW5kXG4gICAqL1xuICBleHBvcnQgZnVuY3Rpb24ga3ViZXJuZXRlc1VybEZvckl0ZW1LaW5kKEt1YmVybmV0ZXNBcGlVUkwsIGpzb24pIHtcbiAgICB2YXIga2luZCA9IGpzb24ua2luZDtcbiAgICBpZiAoa2luZCkge1xuICAgICAgcmV0dXJuIGt1YmVybmV0ZXNVcmxGb3JLaW5kKEt1YmVybmV0ZXNBcGlVUkwsIGtpbmQsIGpzb24ubmFtZXNwYWNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nLndhcm4oXCJJZ25vcmluZyBtaXNzaW5nIGtpbmQgXCIgKyBraW5kICsgXCIgZm9yIGt1YmVybmV0ZXMganNvbjogXCIgKyBhbmd1bGFyLnRvSnNvbihqc29uKSk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24ga3ViZXJuZXRlc1Byb3h5VXJsRm9yU2VydmljZShLdWJlcm5ldGVzQXBpVVJMLCBzZXJ2aWNlLCBwYXRoID0gbnVsbCkge1xuICAgIHZhciBwYXRoU2VnbWVudCA9IFwiXCI7XG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHBhdGhTZWdtZW50ID0gXCIvXCIgKyBDb3JlLnRyaW1MZWFkaW5nKHBhdGgsIFwiL1wiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGF0aFNlZ21lbnQgPSBcIi9cIjtcbiAgICB9XG4gICAgdmFyIG5hbWVzcGFjZSA9IHNlcnZpY2UubmFtZXNwYWNlO1xuICAgIGlmIChpc1YxYmV0YTFPcjIoKSkge1xuICAgICAgdmFyIHBvc3RmaXggPSBcIj9uYW1lc3BhY2U9XCIgKyBuYW1lc3BhY2U7XG4gICAgICByZXR1cm4gS3ViZXJuZXRlc0FwaVVSTC50aGVuKChLdWJlcm5ldGVzQXBpVVJMKSA9PiB7XG4gICAgICAgIHJldHVybiBVcmxIZWxwZXJzLmpvaW4oS3ViZXJuZXRlc0FwaVVSTCwgXCIvYXBpL1wiICsgZGVmYXVsdEFwaVZlcnNpb24gKyBcIi9wcm94eS9zZXJ2aWNlcy9cIiArIHNlcnZpY2UuaWQgKyBwYXRoU2VnbWVudCArIHBvc3RmaXgpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBLdWJlcm5ldGVzQXBpVVJMLnRoZW4oKEt1YmVybmV0ZXNBcGlVUkwpID0+IHtcbiAgICAgICAgcmV0dXJuIFVybEhlbHBlcnMuam9pbihLdWJlcm5ldGVzQXBpVVJMLCBcIi9hcGkvXCIgKyBkZWZhdWx0QXBpVmVyc2lvbiArIFwiL25zL1wiICsgbmFtZXNwYWNlICsgXCIvc2VydmljZXMvXCIgKyBzZXJ2aWNlLm5hbWUgKyBwYXRoU2VnbWVudCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gYnVpbGRDb25maWdSZXN0VXJsKGlkKSB7XG4gICAgcmV0dXJuIFVybEhlbHBlcnMuam9pbihidWlsZENvbmZpZ3NSZXN0VVJMLCBpZCk7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gZGVwbG95bWVudENvbmZpZ1Jlc3RVcmwoaWQpIHtcbiAgICByZXR1cm4gVXJsSGVscGVycy5qb2luKGRlcGxveW1lbnRDb25maWdzUmVzdFVSTCwgaWQpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGltYWdlUmVwb3NpdG9yeVJlc3RVcmwoaWQpIHtcbiAgICByZXR1cm4gVXJsSGVscGVycy5qb2luKGltYWdlUmVwb3NpdG9yaWVzUmVzdFVSTCwgaWQpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkUmVzdFVybChpZCkge1xuICAgIHJldHVybiBVcmxIZWxwZXJzLmpvaW4oYnVpbGRzUmVzdFVSTCwgaWQpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkTG9nc1Jlc3RVcmwoaWQpIHtcbiAgICByZXR1cm4gVXJsSGVscGVycy5qb2luKGJ1aWxkc0xvZ3NSZXN0VVJMLCBpZCk7XG4gIH1cblxuICAvKipcbiAgICogUnVucyB0aGUgZ2l2ZW4gYXBwbGljYXRpb24gSlNPTlxuICAgKi9cbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bkFwcCgkbG9jYXRpb24sICRzY29wZSwgJGh0dHAsIEt1YmVybmV0ZXNBcGlVUkwsIGpzb24sIG5hbWUgPSBcIkFwcFwiLCBvblN1Y2Nlc3NGbiA9IG51bGwsIG5hbWVzcGFjZSA9IG51bGwsIG9uQ29tcGxldGVGbiA9IG51bGwpIHtcbiAgICBpZiAoanNvbikge1xuICAgICAgaWYgKGFuZ3VsYXIuaXNTdHJpbmcoanNvbikpIHtcbiAgICAgICAganNvbiA9IGFuZ3VsYXIuZnJvbUpzb24oanNvbik7XG4gICAgICB9XG4gICAgICBuYW1lID0gbmFtZSB8fCBcIkFwcFwiO1xuICAgICAgdmFyIHBvc3RmaXggPSBuYW1lc3BhY2UgPyBcIiBpbiBuYW1lc3BhY2UgXCIgKyBuYW1lc3BhY2UgOiBcIlwiO1xuICAgICAgQ29yZS5ub3RpZmljYXRpb24oJ2luZm8nLCBcIlJ1bm5pbmcgXCIgKyBuYW1lICsgcG9zdGZpeCk7XG5cbiAgICAgIEt1YmVybmV0ZXNBcGlVUkwudGhlbigoS3ViZXJuZXRlc0FwaVVSTCkgPT4ge1xuICAgICAgICB2YXIgaXRlbXMgPSBjb252ZXJ0S3ViZXJuZXRlc0pzb25Ub0l0ZW1zKGpzb24pO1xuICAgICAgICBhbmd1bGFyLmZvckVhY2goaXRlbXMsIChpdGVtKSA9PiB7XG4gICAgICAgICAgdmFyIHVybCA9IGt1YmVybmV0ZXNVcmxGb3JJdGVtS2luZChLdWJlcm5ldGVzQXBpVVJMLCBpdGVtKTtcbiAgICAgICAgICBpZiAodXJsKSB7XG4gICAgICAgICAgICAkaHR0cC5wb3N0KHVybCwgaXRlbSkuXG4gICAgICAgICAgICAgIHN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgbG9nLmRlYnVnKFwiR290IHN0YXR1czogXCIgKyBzdGF0dXMgKyBcIiBvbiB1cmw6IFwiICsgdXJsICsgXCIgZGF0YTogXCIgKyBkYXRhICsgXCIgYWZ0ZXIgcG9zdGluZzogXCIgKyBhbmd1bGFyLnRvSnNvbihpdGVtKSk7XG4gICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNGdW5jdGlvbihvbkNvbXBsZXRlRm4pKSB7XG4gICAgICAgICAgICAgICAgICBvbkNvbXBsZXRlRm4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgQ29yZS4kYXBwbHkoJHNjb3BlKTtcbiAgICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICAgIGVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoYW5ndWxhci5pc09iamVjdChkYXRhKSkge1xuICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IGRhdGEubWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgIHZhciByZWFzb24gPSBkYXRhLnJlYXNvbjtcbiAgICAgICAgICAgICAgICAgIGlmIChyZWFzb24gPT09IFwiQWxyZWFkeUV4aXN0c1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGxldHMgaWdub3JlIGR1cGxpY2F0ZXNcbiAgICAgICAgICAgICAgICAgICAgbG9nLmRlYnVnKFwiZW50aXR5IGFscmVhZHkgZXhpc3RzIGF0IFwiICsgdXJsKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIW1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBcIkZhaWxlZCB0byBQT1NUIHRvIFwiICsgdXJsICsgXCIgZ290IHN0YXR1czogXCIgKyBzdGF0dXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxvZy53YXJuKFwiRmFpbGVkIHRvIHNhdmUgXCIgKyB1cmwgKyBcIiBzdGF0dXM6IFwiICsgc3RhdHVzICsgXCIgcmVzcG9uc2U6IFwiICsgYW5ndWxhci50b0pzb24oZGF0YSwgdHJ1ZSkpO1xuICAgICAgICAgICAgICAgIENvcmUubm90aWZpY2F0aW9uKCdlcnJvcicsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBjdXJyZW50IHN0YXR1cyBvZiB0aGUgcG9kIGlzIHJ1bm5pbmdcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiBpc1J1bm5pbmcocG9kQ3VycmVudFN0YXRlKSB7XG4gICAgdmFyIHN0YXR1cyA9IChwb2RDdXJyZW50U3RhdGUgfHwge30pLnN0YXR1cztcbiAgICBpZiAoc3RhdHVzKSB7XG4gICAgICB2YXIgbG93ZXIgPSBzdGF0dXMudG9Mb3dlckNhc2UoKTtcbiAgICAgIHJldHVybiBsb3dlci5zdGFydHNXaXRoKFwicnVuXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgbGFiZWxzIG9iamVjdCBoYXMgYWxsIG9mIHRoZSBrZXkvdmFsdWUgcGFpcnMgZnJvbSB0aGUgc2VsZWN0b3JcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiBzZWxlY3Rvck1hdGNoZXMoc2VsZWN0b3IsIGxhYmVscykge1xuICAgIGlmIChhbmd1bGFyLmlzT2JqZWN0KGxhYmVscykpIHtcbiAgICAgIHZhciBhbnN3ZXIgPSB0cnVlO1xuICAgICAgdmFyIGNvdW50ID0gMDtcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChzZWxlY3RvciwgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgY291bnQrKztcbiAgICAgICAgaWYgKGFuc3dlciAmJiBsYWJlbHNba2V5XSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICBhbnN3ZXIgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gYW5zd2VyICYmIGNvdW50ID4gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBsaW5rIHRvIHRoZSBraWJhbmEgbG9ncyB3ZWIgYXBwbGljYXRpb25cbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiBraWJhbmFMb2dzTGluayhTZXJ2aWNlUmVnaXN0cnkpIHtcbiAgICB2YXIgbGluayA9IFNlcnZpY2VSZWdpc3RyeS5zZXJ2aWNlTGluayhcImtpYmFuYS1zZXJ2aWNlXCIpO1xuICAgIGlmIChsaW5rKSB7XG4gICAgICBpZiAoIWxpbmsuZW5kc1dpdGgoXCIvXCIpKSB7XG4gICAgICAgIGxpbmsgKz0gXCIvXCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gbGluayArIFwiIy9kaXNjb3Zlci9GYWJyaWM4XCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBvcGVuTG9nc0ZvclBvZHMoU2VydmljZVJlZ2lzdHJ5LCAkd2luZG93LCBuYW1lc3BhY2UsIHBvZHMpIHtcbiAgICB2YXIgbGluayA9IGtpYmFuYUxvZ3NMaW5rKFNlcnZpY2VSZWdpc3RyeSk7XG4gICAgaWYgKGxpbmspIHtcbiAgICAgIHZhciBxdWVyeSA9IFwiXCI7XG4gICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgYW5ndWxhci5mb3JFYWNoKHBvZHMsIChpdGVtKSA9PiB7XG4gICAgICAgIHZhciBpZCA9IGl0ZW0uaWQ7XG4gICAgICAgIGlmIChpZCkge1xuICAgICAgICAgIHZhciBzcGFjZSA9IHF1ZXJ5ID8gXCIgT1IgXCIgOiBcIlwiO1xuICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgcXVlcnkgKz0gc3BhY2UgKyAnXCInICsgaWQgKyAnXCInO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChxdWVyeSkge1xuICAgICAgICBpZiAoY291bnQgPiAxKSB7XG4gICAgICAgICAgcXVlcnkgPSBcIihcIiArIHF1ZXJ5ICsgXCIpXCI7XG4gICAgICAgIH1cbiAgICAgICAgcXVlcnkgPSAncG9kX25hbWVzcGFjZTpcIicgKyBuYW1lc3BhY2UgKyAnXCIgQU5EIHBvZDonICsgcXVlcnk7XG4gICAgICAgIGxpbmsgKz0gXCI/X2E9KHF1ZXJ5OidcIiArIHF1ZXJ5ICsgXCInKVwiO1xuICAgICAgICB2YXIgbmV3V2luZG93ID0gJHdpbmRvdy5vcGVuKGxpbmssIFwidmlld0xvZ3NcIik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHJlc2l6ZUNvbnRyb2xsZXIoJGh0dHAsIEt1YmVybmV0ZXNBcGlVUkwsIHJlcGxpY2F0aW9uQ29udHJvbGxlciwgbmV3UmVwbGljYXMsIG9uQ29tcGxldGVGbiA9IG51bGwpIHtcbiAgICB2YXIgaWQgPSByZXBsaWNhdGlvbkNvbnRyb2xsZXIuaWQ7XG4gICAgdmFyIG5hbWVzcGFjZSA9IHJlcGxpY2F0aW9uQ29udHJvbGxlci5uYW1lc3BhY2UgfHwgXCJcIjtcbiAgICBLdWJlcm5ldGVzQXBpVVJMLnRoZW4oKEt1YmVybmV0ZXNBcGlVUkwpID0+IHtcbiAgICAgIHZhciB1cmwgPSBrdWJlcm5ldGVzVXJsRm9yS2luZChLdWJlcm5ldGVzQXBpVVJMLCBcIlJlcGxpY2F0aW9uQ29udHJvbGxlclwiLCBuYW1lc3BhY2UsIGlkKTtcbiAgICAgICRodHRwLmdldCh1cmwpLlxuICAgICAgICBzdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICB2YXIgZGVzaXJlZFN0YXRlID0gZGF0YS5kZXNpcmVkU3RhdGU7XG4gICAgICAgICAgICBpZiAoIWRlc2lyZWRTdGF0ZSkge1xuICAgICAgICAgICAgICBkZXNpcmVkU3RhdGUgPSB7fTtcbiAgICAgICAgICAgICAgZGF0YS5kZXNpcmVkU3RhdGUgPSBkZXNpcmVkU3RhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZXNpcmVkU3RhdGUucmVwbGljYXMgPSBuZXdSZXBsaWNhcztcbiAgICAgICAgICAgICRodHRwLnB1dCh1cmwsIGRhdGEpLlxuICAgICAgICAgICAgICBzdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyhcInVwZGF0ZWQgY29udHJvbGxlciBcIiArIHVybCk7XG4gICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNGdW5jdGlvbihvbkNvbXBsZXRlRm4pKSB7XG4gICAgICAgICAgICAgICAgICBvbkNvbXBsZXRlRm4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgICBlcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgICAgICBsb2cud2FybihcIkZhaWxlZCB0byBzYXZlIFwiICsgdXJsICsgXCIgXCIgKyBkYXRhICsgXCIgXCIgKyBzdGF0dXMpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLlxuICAgICAgICBlcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICBsb2cud2FybihcIkZhaWxlZCB0byBsb2FkIFwiICsgdXJsICsgXCIgXCIgKyBkYXRhICsgXCIgXCIgKyBzdGF0dXMpO1xuICAgICAgICB9KTtcbiAgICB9LCAocmVzcG9uc2UpID0+IHtcbiAgICAgIGxvZy5kZWJ1ZyhcIkZhaWxlZCB0byBnZXQgcmVzdCBBUEkgVVJMLCBjYW4ndCByZXNpemUgY29udHJvbGxlciBcIiArIGlkICsgXCIgcmVzb3VyY2U6IFwiLCByZXNwb25zZSk7XG4gICAgfSk7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gc3RhdHVzVGV4dFRvQ3NzQ2xhc3ModGV4dCkge1xuICAgIGlmICh0ZXh0KSB7XG4gICAgICB2YXIgbG93ZXIgPSB0ZXh0LnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAobG93ZXIuc3RhcnRzV2l0aChcInJ1blwiKSB8fCBsb3dlci5zdGFydHNXaXRoKFwib2tcIikpIHtcbiAgICAgICAgcmV0dXJuICdmYSBmYS1wbGF5LWNpcmNsZSBncmVlbic7XG4gICAgICB9IGVsc2UgaWYgKGxvd2VyLnN0YXJ0c1dpdGgoXCJ3YWl0XCIpKSB7XG4gICAgICAgIHJldHVybiAnZmEgZmEtZG93bmxvYWQnO1xuICAgICAgfSBlbHNlIGlmIChsb3dlci5zdGFydHNXaXRoKFwidGVybVwiKSB8fCBsb3dlci5zdGFydHNXaXRoKFwiZXJyb3JcIikgfHwgbG93ZXIuc3RhcnRzV2l0aChcImZhaWxcIikpIHtcbiAgICAgICAgcmV0dXJuICdmYSBmYS1vZmYgb3JhbmdlJztcbiAgICAgIH0gZWxzZSBpZiAobG93ZXIuc3RhcnRzV2l0aChcInN1Y2NlZWRlZFwiKSkge1xuICAgICAgICByZXR1cm4gJ2ZhIGZhLWNoZWNrLWNpcmNsZS1vIGdyZWVuJztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICdmYSBmYS1xdWVzdGlvbiByZWQnO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHBvZFN0YXR1cyhwb2QpIHtcbiAgICB2YXIgY3VycmVudFN0YXR1cyA9IChwb2QgfHwge30pLmN1cnJlbnRTdGF0ZSB8fCB7fTtcbiAgICByZXR1cm4gY3VycmVudFN0YXR1cy5zdGF0dXM7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gY3JlYXRlQXBwVmlld1BvZENvdW50ZXJzKGFwcFZpZXcpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICB2YXIgbWFwID0ge307XG4gICAgdmFyIHBvZHMgPSBhcHBWaWV3LnBvZHM7XG4gICAgdmFyIGxvd2VzdERhdGUgPSBudWxsO1xuICAgIGFuZ3VsYXIuZm9yRWFjaChwb2RzLCBwb2QgPT4ge1xuICAgICAgdmFyIHNlbGVjdG9yID0gcG9kLmxhYmVscztcbiAgICAgIHZhciBzZWxlY3RvclRleHQgPSBLdWJlcm5ldGVzLmxhYmVsc1RvU3RyaW5nKHNlbGVjdG9yLCBcIiBcIik7XG4gICAgICB2YXIgYW5zd2VyID0gbWFwW3NlbGVjdG9yXTtcbiAgICAgIGlmICghYW5zd2VyKSB7XG4gICAgICAgIGFuc3dlciA9IHtcbiAgICAgICAgICBsYWJlbFRleHQ6IHNlbGVjdG9yVGV4dCxcbiAgICAgICAgICBwb2RzTGluazogQ29yZS51cmwoXCIva3ViZXJuZXRlcy9wb2RzP3E9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoc2VsZWN0b3JUZXh0KSksXG4gICAgICAgICAgdmFsaWQ6IDAsXG4gICAgICAgICAgd2FpdGluZzogMCxcbiAgICAgICAgICBlcnJvcjogMFxuICAgICAgICB9O1xuICAgICAgICBtYXBbc2VsZWN0b3JdID0gYW5zd2VyO1xuICAgICAgICBhcnJheS5wdXNoKGFuc3dlcik7XG4gICAgICB9XG4gICAgICB2YXIgc3RhdHVzID0gKHBvZFN0YXR1cyhwb2QpIHx8IFwiRXJyb3JcIikudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChzdGF0dXMuc3RhcnRzV2l0aChcInJ1blwiKSB8fCBzdGF0dXMuc3RhcnRzV2l0aChcIm9rXCIpKSB7XG4gICAgICAgIGFuc3dlci52YWxpZCArPSAxO1xuICAgICAgfSBlbHNlIGlmIChzdGF0dXMuc3RhcnRzV2l0aChcIndhaXRcIikpIHtcbiAgICAgICAgYW5zd2VyLndhaXRpbmcgKz0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFuc3dlci5lcnJvciArPSAxO1xuICAgICAgfVxuICAgICAgdmFyIGNyZWF0aW9uVGltZXN0YW1wID0gcG9kLmNyZWF0aW9uVGltZXN0YW1wO1xuICAgICAgaWYgKGNyZWF0aW9uVGltZXN0YW1wKSB7XG4gICAgICAgIHZhciBkID0gbmV3IERhdGUoY3JlYXRpb25UaW1lc3RhbXApO1xuICAgICAgICBpZiAoIWxvd2VzdERhdGUgfHwgZCA8IGxvd2VzdERhdGUpIHtcbiAgICAgICAgICBsb3dlc3REYXRlID0gZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIGFwcFZpZXcuJGNyZWF0aW9uRGF0ZSA9IGxvd2VzdERhdGU7XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUFwcFZpZXdTZXJ2aWNlVmlld3MoYXBwVmlldykge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIHZhciBwb2RzID0gYXBwVmlldy5wb2RzO1xuICAgIGFuZ3VsYXIuZm9yRWFjaChwb2RzLCBwb2QgPT4ge1xuICAgICAgdmFyIGlkID0gcG9kLmlkO1xuICAgICAgaWYgKGlkKSB7XG4gICAgICAgIHZhciBhYmJyZXYgPSBpZDtcbiAgICAgICAgdmFyIGlkeCA9IGlkLmluZGV4T2YoXCItXCIpO1xuICAgICAgICBpZiAoaWR4ID4gMSkge1xuICAgICAgICAgIGFiYnJldiA9IGlkLnN1YnN0cmluZygwLCBpZHgpO1xuICAgICAgICB9XG4gICAgICAgIHBvZC5pZEFiYnJldiA9IGFiYnJldjtcbiAgICAgIH1cbiAgICAgIHBvZC5zdGF0dXNDbGFzcyA9IHN0YXR1c1RleHRUb0Nzc0NsYXNzKHBvZFN0YXR1cyhwb2QpKTtcbiAgICB9KTtcblxuICAgIHZhciBzZXJ2aWNlcyA9IGFwcFZpZXcuc2VydmljZXMgfHwgW107XG4gICAgdmFyIHJlcGxpY2F0aW9uQ29udHJvbGxlcnMgPSBhcHBWaWV3LnJlcGxpY2F0aW9uQ29udHJvbGxlcnMgfHwgW107XG4gICAgdmFyIHNpemUgPSBNYXRoLm1heChzZXJ2aWNlcy5sZW5ndGgsIHJlcGxpY2F0aW9uQ29udHJvbGxlcnMubGVuZ3RoLCAxKTtcbiAgICB2YXIgYXBwTmFtZSA9IGFwcFZpZXcuJGluZm8ubmFtZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7IGkrKykge1xuICAgICAgdmFyIHNlcnZpY2UgPSBzZXJ2aWNlc1tpXTtcbiAgICAgIHZhciByZXBsaWNhdGlvbkNvbnRyb2xsZXIgPSByZXBsaWNhdGlvbkNvbnRyb2xsZXJzW2ldO1xuICAgICAgdmFyIGNvbnRyb2xsZXJJZCA9IChyZXBsaWNhdGlvbkNvbnRyb2xsZXIgfHwge30pLmlkO1xuICAgICAgdmFyIG5hbWUgPSAoc2VydmljZSB8fCB7fSkuaWQgfHwgY29udHJvbGxlcklkO1xuICAgICAgdmFyIGFkZHJlc3MgPSAoc2VydmljZSB8fCB7fSkucG9ydGFsSVA7XG4gICAgICBpZiAoIW5hbWUgJiYgcG9kcy5sZW5ndGgpIHtcbiAgICAgICAgbmFtZSA9IHBvZHNbMF0uaWRBYmJyZXY7XG4gICAgICB9XG4gICAgICBpZiAoIWFwcFZpZXcuJGluZm8ubmFtZSkge1xuICAgICAgICBhcHBWaWV3LiRpbmZvLm5hbWUgPSBuYW1lO1xuICAgICAgfVxuICAgICAgaWYgKCFhcHBWaWV3LmlkICYmIHBvZHMubGVuZ3RoKSB7XG4gICAgICAgIGFwcFZpZXcuaWQgPSBwb2RzWzBdLmlkO1xuICAgICAgfVxuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIGFwcE5hbWUgPSBuYW1lO1xuICAgICAgfVxuICAgICAgdmFyIHBvZENvdW50ID0gcG9kcy5sZW5ndGg7XG4gICAgICB2YXIgcG9kQ291bnRUZXh0ID0gcG9kQ291bnQgKyBcIiBwb2RcIiArIChwb2RDb3VudCA+IDEgPyBcInNcIiA6IFwiXCIpO1xuICAgICAgdmFyIHZpZXcgPSB7XG4gICAgICAgIGFwcE5hbWU6IGFwcE5hbWUgfHwgbmFtZSxcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgY3JlYXRlZERhdGU6IGFwcFZpZXcuJGNyZWF0aW9uRGF0ZSxcbiAgICAgICAgcG9kQ291bnRUZXh0OiBwb2RDb3VudFRleHQsXG4gICAgICAgIGFkZHJlc3M6IGFkZHJlc3MsXG4gICAgICAgIGNvbnRyb2xsZXJJZDogY29udHJvbGxlcklkLFxuICAgICAgICBzZXJ2aWNlOiBzZXJ2aWNlLFxuICAgICAgICByZXBsaWNhdGlvbkNvbnRyb2xsZXI6IHJlcGxpY2F0aW9uQ29udHJvbGxlcixcbiAgICAgICAgcG9kczogcG9kc1xuICAgICAgfTtcbiAgICAgIGFycmF5LnB1c2godmlldyk7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBjb252ZXJ0cyBhIGdpdCBwYXRoIGludG8gYW4gYWNjZXNzaWJsZSBVUkwgZm9yIHRoZSBicm93c2VyXG4gICAqL1xuICBleHBvcnQgZnVuY3Rpb24gZ2l0UGF0aFRvVXJsKGljb25QYXRoLCBicmFuY2ggPSBcIm1hc3RlclwiKSB7XG4gICAgcmV0dXJuIChIYXd0aW9Db3JlLmluamVjdG9yLmdldCgnQXBwTGlicmFyeVVSTCcpIHx8ICcnKSArIFwiL2dpdC9cIiArIGJyYW5jaCArIGljb25QYXRoO1xuICB9XG5cblxuICBleHBvcnQgZnVuY3Rpb24gZW5yaWNoQnVpbGRDb25maWcoYnVpbGRDb25maWcsIHNvcnRlZEJ1aWxkcykge1xuICAgIGlmIChidWlsZENvbmZpZykge1xuICAgICAgdmFyIHRyaWdnZXJVcmw6c3RyaW5nID0gbnVsbDtcbiAgICAgIHZhciBuYW1lID0gQ29yZS5wYXRoR2V0KGJ1aWxkQ29uZmlnLCBbXCJtZXRhZGF0YVwiLCBcIm5hbWVcIl0pO1xuICAgICAgYnVpbGRDb25maWcuJG5hbWUgPSBuYW1lO1xuICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKFtmYWxzZSwgdHJ1ZV0sIChmbGFnKSA9PiB7XG4gICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGJ1aWxkQ29uZmlnLnRyaWdnZXJzLCAodHJpZ2dlcikgPT4ge1xuICAgICAgICAgICAgaWYgKCF0cmlnZ2VyVXJsKSB7XG4gICAgICAgICAgICAgIHZhciB0eXBlID0gdHJpZ2dlci50eXBlO1xuICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gXCJnZW5lcmljXCIgfHwgZmxhZykge1xuICAgICAgICAgICAgICAgIHZhciBnZW5lcmljID0gdHJpZ2dlclt0eXBlXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZSAmJiBnZW5lcmljKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgc2VjcmV0ID0gZ2VuZXJpYy5zZWNyZXQ7XG4gICAgICAgICAgICAgICAgICBpZiAoc2VjcmV0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXJVcmwgPSBVcmxIZWxwZXJzLmpvaW4oYnVpbGRDb25maWdIb29rc1Jlc3RVUkwsIG5hbWUsIHNlY3JldCwgdHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkQ29uZmlnLiR0cmlnZ2VyVXJsID0gdHJpZ2dlclVybDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gbGV0cyBmaW5kIHRoZSBsYXRlc3QgYnVpbGQuLi5cbiAgICAgICAgaWYgKHNvcnRlZEJ1aWxkcykge1xuICAgICAgICAgIGJ1aWxkQ29uZmlnLiRsYXN0QnVpbGQgPSBfLmZpbmQoc29ydGVkQnVpbGRzLCB7XG4gICAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBidWlsZGNvbmZpZzogbmFtZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gZW5yaWNoQnVpbGRDb25maWdzKGJ1aWxkQ29uZmlncywgc29ydGVkQnVpbGRzKSB7XG4gICAgYW5ndWxhci5mb3JFYWNoKGJ1aWxkQ29uZmlncywgKGJ1aWxkQ29uZmlnKSA9PiB7XG4gICAgICBlbnJpY2hCdWlsZENvbmZpZyhidWlsZENvbmZpZywgc29ydGVkQnVpbGRzKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRDb25maWdzO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGVucmljaEJ1aWxkcyhidWlsZHMpIHtcbiAgICBhbmd1bGFyLmZvckVhY2goYnVpbGRzLCAoYnVpbGQpID0+IHtcbiAgICAgIGVucmljaEJ1aWxkKGJ1aWxkKTtcbiAgICB9KTtcbiAgICByZXR1cm4gXy5zb3J0QnkoYnVpbGRzLCBcIiRjcmVhdGlvbkRhdGVcIikucmV2ZXJzZSgpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGVucmljaEJ1aWxkKGJ1aWxkKSB7XG4gICAgaWYgKGJ1aWxkKSB7XG4gICAgICB2YXIgbWV0YWRhdGEgPSBidWlsZC5tZXRhZGF0YSB8fCB7fTtcbiAgICAgIHZhciBuYW1lID0gbWV0YWRhdGEubmFtZTtcbiAgICAgIHZhciBuYW1lc3BhY2UgPSBtZXRhZGF0YS5uYW1lc3BhY2U7XG4gICAgICBidWlsZC4kbmFtZSA9IG5hbWU7XG4gICAgICBidWlsZC4kbmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuXG4gICAgICB2YXIgbmFtZUFycmF5ID0gbmFtZS5zcGxpdChcIi1cIik7XG4gICAgICB2YXIgbmFtZUFycmF5TGVuZ3RoID0gbmFtZUFycmF5Lmxlbmd0aDtcbiAgICAgIGJ1aWxkLiRzaG9ydE5hbWUgPSAobmFtZUFycmF5TGVuZ3RoID4gNCkgPyBuYW1lQXJyYXkuc2xpY2UoMCwgbmFtZUFycmF5TGVuZ3RoIC0gNCkuam9pbihcIi1cIikgOiBuYW1lLnN1YnN0cmluZygwLCAzMCk7XG5cbiAgICAgIHZhciBsYWJlbHMgPSBtZXRhZGF0YS5sYWJlbHMgfHwge307XG4gICAgICB2YXIgY29uZmlnSWQgPSBsYWJlbHMuYnVpbGRjb25maWc7XG4gICAgICBidWlsZC4kY29uZmlnSWQgPSBjb25maWdJZDtcbiAgICAgIGlmIChjb25maWdJZCkge1xuICAgICAgICBidWlsZC4kY29uZmlnTGluayA9IFVybEhlbHBlcnMuam9pbihcImt1YmVybmV0ZXMvYnVpbGRDb25maWdzXCIsIGNvbmZpZ0lkKTtcbiAgICAgIH1cbiAgICAgIHZhciBjcmVhdGlvblRpbWVzdGFtcCA9IG1ldGFkYXRhLmNyZWF0aW9uVGltZXN0YW1wO1xuICAgICAgaWYgKGNyZWF0aW9uVGltZXN0YW1wKSB7XG4gICAgICAgIHZhciBkID0gbmV3IERhdGUoY3JlYXRpb25UaW1lc3RhbXApO1xuICAgICAgICBidWlsZC4kY3JlYXRpb25EYXRlID0gZDtcbiAgICAgIH1cbiAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgIGJ1aWxkLiR2aWV3TGluayA9IFVybEhlbHBlcnMuam9pbihcImt1YmVybmV0ZXMvYnVpbGRzXCIsIG5hbWUpO1xuICAgICAgICBidWlsZC4kbG9nc0xpbmsgPSBVcmxIZWxwZXJzLmpvaW4oXCJrdWJlcm5ldGVzL2J1aWxkTG9nc1wiLCBuYW1lKTtcbiAgICAgIH1cbiAgICAgIHZhciBwb2ROYW1lID0gYnVpbGQucG9kTmFtZTtcbiAgICAgIGlmIChwb2ROYW1lICYmIG5hbWVzcGFjZSkge1xuICAgICAgICB2YXIgcG9kTmFtZUFycmF5ID0gcG9kTmFtZS5zcGxpdChcIi1cIik7XG4gICAgICAgIHZhciBwb2ROYW1lQXJyYXlMZW5ndGggPSBwb2ROYW1lQXJyYXkubGVuZ3RoXG4gICAgICAgIGJ1aWxkLiRwb2RTaG9ydE5hbWUgPSAocG9kTmFtZUFycmF5TGVuZ3RoID4gNSkgPyBwb2ROYW1lQXJyYXlbcG9kTmFtZUFycmF5TGVuZ3RoIC0gNV0gOiBwb2ROYW1lLnN1YnN0cmluZygwLCAzMCk7XG4gICAgICAgIGJ1aWxkLiRwb2RMaW5rID0gVXJsSGVscGVycy5qb2luKFwia3ViZXJuZXRlcy9uYW1lc3BhY2VcIiwgbmFtZXNwYWNlLCBcInBvZHNcIiwgcG9kTmFtZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBidWlsZDtcbiAgfVxuXG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGVucmljaERlcGxveW1lbnRDb25maWcoZGVwbG95bWVudENvbmZpZykge1xuICAgIGlmIChkZXBsb3ltZW50Q29uZmlnKSB7XG4gICAgICB2YXIgdHJpZ2dlclVybDpzdHJpbmcgPSBudWxsO1xuICAgICAgdmFyIG5hbWUgPSBDb3JlLnBhdGhHZXQoZGVwbG95bWVudENvbmZpZywgW1wibWV0YWRhdGFcIiwgXCJuYW1lXCJdKTtcbiAgICAgIGRlcGxveW1lbnRDb25maWcuJG5hbWUgPSBuYW1lO1xuICAgICAgdmFyIGZvdW5kID0gZmFsc2U7XG4gICAgICBhbmd1bGFyLmZvckVhY2goZGVwbG95bWVudENvbmZpZy50cmlnZ2VycywgKHRyaWdnZXIpID0+IHtcbiAgICAgICAgdmFyIHR5cGUgPSB0cmlnZ2VyLnR5cGU7XG4gICAgICAgIGlmICghZGVwbG95bWVudENvbmZpZy4kaW1hZ2VDaGFuZ2VQYXJhbXMgJiYgdHlwZSA9PT0gXCJJbWFnZUNoYW5nZVwiKSB7XG4gICAgICAgICAgdmFyIGltYWdlQ2hhbmdlUGFyYW1zID0gdHJpZ2dlci5pbWFnZUNoYW5nZVBhcmFtcztcbiAgICAgICAgICBpZiAoaW1hZ2VDaGFuZ2VQYXJhbXMpIHtcbiAgICAgICAgICAgIHZhciBjb250YWluZXJOYW1lcyA9IGltYWdlQ2hhbmdlUGFyYW1zLmNvbnRhaW5lck5hbWVzIHx8IFtdO1xuICAgICAgICAgICAgaW1hZ2VDaGFuZ2VQYXJhbXMuJGNvbnRhaW5lck5hbWVzID0gY29udGFpbmVyTmFtZXMuam9pbihcIiBcIik7XG4gICAgICAgICAgICBkZXBsb3ltZW50Q29uZmlnLiRpbWFnZUNoYW5nZVBhcmFtcyA9IGltYWdlQ2hhbmdlUGFyYW1zO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGVucmljaERlcGxveW1lbnRDb25maWdzKGRlcGxveW1lbnRDb25maWdzKSB7XG4gICAgYW5ndWxhci5mb3JFYWNoKGRlcGxveW1lbnRDb25maWdzLCAoZGVwbG95bWVudENvbmZpZykgPT4ge1xuICAgICAgZW5yaWNoRGVwbG95bWVudENvbmZpZyhkZXBsb3ltZW50Q29uZmlnKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZGVwbG95bWVudENvbmZpZ3M7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gZW5yaWNoSW1hZ2VSZXBvc2l0b3J5KGltYWdlUmVwb3NpdG9yeSkge1xuICAgIGlmIChpbWFnZVJlcG9zaXRvcnkpIHtcbiAgICAgIHZhciB0cmlnZ2VyVXJsOnN0cmluZyA9IG51bGw7XG4gICAgICB2YXIgbmFtZSA9IENvcmUucGF0aEdldChpbWFnZVJlcG9zaXRvcnksIFtcIm1ldGFkYXRhXCIsIFwibmFtZVwiXSk7XG4gICAgICBpbWFnZVJlcG9zaXRvcnkuJG5hbWUgPSBuYW1lO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBlbnJpY2hJbWFnZVJlcG9zaXRvcmllcyhpbWFnZVJlcG9zaXRvcmllcykge1xuICAgIGFuZ3VsYXIuZm9yRWFjaChpbWFnZVJlcG9zaXRvcmllcywgKGltYWdlUmVwb3NpdG9yeSkgPT4ge1xuICAgICAgZW5yaWNoSW1hZ2VSZXBvc2l0b3J5KGltYWdlUmVwb3NpdG9yeSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGltYWdlUmVwb3NpdG9yaWVzO1xuICB9XG5cblxuICB2YXIgbGFiZWxDb2xvcnMgPSB7XG4gICAgJ3ZlcnNpb24nOiAnYmFja2dyb3VuZC1ibHVlJyxcbiAgICAnbmFtZSc6ICdiYWNrZ3JvdW5kLWxpZ2h0LWdyZWVuJyxcbiAgICAnY29udGFpbmVyJzogJ2JhY2tncm91bmQtbGlnaHQtZ3JleSdcbiAgfTtcblxuICBleHBvcnQgZnVuY3Rpb24gY29udGFpbmVyTGFiZWxDbGFzcyhsYWJlbFR5cGU6c3RyaW5nKSB7XG4gICAgaWYgKCEobGFiZWxUeXBlIGluIGxhYmVsQ29sb3JzKSkge1xuICAgICAgcmV0dXJuICdtb3VzZS1wb2ludGVyJztcbiAgICB9XG4gICAgZWxzZSByZXR1cm4gbGFiZWxDb2xvcnNbbGFiZWxUeXBlXSArICcgbW91c2UtcG9pbnRlcic7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGZhYnJpYzggZm9yZ2UgcGx1Z2luIGlzIGVuYWJsZWRcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiBpc0ZvcmdlRW5hYmxlZCgpIHtcbiAgICAvLyBUT0RPIHNob3VsZCByZXR1cm4gdHJ1ZSBpZiB0aGUgc2VydmljZSBcImZhYnJpYzgtZm9yZ2VcIiBpcyB2YWxpZFxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyZXMgdGhlIGpzb24gc2NoZW1hXG4gICAqL1xuICBleHBvcnQgZnVuY3Rpb24gY29uZmlndXJlU2NoZW1hKCkge1xuICAgIGFuZ3VsYXIuZm9yRWFjaChzY2hlbWEuZGVmaW5pdGlvbnMsIChkZWZpbml0aW9uLCBuYW1lKSA9PiB7XG4gICAgICB2YXIgcHJvcGVydGllcyA9IGRlZmluaXRpb24ucHJvcGVydGllcztcbiAgICAgIGlmIChwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHZhciBoaWRlUHJvcGVydGllcyA9IFtcImNyZWF0aW9uVGltZXN0YW1wXCIsIFwia2luZFwiLCBcImFwaVZlcnNpb25cIiwgXCJhbm5vdGF0aW9uc1wiLCBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCIsIFwibmFtZXNwYWNlXCIsIFwicmVzb3VyY2VWZXJzaW9uXCIsIFwic2VsZkxpbmtcIiwgXCJ1aWRcIl07XG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChoaWRlUHJvcGVydGllcywgKHByb3BlcnR5TmFtZSkgPT4ge1xuICAgICAgICAgIHZhciBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgICBpZiAocHJvcGVydHkpIHtcbiAgICAgICAgICAgIHByb3BlcnR5W1wiaGlkZGVuXCJdICA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKHByb3BlcnRpZXMsIChwcm9wZXJ0eSwgcHJvcGVydHlOYW1lKSA9PiB7XG4gICAgICAgICAgdmFyIHJlZiA9IHByb3BlcnR5W1wiJHJlZlwiXTtcbiAgICAgICAgICB2YXIgdHlwZSA9IHByb3BlcnR5W1widHlwZVwiXTtcbiAgICAgICAgICBpZiAocmVmICYmICghdHlwZSB8fCB0eXBlID09PSBcIm9iamVjdFwiKSkge1xuICAgICAgICAgICAgcHJvcGVydHlbXCJ0eXBlXCJdID0gcmVmO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZSA9PT0gXCJhcnJheVwiKSB7XG4gICAgICAgICAgICB2YXIgaXRlbXMgPSBwcm9wZXJ0eVtcIml0ZW1zXCJdO1xuICAgICAgICAgICAgaWYgKGl0ZW1zKSB7XG4gICAgICAgICAgICAgIHZhciByZWYgPSBpdGVtc1tcIiRyZWZcIl07XG4gICAgICAgICAgICAgIHZhciB0eXBlID0gaXRlbXNbXCJ0eXBlXCJdO1xuICAgICAgICAgICAgICBpZiAocmVmICYmICghdHlwZSB8fCB0eXBlID09PSBcIm9iamVjdFwiKSkge1xuICAgICAgICAgICAgICAgIGl0ZW1zW1widHlwZVwiXSA9IHJlZjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHNjaGVtYS5kZWZpbml0aW9ucy5vc19idWlsZF9XZWJIb29rVHJpZ2dlci5wcm9wZXJ0aWVzLnNlY3JldC50eXBlID0gXCJwYXNzd29yZFwiO1xuICAgIH0pXG4gIH1cblxufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNIZWxwZXJzLnRzXCIvPlxuXG5tb2R1bGUgS3ViZXJuZXRlcyB7XG5cbiAgZnVuY3Rpb24gYnlJZCh0aGluZykge1xuICAgIHJldHVybiB0aGluZy5pZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleShuYW1lc3BhY2UsIGlkKSB7XG4gICAgcmV0dXJuIChuYW1lc3BhY2UgfHwgXCJcIikgKyBcIi1cIiArIGlkO1xuICB9XG5cbiAgZnVuY3Rpb24gcG9wdWxhdGVLZXkoaXRlbSkge1xuICAgIHZhciByZXN1bHQgPSBpdGVtO1xuICAgIHJlc3VsdFsnX2tleSddID0gY3JlYXRlS2V5KGl0ZW0ubmFtZXNwYWNlLCBpdGVtLmlkKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gcG9wdWxhdGVLZXlzKGl0ZW1zOkFycmF5PGFueT4pIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgYW5ndWxhci5mb3JFYWNoKGl0ZW1zLCAoaXRlbSkgPT4ge1xuICAgICAgcmVzdWx0LnB1c2gocG9wdWxhdGVLZXkoaXRlbSkpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3RQb2RzKHBvZHMsIG5hbWVzcGFjZSwgbGFiZWxzKSB7XG4gICAgcmV0dXJuIHBvZHMuZmlsdGVyKChwb2QpID0+IHtcbiAgICAgIHJldHVybiBwb2QubmFtZXNwYWNlID09PSBuYW1lc3BhY2UgJiYgc2VsZWN0b3JNYXRjaGVzKGxhYmVscywgcG9kLmxhYmVscyk7XG4gICAgfSk7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBUaGUgb2JqZWN0IHdoaWNoIGtlZXBzIHRyYWNrIG9mIGFsbCB0aGUgcG9kcywgcmVwbGljYXRpb24gY29udHJvbGxlcnMsIHNlcnZpY2VzIGFuZCB0aGVpciBhc3NvY2lhdGlvbnNcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBLdWJlcm5ldGVzTW9kZWxTZXJ2aWNlIHtcbiAgICBwdWJsaWMga3ViZXJuZXRlcyA9IG51bGw7XG4gICAgcHVibGljIGFwcHMgPSBbXTtcbiAgICBwdWJsaWMgc2VydmljZXMgPSBbXTtcbiAgICBwdWJsaWMgcmVwbGljYXRpb25Db250cm9sbGVycyA9IFtdO1xuICAgIHB1YmxpYyBwb2RzID0gW107XG4gICAgcHVibGljIGhvc3RzID0gW107XG4gICAgcHVibGljIG5hbWVzcGFjZXMgPSBbXTtcbiAgICBwdWJsaWMgcm91dGVzID0gW107XG4gICAgcHVibGljIHJlZHJhdyA9IGZhbHNlO1xuICAgIHB1YmxpYyByZXNvdXJjZVZlcnNpb25zID0ge307XG5cbiAgICAvLyB2YXJpb3VzIHZpZXdzIG9uIHRoZSBkYXRhXG4gICAgcHVibGljIHBvZHNCeUhvc3QgPSB7fTtcbiAgICBwdWJsaWMgc2VydmljZXNCeUtleSA9IHt9O1xuICAgIHB1YmxpYyByZXBsaWNhdGlvbkNvbnRyb2xsZXJzQnlLZXkgPSB7fTtcbiAgICBwdWJsaWMgcG9kc0J5S2V5ID0ge307XG5cbiAgICBwdWJsaWMgYXBwSW5mb3MgPSBbXTtcbiAgICBwdWJsaWMgYXBwVmlld3MgPSBbXTtcbiAgICBwdWJsaWMgYXBwRm9sZGVycyA9IFtdO1xuXG4gICAgcHVibGljIGZldGNoZWQgPSBmYWxzZTtcbiAgICBwdWJsaWMgaXNPcGVuU2hpZnQgPSBmYWxzZTtcblxuICAgIHB1YmxpYyBmZXRjaCA9ICgpID0+IHtcbiAgICB9O1xuXG4gICAgcHVibGljICRrZWVwUG9sbGluZygpIHtcbiAgICAgIHJldHVybiBrZWVwUG9sbGluZ01vZGVsO1xuICAgIH1cblxuICAgIHB1YmxpYyBvclJlZHJhdyhmbGFnKSB7XG4gICAgICB0aGlzLnJlZHJhdyA9IHRoaXMucmVkcmF3IHx8IGZsYWc7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFNlcnZpY2UobmFtZXNwYWNlLCBpZCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2VydmljZXNCeUtleVtjcmVhdGVLZXkobmFtZXNwYWNlICxpZCldO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRSZXBsaWNhdGlvbkNvbnRyb2xsZXIobmFtZXNwYWNlLCBpZCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVwbGljYXRpb25Db250cm9sbGVyc0J5S2V5W2NyZWF0ZUtleShuYW1lc3BhY2UgLGlkKV07XG4gICAgfVxuXG4gICAgcHVibGljIGdldFBvZChuYW1lc3BhY2UsIGlkKSB7XG4gICAgICByZXR1cm4gdGhpcy5wb2RzQnlLZXlbY3JlYXRlS2V5KG5hbWVzcGFjZSAsaWQpXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcG9kc0Zvck5hbWVzcGFjZShuYW1lc3BhY2UgPSB0aGlzLmN1cnJlbnROYW1lc3BhY2UoKSkge1xuICAgICAgcmV0dXJuIF8uZmlsdGVyKHRoaXMucG9kcywgeyBuYW1lc3BhY2U6IG5hbWVzcGFjZSB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHNlbGVjdGVkIG5hbWVzcGFjZSBvciB0aGUgZGVmYXVsdCBuYW1lc3BhY2VcbiAgICAgKi9cbiAgICBwdWJsaWMgY3VycmVudE5hbWVzcGFjZSgpIHtcbiAgICAgIHZhciBhbnN3ZXIgPSBudWxsO1xuICAgICAgaWYgKHRoaXMua3ViZXJuZXRlcykge1xuICAgICAgICBhbnN3ZXIgPSB0aGlzLmt1YmVybmV0ZXMuc2VsZWN0ZWROYW1lc3BhY2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gYW5zd2VyIHx8IGRlZmF1bHROYW1lc3BhY2U7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHVwZGF0ZUljb25VcmxBbmRBcHBJbmZvKGVudGl0eSwgbmFtZUZpZWxkOiBzdHJpbmcpIHtcbiAgICAgIHZhciBhbnN3ZXIgPSBudWxsO1xuICAgICAgdmFyIGlkID0gZW50aXR5LmlkO1xuICAgICAgaWYgKGlkICYmIG5hbWVGaWVsZCkge1xuICAgICAgICAodGhpcy5hcHBJbmZvcyB8fCBbXSkuZm9yRWFjaCgoYXBwSW5mbykgPT4ge1xuICAgICAgICAgIHZhciBpY29uUGF0aCA9IGFwcEluZm8uaWNvblBhdGg7XG4gICAgICAgICAgaWYgKGljb25QYXRoICYmICFhbnN3ZXIpIHtcbiAgICAgICAgICAgIHZhciBpY29uVXJsID0gZ2l0UGF0aFRvVXJsKGljb25QYXRoKTtcbiAgICAgICAgICAgIHZhciBpZHMgPSBDb3JlLnBhdGhHZXQoYXBwSW5mbywgW1wibmFtZXNcIiwgbmFtZUZpZWxkXSk7XG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goaWRzLCAoYXBwSWQpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGFwcElkID09PSBpZCkge1xuICAgICAgICAgICAgICAgIGVudGl0eS4kaWNvblVybCA9IGljb25Vcmw7XG4gICAgICAgICAgICAgICAgZW50aXR5LmFwcFBhdGggPSBhcHBJbmZvLmFwcFBhdGg7XG4gICAgICAgICAgICAgICAgZW50aXR5LiRpbmZvID0gYXBwSW5mbztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICghZW50aXR5LiRpY29uVXJsKSB7XG4gICAgICAgIGVudGl0eS4kaWNvblVybCA9IGRlZmF1bHRJY29uVXJsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBtYXliZUluaXQoKSB7XG4gICAgICB0aGlzLmZldGNoZWQgPSB0cnVlO1xuICAgICAgaWYgKHRoaXMuc2VydmljZXMgJiYgdGhpcy5yZXBsaWNhdGlvbkNvbnRyb2xsZXJzICYmIHRoaXMucG9kcykge1xuICAgICAgICB0aGlzLnNlcnZpY2VzQnlLZXkgPSB7fTtcbiAgICAgICAgdGhpcy5wb2RzQnlLZXkgPSB7fTtcbiAgICAgICAgdGhpcy5yZXBsaWNhdGlvbkNvbnRyb2xsZXJzQnlLZXkgPSB7fTtcbiAgICAgICAgdmFyIHBvZHNCeUhvc3QgPSB7fTtcblxuICAgICAgICB0aGlzLnBvZHMuZm9yRWFjaCgocG9kKSA9PiB7XG4gICAgICAgICAgaWYgKCFwb2Qua2luZCkgcG9kLmtpbmQgPSBcIlBvZFwiO1xuICAgICAgICAgIHRoaXMucG9kc0J5S2V5W3BvZC5fa2V5XSA9IHBvZDtcbiAgICAgICAgICB2YXIgaG9zdCA9IHBvZC5jdXJyZW50U3RhdGUuaG9zdDtcbiAgICAgICAgICBwb2RzQnlIb3N0W2hvc3RdID0gcG9kc0J5SG9zdFtob3N0XSB8fCBbXTtcbiAgICAgICAgICBwb2RzQnlIb3N0W2hvc3RdLnB1c2gocG9kKTtcbiAgICAgICAgICBwb2QuJGxhYmVsc1RleHQgPSBLdWJlcm5ldGVzLmxhYmVsc1RvU3RyaW5nKHBvZC5sYWJlbHMpO1xuICAgICAgICAgIGlmIChob3N0KSB7XG4gICAgICAgICAgICBwb2QuJGxhYmVsc1RleHQgKz0gbGFiZWxGaWx0ZXJUZXh0U2VwYXJhdG9yICsgXCJob3N0PVwiICsgaG9zdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcG9kLiRpY29uVXJsID0gZGVmYXVsdEljb25Vcmw7XG4gICAgICAgICAgdGhpcy5kaXNjb3ZlclBvZENvbm5lY3Rpb25zKHBvZCk7XG4gICAgICAgICAgcG9kLiRjb250YWluZXJQb3J0cyA9IFtdO1xuICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChDb3JlLnBhdGhHZXQocG9kLCBbXCJkZXNpcmVkU3RhdGVcIiwgXCJtYW5pZmVzdFwiLCBcImNvbnRhaW5lcnNcIl0pLCAoY29udGFpbmVyKSA9PiB7XG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goY29udGFpbmVyLnBvcnRzLCAocG9ydCkgPT4ge1xuICAgICAgICAgICAgICB2YXIgY29udGFpbmVyUG9ydCA9IHBvcnQuY29udGFpbmVyUG9ydDtcbiAgICAgICAgICAgICAgaWYgKGNvbnRhaW5lclBvcnQpIHtcbiAgICAgICAgICAgICAgICBwb2QuJGNvbnRhaW5lclBvcnRzLnB1c2goY29udGFpbmVyUG9ydCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnNlcnZpY2VzLmZvckVhY2goKHNlcnZpY2UpID0+IHtcbiAgICAgICAgICBpZiAoIXNlcnZpY2Uua2luZCkgc2VydmljZS5raW5kID0gXCJTZXJ2aWNlXCI7XG4gICAgICAgICAgdGhpcy5zZXJ2aWNlc0J5S2V5W3NlcnZpY2UuX2tleV0gPSBzZXJ2aWNlO1xuICAgICAgICAgIHZhciBzZWxlY3RvciA9IHNlcnZpY2Uuc2VsZWN0b3I7XG4gICAgICAgICAgc2VydmljZS4kcG9kcyA9IFtdO1xuICAgICAgICAgIHNlcnZpY2UuJHBvZENvdW50ZXJzID0gc2VsZWN0b3IgPyBjcmVhdGVQb2RDb3VudGVycyhzZWxlY3RvciwgdGhpcy5wb2RzLCBzZXJ2aWNlLiRwb2RzKSA6IG51bGw7XG4gICAgICAgICAgdmFyIHNlbGVjdGVkUG9kcyA9IHNlcnZpY2UuJHBvZHM7XG4gICAgICAgICAgc2VydmljZS5jb25uZWN0VG8gPSBzZWxlY3RlZFBvZHMubWFwKChwb2QpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBwb2QuX2tleTtcbiAgICAgICAgICB9KS5qb2luKCcsJyk7XG4gICAgICAgICAgc2VydmljZS4kbGFiZWxzVGV4dCA9IEt1YmVybmV0ZXMubGFiZWxzVG9TdHJpbmcoc2VydmljZS5sYWJlbHMpO1xuICAgICAgICAgIHRoaXMudXBkYXRlSWNvblVybEFuZEFwcEluZm8oc2VydmljZSwgXCJzZXJ2aWNlTmFtZXNcIik7XG4gICAgICAgICAgdmFyIGljb25VcmwgPSBzZXJ2aWNlLiRpY29uVXJsO1xuICAgICAgICAgIGlmIChpY29uVXJsICYmIHNlbGVjdGVkUG9kcykge1xuICAgICAgICAgICAgc2VsZWN0ZWRQb2RzLmZvckVhY2goKHBvZCkgPT4ge1xuICAgICAgICAgICAgICBwb2QuJGljb25VcmwgPSBpY29uVXJsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnJlcGxpY2F0aW9uQ29udHJvbGxlcnMuZm9yRWFjaCgocmVwbGljYXRpb25Db250cm9sbGVyKSA9PiB7XG4gICAgICAgICAgaWYgKCFyZXBsaWNhdGlvbkNvbnRyb2xsZXIua2luZCkgcmVwbGljYXRpb25Db250cm9sbGVyLmtpbmQgPSBcIlJlcGxpY2F0aW9uQ29udHJvbGxlclwiO1xuICAgICAgICAgIHRoaXMucmVwbGljYXRpb25Db250cm9sbGVyc0J5S2V5W3JlcGxpY2F0aW9uQ29udHJvbGxlci5fa2V5XSA9IHJlcGxpY2F0aW9uQ29udHJvbGxlclxuICAgICAgICAgIHZhciBzZWxlY3RvciA9IHJlcGxpY2F0aW9uQ29udHJvbGxlci5kZXNpcmVkU3RhdGUucmVwbGljYVNlbGVjdG9yO1xuICAgICAgICAgIHJlcGxpY2F0aW9uQ29udHJvbGxlci4kcG9kcyA9IFtdO1xuICAgICAgICAgIHJlcGxpY2F0aW9uQ29udHJvbGxlci4kcG9kQ291bnRlcnMgPSBzZWxlY3RvciA/IGNyZWF0ZVBvZENvdW50ZXJzKHNlbGVjdG9yLCB0aGlzLnBvZHMsIHJlcGxpY2F0aW9uQ29udHJvbGxlci4kcG9kcykgOiBudWxsO1xuICAgICAgICAgIHZhciBzZWxlY3RlZFBvZHMgPSByZXBsaWNhdGlvbkNvbnRyb2xsZXIuJHBvZHM7XG4gICAgICAgICAgcmVwbGljYXRpb25Db250cm9sbGVyLmNvbm5lY3RUbyA9IHNlbGVjdGVkUG9kcy5tYXAoKHBvZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHBvZC5fa2V5O1xuICAgICAgICAgIH0pLmpvaW4oJywnKTtcbiAgICAgICAgICByZXBsaWNhdGlvbkNvbnRyb2xsZXIuJGxhYmVsc1RleHQgPSBLdWJlcm5ldGVzLmxhYmVsc1RvU3RyaW5nKHJlcGxpY2F0aW9uQ29udHJvbGxlci5sYWJlbHMpO1xuICAgICAgICAgIHRoaXMudXBkYXRlSWNvblVybEFuZEFwcEluZm8ocmVwbGljYXRpb25Db250cm9sbGVyLCBcInJlcGxpY2F0aW9uQ29udHJvbGxlck5hbWVzXCIpO1xuICAgICAgICAgIHZhciBpY29uVXJsID0gIHJlcGxpY2F0aW9uQ29udHJvbGxlci4kaWNvblVybDtcbiAgICAgICAgICBpZiAoaWNvblVybCAmJiBzZWxlY3RlZFBvZHMpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkUG9kcy5mb3JFYWNoKChwb2QpID0+IHtcbiAgICAgICAgICAgICAgcG9kLiRpY29uVXJsID0gaWNvblVybDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHZhciB0bXBIb3N0cyA9IFtdO1xuICAgICAgICB0aGlzLnBvZHNCeUhvc3QgPSBwb2RzQnlIb3N0O1xuXG4gICAgICAgIGZvciAodmFyIGhvc3RLZXkgaW4gcG9kc0J5SG9zdCkge1xuICAgICAgICAgIHZhciBob3N0UG9kcyA9IFtdO1xuICAgICAgICAgIHZhciBwb2RDb3VudGVycyA9IGNyZWF0ZVBvZENvdW50ZXJzKChwb2QpID0+IChwb2QuY3VycmVudFN0YXRlIHx8IHt9KS5ob3N0ID09PSBob3N0S2V5LCB0aGlzLnBvZHMsIGhvc3RQb2RzLCBcImhvc3Q9XCIgKyBob3N0S2V5KTtcbiAgICAgICAgICB2YXIgaG9zdElQID0gbnVsbDtcbiAgICAgICAgICBpZiAoaG9zdFBvZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgcG9kID0gaG9zdFBvZHNbMF07XG4gICAgICAgICAgICB2YXIgY3VycmVudFN0YXRlID0gcG9kLmN1cnJlbnRTdGF0ZTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50U3RhdGUpIHtcbiAgICAgICAgICAgICAgaG9zdElQID0gY3VycmVudFN0YXRlLmhvc3RJUDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGhvc3REZXRhaWxzID0ge1xuICAgICAgICAgICAgaWQ6IGhvc3RLZXksXG4gICAgICAgICAgICBob3N0SVA6IGhvc3RJUCxcbiAgICAgICAgICAgIHBvZHM6IGhvc3RQb2RzLFxuICAgICAgICAgICAga2luZDogXCJIb3N0XCIsXG4gICAgICAgICAgICAkcG9kQ291bnRlcnM6IHBvZENvdW50ZXJzLFxuICAgICAgICAgICAgJGljb25Vcmw6IGhvc3RJY29uVXJsXG4gICAgICAgICAgfTtcbiAgICAgICAgICB0bXBIb3N0cy5wdXNoKGhvc3REZXRhaWxzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub3JSZWRyYXcoQXJyYXlIZWxwZXJzLnJlbW92ZUVsZW1lbnRzKHRoaXMuaG9zdHMsIHRtcEhvc3RzKSk7XG5cbiAgICAgICAgdG1wSG9zdHMuZm9yRWFjaCgobmV3SG9zdCkgPT4ge1xuICAgICAgICAgIHZhciBvbGRIb3N0OmFueSA9IHRoaXMuaG9zdHMuZmluZCgoaCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGguaWQgPT09IG5ld0hvc3QuaWRcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAoIW9sZEhvc3QpIHtcbiAgICAgICAgICAgIHRoaXMucmVkcmF3ID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuaG9zdHMucHVzaChuZXdIb3N0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vclJlZHJhdyhBcnJheUhlbHBlcnMuc3luYyhvbGRIb3N0LnBvZHMsIG5ld0hvc3QucG9kcykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy51cGRhdGVBcHBzKCk7XG5cbiAgICAgICAgdXBkYXRlTmFtZXNwYWNlcyh0aGlzLmt1YmVybmV0ZXMsIHRoaXMucG9kcywgdGhpcy5yZXBsaWNhdGlvbkNvbnRyb2xsZXJzLCB0aGlzLnNlcnZpY2VzKTtcblxuICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCB1cGRhdGVBcHBzKCkge1xuICAgICAgLy8gbGV0cyBjcmVhdGUgdGhlIGFwcCB2aWV3cyBieSB0cnlpbmcgdG8gam9pbiBjb250cm9sbGVycyAvIHNlcnZpY2VzIC8gcG9kcyB0aGF0IGFyZSByZWxhdGVkXG4gICAgICB2YXIgYXBwVmlld3MgPSBbXTtcblxuICAgICAgdGhpcy5yZXBsaWNhdGlvbkNvbnRyb2xsZXJzLmZvckVhY2goKHJlcGxpY2F0aW9uQ29udHJvbGxlcikgPT4ge1xuICAgICAgICB2YXIgbmFtZSA9IHJlcGxpY2F0aW9uQ29udHJvbGxlci5uYW1lIHx8IHJlcGxpY2F0aW9uQ29udHJvbGxlci5pZDtcbiAgICAgICAgdmFyICRpY29uVXJsID0gcmVwbGljYXRpb25Db250cm9sbGVyLiRpY29uVXJsO1xuICAgICAgICBhcHBWaWV3cy5wdXNoKHtcbiAgICAgICAgICBhcHBQYXRoOiBcIi9kdW1teVBhdGgvXCIgKyBuYW1lLFxuICAgICAgICAgICRuYW1lOiBuYW1lLFxuICAgICAgICAgICRpbmZvOiB7XG4gICAgICAgICAgICAkaWNvblVybDogJGljb25VcmxcbiAgICAgICAgICB9LFxuICAgICAgICAgICRpY29uVXJsOiAkaWNvblVybCxcbiAgICAgICAgICByZXBsaWNhdGlvbkNvbnRyb2xsZXJzOiBbcmVwbGljYXRpb25Db250cm9sbGVyXSxcbiAgICAgICAgICBwb2RzOiByZXBsaWNhdGlvbkNvbnRyb2xsZXIuJHBvZHMgfHwgW10sXG4gICAgICAgICAgc2VydmljZXM6IFtdXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuc2VydmljZXMuZm9yRWFjaCgoc2VydmljZSkgPT4ge1xuICAgICAgICAvLyBub3cgbGV0cyBzZWUgaWYgd2UgY2FuIGZpbmQgYW4gYXBwIHdpdGggYW4gUkMgb2YgdGhlIHNhbWUgc2VsZWN0b3JcbiAgICAgICAgdmFyIG1hdGNoZXNBcHAgPSBudWxsO1xuICAgICAgICBhcHBWaWV3cy5mb3JFYWNoKChhcHBWaWV3KSA9PiB7XG4gICAgICAgICAgYXBwVmlldy5yZXBsaWNhdGlvbkNvbnRyb2xsZXJzLmZvckVhY2goKHJlcGxpY2F0aW9uQ29udHJvbGxlcikgPT4ge1xuICAgICAgICAgICAgdmFyIHJlcFNlbGVjdG9yID0gQ29yZS5wYXRoR2V0KHJlcGxpY2F0aW9uQ29udHJvbGxlciwgW1wiZGVzaXJlZFN0YXRlXCIsIFwicmVwbGljYVNlbGVjdG9yXCJdKTtcbiAgICAgICAgICAgIGlmIChyZXBTZWxlY3RvciAmJiBzZWxlY3Rvck1hdGNoZXMocmVwU2VsZWN0b3IsIHNlcnZpY2Uuc2VsZWN0b3IpICYmIHNlcnZpY2UubmFtZXNwYWNlID09IHJlcGxpY2F0aW9uQ29udHJvbGxlci5uYW1lc3BhY2UpIHtcbiAgICAgICAgICAgICAgbWF0Y2hlc0FwcCA9IGFwcFZpZXc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChtYXRjaGVzQXBwKSB7XG4gICAgICAgICAgbWF0Y2hlc0FwcC5zZXJ2aWNlcy5wdXNoKHNlcnZpY2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBuYW1lID0gc2VydmljZS5uYW1lIHx8IHNlcnZpY2UuaWQ7XG4gICAgICAgICAgdmFyICRpY29uVXJsID0gc2VydmljZS4kaWNvblVybDtcbiAgICAgICAgICBhcHBWaWV3cy5wdXNoKHtcbiAgICAgICAgICAgIGFwcFBhdGg6IFwiL2R1bW15UGF0aC9cIiArIG5hbWUsXG4gICAgICAgICAgICAkbmFtZTogbmFtZSxcbiAgICAgICAgICAgICRpbmZvOiB7XG4gICAgICAgICAgICAgICRpY29uVXJsOiAkaWNvblVybFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICRpY29uVXJsOiAkaWNvblVybCxcbiAgICAgICAgICAgIHJlcGxpY2F0aW9uQ29udHJvbGxlcnM6IFtdLFxuICAgICAgICAgICAgcG9kczogc2VydmljZS4kcG9kcyB8fCBbXSxcbiAgICAgICAgICAgIHNlcnZpY2VzOiBbc2VydmljZV1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBhbmd1bGFyLmZvckVhY2godGhpcy5yb3V0ZXMsIChyb3V0ZSkgPT4ge1xuICAgICAgICB2YXIgbWV0YWRhdGEgPSByb3V0ZS5tZXRhZGF0YSB8fCB7fTtcbiAgICAgICAgdmFyIHNlcnZpY2VOYW1lID0gcm91dGUuc2VydmljZU5hbWU7XG4gICAgICAgIHZhciBob3N0ID0gcm91dGUuaG9zdDtcbiAgICAgICAgdmFyIG5hbWVzcGFjZSA9IG1ldGFkYXRhLm5hbWVzcGFjZSB8fCBkZWZhdWx0TmFtZXNwYWNlO1xuICAgICAgICBpZiAoc2VydmljZU5hbWUgJiYgaG9zdCkge1xuICAgICAgICAgIHZhciBzZXJ2aWNlID0gdGhpcy5nZXRTZXJ2aWNlKG5hbWVzcGFjZSwgc2VydmljZU5hbWUpO1xuICAgICAgICAgIGlmIChzZXJ2aWNlKSB7XG4gICAgICAgICAgICBzZXJ2aWNlLiRob3N0ID0gaG9zdDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJDb3VsZCBub3QgZmluZCBzZXJ2aWNlIFwiICsgc2VydmljZU5hbWUgKyBcIiBuYW1lc3BhY2UgXCIgKyBuYW1lc3BhY2UgKyBcIiBmb3Igcm91dGU6IFwiICsgbWV0YWRhdGEubmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuXG4gICAgICB0aGlzLmFwcFZpZXdzID0gYXBwVmlld3M7XG5cbiAgICAgIGlmICh0aGlzLmFwcEluZm9zICYmIHRoaXMuYXBwVmlld3MpIHtcbiAgICAgICAgdmFyIGZvbGRlck1hcCA9IHt9O1xuICAgICAgICB2YXIgZm9sZGVycyA9IFtdO1xuICAgICAgICB2YXIgYXBwTWFwID0ge307XG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh0aGlzLmFwcEluZm9zLCAoYXBwSW5mbykgPT4ge1xuICAgICAgICAgIGlmICghYXBwSW5mby4kaWNvblVybCkge1xuICAgICAgICAgICAgYXBwSW5mby4kaWNvblVybCA9IGdpdFBhdGhUb1VybChhcHBJbmZvLmljb25QYXRoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGFwcFBhdGggPSBhcHBJbmZvLmFwcFBhdGg7XG4gICAgICAgICAgaWYgKGFwcFBhdGgpIHtcbiAgICAgICAgICAgIGFwcE1hcFthcHBQYXRoXSA9IGFwcEluZm87XG4gICAgICAgICAgICB2YXIgaWR4ID0gYXBwUGF0aC5sYXN0SW5kZXhPZihcIi9cIik7XG4gICAgICAgICAgICB2YXIgZm9sZGVyUGF0aCA9IFwiXCI7XG4gICAgICAgICAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgICAgICAgICAgZm9sZGVyUGF0aCA9IGFwcFBhdGguc3Vic3RyaW5nKDAsIGlkeCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb2xkZXJQYXRoID0gQ29yZS50cmltTGVhZGluZyhmb2xkZXJQYXRoLCBcIi9cIik7XG4gICAgICAgICAgICB2YXIgZm9sZGVyID0gZm9sZGVyTWFwW2ZvbGRlclBhdGhdO1xuICAgICAgICAgICAgaWYgKCFmb2xkZXIpIHtcbiAgICAgICAgICAgICAgZm9sZGVyID0ge1xuICAgICAgICAgICAgICAgIHBhdGg6IGZvbGRlclBhdGgsXG4gICAgICAgICAgICAgICAgZXhwYW5kZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgYXBwczogW11cbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgZm9sZGVycy5wdXNoKGZvbGRlcik7XG4gICAgICAgICAgICAgIGZvbGRlck1hcFtmb2xkZXJQYXRoXSA9IGZvbGRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvbGRlci5hcHBzLnB1c2goYXBwSW5mbyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5hcHBGb2xkZXJzID0gZm9sZGVycy5zb3J0QnkoXCJwYXRoXCIpO1xuXG4gICAgICAgIHZhciBhcHBzID0gW107XG4gICAgICAgIHZhciBkZWZhdWx0SW5mbyA9IHtcbiAgICAgICAgICAkaWNvblVybDogZGVmYXVsdEljb25VcmxcbiAgICAgICAgfTtcblxuICAgICAgICBhbmd1bGFyLmZvckVhY2godGhpcy5hcHBWaWV3cywgKGFwcFZpZXcpID0+IHtcbiAgICAgICAgICB2YXIgYXBwUGF0aCA9IGFwcFZpZXcuYXBwUGF0aDtcblxuICAgICAgICAgIC8qXG4gICAgICAgICAgIFRPRE9cbiAgICAgICAgICAgYXBwVmlldy4kc2VsZWN0ID0gKCkgPT4ge1xuICAgICAgICAgICBLdWJlcm5ldGVzLnNldEpzb24oJHNjb3BlLCBhcHBWaWV3LmlkLCAkc2NvcGUubW9kZWwuYXBwcyk7XG4gICAgICAgICAgIH07XG4gICAgICAgICAgICovXG5cbiAgICAgICAgICB2YXIgYXBwSW5mbyA9IGFuZ3VsYXIuY29weShkZWZhdWx0SW5mbyk7XG4gICAgICAgICAgaWYgKGFwcFBhdGgpIHtcbiAgICAgICAgICAgIGFwcEluZm8gPSBhcHBNYXBbYXBwUGF0aF0gfHwgYXBwSW5mbztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFhcHBWaWV3LiRpbmZvKSB7XG4gICAgICAgICAgICBhcHBWaWV3LiRpbmZvID0gZGVmYXVsdEluZm87XG4gICAgICAgICAgICBhcHBWaWV3LiRpbmZvID0gYXBwSW5mbztcbiAgICAgICAgICB9XG4gICAgICAgICAgYXBwVmlldy5pZCA9IGFwcFBhdGg7XG4gICAgICAgICAgaWYgKCFhcHBWaWV3LiRuYW1lKSB7XG4gICAgICAgICAgICBhcHBWaWV3LiRuYW1lID0gYXBwSW5mby5uYW1lIHx8IGFwcFZpZXcuJG5hbWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghYXBwVmlldy4kaWNvblVybCkge1xuICAgICAgICAgICAgYXBwVmlldy4kaWNvblVybCA9IGFwcEluZm8uJGljb25Vcmw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFwcHMucHVzaChhcHBWaWV3KTtcbiAgICAgICAgICBhcHBWaWV3LiRwb2RDb3VudGVycyA9IGNyZWF0ZUFwcFZpZXdQb2RDb3VudGVycyhhcHBWaWV3KTtcbiAgICAgICAgICBhcHBWaWV3LiRzZXJ2aWNlVmlld3MgPSBjcmVhdGVBcHBWaWV3U2VydmljZVZpZXdzKGFwcFZpZXcpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy90aGlzLmFwcHMgPSBhcHBzO1xuICAgICAgICB0aGlzLmFwcHMgPSB0aGlzLmFwcFZpZXdzO1xuICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBkaXNjb3ZlclBvZENvbm5lY3Rpb25zKGVudGl0eSkge1xuICAgICAgdmFyIGluZm8gPSBDb3JlLnBhdGhHZXQoZW50aXR5LCBbXCJjdXJyZW50U3RhdGVcIiwgXCJpbmZvXCJdKTtcbiAgICAgIHZhciBob3N0UG9ydCA9IG51bGw7XG4gICAgICB2YXIgY3VycmVudFN0YXRlID0gZW50aXR5LmN1cnJlbnRTdGF0ZSB8fCB7fTtcbiAgICAgIHZhciBkZXNpcmVkU3RhdGUgPSBlbnRpdHkuZGVzaXJlZFN0YXRlIHx8IHt9O1xuICAgICAgdmFyIHBvZElkID0gZW50aXR5LmlkIHx8IGVudGl0eS5uYW1lO1xuICAgICAgdmFyIGhvc3QgPSBjdXJyZW50U3RhdGVbXCJob3N0XCJdO1xuICAgICAgdmFyIHBvZElQID0gY3VycmVudFN0YXRlW1wicG9kSVBcIl07XG4gICAgICB2YXIgaGFzRG9ja2VyID0gZmFsc2U7XG4gICAgICB2YXIgZm91bmRDb250YWluZXJQb3J0ID0gbnVsbDtcbiAgICAgIGlmIChkZXNpcmVkU3RhdGUpIHtcbiAgICAgICAgdmFyIGNvbnRhaW5lcnMgPSBDb3JlLnBhdGhHZXQoZGVzaXJlZFN0YXRlLCBbXCJtYW5pZmVzdFwiLCBcImNvbnRhaW5lcnNcIl0pO1xuICAgICAgICBhbmd1bGFyLmZvckVhY2goY29udGFpbmVycywgKGNvbnRhaW5lcikgPT4ge1xuICAgICAgICAgIGlmICghaG9zdFBvcnQpIHtcbiAgICAgICAgICAgIHZhciBwb3J0cyA9IGNvbnRhaW5lci5wb3J0cztcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChwb3J0cywgKHBvcnQpID0+IHtcbiAgICAgICAgICAgICAgaWYgKCFob3N0UG9ydCkge1xuICAgICAgICAgICAgICAgIHZhciBjb250YWluZXJQb3J0ID0gcG9ydC5jb250YWluZXJQb3J0O1xuICAgICAgICAgICAgICAgIHZhciBwb3J0TmFtZSA9IHBvcnQubmFtZTtcbiAgICAgICAgICAgICAgICB2YXIgY29udGFpbmVySG9zdFBvcnQgPSBwb3J0Lmhvc3RQb3J0O1xuICAgICAgICAgICAgICAgIGlmIChjb250YWluZXJQb3J0ID09PSA4Nzc4IHx8IFwiam9sb2tpYVwiID09PSBwb3J0TmFtZSkge1xuICAgICAgICAgICAgICAgICAgaWYgKGNvbnRhaW5lclBvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvZElQKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZm91bmRDb250YWluZXJQb3J0ID0gY29udGFpbmVyUG9ydDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGFpbmVySG9zdFBvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBob3N0UG9ydCA9IGNvbnRhaW5lckhvc3RQb3J0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKGlzUnVubmluZyhjdXJyZW50U3RhdGUpICYmIHBvZElkICYmIGZvdW5kQ29udGFpbmVyUG9ydCkge1xuICAgICAgICBlbnRpdHkuJGpvbG9raWFVcmwgPSBcIi9rdWJlcm5ldGVzL2FwaS9cIiArIGRlZmF1bHRBcGlWZXJzaW9uICsgXCIvcHJveHkvcG9kcy9cIlxuICAgICAgICArIHBvZElkICsgXCI6XCIgKyBmb3VuZENvbnRhaW5lclBvcnQgKyBcIi9qb2xva2lhL1wiO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBtb2RlbCBzZXJ2aWNlIHdoaWNoIGtlZXBzIHRyYWNrIG9mIGFsbCB0aGUgcG9kcywgcmVwbGljYXRpb24gY29udHJvbGxlcnMgYW5kIHNlcnZpY2VzIGFsb25nXG4gICAqIHdpdGggdGhlaXIgYXNzb2NpYXRpb25zIGFuZCBzdGF0dXNcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiBjcmVhdGVLdWJlcm5ldGVzTW9kZWwoJHJvb3RTY29wZSwgJGh0dHAsIEFwcExpYnJhcnlVUkwsIEt1YmVybmV0ZXNBcGlVUkwsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc1NlcnZpY2VzLCBLdWJlcm5ldGVzUmVwbGljYXRpb25Db250cm9sbGVycywgS3ViZXJuZXRlc1BvZHMpIHtcbiAgICB2YXIgJHNjb3BlID0gbmV3IEt1YmVybmV0ZXNNb2RlbFNlcnZpY2UoKTtcbiAgICAkc2NvcGUua3ViZXJuZXRlcyA9IEt1YmVybmV0ZXNTdGF0ZTtcblxuXG4gICAgS3ViZXJuZXRlc1NlcnZpY2VzLnRoZW4oKEt1YmVybmV0ZXNTZXJ2aWNlczpuZy5yZXNvdXJjZS5JUmVzb3VyY2VDbGFzcykgPT4ge1xuICAgICAgS3ViZXJuZXRlc1JlcGxpY2F0aW9uQ29udHJvbGxlcnMudGhlbigoS3ViZXJuZXRlc1JlcGxpY2F0aW9uQ29udHJvbGxlcnM6bmcucmVzb3VyY2UuSVJlc291cmNlQ2xhc3MpID0+IHtcbiAgICAgICAgS3ViZXJuZXRlc1BvZHMudGhlbigoS3ViZXJuZXRlc1BvZHM6bmcucmVzb3VyY2UuSVJlc291cmNlQ2xhc3MpID0+IHtcbiAgICAgICAgICAkc2NvcGUuZmV0Y2ggPSBQb2xsSGVscGVycy5zZXR1cFBvbGxpbmcoJHNjb3BlLCAobmV4dDooKSA9PiB2b2lkKSA9PiB7XG4gICAgICAgICAgICB2YXIgcmVhZHkgPSAwO1xuICAgICAgICAgICAgdmFyIG51bVNlcnZpY2VzID0gNTtcbiAgICAgICAgICAgIHZhciBkYXRhQ2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGNoYW5nZWRSZXNvdXJjZVZlcnNpb24gPSBudWxsO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBtYXliZU5leHQoY291bnQpIHtcbiAgICAgICAgICAgICAgcmVhZHkgPSBjb3VudDtcbiAgICAgICAgICAgICAgLy8gbG9nLmRlYnVnKFwiQ29tcGxldGVkOiBcIiwgcmVhZHkpO1xuICAgICAgICAgICAgICBpZiAocmVhZHkgPj0gbnVtU2VydmljZXMpIHtcbiAgICAgICAgICAgICAgICAvLyBsb2cuZGVidWcoXCJGZXRjaGluZyBhbm90aGVyIHJvdW5kXCIpO1xuICAgICAgICAgICAgICAgIGlmIChkYXRhQ2hhbmdlZCkge1xuICAgICAgICAgICAgICAgICAgbG9nLmRlYnVnKFwia3ViZSBtb2RlbCBjaGFuZ2VkOiByZXNvdXJjZVZlcnNpb246IFwiICsgY2hhbmdlZFJlc291cmNlVmVyc2lvbik7XG4gICAgICAgICAgICAgICAgICAkc2NvcGUubWF5YmVJbml0KCk7XG4gICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ2t1YmVybmV0ZXNNb2RlbFVwZGF0ZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGhhc0NoYW5nZWQocmVzcG9uc2UsIG5hbWUpIHtcbiAgICAgICAgICAgICAgdmFyIHJlc291cmNlVmVyc2lvbiA9IHJlc3BvbnNlLnJlc291cmNlVmVyc2lvbjtcbiAgICAgICAgICAgICAgdmFyIGxhc3RSZXNvdXJjZVZlcnNpb24gPSAkc2NvcGUucmVzb3VyY2VWZXJzaW9uc1tuYW1lXSB8fCAwO1xuICAgICAgICAgICAgICBpZiAoIXJlc291cmNlVmVyc2lvbiB8fCByZXNvdXJjZVZlcnNpb24gPiBsYXN0UmVzb3VyY2VWZXJzaW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc291cmNlVmVyc2lvbikge1xuICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlc291cmNlVmVyc2lvbnNbbmFtZV0gPSByZXNvdXJjZVZlcnNpb247XG4gICAgICAgICAgICAgICAgICBjaGFuZ2VkUmVzb3VyY2VWZXJzaW9uID0gcmVzb3VyY2VWZXJzaW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkYXRhQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBLdWJlcm5ldGVzU2VydmljZXMucXVlcnkoKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiBoYXNDaGFuZ2VkKHJlc3BvbnNlLCBcInNlcnZpY2VzXCIpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGl0ZW1zID0gcG9wdWxhdGVLZXlzKChyZXNwb25zZS5pdGVtcyB8fCBbXSkuc29ydEJ5KGJ5SWQpKTtcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goaXRlbXMsIChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICBrdWJlcm5ldGVzUHJveHlVcmxGb3JTZXJ2aWNlKEt1YmVybmV0ZXNBcGlVUkwsIGl0ZW0pLnRoZW4oKHVybCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpdGVtLnByb3h5VXJsID0gdXJsO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUuc2VydmljZXMgPSBpdGVtcztcbiAgICAgICAgICAgICAgICAvLyRzY29wZS5vclJlZHJhdyhBcnJheUhlbHBlcnMuc3luYygkc2NvcGUuc2VydmljZXMsIGl0ZW1zLCBcIl9rZXlcIikpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG1heWJlTmV4dChyZWFkeSArIDEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBLdWJlcm5ldGVzUmVwbGljYXRpb25Db250cm9sbGVycy5xdWVyeSgocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlICYmIGhhc0NoYW5nZWQocmVzcG9uc2UsIFwicmVwbGljYXRpb25Db250cm9sbGVyc1wiKSkge1xuICAgICAgICAgICAgICAgIHZhciBpdGVtcyA9IHBvcHVsYXRlS2V5cygocmVzcG9uc2UuaXRlbXMgfHwgW10pLnNvcnRCeShieUlkKSk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlcGxpY2F0aW9uQ29udHJvbGxlcnMgPSBpdGVtcztcbiAgICAgICAgICAgICAgICAvLyRzY29wZS5vclJlZHJhdyhBcnJheUhlbHBlcnMuc3luYygkc2NvcGUucmVwbGljYXRpb25Db250cm9sbGVycywgaXRlbXMsIFwiX2tleVwiKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbWF5YmVOZXh0KHJlYWR5ICsgMSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIEt1YmVybmV0ZXNQb2RzLnF1ZXJ5KChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgaGFzQ2hhbmdlZChyZXNwb25zZSwgXCJwb2RzXCIpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGl0ZW1zID0gcG9wdWxhdGVLZXlzKChyZXNwb25zZS5pdGVtcyB8fCBbXSkuc29ydEJ5KGJ5SWQpKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUucG9kcyA9IGl0ZW1zO1xuICAgICAgICAgICAgICAgIC8vJHNjb3BlLm9yUmVkcmF3KEFycmF5SGVscGVycy5zeW5jKCRzY29wZS5wb2RzLCBpdGVtcywgXCJfa2V5XCIpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBtYXliZU5leHQocmVhZHkgKyAxKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgYXBwc1VybCA9IEFwcExpYnJhcnlVUkwgKyBcIi9hcHBzXCI7XG4gICAgICAgICAgICB2YXIgZXRhZ3MgPSAkc2NvcGUucmVzb3VyY2VWZXJzaW9uc1tcImFwcExpYnJhcnlcIl07XG4gICAgICAgICAgICAkaHR0cC5nZXQoYXBwc1VybCwge1xuICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgXCJJZi1Ob25lLU1hdGNoXCI6IGV0YWdzXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgICBzdWNjZXNzKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNBcnJheShkYXRhKSAmJiBzdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgdmFyIG5ld0VUYWdzID0gaGVhZGVycyhcImV0YWdcIikgfHwgaGVhZGVycyhcIkVUYWdcIik7XG4gICAgICAgICAgICAgICAgICBpZiAoIW5ld0VUYWdzIHx8IG5ld0VUYWdzICE9PSBldGFncykge1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV3RVRhZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVzb3VyY2VWZXJzaW9uc1tcImFwcExpYnJhcnlcIl0gPSBuZXdFVGFncztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYXBwSW5mb3MgPSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICBkYXRhQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1heWJlTmV4dChyZWFkeSArIDEpO1xuICAgICAgICAgICAgICB9KS5cbiAgICAgICAgICAgICAgZXJyb3IoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgICAgICBtYXliZU5leHQocmVhZHkgKyAxKTtcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciB1cmwgPSByb3V0ZXNSZXN0VVJMO1xuICAgICAgICAgICAgJGh0dHAuZ2V0KHVybCkuXG4gICAgICAgICAgICAgIHN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICRzY29wZS5yb3V0ZXMgPSBkYXRhLml0ZW1zO1xuICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzT3BlblNoaWZ0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIG1heWJlTmV4dChyZWFkeSArIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICAgIGVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgICAgIGxvZy53YXJuKFwiRmFpbGVkIHRvIGxvYWQgXCIgKyB1cmwgKyBcIiBcIiArIGRhdGEgKyBcIiBcIiArIHN0YXR1cyk7XG4gICAgICAgICAgICAgICAgbWF5YmVOZXh0KHJlYWR5ICsgMSk7XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgJHNjb3BlLmZldGNoKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBzZWxlY3RQb2RzKHBvZHMsIG5hbWVzcGFjZSwgbGFiZWxzKSB7XG4gICAgICByZXR1cm4gcG9kcy5maWx0ZXIoKHBvZCkgPT4ge1xuICAgICAgICByZXR1cm4gcG9kLm5hbWVzcGFjZSA9PT0gbmFtZXNwYWNlICYmIHNlbGVjdG9yTWF0Y2hlcyhsYWJlbHMsIHBvZC5sYWJlbHMpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiAkc2NvcGU7XG4gIH1cblxufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNIZWxwZXJzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNNb2RlbC50c1wiLz5cblxubW9kdWxlIEt1YmVybmV0ZXMge1xuXG4gIGV4cG9ydCB2YXIgX21vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKHBsdWdpbk5hbWUsIFsnaGF3dGlvLWNvcmUnLCAnaGF3dGlvLXVpJywgJ3dpa2knLCAncmVzdG1vZCddKTtcbiAgZXhwb3J0IHZhciBjb250cm9sbGVyID0gUGx1Z2luSGVscGVycy5jcmVhdGVDb250cm9sbGVyRnVuY3Rpb24oX21vZHVsZSwgcGx1Z2luTmFtZSk7XG4gIGV4cG9ydCB2YXIgcm91dGUgPSBQbHVnaW5IZWxwZXJzLmNyZWF0ZVJvdXRpbmdGdW5jdGlvbih0ZW1wbGF0ZVBhdGgpO1xuXG4gIF9tb2R1bGUuY29uZmlnKFsnJHJvdXRlUHJvdmlkZXInLCAoJHJvdXRlUHJvdmlkZXI6bmcucm91dGUuSVJvdXRlUHJvdmlkZXIpID0+IHtcbiAgICAkcm91dGVQcm92aWRlci53aGVuKFVybEhlbHBlcnMuam9pbihjb250ZXh0LCAnL3BvZHMnKSwgcm91dGUoJ3BvZHMuaHRtbCcsIGZhbHNlKSlcbiAgICAgICAgICAgICAgICAgIC53aGVuKFVybEhlbHBlcnMuam9pbihjb250ZXh0LCAnL25hbWVzcGFjZS86bmFtZXNwYWNlL3BvZENyZWF0ZScpLCByb3V0ZSgncG9kQ3JlYXRlLmh0bWwnLCBmYWxzZSkpXG4gICAgICAgICAgICAgICAgICAud2hlbihVcmxIZWxwZXJzLmpvaW4oY29udGV4dCwgJy9uYW1lc3BhY2UvOm5hbWVzcGFjZS9wb2RFZGl0LzppZCcpLCByb3V0ZSgncG9kRWRpdC5odG1sJywgZmFsc2UpKVxuICAgICAgICAgICAgICAgICAgLndoZW4oVXJsSGVscGVycy5qb2luKGNvbnRleHQsICcvbmFtZXNwYWNlLzpuYW1lc3BhY2UvcG9kcycpLCByb3V0ZSgncG9kcy5odG1sJywgZmFsc2UpKVxuICAgICAgICAgICAgICAgICAgLndoZW4oVXJsSGVscGVycy5qb2luKGNvbnRleHQsICcvbmFtZXNwYWNlLzpuYW1lc3BhY2UvcG9kcy86aWQnKSwgcm91dGUoJ3BvZC5odG1sJywgZmFsc2UpKVxuICAgICAgICAgICAgICAgICAgLndoZW4oVXJsSGVscGVycy5qb2luKGNvbnRleHQsICdyZXBsaWNhdGlvbkNvbnRyb2xsZXJzJyksIHJvdXRlKCdyZXBsaWNhdGlvbkNvbnRyb2xsZXJzLmh0bWwnLCBmYWxzZSkpXG4gICAgICAgICAgICAgICAgICAud2hlbihVcmxIZWxwZXJzLmpvaW4oY29udGV4dCwgJy9uYW1lc3BhY2UvOm5hbWVzcGFjZS9yZXBsaWNhdGlvbkNvbnRyb2xsZXJzJyksIHJvdXRlKCdyZXBsaWNhdGlvbkNvbnRyb2xsZXJzLmh0bWwnLCBmYWxzZSkpXG4gICAgICAgICAgICAgICAgICAud2hlbihVcmxIZWxwZXJzLmpvaW4oY29udGV4dCwgJy9uYW1lc3BhY2UvOm5hbWVzcGFjZS9yZXBsaWNhdGlvbkNvbnRyb2xsZXJzLzppZCcpLCByb3V0ZSgncmVwbGljYXRpb25Db250cm9sbGVyLmh0bWwnLCBmYWxzZSkpXG4gICAgICAgICAgICAgICAgICAud2hlbihVcmxIZWxwZXJzLmpvaW4oY29udGV4dCwgJy9uYW1lc3BhY2UvOm5hbWVzcGFjZS9yZXBsaWNhdGlvbkNvbnRyb2xsZXJDcmVhdGUnKSwgcm91dGUoJ3JlcGxpY2F0aW9uQ29udHJvbGxlckNyZWF0ZS5odG1sJywgZmFsc2UpKVxuICAgICAgICAgICAgICAgICAgLndoZW4oVXJsSGVscGVycy5qb2luKGNvbnRleHQsICcvbmFtZXNwYWNlLzpuYW1lc3BhY2UvcmVwbGljYXRpb25Db250cm9sbGVyRWRpdC86aWQnKSwgcm91dGUoJ3JlcGxpY2F0aW9uQ29udHJvbGxlckVkaXQuaHRtbCcsIGZhbHNlKSlcbiAgICAgICAgICAgICAgICAgIC53aGVuKFVybEhlbHBlcnMuam9pbihjb250ZXh0LCAnc2VydmljZXMnKSwgcm91dGUoJ3NlcnZpY2VzLmh0bWwnLCBmYWxzZSkpXG4gICAgICAgICAgICAgICAgICAud2hlbihVcmxIZWxwZXJzLmpvaW4oY29udGV4dCwgJy9uYW1lc3BhY2UvOm5hbWVzcGFjZS9zZXJ2aWNlcycpLCByb3V0ZSgnc2VydmljZXMuaHRtbCcsIGZhbHNlKSlcbiAgICAgICAgICAgICAgICAgIC53aGVuKFVybEhlbHBlcnMuam9pbihjb250ZXh0LCAnL25hbWVzcGFjZS86bmFtZXNwYWNlL3NlcnZpY2VzLzppZCcpLCByb3V0ZSgnc2VydmljZS5odG1sJywgZmFsc2UpKVxuICAgICAgICAgICAgICAgICAgLndoZW4oVXJsSGVscGVycy5qb2luKGNvbnRleHQsICcvbmFtZXNwYWNlLzpuYW1lc3BhY2Uvc2VydmljZUNyZWF0ZScpLCByb3V0ZSgnc2VydmljZUNyZWF0ZS5odG1sJywgZmFsc2UpKVxuICAgICAgICAgICAgICAgICAgLndoZW4oVXJsSGVscGVycy5qb2luKGNvbnRleHQsICcvbmFtZXNwYWNlLzpuYW1lc3BhY2Uvc2VydmljZUVkaXQvOmlkJyksIHJvdXRlKCdzZXJ2aWNlRWRpdC5odG1sJywgZmFsc2UpKVxuICAgICAgICAgICAgICAgICAgLndoZW4oVXJsSGVscGVycy5qb2luKGNvbnRleHQsICdhcHBzJyksIHJvdXRlKCdhcHBzLmh0bWwnLCBmYWxzZSkpXG4gICAgICAgICAgICAgICAgICAud2hlbihVcmxIZWxwZXJzLmpvaW4oY29udGV4dCwgJ2FwcHMvOm5hbWVzcGFjZScpLCByb3V0ZSgnYXBwcy5odG1sJywgZmFsc2UpKVxuICAgICAgICAgICAgICAgICAgLndoZW4oVXJsSGVscGVycy5qb2luKGNvbnRleHQsICdob3N0cycpLCByb3V0ZSgnaG9zdHMuaHRtbCcsIGZhbHNlKSlcbiAgICAgICAgICAgICAgICAgIC53aGVuKFVybEhlbHBlcnMuam9pbihjb250ZXh0LCAnaG9zdHMvOmlkJyksIHJvdXRlKCdob3N0Lmh0bWwnLCB0cnVlKSlcbiAgICAgICAgICAgICAgICAgIC53aGVuKFVybEhlbHBlcnMuam9pbihjb250ZXh0LCAnYnVpbGRzJyksIHJvdXRlKCdidWlsZHMuaHRtbCcsIGZhbHNlKSlcbiAgICAgICAgICAgICAgICAgIC53aGVuKFVybEhlbHBlcnMuam9pbihjb250ZXh0LCAnYnVpbGRzLzppZCcpLCByb3V0ZSgnYnVpbGQuaHRtbCcsIHRydWUpKVxuICAgICAgICAgICAgICAgICAgLndoZW4oVXJsSGVscGVycy5qb2luKGNvbnRleHQsICdidWlsZExvZ3MvOmlkJyksIHJvdXRlKCdidWlsZExvZ3MuaHRtbCcsIHRydWUpKVxuICAgICAgICAgICAgICAgICAgLndoZW4oVXJsSGVscGVycy5qb2luKGNvbnRleHQsICdidWlsZENvbmZpZ3MnKSwgcm91dGUoJ2J1aWxkQ29uZmlncy5odG1sJywgZmFsc2UpKVxuICAgICAgICAgICAgICAgICAgLndoZW4oVXJsSGVscGVycy5qb2luKGNvbnRleHQsICdidWlsZENvbmZpZ3MvOmlkJyksIHJvdXRlKCdidWlsZENvbmZpZy5odG1sJywgdHJ1ZSkpXG4gICAgICAgICAgICAgICAgICAud2hlbihVcmxIZWxwZXJzLmpvaW4oY29udGV4dCwgJ2J1aWxkQ29uZmlnRWRpdC86aWQnKSwgcm91dGUoJ2J1aWxkQ29uZmlnRWRpdC5odG1sJywgdHJ1ZSkpXG4gICAgICAgICAgICAgICAgICAud2hlbihVcmxIZWxwZXJzLmpvaW4oY29udGV4dCwgJ2J1aWxkQ29uZmlnQ3JlYXRlJyksIHJvdXRlKCdidWlsZENvbmZpZ0NyZWF0ZS5odG1sJywgdHJ1ZSkpXG4gICAgICAgICAgICAgICAgICAud2hlbihVcmxIZWxwZXJzLmpvaW4oY29udGV4dCwgJ2RlcGxveW1lbnRDb25maWdzJyksIHJvdXRlKCdkZXBsb3ltZW50Q29uZmlncy5odG1sJywgZmFsc2UpKVxuICAgICAgICAgICAgICAgICAgLndoZW4oVXJsSGVscGVycy5qb2luKGNvbnRleHQsICdkZXBsb3ltZW50Q29uZmlncy86aWQnKSwgcm91dGUoJ2RlcGxveW1lbnRDb25maWcuaHRtbCcsIHRydWUpKVxuICAgICAgICAgICAgICAgICAgLndoZW4oVXJsSGVscGVycy5qb2luKGNvbnRleHQsICdpbWFnZVJlcG9zaXRvcmllcycpLCByb3V0ZSgnaW1hZ2VSZXBvc2l0b3JpZXMuaHRtbCcsIGZhbHNlKSlcbiAgICAgICAgICAgICAgICAgIC53aGVuKFVybEhlbHBlcnMuam9pbihjb250ZXh0LCAncGlwZWxpbmVzJyksIHJvdXRlKCdwaXBlbGluZXMuaHRtbCcsIGZhbHNlKSlcbiAgICAgICAgICAgICAgICAgIC53aGVuKFVybEhlbHBlcnMuam9pbihjb250ZXh0LCAnb3ZlcnZpZXcnKSwgcm91dGUoJ292ZXJ2aWV3Lmh0bWwnLCB0cnVlKSlcbiAgICAgICAgICAgICAgICAgIC53aGVuKGNvbnRleHQsIHsgcmVkaXJlY3RUbzogVXJsSGVscGVycy5qb2luKGNvbnRleHQsICdhcHBzJykgfSk7XG4gIH1dKTtcblxuICAvLyBzZXQgdXAgYSBwcm9taXNlIHRoYXQgc3VwcGxpZXMgdGhlIEFQSSBVUkwgZm9yIEt1YmVybmV0ZXMsIHByb3hpZWQgaWYgbmVjZXNzYXJ5XG4gIF9tb2R1bGUuZmFjdG9yeSgnS3ViZXJuZXRlc0FwaVVSTCcsIFsnam9sb2tpYVVybCcsICdqb2xva2lhJywgJyRxJywgJyRyb290U2NvcGUnLCAoam9sb2tpYVVybDpzdHJpbmcsIGpvbG9raWE6Sm9sb2tpYS5JSm9sb2tpYSwgJHE6bmcuSVFTZXJ2aWNlLCAkcm9vdFNjb3BlOm5nLklSb290U2NvcGVTZXJ2aWNlKSA9PiB7XG4gICAgdmFyIHVybCA9IFwiL2t1YmVybmV0ZXMvXCI7XG4gICAgdmFyIGFuc3dlciA9IDxuZy5JRGVmZXJyZWQ8c3RyaW5nPj4kcS5kZWZlcigpO1xuICAgIGFuc3dlci5yZXNvbHZlKHVybCk7XG4gICAgcmV0dXJuIGFuc3dlci5wcm9taXNlO1xuICB9XSk7XG5cbiAgX21vZHVsZS5mYWN0b3J5KCdBcHBMaWJyYXJ5VVJMJywgWyckcm9vdFNjb3BlJywgKCRyb290U2NvcGU6bmcuSVJvb3RTY29wZVNlcnZpY2UpID0+IHtcbiAgICByZXR1cm4gXCIva3ViZXJuZXRlcy9hcGkvXCIgKyBkZWZhdWx0QXBpVmVyc2lvbiArIFwiL3Byb3h5L3NlcnZpY2VzL2FwcC1saWJyYXJ5XCI7XG4gIH1dKTtcblxuICBfbW9kdWxlLmZhY3RvcnkoJ1dpa2lHaXRVcmxQcmVmaXgnLCAoKSA9PiB7XG4gICAgcmV0dXJuIFwia3ViZXJuZXRlcy9hcGkvXCIgKyBkZWZhdWx0QXBpVmVyc2lvbiArIFwiL3Byb3h5L3NlcnZpY2VzL2FwcC1saWJyYXJ5XCI7XG4gIH0pO1xuXG4gIF9tb2R1bGUuZmFjdG9yeSgnd2lraVJlcG9zaXRvcnknLCBbXCIkbG9jYXRpb25cIiwgXCJsb2NhbFN0b3JhZ2VcIiwgKCRsb2NhdGlvbiwgbG9jYWxTdG9yYWdlKSA9PiB7XG4gICAgLy8gVE9ETyBsZXRzIHN3aXRjaCB0byB1c2luZyBSRVNUIHJhdGhlciB0aGFuIGpvbG9raWEgc29vbiBmb3IgdGhlIHdpa2lcblxuICAgIHZhciB1cmwgPSBcIi9rdWJlcm5ldGVzL2FwaS9cIiArIGRlZmF1bHRBcGlWZXJzaW9uICsgXCIvcHJveHkvc2VydmljZXMvYXBwLWxpYnJhcnktam9sb2tpYS9qb2xva2lhXCI7XG4gICAgLy8gVE9ETyB3aGF0IHRvIHVzZSBoZXJlLi4uXG4gICAgdmFyIHVzZXIgPSBcImFkbWluXCI7XG4gICAgdmFyIHBhc3N3b3JkID0gXCJhZG1pblwiO1xuICAgIHZhciBqb2xva2lhID0gQ29yZS5jcmVhdGVKb2xva2lhKHVybCwgdXNlciwgcGFzc3dvcmQpO1xuICAgIHZhciB3b3Jrc3BhY2UgPSBDb3JlLmNyZWF0ZVJlbW90ZVdvcmtzcGFjZShqb2xva2lhLCAkbG9jYXRpb24sIGxvY2FsU3RvcmFnZSk7XG5cbiAgICByZXR1cm4gbmV3IFdpa2kuR2l0V2lraVJlcG9zaXRvcnkoKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coXCJDcmVhdGluZyBhIHVzaW5nIHRoZSBqb2xva2lhIFVSTDogXCIgKyB1cmwpO1xuICAgICAgdmFyIGdpdFJlcG8gPSBHaXQuY3JlYXRlR2l0UmVwb3NpdG9yeSh3b3Jrc3BhY2UsIGpvbG9raWEsIGxvY2FsU3RvcmFnZSk7XG4gICAgICBjb25zb2xlLmxvZyhcIkdvdCBnaXQgYmFzZWQgcmVwbzogXCIgKyBnaXRSZXBvKTtcbiAgICAgIHJldHVybiBnaXRSZXBvO1xuICAgIH0pO1xuICB9XSk7XG5cbiAgX21vZHVsZS5mYWN0b3J5KCdDb25uZWN0RGlhbG9nU2VydmljZScsIFsnJHJvb3RTY29wZScsICgkcm9vdFNjb3BlOm5nLklSb290U2NvcGVTZXJ2aWNlKSA9PiB7XG4gICAgcmV0dXJuICB7XG4gICAgICAgICAgICBkaWFsb2c6IG5ldyBVSS5EaWFsb2coKSxcbiAgICAgICAgICAgIHNhdmVDcmVkZW50aWFsczogZmFsc2UsXG4gICAgICAgICAgICB1c2VyTmFtZTogbnVsbCxcbiAgICAgICAgICAgIHBhc3N3b3JkOiBudWxsLFxuICAgICAgICAgICAgam9sb2tpYVVybDogbnVsbCxcbiAgICAgICAgICAgIGNvbnRhaW5lck5hbWU6IG51bGwsXG4gICAgICAgICAgICB2aWV3OiBudWxsXG4gICAgfTtcbiAgfV0pO1xuXG4gIF9tb2R1bGUuZmlsdGVyKCdrdWJlcm5ldGVzUGFnZUxpbmsnLCAoKSA9PiBlbnRpdHlQYWdlTGluayk7XG5cblxuICBmdW5jdGlvbiBjcmVhdGVSZXNvdXJjZShkZWZlcnJlZDpuZy5JRGVmZXJyZWQ8bmcucmVzb3VyY2UuSVJlc291cmNlQ2xhc3M+LCB0aGluZzpzdHJpbmcsIHVybFRlbXBsYXRlOnN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZTogbmcuSVJvb3RTY29wZVNlcnZpY2UsICRyZXNvdXJjZTogbmcucmVzb3VyY2UuSVJlc291cmNlU2VydmljZSwgS3ViZXJuZXRlc0FwaVVSTDogbmcuSVByb21pc2U8c3RyaW5nPikge1xuICAgIEt1YmVybmV0ZXNBcGlVUkwudGhlbigoS3ViZXJuZXRlc0FwaVVSTCkgPT4ge1xuICAgICAgdmFyIHVybCA9IFVybEhlbHBlcnMuZXNjYXBlQ29sb25zKEt1YmVybmV0ZXNBcGlVUkwpO1xuICAgICAgbG9nLmRlYnVnKFwiVXJsIGZvciBcIiwgdGhpbmcsIFwiOiBcIiwgdXJsKTtcbiAgICAgIHZhciByZXNvdXJjZSA9ICRyZXNvdXJjZShVcmxIZWxwZXJzLmpvaW4odXJsLCB1cmxUZW1wbGF0ZSksIG51bGwsIHtcbiAgICAgICAgcXVlcnk6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogZmFsc2UgfSxcbiAgICAgICAgc2F2ZTogeyBtZXRob2Q6ICdQVVQnLCBwYXJhbXM6IHsgaWQ6ICdAaWQnIH0gfVxuICAgICAgfSk7XG4gICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc291cmNlKTtcbiAgICAgIENvcmUuJGFwcGx5KCRyb290U2NvcGUpO1xuICAgIH0sIChyZXNwb25zZSkgPT4ge1xuICAgICAgbG9nLmRlYnVnKFwiRmFpbGVkIHRvIGdldCByZXN0IEFQSSBVUkwsIGNhbid0IGNyZWF0ZSBcIiArIHRoaW5nICsgXCIgcmVzb3VyY2U6IFwiLCByZXNwb25zZSk7XG4gICAgICBkZWZlcnJlZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgQ29yZS4kYXBwbHkoJHJvb3RTY29wZSk7XG4gICAgfSk7XG4gIH1cblxuICBfbW9kdWxlLmZhY3RvcnkoJ0t1YmVybmV0ZXNWZXJzaW9uJywgWyckcScsICckcm9vdFNjb3BlJywgJyRyZXNvdXJjZScsICdLdWJlcm5ldGVzQXBpVVJMJywgKCRxOm5nLklRU2VydmljZSwgJHJvb3RTY29wZTogbmcuSVJvb3RTY29wZVNlcnZpY2UsICRyZXNvdXJjZTogbmcucmVzb3VyY2UuSVJlc291cmNlU2VydmljZSwgS3ViZXJuZXRlc0FwaVVSTDogbmcuSVByb21pc2U8c3RyaW5nPikgPT4ge1xuICAgIHZhciBhbnN3ZXIgPSA8bmcuSURlZmVycmVkPG5nLnJlc291cmNlLklSZXNvdXJjZUNsYXNzPj4gJHEuZGVmZXIoKTtcbiAgICBjcmVhdGVSZXNvdXJjZShhbnN3ZXIsICdwb2RzJywgJy92ZXJzaW9uJywgJHJvb3RTY29wZSwgJHJlc291cmNlLCBLdWJlcm5ldGVzQXBpVVJMKTtcbiAgICByZXR1cm4gYW5zd2VyLnByb21pc2U7XG4gIH1dKTtcblxuICBfbW9kdWxlLmZhY3RvcnkoJ0t1YmVybmV0ZXNQb2RzJywgWyckcScsICckcm9vdFNjb3BlJywgJyRyZXNvdXJjZScsICdLdWJlcm5ldGVzQXBpVVJMJywgKCRxOm5nLklRU2VydmljZSwgJHJvb3RTY29wZTogbmcuSVJvb3RTY29wZVNlcnZpY2UsICRyZXNvdXJjZTogbmcucmVzb3VyY2UuSVJlc291cmNlU2VydmljZSwgS3ViZXJuZXRlc0FwaVVSTDogbmcuSVByb21pc2U8c3RyaW5nPikgPT4ge1xuICAgIHZhciBhbnN3ZXIgPSA8bmcuSURlZmVycmVkPG5nLnJlc291cmNlLklSZXNvdXJjZUNsYXNzPj4kcS5kZWZlcigpO1xuICAgIGNyZWF0ZVJlc291cmNlKGFuc3dlciwgJ3BvZHMnLCAnL2FwaS8nICsgZGVmYXVsdEFwaVZlcnNpb24gKyAnL3BvZHMvOmlkJywgJHJvb3RTY29wZSwgJHJlc291cmNlLCBLdWJlcm5ldGVzQXBpVVJMKTtcbiAgICByZXR1cm4gYW5zd2VyLnByb21pc2U7XG4gIH1dKTtcblxuICBfbW9kdWxlLmZhY3RvcnkoJ0t1YmVybmV0ZXNSZXBsaWNhdGlvbkNvbnRyb2xsZXJzJywgWyckcScsICckcm9vdFNjb3BlJywgJyRyZXNvdXJjZScsICdLdWJlcm5ldGVzQXBpVVJMJywgKCRxOm5nLklRU2VydmljZSwgJHJvb3RTY29wZTogbmcuSVJvb3RTY29wZVNlcnZpY2UsICRyZXNvdXJjZTogbmcucmVzb3VyY2UuSVJlc291cmNlU2VydmljZSwgS3ViZXJuZXRlc0FwaVVSTDogbmcuSVByb21pc2U8c3RyaW5nPikgPT4ge1xuICAgIHZhciBhbnN3ZXIgPSA8bmcuSURlZmVycmVkPG5nLnJlc291cmNlLklSZXNvdXJjZUNsYXNzPj4kcS5kZWZlcigpO1xuICAgIGNyZWF0ZVJlc291cmNlKGFuc3dlciwgJ3JlcGxpY2F0aW9uIGNvbnRyb2xsZXJzJywgJy9hcGkvJyArIGRlZmF1bHRBcGlWZXJzaW9uICsgJy9yZXBsaWNhdGlvbkNvbnRyb2xsZXJzLzppZCcsICRyb290U2NvcGUsICRyZXNvdXJjZSwgS3ViZXJuZXRlc0FwaVVSTCk7XG4gICAgcmV0dXJuIGFuc3dlci5wcm9taXNlO1xuICB9XSk7XG5cbiAgX21vZHVsZS5mYWN0b3J5KCdLdWJlcm5ldGVzU2VydmljZXMnLCBbJyRxJywgJyRyb290U2NvcGUnLCAnJHJlc291cmNlJywgJ0t1YmVybmV0ZXNBcGlVUkwnLCAoJHE6bmcuSVFTZXJ2aWNlLCAkcm9vdFNjb3BlOiBuZy5JUm9vdFNjb3BlU2VydmljZSwgJHJlc291cmNlOiBuZy5yZXNvdXJjZS5JUmVzb3VyY2VTZXJ2aWNlLCBLdWJlcm5ldGVzQXBpVVJMOiBuZy5JUHJvbWlzZTxzdHJpbmc+KSA9PiB7XG4gICAgdmFyIGFuc3dlciA9IDxuZy5JRGVmZXJyZWQ8bmcucmVzb3VyY2UuSVJlc291cmNlQ2xhc3M+PiRxLmRlZmVyKCk7XG4gICAgY3JlYXRlUmVzb3VyY2UoYW5zd2VyLCAnc2VydmljZXMnLCAnL2FwaS8nICsgZGVmYXVsdEFwaVZlcnNpb24gKyAnL3NlcnZpY2VzLzppZCcsICRyb290U2NvcGUsICRyZXNvdXJjZSwgS3ViZXJuZXRlc0FwaVVSTCk7XG4gICAgcmV0dXJuIGFuc3dlci5wcm9taXNlO1xuICB9XSk7XG5cbiAgX21vZHVsZS5mYWN0b3J5KCdLdWJlcm5ldGVzQnVpbGRzJywgWydyZXN0bW9kJywgKHJlc3Rtb2QpID0+IHtcbiAgICByZXR1cm4gcmVzdG1vZC5tb2RlbChidWlsZENvbmZpZ3NSZXN0VVJMKTtcbiAgfV0pO1xuXG4gIF9tb2R1bGUuZmFjdG9yeSgnS3ViZXJuZXRlc1NjaGVtYScsIFsnU2NoZW1hUmVnaXN0cnknLCAoU2NoZW1hUmVnaXN0cnkpID0+IHtcbiAgICBjb25maWd1cmVTY2hlbWEoKTtcbiAgICBTY2hlbWFSZWdpc3RyeS5hZGRTY2hlbWEoJ2t1YmVybmV0ZXMnLCBzY2hlbWEpO1xuICAgIC8vIG5vdyBsZXRzIGl0ZXJhdGUgYW5kIGFkZCBhbGwgdGhlIGRlZmluaXRpb25zIHRvb1xuICAgIGFuZ3VsYXIuZm9yRWFjaChzY2hlbWEuZGVmaW5pdGlvbnMsIChkZWZpbml0aW9uLCB0eXBlTmFtZSkgPT4ge1xuICAgICAgU2NoZW1hUmVnaXN0cnkuYWRkU2NoZW1hKHR5cGVOYW1lLCBkZWZpbml0aW9uKTtcbiAgICAgIFNjaGVtYVJlZ2lzdHJ5LmFkZFNjaGVtYShcIiMvZGVmaW5pdGlvbnMvXCIgKyB0eXBlTmFtZSwgZGVmaW5pdGlvbik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNjaGVtYTtcbiAgfV0pO1xuXG4gIF9tb2R1bGUuZmFjdG9yeSgnS3ViZXJuZXRlc1N0YXRlJywgWygpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZXNwYWNlczogW10sXG4gICAgICBzZWxlY3RlZE5hbWVzcGFjZTogbnVsbFxuICAgIH07XG4gIH1dKTtcblxuICBfbW9kdWxlLmZhY3RvcnkoJ1NlcnZpY2VSZWdpc3RyeScsIFsoKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBTZXJ2aWNlUmVnaXN0cnlTZXJ2aWNlKCk7XG4gIH1dKTtcblxuICBfbW9kdWxlLmZhY3RvcnkoJ0t1YmVybmV0ZXNNb2RlbCcsIFsnJHJvb3RTY29wZScsICckaHR0cCcsICdBcHBMaWJyYXJ5VVJMJywgJ0t1YmVybmV0ZXNBcGlVUkwnLCAnS3ViZXJuZXRlc1N0YXRlJywgJ0t1YmVybmV0ZXNTZXJ2aWNlcycsICdLdWJlcm5ldGVzUmVwbGljYXRpb25Db250cm9sbGVycycsICdLdWJlcm5ldGVzUG9kcycsICgkcm9vdFNjb3BlLCAkaHR0cCwgQXBwTGlicmFyeVVSTCwgS3ViZXJuZXRlc0FwaVVSTCwgS3ViZXJuZXRlc1N0YXRlLCBLdWJlcm5ldGVzU2VydmljZXMsIEt1YmVybmV0ZXNSZXBsaWNhdGlvbkNvbnRyb2xsZXJzLCBLdWJlcm5ldGVzUG9kcykgPT4ge1xuICAgIHJldHVybiBjcmVhdGVLdWJlcm5ldGVzTW9kZWwoJHJvb3RTY29wZSwgJGh0dHAsIEFwcExpYnJhcnlVUkwsIEt1YmVybmV0ZXNBcGlVUkwsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc1NlcnZpY2VzLCBLdWJlcm5ldGVzUmVwbGljYXRpb25Db250cm9sbGVycywgS3ViZXJuZXRlc1BvZHMpO1xuICB9XSk7XG5cblxuXG4gIF9tb2R1bGUucnVuKFsndmlld1JlZ2lzdHJ5JywgJ3dvcmtzcGFjZScsICdTZXJ2aWNlUmVnaXN0cnknLCAnSGF3dGlvTmF2JywgKHZpZXdSZWdpc3RyeSwgd29ya3NwYWNlOkNvcmUuV29ya3NwYWNlLCBTZXJ2aWNlUmVnaXN0cnksIEhhd3Rpb05hdikgPT4ge1xuICAgIGxvZy5kZWJ1ZyhcIlJ1bm5pbmdcIik7XG4gICAgdmlld1JlZ2lzdHJ5WydrdWJlcm5ldGVzJ10gPSB0ZW1wbGF0ZVBhdGggKyAnbGF5b3V0S3ViZXJuZXRlcy5odG1sJztcblxuICAgIHZhciBidWlsZGVyID0gSGF3dGlvTmF2LmJ1aWxkZXIoKTtcblxuICAgIHZhciBhcHBzID0gYnVpbGRlci5pZCgna3ViZS1hcHBzJylcbiAgICAgICAgICAgICAgICAgICAgICAuaHJlZigoKSA9PiBVcmxIZWxwZXJzLmpvaW4oY29udGV4dCwgJ2FwcHMnKSlcbiAgICAgICAgICAgICAgICAgICAgICAudGl0bGUoKCkgPT4gJ0FwcHMnKVxuICAgICAgICAgICAgICAgICAgICAgIC5idWlsZCgpO1xuXG4gICAgdmFyIHNlcnZpY2VzID0gYnVpbGRlci5pZCgna3ViZS1zZXJ2aWNlcycpXG4gICAgICAgICAgICAgICAgICAgICAgLmhyZWYoKCkgPT4gVXJsSGVscGVycy5qb2luKGNvbnRleHQsICdzZXJ2aWNlcycpKVxuICAgICAgICAgICAgICAgICAgICAgIC50aXRsZSgoKSA9PiAnU2VydmljZXMnKVxuICAgICAgICAgICAgICAgICAgICAgIC5idWlsZCgpO1xuXG4gICAgdmFyIGNvbnRyb2xsZXJzID0gYnVpbGRlci5pZCgna3ViZS1jb250cm9sbGVycycpXG4gICAgICAgICAgICAgICAgICAgICAgLmhyZWYoKCkgPT4gVXJsSGVscGVycy5qb2luKGNvbnRleHQsICdyZXBsaWNhdGlvbkNvbnRyb2xsZXJzJykpXG4gICAgICAgICAgICAgICAgICAgICAgLnRpdGxlKCgpID0+ICdDb250cm9sbGVycycpXG4gICAgICAgICAgICAgICAgICAgICAgLmJ1aWxkKCk7XG5cbiAgICB2YXIgcG9kcyA9IGJ1aWxkZXIuaWQoJ2t1YmUtcG9kcycpXG4gICAgICAgICAgICAgICAgICAgICAgLmhyZWYoKCkgPT4gVXJsSGVscGVycy5qb2luKGNvbnRleHQsICdwb2RzJykpXG4gICAgICAgICAgICAgICAgICAgICAgLnRpdGxlKCgpID0+ICdQb2RzJylcbiAgICAgICAgICAgICAgICAgICAgICAuYnVpbGQoKTtcblxuICAgIHZhciBob3N0cyA9IGJ1aWxkZXIuaWQoJ2t1YmUtaG9zdHMnKVxuICAgICAgICAgICAgICAgICAgICAgIC5ocmVmKCgpID0+IFVybEhlbHBlcnMuam9pbihjb250ZXh0LCAnaG9zdHMnKSlcbiAgICAgICAgICAgICAgICAgICAgICAudGl0bGUoKCkgPT4gJ0hvc3RzJylcbiAgICAgICAgICAgICAgICAgICAgICAuYnVpbGQoKTtcblxuICAgIHZhciBidWlsZHMgPSBidWlsZGVyLmlkKCdrdWJlLWJ1aWxkcycpXG4gICAgICAgICAgICAgICAgICAgICAgLmhyZWYoKCkgPT4gVXJsSGVscGVycy5qb2luKGNvbnRleHQsICdidWlsZHMnKSlcbiAgICAgICAgICAgICAgICAgICAgICAudGl0bGUoKCkgPT4gJ0J1aWxkcycpXG4gICAgICAgICAgICAgICAgICAgICAgLmJ1aWxkKCk7XG5cbiAgICB2YXIgYnVpbGRDb25maWdzID0gYnVpbGRlci5pZCgna3ViZS1idWlsZENvbmZpZ3MnKVxuICAgICAgICAgICAgICAgICAgICAgIC5ocmVmKCgpID0+IFVybEhlbHBlcnMuam9pbihjb250ZXh0LCAnYnVpbGRDb25maWdzJykpXG4gICAgICAgICAgICAgICAgICAgICAgLnRpdGxlKCgpID0+ICdCdWlsZCBDb25maWdzJylcbiAgICAgICAgICAgICAgICAgICAgICAuYnVpbGQoKTtcblxuICAgIHZhciBkZXBsb3lzID0gYnVpbGRlci5pZCgna3ViZS1kZXBsb3lzJylcbiAgICAgICAgICAgICAgICAgICAgICAuaHJlZigoKSA9PiBVcmxIZWxwZXJzLmpvaW4oY29udGV4dCwgJ2RlcGxveW1lbnRDb25maWdzJykpXG4gICAgICAgICAgICAgICAgICAgICAgLnRpdGxlKCgpID0+ICdEZXBsb3lzJylcbiAgICAgICAgICAgICAgICAgICAgICAuYnVpbGQoKTtcblxuICAgIHZhciBpbWFnZVJlcG9zaXRvcmllcyA9IGJ1aWxkZXIuaWQoJ2t1YmUtaW1hZ2VSZXBvc2l0b3JpZXMnKVxuICAgICAgICAgICAgICAgICAgICAgIC5ocmVmKCgpID0+IFVybEhlbHBlcnMuam9pbihjb250ZXh0LCAnaW1hZ2VSZXBvc2l0b3JpZXMnKSlcbiAgICAgICAgICAgICAgICAgICAgICAudGl0bGUoKCkgPT4gJ1JlZ2lzdHJpZXMnKVxuICAgICAgICAgICAgICAgICAgICAgIC5idWlsZCgpO1xuXG4gICAgdmFyIHBpcGVsaW5lcyA9IGJ1aWxkZXIuaWQoJ2t1YmUtcGlwZWxpbmVzJylcbiAgICAgICAgICAgICAgICAgICAgICAuaHJlZigoKSA9PiBVcmxIZWxwZXJzLmpvaW4oY29udGV4dCwgJ3BpcGVsaW5lcycpKVxuICAgICAgICAgICAgICAgICAgICAgIC50aXRsZSgoKSA9PiAnUGlwZWxpbmVzJylcbiAgICAgICAgICAgICAgICAgICAgICAuYnVpbGQoKTtcblxuICAgIHZhciBvdmVydmlldyA9IGJ1aWxkZXIuaWQoJ2t1YmUtb3ZlcnZpZXcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAuaHJlZigoKSA9PiBVcmxIZWxwZXJzLmpvaW4oY29udGV4dCwgJ292ZXJ2aWV3JykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC50aXRsZSgoKSA9PiAnRGlhZ3JhbScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5idWlsZCgpO1xuXG4gICAgdmFyIG1haW5UYWIgPSBidWlsZGVyLmlkKCdrdWJlcm5ldGVzJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAucmFuaygyMDApXG4gICAgICAgICAgICAgICAgICAgICAgICAgLmRlZmF1bHRQYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbms6IDIwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWQ6ICh5ZXMsIG5vKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE8gbm90IHN1cmUgaWYgd2UgbmVlZCB0aGUgdHJlZSBsb2FkZWQgZm9yIHRoaXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWUgPSAnS3ViZXJuZXRlc0RlZmF1bHRQYWdlJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd29ya3NwYWNlLmFkZE5hbWVkVHJlZVBvc3RQcm9jZXNzb3IobmFtZSwgKHRyZWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3Jrc3BhY2UucmVtb3ZlTmFtZWRUcmVlUG9zdFByb2Nlc3NvcihuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIUNvcmUuaXNSZW1vdGVDb25uZWN0aW9uKCkgJiYgaXNLdWJlcm5ldGVzKHdvcmtzcGFjZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHllcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBubygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgfSkgXG4gICAgICAgICAgICAgICAgICAgICAgICAgLmhyZWYoKCkgPT4gY29udGV4dClcbiAgICAgICAgICAgICAgICAgICAgICAgICAudGl0bGUoKCkgPT4gJ0t1YmVybmV0ZXMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgIC5pc1ZhbGlkKCgpID0+IGlzS3ViZXJuZXRlcyh3b3Jrc3BhY2UpKVxuICAgICAgICAgICAgICAgICAgICAgICAgIC50YWJzKGFwcHMsIHNlcnZpY2VzLCBjb250cm9sbGVycywgcG9kcywgaG9zdHMsIG92ZXJ2aWV3LCBidWlsZHMsIGJ1aWxkQ29uZmlncywgZGVwbG95cywgaW1hZ2VSZXBvc2l0b3JpZXMsIHBpcGVsaW5lcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAuYnVpbGQoKTtcblxuICAgIEhhd3Rpb05hdi5hZGQobWFpblRhYik7XG5cbiAgICAvLyBsZXRzIGRpc2FibGUgY29ubmVjdFxuICAgIHZhciBuYXZJdGVtcyA9IEhhd3Rpb05hdi5pdGVtcyB8fCBbXTtcbiAgICB2YXIgY29ubmVjdCA9IG5hdkl0ZW1zLmZpbmQoKGl0ZW0pID0+IGl0ZW0uaWQgPT09IFwianZtXCIpO1xuICAgIGlmIChjb25uZWN0KSB7XG4gICAgICBjb25uZWN0LmlzVmFsaWQgPSAoKSA9PiBmYWxzZTtcbiAgICB9XG4gICAgLy8gaW1hZ2VzIHBsdWdpbiBkb2Vzbid0IHdvcmsgeWV0Li4uXG4gICAgdmFyIGRvY2tlclJlZ2lzdHJ5ID0gbmF2SXRlbXMuZmluZCgoaXRlbSkgPT4gaXRlbS5pZCA9PT0gXCJkb2NrZXItcmVnaXN0cnlcIik7XG4gICAgaWYgKGRvY2tlclJlZ2lzdHJ5KSB7XG4gICAgICBkb2NrZXJSZWdpc3RyeS5pc1ZhbGlkID0gKCkgPT4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gZGlzYWJsZSB0aGUgZm9yZ2UgcGx1Z2luIHRhYlxuICAgIHZhciBmb3JnZSA9IG5hdkl0ZW1zLmZpbmQoKGl0ZW0pID0+IGl0ZW0uaWQgPT09IFwiZm9yZ2VcIik7XG4gICAgaWYgKGZvcmdlKSB7XG4gICAgICBmb3JnZS5pc1ZhbGlkID0gKCkgPT4gZmFsc2U7XG4gICAgfVxuXG4gICAgd29ya3NwYWNlLnRvcExldmVsVGFicy5wdXNoKHtcbiAgICAgIGlkOiAnbGlicmFyeScsXG4gICAgICBjb250ZW50OiAnTGlicmFyeScsXG4gICAgICB0aXRsZTogJ1ZpZXcgdGhlIGxpYnJhcnkgb2YgYXBwbGljYXRpb25zJyxcbiAgICAgIGlzVmFsaWQ6ICh3b3Jrc3BhY2UpID0+IFNlcnZpY2VSZWdpc3RyeS5oYXNTZXJ2aWNlKFwiYXBwLWxpYnJhcnlcIikgJiYgU2VydmljZVJlZ2lzdHJ5Lmhhc1NlcnZpY2UoXCJhcHAtbGlicmFyeS1qb2xva2lhXCIpLFxuICAgICAgaHJlZjogKCkgPT4gXCIvd2lraS92aWV3XCIsXG4gICAgICBpc0FjdGl2ZTogKHdvcmtzcGFjZSkgPT4gZmFsc2VcbiAgICB9KTtcblxuICAgIHdvcmtzcGFjZS50b3BMZXZlbFRhYnMucHVzaCh7XG4gICAgICBpZDogJ2tpYmFuYScsXG4gICAgICBjb250ZW50OiAnTG9ncycsXG4gICAgICB0aXRsZTogJ1ZpZXcgYW5kIHNlYXJjaCBhbGwgbG9ncyBhY3Jvc3MgYWxsIGNvbnRhaW5lcnMgdXNpbmcgS2liYW5hIGFuZCBFbGFzdGljU2VhcmNoJyxcbiAgICAgIGlzVmFsaWQ6ICh3b3Jrc3BhY2UpID0+IFNlcnZpY2VSZWdpc3RyeS5oYXNTZXJ2aWNlKFwia2liYW5hLXNlcnZpY2VcIiksXG4gICAgICBocmVmOiAoKSA9PiBraWJhbmFMb2dzTGluayhTZXJ2aWNlUmVnaXN0cnkpLFxuICAgICAgaXNBY3RpdmU6ICh3b3Jrc3BhY2UpID0+IGZhbHNlXG4gICAgfSk7XG5cbiAgICB3b3Jrc3BhY2UudG9wTGV2ZWxUYWJzLnB1c2goe1xuICAgICAgaWQ6ICdncmFmYW5hJyxcbiAgICAgIGNvbnRlbnQ6ICdNZXRyaWNzJyxcbiAgICAgIHRpdGxlOiAnVmlld3MgbWV0cmljcyBhY3Jvc3MgYWxsIGNvbnRhaW5lcnMgdXNpbmcgR3JhZmFuYSBhbmQgSW5mbHV4REInLFxuICAgICAgaXNWYWxpZDogKHdvcmtzcGFjZSkgPT4gU2VydmljZVJlZ2lzdHJ5Lmhhc1NlcnZpY2UoXCJncmFmYW5hLXNlcnZpY2VcIiksXG4gICAgICBocmVmOiAoKSA9PiBTZXJ2aWNlUmVnaXN0cnkuc2VydmljZUxpbmsoXCJncmFmYW5hLXNlcnZpY2VcIiksXG4gICAgICBpc0FjdGl2ZTogKHdvcmtzcGFjZSkgPT4gZmFsc2VcbiAgICB9KTtcblxuICAgIC8vIFRPRE8gd2Ugc2hvdWxkIG1vdmUgdGhpcyB0byBhIG5pY2VyIGxpbmsgaW5zaWRlIHRoZSBMaWJyYXJ5IHNvb24gLSBhbHNvIGxldHMgaGlkZSB1bnRpbCBpdCB3b3Jrcy4uLlxuICAgIHdvcmtzcGFjZS50b3BMZXZlbFRhYnMucHVzaCh7XG4gICAgICBpZDogJ2NyZWF0ZVByb2plY3QnLFxuICAgICAgY29udGVudDogJ0NyZWF0ZScsXG4gICAgICB0aXRsZTogJ0NyZWF0ZXMgYSBuZXcgcHJvamVjdCcsXG4gICAgICBpc1ZhbGlkOiAod29ya3NwYWNlKSA9PiBTZXJ2aWNlUmVnaXN0cnkuaGFzU2VydmljZShcImFwcC1saWJyYXJ5XCIpICYmIGZhbHNlLFxuICAgICAgaHJlZjogKCkgPT4gXCIvcHJvamVjdC9jcmVhdGVcIlxuICAgIH0pO1xuXG5cbiAgfV0pO1xuXG4gIGhhd3Rpb1BsdWdpbkxvYWRlci5hZGRNb2R1bGUocGx1Z2luTmFtZSk7XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vaW5jbHVkZXMudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwia3ViZXJuZXRlc1BsdWdpbi50c1wiLz5cblxubW9kdWxlIEt1YmVybmV0ZXMge1xuXG4gIGV4cG9ydCB2YXIgQXBwcyA9IGNvbnRyb2xsZXIoXCJBcHBzXCIsXG4gICAgW1wiJHNjb3BlXCIsIFwiS3ViZXJuZXRlc01vZGVsXCIsIFwiS3ViZXJuZXRlc1NlcnZpY2VzXCIsIFwiS3ViZXJuZXRlc1JlcGxpY2F0aW9uQ29udHJvbGxlcnNcIiwgXCJLdWJlcm5ldGVzUG9kc1wiLCBcIkt1YmVybmV0ZXNTdGF0ZVwiLCBcIkt1YmVybmV0ZXNBcGlVUkxcIiwgXCIkdGVtcGxhdGVDYWNoZVwiLCBcIiRsb2NhdGlvblwiLCBcIiRyb3V0ZVBhcmFtc1wiLCBcIiRodHRwXCIsIFwiJGRpYWxvZ1wiLCBcIiR0aW1lb3V0XCIsIFwid29ya3NwYWNlXCIsIFwiam9sb2tpYVwiLFxuICAgICAgKCRzY29wZSwgS3ViZXJuZXRlc01vZGVsOiBLdWJlcm5ldGVzLkt1YmVybmV0ZXNNb2RlbFNlcnZpY2UsIEt1YmVybmV0ZXNTZXJ2aWNlczpuZy5JUHJvbWlzZTxuZy5yZXNvdXJjZS5JUmVzb3VyY2VDbGFzcz4sIEt1YmVybmV0ZXNSZXBsaWNhdGlvbkNvbnRyb2xsZXJzOm5nLklQcm9taXNlPG5nLnJlc291cmNlLklSZXNvdXJjZUNsYXNzPiwgS3ViZXJuZXRlc1BvZHM6bmcuSVByb21pc2U8bmcucmVzb3VyY2UuSVJlc291cmNlQ2xhc3M+LCBLdWJlcm5ldGVzU3RhdGUsIEt1YmVybmV0ZXNBcGlVUkwsXG4gICAgICAgJHRlbXBsYXRlQ2FjaGU6bmcuSVRlbXBsYXRlQ2FjaGVTZXJ2aWNlLCAkbG9jYXRpb246bmcuSUxvY2F0aW9uU2VydmljZSwgJHJvdXRlUGFyYW1zLCAkaHR0cCwgJGRpYWxvZywgJHRpbWVvdXQsIHdvcmtzcGFjZSwgam9sb2tpYTpKb2xva2lhLklKb2xva2lhKSA9PiB7XG5cbiAgICAkc2NvcGUubW9kZWwgPSBLdWJlcm5ldGVzTW9kZWw7XG4gICAgJHNjb3BlLiRvbigna3ViZXJuZXRlc01vZGVsVXBkYXRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgfSk7XG5cbiAgICAkc2NvcGUuYXBwcyA9IFtdO1xuICAgICRzY29wZS5hbGxBcHBzID0gW107XG4gICAgJHNjb3BlLmt1YmVybmV0ZXMgPSBLdWJlcm5ldGVzU3RhdGU7XG4gICAgJHNjb3BlLmZldGNoZWQgPSBmYWxzZTtcbiAgICAkc2NvcGUuanNvbiA9ICcnO1xuICAgIENvbnRyb2xsZXJIZWxwZXJzLmJpbmRNb2RlbFRvU2VhcmNoUGFyYW0oJHNjb3BlLCAkbG9jYXRpb24sICdpZCcsICdfaWQnLCB1bmRlZmluZWQpO1xuICAgIENvbnRyb2xsZXJIZWxwZXJzLmJpbmRNb2RlbFRvU2VhcmNoUGFyYW0oJHNjb3BlLCAkbG9jYXRpb24sICdhcHBTZWxlY3RvclNob3cnLCAnb3BlbkFwcCcsIHVuZGVmaW5lZCk7XG4gICAgQ29udHJvbGxlckhlbHBlcnMuYmluZE1vZGVsVG9TZWFyY2hQYXJhbSgkc2NvcGUsICRsb2NhdGlvbiwgJ21vZGUnLCAnbW9kZScsICdkZXRhaWwnKTtcblxuICAgIHZhciBicmFuY2ggPSAkc2NvcGUuYnJhbmNoIHx8IFwibWFzdGVyXCI7XG4gICAgdmFyIG5hbWVzcGFjZSA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiBhcHBNYXRjaGVzKGFwcCkge1xuICAgICAgdmFyIGZpbHRlclRleHQgPSAkc2NvcGUuYXBwU2VsZWN0b3IuZmlsdGVyVGV4dDtcbiAgICAgIGlmIChmaWx0ZXJUZXh0KSB7XG4gICAgICAgIHJldHVybiBDb3JlLm1hdGNoRmlsdGVySWdub3JlQ2FzZShhcHAuZ3JvdXBJZCwgZmlsdGVyVGV4dCkgfHxcbiAgICAgICAgICBDb3JlLm1hdGNoRmlsdGVySWdub3JlQ2FzZShhcHAuYXJ0aWZhY3RJZCwgZmlsdGVyVGV4dCkgfHxcbiAgICAgICAgICBDb3JlLm1hdGNoRmlsdGVySWdub3JlQ2FzZShhcHAubmFtZSwgZmlsdGVyVGV4dCkgfHxcbiAgICAgICAgICBDb3JlLm1hdGNoRmlsdGVySWdub3JlQ2FzZShhcHAuZGVzY3JpcHRpb24sIGZpbHRlclRleHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwUnVubmluZyhhcHApIHtcbiAgICAgIHJldHVybiAkc2NvcGUubW9kZWwuYXBwcy5hbnkoKHJ1bm5pbmcpID0+IHJ1bm5pbmcuYXBwUGF0aCA9PT0gYXBwLmFwcFBhdGgpO1xuICAgIH1cblxuICAgICRzY29wZS50YWJsZUNvbmZpZyA9IHtcbiAgICAgIGRhdGE6ICdtb2RlbC5hcHBzJyxcbiAgICAgIHNob3dTZWxlY3Rpb25DaGVja2JveDogdHJ1ZSxcbiAgICAgIGVuYWJsZVJvd0NsaWNrU2VsZWN0aW9uOiBmYWxzZSxcbiAgICAgIG11bHRpU2VsZWN0OiB0cnVlLFxuICAgICAgc2VsZWN0ZWRJdGVtczogW10sXG4gICAgICBmaWx0ZXJPcHRpb25zOiB7XG4gICAgICAgIGZpbHRlclRleHQ6ICRsb2NhdGlvbi5zZWFyY2goKVtcInFcIl0gfHwgJydcbiAgICAgIH0sXG4gICAgICBjb2x1bW5EZWZzOiBbXG4gICAgICAgIHsgZmllbGQ6ICdpY29uJywgZGlzcGxheU5hbWU6ICdBcHAnLCBjZWxsVGVtcGxhdGU6ICR0ZW1wbGF0ZUNhY2hlLmdldChcImFwcEljb25UZW1wbGF0ZS5odG1sXCIpIH0sXG4gICAgICAgIHsgZmllbGQ6ICdzZXJ2aWNlcycsIGRpc3BsYXlOYW1lOiAnU2VydmljZXMnLCBjZWxsVGVtcGxhdGU6ICR0ZW1wbGF0ZUNhY2hlLmdldChcImFwcFNlcnZpY2VzVGVtcGxhdGUuaHRtbFwiKSB9LFxuICAgICAgICB7IGZpZWxkOiAncmVwbGljYXRpb25Db250cm9sbGVycycsIGRpc3BsYXlOYW1lOiAnQ29udHJvbGxlcnMnLCBjZWxsVGVtcGxhdGU6ICR0ZW1wbGF0ZUNhY2hlLmdldChcImFwcFJlcGxpY2F0aW9uQ29udHJvbGxlclRlbXBsYXRlLmh0bWxcIikgfSxcbiAgICAgICAgeyBmaWVsZDogJyRwb2RzTGluaycsIGRpc3BsYXlOYW1lOiAnUG9kcycsIGNlbGxUZW1wbGF0ZTogJHRlbXBsYXRlQ2FjaGUuZ2V0KFwiYXBwUG9kQ291bnRzQW5kTGlua1RlbXBsYXRlLmh0bWxcIikgfSxcbiAgICAgICAgeyBmaWVsZDogJyRkZXBsb3llZFRleHQnLCBkaXNwbGF5TmFtZTogJ0RlcGxveWVkJywgY2VsbFRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoXCJhcHBEZXBsb3llZFRlbXBsYXRlLmh0bWxcIikgfSxcbiAgICAgICAgeyBmaWVsZDogJ25hbWVzcGFjZScsIGRpc3BsYXlOYW1lOiAnTmFtZXNwYWNlJyB9XG4gICAgICBdXG4gICAgfTtcblxuICAgIEt1YmVybmV0ZXMuaW5pdFNoYXJlZCgkc2NvcGUsICRsb2NhdGlvbiwgJGh0dHAsICR0aW1lb3V0LCAkcm91dGVQYXJhbXMsIEt1YmVybmV0ZXNNb2RlbCwgS3ViZXJuZXRlc1N0YXRlLCBLdWJlcm5ldGVzQXBpVVJMKTtcblxuXG4gICAgJHNjb3BlLmV4cGFuZGVkUG9kcyA9IFtdO1xuXG4gICAgJHNjb3BlLnBvZEV4cGFuZGVkID0gKHBvZCkgPT4ge1xuICAgICAgdmFyIGlkID0gKHBvZCB8fCB7fSkuaWQ7XG4gICAgICByZXR1cm4gaWQgJiYgKCRzY29wZS5leHBhbmRlZFBvZHMgfHwgW10pLmluZGV4T2YoaWQpID49IDA7XG4gICAgfTtcblxuICAgICRzY29wZS5leHBhbmRQb2QgPSAocG9kKSA9PiB7XG4gICAgICB2YXIgaWQgPSBwb2QuaWQ7XG4gICAgICBpZiAoaWQpIHtcbiAgICAgICAgJHNjb3BlLmV4cGFuZGVkUG9kcy5wdXNoKGlkKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgJHNjb3BlLmNvbGxhcHNlUG9kID0gKHBvZCkgPT4ge1xuICAgICAgdmFyIGlkID0gcG9kLmlkO1xuICAgICAgaWYgKGlkKSB7XG4gICAgICAgICRzY29wZS5leHBhbmRlZFBvZHMgPSAkc2NvcGUuZXhwYW5kZWRQb2RzLnJlbW92ZSgodikgPT4gaWQgPT09IHYpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAkc2NvcGUuJG9uKCckcm91dGVVcGRhdGUnLCAoJGV2ZW50KSA9PiB7XG4gICAgICBLdWJlcm5ldGVzLnNldEpzb24oJHNjb3BlLCAkbG9jYXRpb24uc2VhcmNoKClbJ19pZCddLCAkc2NvcGUubW9kZWwuYXBwcyk7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBkZWxldGVBcHAoYXBwLCBvbkNvbXBsZXRlRm4pIHtcbiAgICAgIGZ1bmN0aW9uIGRlbGV0ZVNlcnZpY2VzKHNlcnZpY2VzLCBzZXJ2aWNlLCBvbkNvbXBsZXRlZEZuKSB7XG4gICAgICAgIGlmICghc2VydmljZSB8fCAhc2VydmljZXMpIHtcbiAgICAgICAgICByZXR1cm4gb25Db21wbGV0ZWRGbigpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpZCA9IHNlcnZpY2UuaWQ7XG4gICAgICAgIGlmICghaWQpIHtcbiAgICAgICAgICBsb2cud2FybihcIk5vIElEIGZvciBzZXJ2aWNlIFwiICsgYW5ndWxhci50b0pzb24oc2VydmljZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIEt1YmVybmV0ZXNTZXJ2aWNlcy50aGVuKChLdWJlcm5ldGVzU2VydmljZXM6bmcucmVzb3VyY2UuSVJlc291cmNlQ2xhc3MpID0+IHtcbiAgICAgICAgICAgIEt1YmVybmV0ZXNTZXJ2aWNlcy5kZWxldGUoe1xuICAgICAgICAgICAgICBpZDogaWRcbiAgICAgICAgICAgIH0sIHVuZGVmaW5lZCwgKCkgPT4ge1xuICAgICAgICAgICAgICBsb2cuZGVidWcoXCJEZWxldGVkIHNlcnZpY2U6IFwiLCBpZCk7XG4gICAgICAgICAgICAgIGRlbGV0ZVNlcnZpY2VzKHNlcnZpY2VzLCBzZXJ2aWNlcy5zaGlmdCgpLCBvbkNvbXBsZXRlZEZuKTtcbiAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICBsb2cuZGVidWcoXCJFcnJvciBkZWxldGluZyBzZXJ2aWNlOiBcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICBkZWxldGVTZXJ2aWNlcyhzZXJ2aWNlcywgc2VydmljZXMuc2hpZnQoKSwgb25Db21wbGV0ZWRGbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBkZWxldGVSZXBsaWNhdGlvbkNvbnRyb2xsZXJzKHJlcGxpY2F0aW9uQ29udHJvbGxlcnMsIHJlcGxpY2F0aW9uQ29udHJvbGxlciwgb25Db21wbGV0ZWRGbikge1xuICAgICAgICBpZiAoIXJlcGxpY2F0aW9uQ29udHJvbGxlciB8fCAhcmVwbGljYXRpb25Db250cm9sbGVycykge1xuICAgICAgICAgIHJldHVybiBvbkNvbXBsZXRlZEZuKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGlkID0gcmVwbGljYXRpb25Db250cm9sbGVyLmlkO1xuICAgICAgICBpZiAoIWlkKSB7XG4gICAgICAgICAgbG9nLndhcm4oXCJObyBJRCBmb3IgcmVwbGljYXRpb25Db250cm9sbGVyIFwiICsgYW5ndWxhci50b0pzb24ocmVwbGljYXRpb25Db250cm9sbGVyKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgS3ViZXJuZXRlc1JlcGxpY2F0aW9uQ29udHJvbGxlcnMudGhlbigoS3ViZXJuZXRlc1JlcGxpY2F0aW9uQ29udHJvbGxlcnM6bmcucmVzb3VyY2UuSVJlc291cmNlQ2xhc3MpID0+IHtcbiAgICAgICAgICAgIEt1YmVybmV0ZXNSZXBsaWNhdGlvbkNvbnRyb2xsZXJzLmRlbGV0ZSh7XG4gICAgICAgICAgICAgIGlkOiBpZFxuICAgICAgICAgICAgfSwgdW5kZWZpbmVkLCAoKSA9PiB7XG4gICAgICAgICAgICAgIGxvZy5kZWJ1ZyhcIkRlbGV0ZWQgcmVwbGljYXRpb25Db250cm9sbGVyOiBcIiwgaWQpO1xuICAgICAgICAgICAgICBkZWxldGVSZXBsaWNhdGlvbkNvbnRyb2xsZXJzKHJlcGxpY2F0aW9uQ29udHJvbGxlcnMsIHJlcGxpY2F0aW9uQ29udHJvbGxlcnMuc2hpZnQoKSwgb25Db21wbGV0ZWRGbik7XG4gICAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgbG9nLmRlYnVnKFwiRXJyb3IgZGVsZXRpbmcgcmVwbGljYXRpb25Db250cm9sbGVyOiBcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICBkZWxldGVSZXBsaWNhdGlvbkNvbnRyb2xsZXJzKHJlcGxpY2F0aW9uQ29udHJvbGxlcnMsIHJlcGxpY2F0aW9uQ29udHJvbGxlcnMuc2hpZnQoKSwgb25Db21wbGV0ZWRGbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBkZWxldGVQb2RzKHBvZHMsIHBvZCwgb25Db21wbGV0ZWRGbikge1xuICAgICAgICBpZiAoIXBvZCB8fCAhcG9kcykge1xuICAgICAgICAgIHJldHVybiBvbkNvbXBsZXRlZEZuKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGlkID0gcG9kLmlkO1xuICAgICAgICBpZiAoIWlkKSB7XG4gICAgICAgICAgbG9nLndhcm4oXCJObyBJRCBmb3IgcG9kIFwiICsgYW5ndWxhci50b0pzb24ocG9kKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgS3ViZXJuZXRlc1BvZHMudGhlbigoS3ViZXJuZXRlc1BvZHM6bmcucmVzb3VyY2UuSVJlc291cmNlQ2xhc3MpID0+IHtcbiAgICAgICAgICAgIEt1YmVybmV0ZXNQb2RzLmRlbGV0ZSh7XG4gICAgICAgICAgICAgIGlkOiBpZFxuICAgICAgICAgICAgfSwgdW5kZWZpbmVkLCAoKSA9PiB7XG4gICAgICAgICAgICAgIGxvZy5kZWJ1ZyhcIkRlbGV0ZWQgcG9kOiBcIiwgaWQpO1xuICAgICAgICAgICAgICBkZWxldGVQb2RzKHBvZHMsIHBvZHMuc2hpZnQoKSwgb25Db21wbGV0ZWRGbik7XG4gICAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgbG9nLmRlYnVnKFwiRXJyb3IgZGVsZXRpbmcgcG9kOiBcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICBkZWxldGVQb2RzKHBvZHMsIHBvZHMuc2hpZnQoKSwgb25Db21wbGV0ZWRGbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgc2VydmljZXMgPSBbXS5jb25jYXQoYXBwLnNlcnZpY2VzKTtcbiAgICAgIGRlbGV0ZVNlcnZpY2VzKHNlcnZpY2VzLCBzZXJ2aWNlcy5zaGlmdCgpLCAoKSA9PiB7XG5cbiAgICAgICAgdmFyIHJlcGxpY2F0aW9uQ29udHJvbGxlcnMgPSBbXS5jb25jYXQoYXBwLnJlcGxpY2F0aW9uQ29udHJvbGxlcnMpO1xuICAgICAgICBkZWxldGVSZXBsaWNhdGlvbkNvbnRyb2xsZXJzKHJlcGxpY2F0aW9uQ29udHJvbGxlcnMsIHJlcGxpY2F0aW9uQ29udHJvbGxlcnMuc2hpZnQoKSwgKCkgPT4ge1xuXG4gICAgICAgICAgdmFyIHBvZHMgPSBbXS5jb25jYXQoYXBwLnBvZHMpO1xuICAgICAgICAgIGRlbGV0ZVBvZHMocG9kcywgcG9kcy5zaGlmdCgpLCBvbkNvbXBsZXRlRm4pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgICRzY29wZS5kZWxldGVQcm9tcHQgPSAoc2VsZWN0ZWQpID0+IHtcbiAgICAgIGlmIChhbmd1bGFyLmlzU3RyaW5nKHNlbGVjdGVkKSkge1xuICAgICAgICBzZWxlY3RlZCA9IFt7XG4gICAgICAgICAgaWQ6IHNlbGVjdGVkXG4gICAgICAgIH1dO1xuICAgICAgfVxuICAgICAgVUkubXVsdGlJdGVtQ29uZmlybUFjdGlvbkRpYWxvZyg8VUkuTXVsdGlJdGVtQ29uZmlybUFjdGlvbk9wdGlvbnM+e1xuICAgICAgICBjb2xsZWN0aW9uOiBzZWxlY3RlZCxcbiAgICAgICAgaW5kZXg6ICckbmFtZScsXG4gICAgICAgIG9uQ2xvc2U6IChyZXN1bHQ6Ym9vbGVhbikgPT4ge1xuICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGRlbGV0ZVNlbGVjdGVkKHNlbGVjdGVkLCBuZXh0KSB7XG4gICAgICAgICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGlkID0gbmV4dC5uYW1lO1xuICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyhcImRlbGV0aW5nOiBcIiwgaWQpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZUFwcChuZXh0LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBsb2cuZGVidWcoXCJkZWxldGVkOiBcIiwgaWQpO1xuICAgICAgICAgICAgICAgICAgZGVsZXRlU2VsZWN0ZWQoc2VsZWN0ZWQsIHNlbGVjdGVkLnNoaWZ0KCkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlbGV0ZVNlbGVjdGVkKHNlbGVjdGVkLCBzZWxlY3RlZC5zaGlmdCgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHRpdGxlOiAnRGVsZXRlIEFwcHM/JyxcbiAgICAgICAgYWN0aW9uOiAnVGhlIGZvbGxvd2luZyBBcHBzIHdpbGwgYmUgZGVsZXRlZDonLFxuICAgICAgICBva1RleHQ6ICdEZWxldGUnLFxuICAgICAgICBva0NsYXNzOiAnYnRuLWRhbmdlcicsXG4gICAgICAgIGN1c3RvbTogXCJUaGlzIG9wZXJhdGlvbiBpcyBwZXJtYW5lbnQgb25jZSBjb21wbGV0ZWQhXCIsXG4gICAgICAgIGN1c3RvbUNsYXNzOiBcImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIlxuICAgICAgfSkub3BlbigpO1xuICAgIH07XG5cbiAgICAkc2NvcGUuYXBwU2VsZWN0b3IgPSB7XG4gICAgICBmaWx0ZXJUZXh0OiBcIlwiLFxuICAgICAgZm9sZGVyczogW10sXG4gICAgICBzZWxlY3RlZEFwcHM6IFtdLFxuXG4gICAgICBpc09wZW46IChmb2xkZXIpID0+IHtcbiAgICAgICAgaWYgKCRzY29wZS5hcHBTZWxlY3Rvci5maWx0ZXJUZXh0ICE9PSAnJyB8fCBmb2xkZXIuZXhwYW5kZWQpIHtcbiAgICAgICAgICByZXR1cm4gXCJvcGVuZWRcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJjbG9zZWRcIjtcbiAgICAgIH0sXG5cbiAgICAgIGdldFNlbGVjdGVkQ2xhc3M6IChhcHApID0+IHtcbiAgICAgICAgaWYgKGFwcC5hYnN0cmFjdCkge1xuICAgICAgICAgIHJldHVybiBcImFic3RyYWN0XCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFwcC5zZWxlY3RlZCkge1xuICAgICAgICAgIHJldHVybiBcInNlbGVjdGVkXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICB9LFxuXG4gICAgICBzaG93QXBwOiAoYXBwKSA9PiB7XG4gICAgICAgIHJldHVybiBhcHBNYXRjaGVzKGFwcCkgJiYgIWFwcFJ1bm5pbmcoYXBwKTtcbiAgICAgIH0sXG5cbiAgICAgIHNob3dGb2xkZXI6IChmb2xkZXIpID0+IHtcbiAgICAgICAgcmV0dXJuICEkc2NvcGUuYXBwU2VsZWN0b3IuZmlsdGVyVGV4dCB8fCBmb2xkZXIuYXBwcy5zb21lKChhcHApID0+IGFwcE1hdGNoZXMoYXBwKSAmJiAhYXBwUnVubmluZyhhcHApKTtcbiAgICAgIH0sXG5cbiAgICAgIGNsZWFyU2VsZWN0ZWQ6ICgpID0+IHtcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5tb2RlbC5hcHBGb2xkZXJzLCAoZm9sZGVyKSA9PiB7XG4gICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGZvbGRlci5hcHBzLCAoYXBwKSA9PiB7XG4gICAgICAgICAgICBhcHAuc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgICRzY29wZS5hcHBTZWxlY3Rvci5zZWxlY3RlZEFwcHMgPSBbXTtcbiAgICAgICAgQ29yZS4kYXBwbHkoJHNjb3BlKTtcbiAgICAgIH0sXG5cbiAgICAgIHVwZGF0ZVNlbGVjdGVkOiAoKSA9PiB7XG4gICAgICAgIC8vIGxldHMgdXBkYXRlIHRoZSBzZWxlY3RlZCBhcHBzXG4gICAgICAgIHZhciBzZWxlY3RlZEFwcHMgPSBbXTtcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5tb2RlbC5hcHBGb2xkZXJzLCAoZm9sZGVyKSA9PiB7XG4gICAgICAgICAgdmFyIGFwcHMgPSBmb2xkZXIuYXBwcy5maWx0ZXIoKGFwcCkgPT4gYXBwLnNlbGVjdGVkKTtcbiAgICAgICAgICBpZiAoYXBwcykge1xuICAgICAgICAgICAgc2VsZWN0ZWRBcHBzID0gc2VsZWN0ZWRBcHBzLmNvbmNhdChhcHBzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAkc2NvcGUuYXBwU2VsZWN0b3Iuc2VsZWN0ZWRBcHBzID0gc2VsZWN0ZWRBcHBzLnNvcnRCeShcIm5hbWVcIik7XG4gICAgICB9LFxuXG4gICAgICBzZWxlY3Q6IChhcHAsIGZsYWcpID0+IHtcbiAgICAgICAgYXBwLnNlbGVjdGVkID0gZmxhZztcbiAgICAgICAgJHNjb3BlLmFwcFNlbGVjdG9yLnVwZGF0ZVNlbGVjdGVkKCk7XG4gICAgICB9LFxuXG4gICAgICBoYXNTZWxlY3Rpb246ICgpID0+IHtcbiAgICAgICAgcmV0dXJuICRzY29wZS5tb2RlbC5hcHBGb2xkZXJzLmFueSgoZm9sZGVyKSA9PiBmb2xkZXIuYXBwcy5hbnkoKGFwcCkgPT4gYXBwLnNlbGVjdGVkKSk7XG4gICAgICB9LFxuXG5cbiAgICAgIHJ1blNlbGVjdGVkQXBwczogKCkgPT4ge1xuICAgICAgICAvLyBsZXRzIHJ1biBhbGwgdGhlIHNlbGVjdGVkIGFwcHNcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5hcHBTZWxlY3Rvci5zZWxlY3RlZEFwcHMsIChhcHApID0+IHtcbiAgICAgICAgICB2YXIgbmFtZSA9IGFwcC5uYW1lO1xuICAgICAgICAgIHZhciBtZXRhZGF0YVBhdGggPSBhcHAubWV0YWRhdGFQYXRoO1xuICAgICAgICAgIGlmIChtZXRhZGF0YVBhdGgpIHtcbiAgICAgICAgICAgIC8vIGxldHMgbG9hZCB0aGUganNvbi95YW1sXG4gICAgICAgICAgICAvL3ZhciB1cmwgPSBnaXRQYXRoVG9VcmwoV2lraS5naXRSZWxhdGl2ZVVSTChicmFuY2gsIG1ldGFkYXRhUGF0aCkpO1xuICAgICAgICAgICAgdmFyIHVybCA9IGdpdFBhdGhUb1VybChtZXRhZGF0YVBhdGgsIGJyYW5jaCk7XG4gICAgICAgICAgICBpZiAodXJsKSB7XG4gICAgICAgICAgICAgICRodHRwLmdldCh1cmwpLlxuICAgICAgICAgICAgICAgIHN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBsZXRzIGNvbnZlcnQgdGhlIGpzb24gb2JqZWN0IHN0cnVjdHVyZSBpbnRvIGEgc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgIHZhciBqc29uID0gYW5ndWxhci50b0pzb24oZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmbiA9ICgpID0+IHt9O1xuICAgICAgICAgICAgICAgICAgICBLdWJlcm5ldGVzLnJ1bkFwcCgkbG9jYXRpb24sICRzY29wZSwgJGh0dHAsIEt1YmVybmV0ZXNBcGlVUkwsIGpzb24sIG5hbWUsIGZuLCBuYW1lc3BhY2UpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgICAgIGVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgICAgICAgJHNjb3BlLnN1bW1hcnlIdG1sID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgIGxvZy53YXJuKFwiRmFpbGVkIHRvIGxvYWQgXCIgKyB1cmwgKyBcIiBcIiArIGRhdGEgKyBcIiBcIiArIHN0YXR1cyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gbGV0cyBnbyBiYWNrIHRvIHRoZSBhcHBzIHZpZXdcbiAgICAgICAgJHNjb3BlLmFwcFNlbGVjdG9yLmNsZWFyU2VsZWN0ZWQoKTtcbiAgICAgICAgJHNjb3BlLmFwcFNlbGVjdG9yU2hvdyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH07XG5cbjtcbiAgfV0pO1xufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNIZWxwZXJzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNQbHVnaW4udHNcIi8+XG5cbm1vZHVsZSBLdWJlcm5ldGVzIHtcblxuICBleHBvcnQgdmFyIEJ1aWxkQ29udHJvbGxlciA9IGNvbnRyb2xsZXIoXCJCdWlsZENvbnRyb2xsZXJcIixcbiAgICBbXCIkc2NvcGVcIiwgXCJLdWJlcm5ldGVzTW9kZWxcIiwgXCJLdWJlcm5ldGVzU3RhdGVcIiwgXCJLdWJlcm5ldGVzU2NoZW1hXCIsIFwiJHRlbXBsYXRlQ2FjaGVcIiwgXCIkbG9jYXRpb25cIiwgXCIkcm91dGVQYXJhbXNcIiwgXCIkaHR0cFwiLCBcIiR0aW1lb3V0XCIsIFwiS3ViZXJuZXRlc0FwaVVSTFwiLFxuICAgICAgKCRzY29wZSwgS3ViZXJuZXRlc01vZGVsOkt1YmVybmV0ZXMuS3ViZXJuZXRlc01vZGVsU2VydmljZSwgS3ViZXJuZXRlc1N0YXRlLCBLdWJlcm5ldGVzU2NoZW1hLFxuICAgICAgICR0ZW1wbGF0ZUNhY2hlOm5nLklUZW1wbGF0ZUNhY2hlU2VydmljZSwgJGxvY2F0aW9uOm5nLklMb2NhdGlvblNlcnZpY2UsICRyb3V0ZVBhcmFtcywgJGh0dHAsICR0aW1lb3V0LCBLdWJlcm5ldGVzQXBpVVJMKSA9PiB7XG5cbiAgICAgICAgJHNjb3BlLmt1YmVybmV0ZXMgPSBLdWJlcm5ldGVzU3RhdGU7XG4gICAgICAgICRzY29wZS5tb2RlbCA9IEt1YmVybmV0ZXNNb2RlbDtcbiAgICAgICAgJHNjb3BlLmlkID0gJHJvdXRlUGFyYW1zW1wiaWRcIl07XG4gICAgICAgICRzY29wZS5zY2hlbWEgPSBLdWJlcm5ldGVzU2NoZW1hO1xuICAgICAgICAkc2NvcGUuY29uZmlnID0gS3ViZXJuZXRlc1NjaGVtYS5kZWZpbml0aW9ucy5vc19idWlsZF9CdWlsZDtcblxuICAgICAgICBLdWJlcm5ldGVzLmluaXRTaGFyZWQoJHNjb3BlLCAkbG9jYXRpb24sICRodHRwLCAkdGltZW91dCwgJHJvdXRlUGFyYW1zLCBLdWJlcm5ldGVzTW9kZWwsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc0FwaVVSTCk7XG5cbiAgICAgICAgJHNjb3BlLiRvbigna3ViZXJuZXRlc01vZGVsVXBkYXRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB1cGRhdGVEYXRhKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRzY29wZS4kb24oJyRyb3V0ZVVwZGF0ZScsICgkZXZlbnQpID0+IHtcbiAgICAgICAgICB1cGRhdGVEYXRhKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHVwZGF0ZURhdGEoKTtcblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVEYXRhKCkge1xuICAgICAgICAgICRzY29wZS5pdGVtID0gbnVsbDtcbiAgICAgICAgICBpZiAoJHNjb3BlLmlkKSB7XG4gICAgICAgICAgICB2YXIgdXJsID0gYnVpbGRSZXN0VXJsKCRzY29wZS5pZCk7XG4gICAgICAgICAgICAkaHR0cC5nZXQodXJsKS5cbiAgICAgICAgICAgICAgc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgJHNjb3BlLmVudGl0eSA9IGVucmljaEJ1aWxkKGRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkc2NvcGUuZmV0Y2hlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgQ29yZS4kYXBwbHkoJHNjb3BlKTtcbiAgICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICAgIGVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgICAgIGxvZy53YXJuKFwiRmFpbGVkIHRvIGxvYWQgXCIgKyB1cmwgKyBcIiBcIiArIGRhdGEgKyBcIiBcIiArIHN0YXR1cyk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkc2NvcGUuZmV0Y2hlZCA9IHRydWU7XG4gICAgICAgICAgICBDb3JlLiRhcHBseSgkc2NvcGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfV0pO1xufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNIZWxwZXJzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNQbHVnaW4udHNcIi8+XG5cbm1vZHVsZSBLdWJlcm5ldGVzIHtcblxuICBleHBvcnQgdmFyIEJ1aWxkQ29uZmlnQ29udHJvbGxlciA9IGNvbnRyb2xsZXIoXCJCdWlsZENvbmZpZ0NvbnRyb2xsZXJcIixcbiAgICBbXCIkc2NvcGVcIiwgXCJLdWJlcm5ldGVzTW9kZWxcIiwgXCJLdWJlcm5ldGVzU3RhdGVcIiwgXCJLdWJlcm5ldGVzU2NoZW1hXCIsIFwiJHRlbXBsYXRlQ2FjaGVcIiwgXCIkbG9jYXRpb25cIiwgXCIkcm91dGVQYXJhbXNcIiwgXCIkaHR0cFwiLCBcIiR0aW1lb3V0XCIsIFwiS3ViZXJuZXRlc0FwaVVSTFwiLFxuICAgICAgKCRzY29wZSwgS3ViZXJuZXRlc01vZGVsOkt1YmVybmV0ZXMuS3ViZXJuZXRlc01vZGVsU2VydmljZSwgS3ViZXJuZXRlc1N0YXRlLCBLdWJlcm5ldGVzU2NoZW1hLFxuICAgICAgICR0ZW1wbGF0ZUNhY2hlOm5nLklUZW1wbGF0ZUNhY2hlU2VydmljZSwgJGxvY2F0aW9uOm5nLklMb2NhdGlvblNlcnZpY2UsICRyb3V0ZVBhcmFtcywgJGh0dHAsICR0aW1lb3V0LCBLdWJlcm5ldGVzQXBpVVJMKSA9PiB7XG5cbiAgICAgICAgJHNjb3BlLmt1YmVybmV0ZXMgPSBLdWJlcm5ldGVzU3RhdGU7XG4gICAgICAgICRzY29wZS5tb2RlbCA9IEt1YmVybmV0ZXNNb2RlbDtcbiAgICAgICAgJHNjb3BlLmlkID0gJHJvdXRlUGFyYW1zW1wiaWRcIl07XG4gICAgICAgICRzY29wZS5zY2hlbWEgPSBLdWJlcm5ldGVzU2NoZW1hO1xuICAgICAgICAkc2NvcGUuY29uZmlnID0gS3ViZXJuZXRlc1NjaGVtYS5kZWZpbml0aW9ucy5vc19idWlsZF9CdWlsZENvbmZpZztcblxuICAgICAgICBLdWJlcm5ldGVzLmluaXRTaGFyZWQoJHNjb3BlLCAkbG9jYXRpb24sICRodHRwLCAkdGltZW91dCwgJHJvdXRlUGFyYW1zLCBLdWJlcm5ldGVzTW9kZWwsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc0FwaVVSTCk7XG5cbiAgICAgICAgJHNjb3BlLiRvbigna3ViZXJuZXRlc01vZGVsVXBkYXRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB1cGRhdGVEYXRhKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRzY29wZS4kb24oJyRyb3V0ZVVwZGF0ZScsICgkZXZlbnQpID0+IHtcbiAgICAgICAgICB1cGRhdGVEYXRhKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHVwZGF0ZURhdGEoKTtcblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVEYXRhKCkge1xuICAgICAgICAgICRzY29wZS5pdGVtID0gbnVsbDtcbiAgICAgICAgICBpZiAoJHNjb3BlLmlkKSB7XG4gICAgICAgICAgICB2YXIgdXJsID0gYnVpbGRDb25maWdSZXN0VXJsKCRzY29wZS5pZCk7XG4gICAgICAgICAgICAkaHR0cC5nZXQodXJsKS5cbiAgICAgICAgICAgICAgc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgJHNjb3BlLmVudGl0eSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICB2YXIgc29ydGVkQnVpbGRzID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgIGVucmljaEJ1aWxkQ29uZmlnKGRhdGEsIHNvcnRlZEJ1aWxkcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICRzY29wZS5mZXRjaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBDb3JlLiRhcHBseSgkc2NvcGUpO1xuICAgICAgICAgICAgICB9KS5cbiAgICAgICAgICAgICAgZXJyb3IoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgbG9nLndhcm4oXCJGYWlsZWQgdG8gbG9hZCBcIiArIHVybCArIFwiIFwiICsgZGF0YSArIFwiIFwiICsgc3RhdHVzKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRzY29wZS5mZXRjaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XSk7XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vaW5jbHVkZXMudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwia3ViZXJuZXRlc0hlbHBlcnMudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwia3ViZXJuZXRlc1BsdWdpbi50c1wiLz5cblxubW9kdWxlIEt1YmVybmV0ZXMge1xuXG4gIGV4cG9ydCB2YXIgQnVpbGRDb25maWdFZGl0Q29udHJvbGxlciA9IGNvbnRyb2xsZXIoXCJCdWlsZENvbmZpZ0VkaXRDb250cm9sbGVyXCIsXG4gICAgW1wiJHNjb3BlXCIsIFwiS3ViZXJuZXRlc01vZGVsXCIsIFwiS3ViZXJuZXRlc1N0YXRlXCIsIFwiS3ViZXJuZXRlc1NjaGVtYVwiLCBcIiR0ZW1wbGF0ZUNhY2hlXCIsIFwiJGxvY2F0aW9uXCIsIFwiJHJvdXRlUGFyYW1zXCIsIFwiJGh0dHBcIiwgXCIkdGltZW91dFwiLCBcIkt1YmVybmV0ZXNBcGlVUkxcIixcbiAgICAgICgkc2NvcGUsIEt1YmVybmV0ZXNNb2RlbDpLdWJlcm5ldGVzLkt1YmVybmV0ZXNNb2RlbFNlcnZpY2UsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc1NjaGVtYSxcbiAgICAgICAkdGVtcGxhdGVDYWNoZTpuZy5JVGVtcGxhdGVDYWNoZVNlcnZpY2UsICRsb2NhdGlvbjpuZy5JTG9jYXRpb25TZXJ2aWNlLCAkcm91dGVQYXJhbXMsICRodHRwLCAkdGltZW91dCwgS3ViZXJuZXRlc0FwaVVSTCkgPT4ge1xuXG4gICAgICAgICRzY29wZS5rdWJlcm5ldGVzID0gS3ViZXJuZXRlc1N0YXRlO1xuICAgICAgICAkc2NvcGUubW9kZWwgPSBLdWJlcm5ldGVzTW9kZWw7XG4gICAgICAgICRzY29wZS5pZCA9ICRyb3V0ZVBhcmFtc1tcImlkXCJdO1xuICAgICAgICAkc2NvcGUuc2NoZW1hID0gS3ViZXJuZXRlc1NjaGVtYTtcbiAgICAgICAgJHNjb3BlLmNvbmZpZyA9IEt1YmVybmV0ZXNTY2hlbWEuZGVmaW5pdGlvbnMub3NfYnVpbGRfQnVpbGRDb25maWc7XG5cbiAgICAgICAgS3ViZXJuZXRlcy5pbml0U2hhcmVkKCRzY29wZSwgJGxvY2F0aW9uLCAkaHR0cCwgJHRpbWVvdXQsICRyb3V0ZVBhcmFtcywgS3ViZXJuZXRlc01vZGVsLCBLdWJlcm5ldGVzU3RhdGUsIEt1YmVybmV0ZXNBcGlVUkwpO1xuXG4gICAgICAgICRzY29wZS4kb24oJ2t1YmVybmV0ZXNNb2RlbFVwZGF0ZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdXBkYXRlRGF0YSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICAkc2NvcGUuJG9uKCckcm91dGVVcGRhdGUnLCAoJGV2ZW50KSA9PiB7XG4gICAgICAgICAgdXBkYXRlRGF0YSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICB1cGRhdGVEYXRhKCk7XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlRGF0YSgpIHtcbiAgICAgICAgICAkc2NvcGUuaXRlbSA9IG51bGw7XG4gICAgICAgICAgaWYgKCRzY29wZS5pZCkge1xuICAgICAgICAgICAgdmFyIHVybCA9IGJ1aWxkQ29uZmlnUmVzdFVybDtcbiAgICAgICAgICAgICRodHRwLmdldCh1cmwpLlxuICAgICAgICAgICAgICBzdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAkc2NvcGUuZW50aXR5ID0gZGF0YTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJHNjb3BlLmZldGNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgICBlcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgICAgICBsb2cud2FybihcIkZhaWxlZCB0byBsb2FkIFwiICsgdXJsICsgXCIgXCIgKyBkYXRhICsgXCIgXCIgKyBzdGF0dXMpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJHNjb3BlLmZldGNoZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAvLyBUT0RPIGRlZmF1bHQgdG8gdGhlIHJpZ2h0IHJlZ2lzdHJ5IFVSTC4uLlxuICAgICAgICAgICAgdmFyIGRlZmF1bHRSZWdpc3RyeSA9IFwiMTcyLjMwLjE3LjE4OTo1MDAwXCI7XG5cbiAgICAgICAgICAgICRzY29wZS5lbnRpdHkgPSB7XG4gICAgICAgICAgICAgIFwiYXBpVmVyc2lvblwiOiBcInYxYmV0YTFcIixcbiAgICAgICAgICAgICAgXCJraW5kXCI6IFwiQnVpbGRDb25maWdcIixcbiAgICAgICAgICAgICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgXCJsYWJlbHNcIjoge1xuICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwicGFyYW1ldGVyc1wiOiB7XG4gICAgICAgICAgICAgICAgXCJvdXRwdXRcIjoge1xuICAgICAgICAgICAgICAgICAgXCJpbWFnZVRhZ1wiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgXCJyZWdpc3RyeVwiOiBkZWZhdWx0UmVnaXN0cnlcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwic291cmNlXCI6IHtcbiAgICAgICAgICAgICAgICAgIFwiZ2l0XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ1cmlcIjogXCJcIlxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIkdpdFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcInN0cmF0ZWd5XCI6IHtcbiAgICAgICAgICAgICAgICAgIFwic3RpU3RyYXRlZ3lcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImJ1aWxkZXJJbWFnZVwiOiBcImZhYnJpYzgvYmFzZS1zdGlcIlxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIlNUSVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcInRyaWdnZXJzXCI6IFtdXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgQ29yZS4kYXBwbHkoJHNjb3BlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1dKTtcbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9pbmNsdWRlcy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzUGx1Z2luLnRzXCIvPlxuXG5tb2R1bGUgS3ViZXJuZXRlcyB7XG5cbiAgZXhwb3J0IHZhciBCdWlsZENvbmZpZ3NDb250cm9sbGVyID0gY29udHJvbGxlcihcIkJ1aWxkQ29uZmlnc0NvbnRyb2xsZXJcIiwgW1wiJHNjb3BlXCIsIFwiS3ViZXJuZXRlc01vZGVsXCIsIFwiS3ViZXJuZXRlc0J1aWxkc1wiLCBcIkt1YmVybmV0ZXNTdGF0ZVwiLCBcIiRkaWFsb2dcIiwgXCIkd2luZG93XCIsIFwiJHRlbXBsYXRlQ2FjaGVcIiwgXCIkcm91dGVQYXJhbXNcIiwgXCIkbG9jYXRpb25cIiwgXCJsb2NhbFN0b3JhZ2VcIiwgXCIkaHR0cFwiLCBcIiR0aW1lb3V0XCIsIFwiS3ViZXJuZXRlc0FwaVVSTFwiLFxuICAgICgkc2NvcGUsIEt1YmVybmV0ZXNNb2RlbDpLdWJlcm5ldGVzLkt1YmVybmV0ZXNNb2RlbFNlcnZpY2UsIEt1YmVybmV0ZXNCdWlsZHMsIEt1YmVybmV0ZXNTdGF0ZSwgJGRpYWxvZywgJHdpbmRvdywgJHRlbXBsYXRlQ2FjaGUsICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uOm5nLklMb2NhdGlvblNlcnZpY2UsIGxvY2FsU3RvcmFnZSwgJGh0dHAsICR0aW1lb3V0LCBLdWJlcm5ldGVzQXBpVVJMKSA9PiB7XG5cbiAgICAgICRzY29wZS5rdWJlcm5ldGVzID0gS3ViZXJuZXRlc1N0YXRlO1xuICAgICAgJHNjb3BlLm1vZGVsID0gS3ViZXJuZXRlc01vZGVsO1xuICAgICAgJHNjb3BlLkt1YmVybmV0ZXNCdWlsZHMgPSBLdWJlcm5ldGVzQnVpbGRzO1xuICAgICAgJHNjb3BlLiRvbigna3ViZXJuZXRlc01vZGVsVXBkYXRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgQ29yZS4kYXBwbHkoJHNjb3BlKTtcbiAgICAgIH0pO1xuXG4gICAgICAkc2NvcGUudGFibGVDb25maWcgPSB7XG4gICAgICAgIGRhdGE6ICdidWlsZENvbmZpZ3MnLFxuICAgICAgICBzaG93U2VsZWN0aW9uQ2hlY2tib3g6IHRydWUsXG4gICAgICAgIGVuYWJsZVJvd0NsaWNrU2VsZWN0aW9uOiBmYWxzZSxcbiAgICAgICAgbXVsdGlTZWxlY3Q6IHRydWUsXG4gICAgICAgIHNlbGVjdGVkSXRlbXM6IFtdLFxuICAgICAgICBmaWx0ZXJPcHRpb25zOiB7XG4gICAgICAgICAgZmlsdGVyVGV4dDogJGxvY2F0aW9uLnNlYXJjaCgpW1wicVwiXSB8fCAnJ1xuICAgICAgICB9LFxuICAgICAgICBjb2x1bW5EZWZzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZmllbGQ6ICdtZXRhZGF0YS5uYW1lJyxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnTmFtZScsXG4gICAgICAgICAgICBjZWxsVGVtcGxhdGU6ICR0ZW1wbGF0ZUNhY2hlLmdldChcImJ1aWxkQ29uZmlnTGlua1RlbXBsYXRlLmh0bWxcIilcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGZpZWxkOiAncGFyYW1ldGVycy5zb3VyY2UudHlwZScsXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogJ1NvdXJjZSdcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGZpZWxkOiAncGFyYW1ldGVycy5zb3VyY2UuZ2l0LnVyaScsXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogJ1JlcG9zaXRvcnknXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBmaWVsZDogJ3BhcmFtZXRlcnMuc3RyYXRlZ3kudHlwZScsXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogJ1N0cmF0ZWd5J1xuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgZmllbGQ6ICdwYXJhbWV0ZXJzLnN0cmF0ZWd5LnN0aVN0cmF0ZWd5LmltYWdlJyxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnU291cmNlIEltYWdlJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgZmllbGQ6ICdwYXJhbWV0ZXJzLm91dHB1dC5pbWFnZVRhZycsXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogJ091dHB1dCBJbWFnZSdcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH07XG5cbiAgICAgIEt1YmVybmV0ZXMuaW5pdFNoYXJlZCgkc2NvcGUsICRsb2NhdGlvbiwgJGh0dHAsICR0aW1lb3V0LCAkcm91dGVQYXJhbXMsIEt1YmVybmV0ZXNNb2RlbCwgS3ViZXJuZXRlc1N0YXRlLCBLdWJlcm5ldGVzQXBpVVJMKTtcblxuICAgICAgJHNjb3BlLmRlbGV0ZVByb21wdCA9IChzZWxlY3RlZCkgPT4ge1xuICAgICAgICBVSS5tdWx0aUl0ZW1Db25maXJtQWN0aW9uRGlhbG9nKDxVSS5NdWx0aUl0ZW1Db25maXJtQWN0aW9uT3B0aW9ucz57XG4gICAgICAgICAgY29sbGVjdGlvbjogc2VsZWN0ZWQsXG4gICAgICAgICAgaW5kZXg6ICckbmFtZScsXG4gICAgICAgICAgb25DbG9zZTogKHJlc3VsdDpib29sZWFuKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgIGZ1bmN0aW9uIGRlbGV0ZVNlbGVjdGVkKHNlbGVjdGVkLCBuZXh0KSB7XG4gICAgICAgICAgICAgICAgaWYgKG5leHQpIHtcbiAgICAgICAgICAgICAgICAgIGRlbGV0ZUVudGl0eShuZXh0LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZVNlbGVjdGVkKHNlbGVjdGVkLCBzZWxlY3RlZC5zaGlmdCgpKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB1cGRhdGVEYXRhKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZGVsZXRlU2VsZWN0ZWQoc2VsZWN0ZWQsIHNlbGVjdGVkLnNoaWZ0KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgdGl0bGU6ICdEZWxldGUgQnVpbGQgQ29uZmlncz8nLFxuICAgICAgICAgIGFjdGlvbjogJ1RoZSBmb2xsb3dpbmcgQnVpbGQgQ29uZmlncyB3aWxsIGJlIGRlbGV0ZWQ6JyxcbiAgICAgICAgICBva1RleHQ6ICdEZWxldGUnLFxuICAgICAgICAgIG9rQ2xhc3M6ICdidG4tZGFuZ2VyJyxcbiAgICAgICAgICBjdXN0b206IFwiVGhpcyBvcGVyYXRpb24gaXMgcGVybWFuZW50IG9uY2UgY29tcGxldGVkIVwiLFxuICAgICAgICAgIGN1c3RvbUNsYXNzOiBcImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIlxuICAgICAgICB9KS5vcGVuKCk7XG4gICAgICB9O1xuXG4gICAgICBmdW5jdGlvbiBkZWxldGVFbnRpdHkoc2VsZWN0aW9uLCBuZXh0Q2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG5hbWUgPSAoc2VsZWN0aW9uIHx8IHt9KS4kbmFtZTtcbiAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIkFib3V0IHRvIGRlbGV0ZSBidWlsZCBjb25maWc6IFwiICsgbmFtZSk7XG4gICAgICAgICAgdmFyIHVybCA9IGJ1aWxkQ29uZmlnUmVzdFVybChuYW1lKTtcbiAgICAgICAgICAkaHR0cC5kZWxldGUodXJsKS5cbiAgICAgICAgICAgIHN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICAgIG5leHRDYWxsYmFjaygpO1xuICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICBlcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgICAgbG9nLndhcm4oXCJGYWlsZWQgdG8gZGVsZXRlIGJ1aWxkIGNvbmZpZyBvbiBcIiArIHVybCArIFwiIFwiICsgZGF0YSArIFwiIFwiICsgc3RhdHVzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwid2FybmluZzogbm8gbmFtZSBmb3Igc2VsZWN0aW9uOiBcIiArIGFuZ3VsYXIudG9Kc29uKHNlbGVjdGlvbikpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZURhdGEoKSB7XG4gICAgICAgIHZhciB1cmwgPSBidWlsZENvbmZpZ3NSZXN0VVJMO1xuICAgICAgICAkaHR0cC5nZXQodXJsKS5cbiAgICAgICAgICBzdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcImdvdCBkYXRhIFwiICsgYW5ndWxhci50b0pzb24oZGF0YSwgdHJ1ZSkpO1xuICAgICAgICAgICAgICB2YXIgc29ydGVkQnVpbGRzID0gbnVsbDtcbiAgICAgICAgICAgICAgJHNjb3BlLmJ1aWxkQ29uZmlncyA9IGVucmljaEJ1aWxkQ29uZmlncyhkYXRhLml0ZW1zLCBzb3J0ZWRCdWlsZHMpO1xuICAgICAgICAgICAgICAkc2NvcGUuZmV0Y2hlZCA9IHRydWU7XG4gICAgICAgICAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkuXG4gICAgICAgICAgZXJyb3IoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICBsb2cud2FybihcIkZhaWxlZCB0byBsb2FkIFwiICsgdXJsICsgXCIgXCIgKyBkYXRhICsgXCIgXCIgKyBzdGF0dXMpO1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGVEYXRhKCk7XG4gICAgfV0pO1xufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNIZWxwZXJzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNQbHVnaW4udHNcIi8+XG5cbm1vZHVsZSBLdWJlcm5ldGVzIHtcblxuICBleHBvcnQgdmFyIEJ1aWxkTG9nc0NvbnRyb2xsZXIgPSBjb250cm9sbGVyKFwiQnVpbGRMb2dzQ29udHJvbGxlclwiLFxuICAgIFtcIiRzY29wZVwiLCBcIkt1YmVybmV0ZXNNb2RlbFwiLCBcIkt1YmVybmV0ZXNTdGF0ZVwiLCBcIkt1YmVybmV0ZXNTY2hlbWFcIiwgXCIkdGVtcGxhdGVDYWNoZVwiLCBcIiRsb2NhdGlvblwiLCBcIiRyb3V0ZVBhcmFtc1wiLCBcIiRodHRwXCIsIFwiJHRpbWVvdXRcIiwgXCJLdWJlcm5ldGVzQXBpVVJMXCIsXG4gICAgICAoJHNjb3BlLCBLdWJlcm5ldGVzTW9kZWw6S3ViZXJuZXRlcy5LdWJlcm5ldGVzTW9kZWxTZXJ2aWNlLCBLdWJlcm5ldGVzU3RhdGUsIEt1YmVybmV0ZXNTY2hlbWEsXG4gICAgICAgJHRlbXBsYXRlQ2FjaGU6bmcuSVRlbXBsYXRlQ2FjaGVTZXJ2aWNlLCAkbG9jYXRpb246bmcuSUxvY2F0aW9uU2VydmljZSwgJHJvdXRlUGFyYW1zLCAkaHR0cCwgJHRpbWVvdXQsIEt1YmVybmV0ZXNBcGlVUkwpID0+IHtcblxuICAgICAgICAkc2NvcGUua3ViZXJuZXRlcyA9IEt1YmVybmV0ZXNTdGF0ZTtcbiAgICAgICAgJHNjb3BlLm1vZGVsID0gS3ViZXJuZXRlc01vZGVsO1xuICAgICAgICAkc2NvcGUuaWQgPSAkcm91dGVQYXJhbXNbXCJpZFwiXTtcbiAgICAgICAgJHNjb3BlLnNjaGVtYSA9IEt1YmVybmV0ZXNTY2hlbWE7XG4gICAgICAgICRzY29wZS5jb25maWcgPSBLdWJlcm5ldGVzU2NoZW1hLmRlZmluaXRpb25zLm9zX2J1aWxkX0J1aWxkO1xuXG4gICAgICAgIEt1YmVybmV0ZXMuaW5pdFNoYXJlZCgkc2NvcGUsICRsb2NhdGlvbiwgJGh0dHAsICR0aW1lb3V0LCAkcm91dGVQYXJhbXMsIEt1YmVybmV0ZXNNb2RlbCwgS3ViZXJuZXRlc1N0YXRlLCBLdWJlcm5ldGVzQXBpVVJMKTtcblxuICAgICAgICAkc2NvcGUuJG9uKCdrdWJlcm5ldGVzTW9kZWxVcGRhdGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHVwZGF0ZURhdGEoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHNjb3BlLiRvbignJHJvdXRlVXBkYXRlJywgKCRldmVudCkgPT4ge1xuICAgICAgICAgIHVwZGF0ZURhdGEoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHNjb3BlLmxvZ3NUZXh0ID0gXCJMb2FkaW5nIGxvZ3MuLi5cIjtcblxuICAgICAgICB1cGRhdGVEYXRhKCk7XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlRGF0YSgpIHtcbiAgICAgICAgICAkc2NvcGUuaXRlbSA9IG51bGw7XG4gICAgICAgICAgaWYgKCRzY29wZS5pZCkge1xuICAgICAgICAgICAgdmFyIHVybCA9IGJ1aWxkUmVzdFVybCgkc2NvcGUuaWQpO1xuICAgICAgICAgICAgJGh0dHAuZ2V0KHVybCkuXG4gICAgICAgICAgICAgIHN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICRzY29wZS5lbnRpdHkgPSBlbnJpY2hCdWlsZChkYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJHNjb3BlLmZldGNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgICBlcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgICAgICBsb2cud2FybihcIkZhaWxlZCB0byBsb2FkIFwiICsgdXJsICsgXCIgXCIgKyBkYXRhICsgXCIgXCIgKyBzdGF0dXMpO1xuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdXJsID0gYnVpbGRMb2dzUmVzdFVybCgkc2NvcGUuaWQpO1xuICAgICAgICAgICAgJGh0dHAuZ2V0KHVybCkuXG4gICAgICAgICAgICAgIHN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgICAgICRzY29wZS5sb2dzVGV4dCA9IGRhdGE7XG4gICAgICAgICAgICAgICAgQ29yZS4kYXBwbHkoJHNjb3BlKTtcbiAgICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICAgIGVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubG9nc1RleHQgPSBcIkZhaWxlZCB0byBsb2FkIGxvZ3MgZnJvbTogXCIgKyB1cmwgKyBcIiBcIiArIGRhdGEgKyBcIiBzdGF0dXM6IFwiICsgc3RhdHVzO1xuICAgICAgICAgICAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgICBjYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubG9nc1RleHQgPSBcIkZhaWxlZCB0byBsb2FkIGxvZ3M6IFwiICsgYW5ndWxhci50b0pzb24oZXJyb3IsIHRydWUpO1xuICAgICAgICAgICAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkc2NvcGUuZmV0Y2hlZCA9IHRydWU7XG4gICAgICAgICAgICBDb3JlLiRhcHBseSgkc2NvcGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfV0pO1xufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNQbHVnaW4udHNcIi8+XG5cbm1vZHVsZSBLdWJlcm5ldGVzIHtcblxuICBleHBvcnQgdmFyIEJ1aWxkc0NvbnRyb2xsZXIgPSBjb250cm9sbGVyKFwiQnVpbGRzQ29udHJvbGxlclwiLCBbXCIkc2NvcGVcIiwgXCJLdWJlcm5ldGVzTW9kZWxcIiwgXCJLdWJlcm5ldGVzQnVpbGRzXCIsIFwiS3ViZXJuZXRlc1N0YXRlXCIsIFwiJGRpYWxvZ1wiLCBcIiR3aW5kb3dcIiwgXCIkdGVtcGxhdGVDYWNoZVwiLCBcIiRyb3V0ZVBhcmFtc1wiLCBcIiRsb2NhdGlvblwiLCBcImxvY2FsU3RvcmFnZVwiLCBcIiRodHRwXCIsIFwiJHRpbWVvdXRcIiwgXCJLdWJlcm5ldGVzQXBpVVJMXCIsXG4gICAgKCRzY29wZSwgS3ViZXJuZXRlc01vZGVsOkt1YmVybmV0ZXMuS3ViZXJuZXRlc01vZGVsU2VydmljZSwgS3ViZXJuZXRlc0J1aWxkcywgS3ViZXJuZXRlc1N0YXRlLCAkZGlhbG9nLCAkd2luZG93LCAkdGVtcGxhdGVDYWNoZSwgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb246bmcuSUxvY2F0aW9uU2VydmljZSwgbG9jYWxTdG9yYWdlLCAkaHR0cCwgJHRpbWVvdXQsIEt1YmVybmV0ZXNBcGlVUkwpID0+IHtcblxuICAgICAgJHNjb3BlLmt1YmVybmV0ZXMgPSBLdWJlcm5ldGVzU3RhdGU7XG4gICAgICAkc2NvcGUubW9kZWwgPSBLdWJlcm5ldGVzTW9kZWw7XG4gICAgICAkc2NvcGUuS3ViZXJuZXRlc0J1aWxkcyA9IEt1YmVybmV0ZXNCdWlsZHM7XG4gICAgICAkc2NvcGUuJG9uKCdrdWJlcm5ldGVzTW9kZWxVcGRhdGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBDb3JlLiRhcHBseSgkc2NvcGUpO1xuICAgICAgfSk7XG5cbiAgICAgICRzY29wZS50YWJsZUNvbmZpZyA9IHtcbiAgICAgICAgZGF0YTogJ2J1aWxkcycsXG4gICAgICAgIHNob3dTZWxlY3Rpb25DaGVja2JveDogdHJ1ZSxcbiAgICAgICAgZW5hYmxlUm93Q2xpY2tTZWxlY3Rpb246IGZhbHNlLFxuICAgICAgICBtdWx0aVNlbGVjdDogdHJ1ZSxcbiAgICAgICAgc2VsZWN0ZWRJdGVtczogW10sXG4gICAgICAgIGZpbHRlck9wdGlvbnM6IHtcbiAgICAgICAgICBmaWx0ZXJUZXh0OiAkbG9jYXRpb24uc2VhcmNoKClbXCJxXCJdIHx8ICcnXG4gICAgICAgIH0sXG4gICAgICAgIGNvbHVtbkRlZnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBmaWVsZDogJ21ldGFkYXRhLm5hbWUnLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6ICdOYW1lJyxcbiAgICAgICAgICAgIGNlbGxUZW1wbGF0ZTogJHRlbXBsYXRlQ2FjaGUuZ2V0KFwiYnVpbGRMaW5rVGVtcGxhdGUuaHRtbFwiKVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgZmllbGQ6ICckY3JlYXRpb25EYXRlJyxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnVGltZScsXG4gICAgICAgICAgICBkZWZhdWx0U29ydDogdHJ1ZSxcbiAgICAgICAgICAgIGNlbGxUZW1wbGF0ZTogJHRlbXBsYXRlQ2FjaGUuZ2V0KFwiYnVpbGRUaW1lVGVtcGxhdGUuaHRtbFwiKVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgZmllbGQ6ICdzdGF0dXMnLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6ICdTdGF0dXMnLFxuICAgICAgICAgICAgY2VsbFRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoXCJidWlsZFN0YXR1c1RlbXBsYXRlLmh0bWxcIilcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGZpZWxkOiAnJGxvZ3NMaW5rJyxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnTG9ncycsXG4gICAgICAgICAgICBjZWxsVGVtcGxhdGU6ICR0ZW1wbGF0ZUNhY2hlLmdldChcImJ1aWxkTG9nc1RlbXBsYXRlLmh0bWxcIilcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGZpZWxkOiAnJHBvZExpbmsnLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6ICdCdWlsZCBQb2QnLFxuICAgICAgICAgICAgY2VsbFRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoXCJidWlsZFBvZFRlbXBsYXRlLmh0bWxcIilcbiAgICAgICAgICB9LFxuLypcbiAgICAgICAgICB7XG4gICAgICAgICAgICBmaWVsZDogJ3BhcmFtZXRlcnMuc291cmNlLnR5cGUnLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6ICdTb3VyY2UnXG4gICAgICAgICAgfSxcbiovXG4gICAgICAgICAge1xuICAgICAgICAgICAgZmllbGQ6ICdwYXJhbWV0ZXJzLnNvdXJjZS5naXQudXJpJyxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnUmVwb3NpdG9yeScsXG4gICAgICAgICAgICBjZWxsVGVtcGxhdGU6ICR0ZW1wbGF0ZUNhY2hlLmdldChcImJ1aWxkUmVwb3NpdG9yeVRlbXBsYXRlLmh0bWxcIilcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGZpZWxkOiAncGFyYW1ldGVycy5zdHJhdGVneS50eXBlJyxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnU3RyYXRlZ3knXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBmaWVsZDogJ3BhcmFtZXRlcnMuc3RyYXRlZ3kuc3RpU3RyYXRlZ3kuaW1hZ2UnLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6ICdTb3VyY2UgSW1hZ2UnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBmaWVsZDogJ3BhcmFtZXRlcnMub3V0cHV0LmltYWdlVGFnJyxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnT3V0cHV0IEltYWdlJ1xuICAgICAgICAgIH1dXG4gICAgICB9O1xuXG4gICAgICBLdWJlcm5ldGVzLmluaXRTaGFyZWQoJHNjb3BlLCAkbG9jYXRpb24sICRodHRwLCAkdGltZW91dCwgJHJvdXRlUGFyYW1zLCBLdWJlcm5ldGVzTW9kZWwsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc0FwaVVSTCk7XG5cbiAgICAgICRzY29wZS4ka2VlcFBvbGxpbmcgPSAoKSA9PiBrZWVwUG9sbGluZ01vZGVsO1xuICAgICAgJHNjb3BlLmZldGNoID0gUG9sbEhlbHBlcnMuc2V0dXBQb2xsaW5nKCRzY29wZSwgKG5leHQ6KCkgPT4gdm9pZCkgPT4ge1xuICAgICAgICB2YXIgdXJsID0gYnVpbGRzUmVzdFVSTDtcbiAgICAgICAgJGh0dHAuZ2V0KHVybCkuXG4gICAgICAgICAgc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJnb3QgZGF0YSBcIiArIGFuZ3VsYXIudG9Kc29uKGRhdGEsIHRydWUpKTtcbiAgICAgICAgICAgICAgJHNjb3BlLmJ1aWxkcyA9IGVucmljaEJ1aWxkcyhkYXRhLml0ZW1zKTtcbiAgICAgICAgICAgICAgJHNjb3BlLmZldGNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQ29yZS4kYXBwbHkoJHNjb3BlKTtcbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICB9KS5cbiAgICAgICAgICBlcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgIGxvZy53YXJuKFwiRmFpbGVkIHRvIGxvYWQgXCIgKyB1cmwgKyBcIiBcIiArIGRhdGEgKyBcIiBcIiArIHN0YXR1cyk7XG4gICAgICAgICAgICBDb3JlLiRhcHBseSgkc2NvcGUpO1xuICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgICRzY29wZS5mZXRjaCgpO1xuICAgIH1dKTtcbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9pbmNsdWRlcy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzSGVscGVycy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzUGx1Z2luLnRzXCIvPlxuXG5tb2R1bGUgS3ViZXJuZXRlcyB7XG5cbiAgLy8gY29udHJvbGxlciBmb3IgY29ubmVjdGluZyB0byBhIHJlbW90ZSBjb250YWluZXIgdmlhIGpvbG9raWFcbiAgZXhwb3J0IHZhciBDb25uZWN0Q29udHJvbGxlciA9IGNvbnRyb2xsZXIoXCJDb25uZWN0Q29udHJvbGxlclwiLCBbXG4gICAgXCIkc2NvcGVcIiwgXCJsb2NhbFN0b3JhZ2VcIiwgXCJ1c2VyRGV0YWlsc1wiLCBcIkNvbm5lY3REaWFsb2dTZXJ2aWNlXCIsXG4gICAgKCRzY29wZSwgbG9jYWxTdG9yYWdlLCB1c2VyRGV0YWlscywgQ29ubmVjdERpYWxvZ1NlcnZpY2UpID0+IHtcblxuICAgICAgJHNjb3BlLmNvbm5lY3QgPSBDb25uZWN0RGlhbG9nU2VydmljZTtcblxuICAgICAgJHNjb3BlLm9uT0sgPSAoKSA9PiB7XG4gICAgICAgIHZhciB1c2VyTmFtZSA9ICRzY29wZS5jb25uZWN0LnVzZXJOYW1lO1xuICAgICAgICB2YXIgcGFzc3dvcmQgPSAkc2NvcGUuY29ubmVjdC5wYXNzd29yZDtcbiAgICAgICAgaWYgKCF1c2VyRGV0YWlscy5wYXNzd29yZCkge1xuICAgICAgICAgIC8vIHRoaXMgY2FuIGdldCB1bnNldCBpZiB0aGUgdXNlciBoYXBwZW5zIHRvIHJlZnJlc2ggYW5kIGhhc24ndCBjaGVja2VkIHJlbWVtYmVyTWVcbiAgICAgICAgICB1c2VyRGV0YWlscy5wYXNzd29yZCA9IHBhc3N3b3JkO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkc2NvcGUuY29ubmVjdC5zYXZlQ3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAkc2NvcGUuY29ubmVjdC5zYXZlQ3JlZGVudGlhbHMgPSBmYWxzZTtcbiAgICAgICAgICBpZiAodXNlck5hbWUpIHtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZVsna3ViZXJlbnRlcy51c2VyTmFtZSddID0gdXNlck5hbWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwYXNzd29yZCkge1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlWydrdWJlcmVudGVzLnBhc3N3b3JkJ10gPSBwYXNzd29yZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbG9nLmluZm8oXCJDb25uZWN0aW5nIHRvIFwiICsgJHNjb3BlLmNvbm5lY3Quam9sb2tpYVVybCArIFwiIGZvciBjb250YWluZXI6IFwiICsgJHNjb3BlLmNvbm5lY3QuY29udGFpbmVyTmFtZSArIFwiIHVzZXI6IFwiICsgJHNjb3BlLmNvbm5lY3QudXNlck5hbWUpO1xuICAgICAgICB2YXIgb3B0aW9ucyA9IENvcmUuY3JlYXRlQ29ubmVjdE9wdGlvbnMoe1xuICAgICAgICAgIGpvbG9raWFVcmw6ICRzY29wZS5jb25uZWN0LmpvbG9raWFVcmwsXG4gICAgICAgICAgdXNlck5hbWU6IHVzZXJOYW1lLFxuICAgICAgICAgIHBhc3N3b3JkOiBwYXNzd29yZCxcbiAgICAgICAgICB1c2VQcm94eTogdHJ1ZSxcbiAgICAgICAgICB2aWV3OiAkc2NvcGUuY29ubmVjdC52aWV3LFxuICAgICAgICAgIG5hbWU6ICRzY29wZS5jb25uZWN0LmNvbnRhaW5lck5hbWVcbiAgICAgICAgfSk7XG4gICAgICAgIENvcmUuY29ubmVjdFRvU2VydmVyKGxvY2FsU3RvcmFnZSwgb3B0aW9ucyk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICRzY29wZS5jb25uZWN0LmRpYWxvZy5jbG9zZSgpO1xuICAgICAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgICAgIH0sIDEwMCk7XG4gICAgICB9O1xuXG4gICAgICAkc2NvcGUuZG9Db25uZWN0ID0gKGVudGl0eSkgPT4ge1xuICAgICAgICBpZiAodXNlckRldGFpbHMpIHtcbiAgICAgICAgICAkc2NvcGUuY29ubmVjdC51c2VyTmFtZSA9IHVzZXJEZXRhaWxzLnVzZXJuYW1lO1xuICAgICAgICAgICRzY29wZS5jb25uZWN0LnBhc3N3b3JkID0gdXNlckRldGFpbHMucGFzc3dvcmQ7XG4gICAgICAgIH1cbiAgICAgICAgJHNjb3BlLmNvbm5lY3Quam9sb2tpYVVybCA9IGVudGl0eS4kam9sb2tpYVVybDtcbiAgICAgICAgJHNjb3BlLmNvbm5lY3QuY29udGFpbmVyTmFtZSA9IGVudGl0eS5pZDtcbiAgICAgICAgLy8kc2NvcGUuY29ubmVjdC52aWV3ID0gXCIjL29wZW5sb2dzXCI7XG5cbiAgICAgICAgdmFyIGFsd2F5c1Byb21wdCA9IGxvY2FsU3RvcmFnZVsnZmFicmljQWx3YXlzUHJvbXB0J107XG4gICAgICAgIGlmICgoYWx3YXlzUHJvbXB0ICYmIGFsd2F5c1Byb21wdCAhPT0gXCJmYWxzZVwiKSB8fCAhJHNjb3BlLmNvbm5lY3QudXNlck5hbWUgfHwgISRzY29wZS5jb25uZWN0LnBhc3N3b3JkKSB7XG4gICAgICAgICAgJHNjb3BlLmNvbm5lY3QuZGlhbG9nLm9wZW4oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkc2NvcGUuY29ubmVjdC5vbk9LKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICB9XSk7XG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNIZWxwZXJzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNQbHVnaW4udHNcIi8+XG5cbm1vZHVsZSBLdWJlcm5ldGVzIHtcblxuICBleHBvcnQgdmFyIERlcGxveW1lbnRDb25maWdDb250cm9sbGVyID0gY29udHJvbGxlcihcIkRlcGxveW1lbnRDb25maWdDb250cm9sbGVyXCIsXG4gICAgW1wiJHNjb3BlXCIsIFwiS3ViZXJuZXRlc01vZGVsXCIsIFwiS3ViZXJuZXRlc1N0YXRlXCIsIFwiS3ViZXJuZXRlc1NjaGVtYVwiLCBcIiR0ZW1wbGF0ZUNhY2hlXCIsIFwiJGxvY2F0aW9uXCIsIFwiJHJvdXRlUGFyYW1zXCIsIFwiJGh0dHBcIiwgXCIkdGltZW91dFwiLCBcIkt1YmVybmV0ZXNBcGlVUkxcIixcbiAgICAgICgkc2NvcGUsIEt1YmVybmV0ZXNNb2RlbDpLdWJlcm5ldGVzLkt1YmVybmV0ZXNNb2RlbFNlcnZpY2UsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc1NjaGVtYSxcbiAgICAgICAkdGVtcGxhdGVDYWNoZTpuZy5JVGVtcGxhdGVDYWNoZVNlcnZpY2UsICRsb2NhdGlvbjpuZy5JTG9jYXRpb25TZXJ2aWNlLCAkcm91dGVQYXJhbXMsICRodHRwLCAkdGltZW91dCwgS3ViZXJuZXRlc0FwaVVSTCkgPT4ge1xuXG4gICAgICAgICRzY29wZS5rdWJlcm5ldGVzID0gS3ViZXJuZXRlc1N0YXRlO1xuICAgICAgICAkc2NvcGUubW9kZWwgPSBLdWJlcm5ldGVzTW9kZWw7XG4gICAgICAgICRzY29wZS5pZCA9ICRyb3V0ZVBhcmFtc1tcImlkXCJdO1xuICAgICAgICAkc2NvcGUuc2NoZW1hID0gS3ViZXJuZXRlc1NjaGVtYTtcbiAgICAgICAgJHNjb3BlLmNvbmZpZyA9IEt1YmVybmV0ZXNTY2hlbWEuZGVmaW5pdGlvbnMub3NfZGVwbG95X0RlcGxveW1lbnRDb25maWc7XG5cbiAgICAgICAgS3ViZXJuZXRlcy5pbml0U2hhcmVkKCRzY29wZSwgJGxvY2F0aW9uLCAkaHR0cCwgJHRpbWVvdXQsICRyb3V0ZVBhcmFtcywgS3ViZXJuZXRlc01vZGVsLCBLdWJlcm5ldGVzU3RhdGUsIEt1YmVybmV0ZXNBcGlVUkwpO1xuXG4gICAgICAgICRzY29wZS4kb24oJ2t1YmVybmV0ZXNNb2RlbFVwZGF0ZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdXBkYXRlRGF0YSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICAkc2NvcGUuJG9uKCckcm91dGVVcGRhdGUnLCAoJGV2ZW50KSA9PiB7XG4gICAgICAgICAgdXBkYXRlRGF0YSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICB1cGRhdGVEYXRhKCk7XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlRGF0YSgpIHtcbiAgICAgICAgICAkc2NvcGUuaXRlbSA9IG51bGw7XG4gICAgICAgICAgaWYgKCRzY29wZS5pZCkge1xuICAgICAgICAgICAgdmFyIHVybCA9IGRlcGxveW1lbnRDb25maWdSZXN0VXJsKCRzY29wZS5pZCk7XG4gICAgICAgICAgICAkaHR0cC5nZXQodXJsKS5cbiAgICAgICAgICAgICAgc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgJHNjb3BlLmVudGl0eSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICBlbnJpY2hEZXBsb3ltZW50Q29uZmlnKGRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkc2NvcGUuZmV0Y2hlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgQ29yZS4kYXBwbHkoJHNjb3BlKTtcbiAgICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICAgIGVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgICAgIGxvZy53YXJuKFwiRmFpbGVkIHRvIGxvYWQgXCIgKyB1cmwgKyBcIiBcIiArIGRhdGEgKyBcIiBcIiArIHN0YXR1cyk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkc2NvcGUuZmV0Y2hlZCA9IHRydWU7XG4gICAgICAgICAgICBDb3JlLiRhcHBseSgkc2NvcGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfV0pO1xufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNQbHVnaW4udHNcIi8+XG5cbm1vZHVsZSBLdWJlcm5ldGVzIHtcblxuICBleHBvcnQgdmFyIERlcGxveW1lbnRDb25maWdzQ29udHJvbGxlciA9IGNvbnRyb2xsZXIoXCJEZXBsb3ltZW50Q29uZmlnc0NvbnRyb2xsZXJcIiwgW1wiJHNjb3BlXCIsIFwiS3ViZXJuZXRlc01vZGVsXCIsIFwiS3ViZXJuZXRlc0J1aWxkc1wiLCBcIkt1YmVybmV0ZXNTdGF0ZVwiLCBcIiRkaWFsb2dcIiwgXCIkd2luZG93XCIsIFwiJHRlbXBsYXRlQ2FjaGVcIiwgXCIkcm91dGVQYXJhbXNcIiwgXCIkbG9jYXRpb25cIiwgXCJsb2NhbFN0b3JhZ2VcIiwgXCIkaHR0cFwiLCBcIiR0aW1lb3V0XCIsIFwiS3ViZXJuZXRlc0FwaVVSTFwiLFxuICAgICgkc2NvcGUsIEt1YmVybmV0ZXNNb2RlbDpLdWJlcm5ldGVzLkt1YmVybmV0ZXNNb2RlbFNlcnZpY2UsIEt1YmVybmV0ZXNCdWlsZHMsIEt1YmVybmV0ZXNTdGF0ZSwgJGRpYWxvZywgJHdpbmRvdywgJHRlbXBsYXRlQ2FjaGUsICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uOm5nLklMb2NhdGlvblNlcnZpY2UsIGxvY2FsU3RvcmFnZSwgJGh0dHAsICR0aW1lb3V0LCBLdWJlcm5ldGVzQXBpVVJMKSA9PiB7XG5cbiAgICAgICRzY29wZS5rdWJlcm5ldGVzID0gS3ViZXJuZXRlc1N0YXRlO1xuICAgICAgJHNjb3BlLm1vZGVsID0gS3ViZXJuZXRlc01vZGVsO1xuICAgICAgJHNjb3BlLkt1YmVybmV0ZXNCdWlsZHMgPSBLdWJlcm5ldGVzQnVpbGRzO1xuICAgICAgJHNjb3BlLiRvbigna3ViZXJuZXRlc01vZGVsVXBkYXRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgQ29yZS4kYXBwbHkoJHNjb3BlKTtcbiAgICAgIH0pO1xuICAgICAgJHNjb3BlLmxhYmVsQ2xhc3MgPSBjb250YWluZXJMYWJlbENsYXNzO1xuXG4gICAgICAkc2NvcGUudGFibGVDb25maWcgPSB7XG4gICAgICAgIGRhdGE6ICdkZXBsb3ltZW50Q29uZmlncycsXG4gICAgICAgIHNob3dTZWxlY3Rpb25DaGVja2JveDogdHJ1ZSxcbiAgICAgICAgZW5hYmxlUm93Q2xpY2tTZWxlY3Rpb246IGZhbHNlLFxuICAgICAgICBtdWx0aVNlbGVjdDogdHJ1ZSxcbiAgICAgICAgc2VsZWN0ZWRJdGVtczogW10sXG4gICAgICAgIGZpbHRlck9wdGlvbnM6IHtcbiAgICAgICAgICBmaWx0ZXJUZXh0OiAkbG9jYXRpb24uc2VhcmNoKClbXCJxXCJdIHx8ICcnXG4gICAgICAgIH0sXG4gICAgICAgIGNvbHVtbkRlZnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBmaWVsZDogJ21ldGFkYXRhLm5hbWUnLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6ICdOYW1lJyxcbiAgICAgICAgICAgIGNlbGxUZW1wbGF0ZTogJHRlbXBsYXRlQ2FjaGUuZ2V0KFwiZGVwbG95bWVudENvbmZpZ0xpbmtUZW1wbGF0ZS5odG1sXCIpXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBmaWVsZDogJ21ldGFkYXRhLm5hbWVzcGFjZScsXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogJ05hbWVzcGFjZSdcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGZpZWxkOiAnJGltYWdlQ2hhbmdlUGFyYW1zLmF1dG9tYXRpYycsXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogJ0F1dG9tYXRpYydcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGZpZWxkOiAnJGltYWdlQ2hhbmdlUGFyYW1zLiRjb250YWluZXJOYW1lcycsXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogJ0NvbnRhaW5lciBOYW1lcydcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGZpZWxkOiAnJGltYWdlQ2hhbmdlUGFyYW1zLmZyb20ubmFtZScsXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogJ0Zyb20gaW1hZ2UnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBmaWVsZDogJyRpbWFnZUNoYW5nZVBhcmFtcy50YWcnLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6ICdUYWcnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBmaWVsZDogJ3RlbXBsYXRlLmNvbnRyb2xsZXJUZW1wbGF0ZS5wb2RUZW1wbGF0ZS50YWdzJyxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnTGFiZWxzJyxcbiAgICAgICAgICAgIGNlbGxUZW1wbGF0ZTogJHRlbXBsYXRlQ2FjaGUuZ2V0KFwiZGVwbG95bWVudENvbmZpZ0xhYmVsVGVtcGxhdGUuaHRtbFwiKVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfTtcblxuICAgICAgS3ViZXJuZXRlcy5pbml0U2hhcmVkKCRzY29wZSwgJGxvY2F0aW9uLCAkaHR0cCwgJHRpbWVvdXQsICRyb3V0ZVBhcmFtcywgS3ViZXJuZXRlc01vZGVsLCBLdWJlcm5ldGVzU3RhdGUsIEt1YmVybmV0ZXNBcGlVUkwpO1xuXG4gICAgICAkc2NvcGUuZGVsZXRlUHJvbXB0ID0gKHNlbGVjdGVkKSA9PiB7XG4gICAgICAgIFVJLm11bHRpSXRlbUNvbmZpcm1BY3Rpb25EaWFsb2coPFVJLk11bHRpSXRlbUNvbmZpcm1BY3Rpb25PcHRpb25zPntcbiAgICAgICAgICBjb2xsZWN0aW9uOiBzZWxlY3RlZCxcbiAgICAgICAgICBpbmRleDogJyRuYW1lJyxcbiAgICAgICAgICBvbkNsb3NlOiAocmVzdWx0OmJvb2xlYW4pID0+IHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgZnVuY3Rpb24gZGVsZXRlU2VsZWN0ZWQoc2VsZWN0ZWQsIG5leHQpIHtcbiAgICAgICAgICAgICAgICBpZiAobmV4dCkge1xuICAgICAgICAgICAgICAgICAgZGVsZXRlRW50aXR5KG5leHQsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlU2VsZWN0ZWQoc2VsZWN0ZWQsIHNlbGVjdGVkLnNoaWZ0KCkpO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHVwZGF0ZURhdGEoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBkZWxldGVTZWxlY3RlZChzZWxlY3RlZCwgc2VsZWN0ZWQuc2hpZnQoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB0aXRsZTogJ0RlbGV0ZSBEZXBsb3ltZW50PycsXG4gICAgICAgICAgYWN0aW9uOiAnVGhlIGZvbGxvd2luZyBEZXBsb3ltZW50cyB3aWxsIGJlIGRlbGV0ZWQ6JyxcbiAgICAgICAgICBva1RleHQ6ICdEZWxldGUnLFxuICAgICAgICAgIG9rQ2xhc3M6ICdidG4tZGFuZ2VyJyxcbiAgICAgICAgICBjdXN0b206IFwiVGhpcyBvcGVyYXRpb24gaXMgcGVybWFuZW50IG9uY2UgY29tcGxldGVkIVwiLFxuICAgICAgICAgIGN1c3RvbUNsYXNzOiBcImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIlxuICAgICAgICB9KS5vcGVuKCk7XG4gICAgICB9O1xuXG4gICAgICBmdW5jdGlvbiBkZWxldGVFbnRpdHkoc2VsZWN0aW9uLCBuZXh0Q2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG5hbWUgPSAoc2VsZWN0aW9uIHx8IHt9KS4kbmFtZTtcbiAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIkFib3V0IHRvIGRlbGV0ZSBkZXBsb3ltZW50IGNvbmZpZzogXCIgKyBuYW1lKTtcbiAgICAgICAgICB2YXIgdXJsID0gZGVwbG95bWVudENvbmZpZ1Jlc3RVcmwobmFtZSk7XG4gICAgICAgICAgJGh0dHAuZGVsZXRlKHVybCkuXG4gICAgICAgICAgICBzdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgICBuZXh0Q2FsbGJhY2soKTtcbiAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgZXJyb3IoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICAgIGxvZy53YXJuKFwiRmFpbGVkIHRvIGRlbGV0ZSBkZXBsb3ltZW50IGNvbmZpZyBvbiBcIiArIHVybCArIFwiIFwiICsgZGF0YSArIFwiIFwiICsgc3RhdHVzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwid2FybmluZzogbm8gbmFtZSBmb3Igc2VsZWN0aW9uOiBcIiArIGFuZ3VsYXIudG9Kc29uKHNlbGVjdGlvbikpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZURhdGEoKSB7XG4gICAgICAgIHZhciB1cmwgPSBkZXBsb3ltZW50Q29uZmlnc1Jlc3RVUkw7XG4gICAgICAgICRodHRwLmdldCh1cmwpLlxuICAgICAgICAgIHN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiZ290IGRhdGEgXCIgKyBhbmd1bGFyLnRvSnNvbihkYXRhLCB0cnVlKSk7XG4gICAgICAgICAgICAgICRzY29wZS5kZXBsb3ltZW50Q29uZmlncyA9IGVucmljaERlcGxveW1lbnRDb25maWdzKGRhdGEuaXRlbXMpO1xuICAgICAgICAgICAgICAkc2NvcGUuZmV0Y2hlZCA9IHRydWU7XG4gICAgICAgICAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkuXG4gICAgICAgICAgZXJyb3IoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICBsb2cud2FybihcIkZhaWxlZCB0byBsb2FkIFwiICsgdXJsICsgXCIgXCIgKyBkYXRhICsgXCIgXCIgKyBzdGF0dXMpO1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGVEYXRhKCk7XG4gICAgfV0pO1xufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNIZWxwZXJzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNQbHVnaW4udHNcIi8+XG5cbm1vZHVsZSBLdWJlcm5ldGVzIHtcblxuICBleHBvcnQgdmFyIEhvc3RDb250cm9sbGVyID0gY29udHJvbGxlcihcIkhvc3RDb250cm9sbGVyXCIsXG4gICAgW1wiJHNjb3BlXCIsIFwiS3ViZXJuZXRlc01vZGVsXCIsIFwiS3ViZXJuZXRlc1N0YXRlXCIsIFwiJHRlbXBsYXRlQ2FjaGVcIiwgXCIkbG9jYXRpb25cIiwgXCIkcm91dGVQYXJhbXNcIiwgXCIkaHR0cFwiLCBcIiR0aW1lb3V0XCIsIFwiS3ViZXJuZXRlc0FwaVVSTFwiLFxuICAgICAgKCRzY29wZSwgS3ViZXJuZXRlc01vZGVsOkt1YmVybmV0ZXMuS3ViZXJuZXRlc01vZGVsU2VydmljZSwgS3ViZXJuZXRlc1N0YXRlLFxuICAgICAgICR0ZW1wbGF0ZUNhY2hlOm5nLklUZW1wbGF0ZUNhY2hlU2VydmljZSwgJGxvY2F0aW9uOm5nLklMb2NhdGlvblNlcnZpY2UsICRyb3V0ZVBhcmFtcywgJGh0dHAsICR0aW1lb3V0LCBLdWJlcm5ldGVzQXBpVVJMKSA9PiB7XG5cbiAgICAgICAgJHNjb3BlLmt1YmVybmV0ZXMgPSBLdWJlcm5ldGVzU3RhdGU7XG4gICAgICAgICRzY29wZS5tb2RlbCA9IEt1YmVybmV0ZXNNb2RlbDtcblxuICAgICAgICAkc2NvcGUuaXRlbUNvbmZpZyA9IHtcbiAgICAgICAgICBwcm9wZXJ0aWVzOiB7fVxuICAgICAgICB9O1xuXG4gICAgICAgIEt1YmVybmV0ZXMuaW5pdFNoYXJlZCgkc2NvcGUsICRsb2NhdGlvbiwgJGh0dHAsICR0aW1lb3V0LCAkcm91dGVQYXJhbXMsIEt1YmVybmV0ZXNNb2RlbCwgS3ViZXJuZXRlc1N0YXRlLCBLdWJlcm5ldGVzQXBpVVJMKTtcblxuICAgICAgICAkc2NvcGUuJG9uKCdrdWJlcm5ldGVzTW9kZWxVcGRhdGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHVwZGF0ZURhdGEoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHNjb3BlLiRvbignJHJvdXRlVXBkYXRlJywgKCRldmVudCkgPT4ge1xuICAgICAgICAgIHVwZGF0ZURhdGEoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdXBkYXRlRGF0YSgpO1xuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZURhdGEoKSB7XG4gICAgICAgICAgJHNjb3BlLmlkID0gJHJvdXRlUGFyYW1zW1wiaWRcIl07XG4gICAgICAgICAgJHNjb3BlLml0ZW0gPSBudWxsO1xuICAgICAgICAgIGlmICgkc2NvcGUuaWQpIHtcbiAgICAgICAgICAgIEt1YmVybmV0ZXNBcGlVUkwudGhlbigoS3ViZXJuZXRlc0FwaVVSTCkgPT4ge1xuICAgICAgICAgICAgICB2YXIgdXJsID0gVXJsSGVscGVycy5qb2luKEt1YmVybmV0ZXNBcGlVUkwsIFwiL2FwaS9cIiArIGRlZmF1bHRBcGlWZXJzaW9uICsgXCIvXCIgKyBcIm1pbmlvbnNcIiwgJHNjb3BlLmlkKTtcbiAgICAgICAgICAgICAgJGh0dHAuZ2V0KHVybCkuXG4gICAgICAgICAgICAgICAgc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pdGVtID0gZGF0YTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICAgICAgZXJyb3IoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgICBsb2cud2FybihcIkZhaWxlZCB0byBsb2FkIFwiICsgdXJsICsgXCIgXCIgKyBkYXRhICsgXCIgXCIgKyBzdGF0dXMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XSk7XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vaW5jbHVkZXMudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwia3ViZXJuZXRlc1BsdWdpbi50c1wiLz5cblxubW9kdWxlIEt1YmVybmV0ZXMge1xuXG4gIGV4cG9ydCB2YXIgSG9zdHNDb250cm9sbGVyID0gY29udHJvbGxlcihcIkhvc3RzQ29udHJvbGxlclwiLCBbXCIkc2NvcGVcIiwgXCJLdWJlcm5ldGVzTW9kZWxcIiwgXCJLdWJlcm5ldGVzUG9kc1wiLCBcIkt1YmVybmV0ZXNTdGF0ZVwiLCBcIlNlcnZpY2VSZWdpc3RyeVwiLCBcIiRkaWFsb2dcIiwgXCIkd2luZG93XCIsIFwiJHRlbXBsYXRlQ2FjaGVcIiwgXCIkcm91dGVQYXJhbXNcIiwgXCIkbG9jYXRpb25cIiwgXCJsb2NhbFN0b3JhZ2VcIiwgXCIkaHR0cFwiLCBcIiR0aW1lb3V0XCIsIFwiS3ViZXJuZXRlc0FwaVVSTFwiLFxuICAgICgkc2NvcGUsIEt1YmVybmV0ZXNNb2RlbDogS3ViZXJuZXRlcy5LdWJlcm5ldGVzTW9kZWxTZXJ2aWNlLCBLdWJlcm5ldGVzUG9kczpuZy5JUHJvbWlzZTxuZy5yZXNvdXJjZS5JUmVzb3VyY2VDbGFzcz4sIEt1YmVybmV0ZXNTdGF0ZSwgU2VydmljZVJlZ2lzdHJ5LCAkZGlhbG9nLCAkd2luZG93LCAkdGVtcGxhdGVDYWNoZSwgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb246bmcuSUxvY2F0aW9uU2VydmljZSwgbG9jYWxTdG9yYWdlLCAkaHR0cCwgJHRpbWVvdXQsIEt1YmVybmV0ZXNBcGlVUkwpID0+IHtcblxuICAgICRzY29wZS5rdWJlcm5ldGVzID0gS3ViZXJuZXRlc1N0YXRlO1xuICAgICRzY29wZS5tb2RlbCA9IEt1YmVybmV0ZXNNb2RlbDtcbiAgICAkc2NvcGUuJG9uKCdrdWJlcm5ldGVzTW9kZWxVcGRhdGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgQ29yZS4kYXBwbHkoJHNjb3BlKTtcbiAgICB9KTtcblxuICAgICRzY29wZS50YWJsZUNvbmZpZyA9IHtcbiAgICAgIGRhdGE6ICdtb2RlbC5ob3N0cycsXG4gICAgICBzaG93U2VsZWN0aW9uQ2hlY2tib3g6IHRydWUsXG4gICAgICBlbmFibGVSb3dDbGlja1NlbGVjdGlvbjogZmFsc2UsXG4gICAgICBtdWx0aVNlbGVjdDogdHJ1ZSxcbiAgICAgIHNlbGVjdGVkSXRlbXM6IFtdLFxuICAgICAgZmlsdGVyT3B0aW9uczoge1xuICAgICAgICBmaWx0ZXJUZXh0OiAkbG9jYXRpb24uc2VhcmNoKClbXCJxXCJdIHx8ICcnXG4gICAgICB9LFxuICAgICAgY29sdW1uRGVmczogW1xuICAgICAgICB7XG4gICAgICAgICAgZmllbGQ6ICdpZCcsXG4gICAgICAgICAgZGlzcGxheU5hbWU6ICdOYW1lJyxcbiAgICAgICAgICBkZWZhdWx0U29ydDogdHJ1ZSxcbiAgICAgICAgICBjZWxsVGVtcGxhdGU6ICR0ZW1wbGF0ZUNhY2hlLmdldChcImlkVGVtcGxhdGUuaHRtbFwiKVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZmllbGQ6ICdob3N0SVAnLFxuICAgICAgICAgIGRpc3BsYXlOYW1lOiAnSVAnXG4gICAgICAgIH0sXG4gICAgICAgIHsgZmllbGQ6ICckcG9kc0xpbmsnLFxuICAgICAgICAgIGRpc3BsYXlOYW1lOiAnUG9kcycsXG4gICAgICAgICAgY2VsbFRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoXCJwb2RDb3VudHNBbmRMaW5rVGVtcGxhdGUuaHRtbFwiKVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfTtcblxuICAgIEt1YmVybmV0ZXMuaW5pdFNoYXJlZCgkc2NvcGUsICRsb2NhdGlvbiwgJGh0dHAsICR0aW1lb3V0LCAkcm91dGVQYXJhbXMsIEt1YmVybmV0ZXNNb2RlbCwgS3ViZXJuZXRlc1N0YXRlLCBLdWJlcm5ldGVzQXBpVVJMKTtcbiAgfV0pO1xufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNQbHVnaW4udHNcIi8+XG5cbm1vZHVsZSBLdWJlcm5ldGVzIHtcblxuICBleHBvcnQgdmFyIEltYWdlUmVwb3NpdG9yaWVzQ29udHJvbGxlciA9IGNvbnRyb2xsZXIoXCJJbWFnZVJlcG9zaXRvcmllc0NvbnRyb2xsZXJcIiwgW1wiJHNjb3BlXCIsIFwiS3ViZXJuZXRlc01vZGVsXCIsIFwiS3ViZXJuZXRlc0J1aWxkc1wiLCBcIkt1YmVybmV0ZXNTdGF0ZVwiLCBcIiRkaWFsb2dcIiwgXCIkd2luZG93XCIsIFwiJHRlbXBsYXRlQ2FjaGVcIiwgXCIkcm91dGVQYXJhbXNcIiwgXCIkbG9jYXRpb25cIiwgXCJsb2NhbFN0b3JhZ2VcIiwgXCIkaHR0cFwiLCBcIiR0aW1lb3V0XCIsIFwiS3ViZXJuZXRlc0FwaVVSTFwiLFxuICAgICgkc2NvcGUsIEt1YmVybmV0ZXNNb2RlbDpLdWJlcm5ldGVzLkt1YmVybmV0ZXNNb2RlbFNlcnZpY2UsIEt1YmVybmV0ZXNCdWlsZHMsIEt1YmVybmV0ZXNTdGF0ZSwgJGRpYWxvZywgJHdpbmRvdywgJHRlbXBsYXRlQ2FjaGUsICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uOm5nLklMb2NhdGlvblNlcnZpY2UsIGxvY2FsU3RvcmFnZSwgJGh0dHAsICR0aW1lb3V0LCBLdWJlcm5ldGVzQXBpVVJMKSA9PiB7XG5cbiAgICAgICRzY29wZS5rdWJlcm5ldGVzID0gS3ViZXJuZXRlc1N0YXRlO1xuICAgICAgJHNjb3BlLm1vZGVsID0gS3ViZXJuZXRlc01vZGVsO1xuICAgICAgJHNjb3BlLkt1YmVybmV0ZXNCdWlsZHMgPSBLdWJlcm5ldGVzQnVpbGRzO1xuICAgICAgJHNjb3BlLiRvbigna3ViZXJuZXRlc01vZGVsVXBkYXRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgQ29yZS4kYXBwbHkoJHNjb3BlKTtcbiAgICAgIH0pO1xuXG4gICAgICAkc2NvcGUudGFibGVDb25maWcgPSB7XG4gICAgICAgIGRhdGE6ICdpbWFnZVJlcG9zaXRvcmllcycsXG4gICAgICAgIHNob3dTZWxlY3Rpb25DaGVja2JveDogdHJ1ZSxcbiAgICAgICAgZW5hYmxlUm93Q2xpY2tTZWxlY3Rpb246IGZhbHNlLFxuICAgICAgICBtdWx0aVNlbGVjdDogdHJ1ZSxcbiAgICAgICAgc2VsZWN0ZWRJdGVtczogW10sXG4gICAgICAgIGZpbHRlck9wdGlvbnM6IHtcbiAgICAgICAgICBmaWx0ZXJUZXh0OiAkbG9jYXRpb24uc2VhcmNoKClbXCJxXCJdIHx8ICcnXG4gICAgICAgIH0sXG4gICAgICAgIGNvbHVtbkRlZnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBmaWVsZDogJ21ldGFkYXRhLm5hbWUnLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6ICdOYW1lJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgZmllbGQ6ICdtZXRhZGF0YS5uYW1lc3BhY2UnLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6ICdOYW1lc3BhY2UnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBmaWVsZDogJ3N0YXR1cy5kb2NrZXJJbWFnZVJlcG9zaXRvcnknLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6ICdEb2NrZXIgUmVnaXN0cnknXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBmaWVsZDogJ3RhZ3MnLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6ICdUYWdzJyxcbiAgICAgICAgICAgIGNlbGxUZW1wbGF0ZTogJHRlbXBsYXRlQ2FjaGUuZ2V0KCdpbWFnZVJlZ2lzdHJ5TGFiZWxUZW1wbGF0ZS5odG1sJylcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH07XG5cbiAgICAgIHZhciBsYWJlbENvbG9ycyA9IHtcbiAgICAgICAgJ3Byb2QnOiAnYmFja2dyb3VuZC1ibHVlJyxcbiAgICAgICAgJ3ZhbGlkJzogJ2JhY2tncm91bmQtbGlnaHQtZ3JlZW4nLFxuICAgICAgICAndGVzdCc6ICdiYWNrZ3JvdW5kLWxpZ2h0LWdyZXknXG4gICAgICB9O1xuICAgICAgJHNjb3BlLmxhYmVsQ2xhc3MgPSAobGFiZWxUeXBlOnN0cmluZykgPT4ge1xuICAgICAgICBpZiAoIShsYWJlbFR5cGUgaW4gbGFiZWxDb2xvcnMpKSB7XG4gICAgICAgICAgcmV0dXJuICdtb3VzZS1wb2ludGVyJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHJldHVybiBsYWJlbENvbG9yc1tsYWJlbFR5cGVdICsgJyBtb3VzZS1wb2ludGVyJztcbiAgICAgIH1cblxuICAgICAgS3ViZXJuZXRlcy5pbml0U2hhcmVkKCRzY29wZSwgJGxvY2F0aW9uLCAkaHR0cCwgJHRpbWVvdXQsICRyb3V0ZVBhcmFtcywgS3ViZXJuZXRlc01vZGVsLCBLdWJlcm5ldGVzU3RhdGUsIEt1YmVybmV0ZXNBcGlVUkwpO1xuXG4gICAgICAkc2NvcGUuZGVsZXRlUHJvbXB0ID0gKHNlbGVjdGVkKSA9PiB7XG4gICAgICAgIFVJLm11bHRpSXRlbUNvbmZpcm1BY3Rpb25EaWFsb2coPFVJLk11bHRpSXRlbUNvbmZpcm1BY3Rpb25PcHRpb25zPntcbiAgICAgICAgICBjb2xsZWN0aW9uOiBzZWxlY3RlZCxcbiAgICAgICAgICBpbmRleDogJyRuYW1lJyxcbiAgICAgICAgICBvbkNsb3NlOiAocmVzdWx0OmJvb2xlYW4pID0+IHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgZnVuY3Rpb24gZGVsZXRlU2VsZWN0ZWQoc2VsZWN0ZWQsIG5leHQpIHtcbiAgICAgICAgICAgICAgICBpZiAobmV4dCkge1xuICAgICAgICAgICAgICAgICAgZGVsZXRlRW50aXR5KG5leHQsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlU2VsZWN0ZWQoc2VsZWN0ZWQsIHNlbGVjdGVkLnNoaWZ0KCkpO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHVwZGF0ZURhdGEoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBkZWxldGVTZWxlY3RlZChzZWxlY3RlZCwgc2VsZWN0ZWQuc2hpZnQoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB0aXRsZTogJ0RlbGV0ZSBJbWFnZSBSZXBvc2l0b3J5PycsXG4gICAgICAgICAgYWN0aW9uOiAnVGhlIGZvbGxvd2luZyBJbWFnZSBSZXBvc2l0b3JpZXMgd2lsbCBiZSBkZWxldGVkOicsXG4gICAgICAgICAgb2tUZXh0OiAnRGVsZXRlJyxcbiAgICAgICAgICBva0NsYXNzOiAnYnRuLWRhbmdlcicsXG4gICAgICAgICAgY3VzdG9tOiBcIlRoaXMgb3BlcmF0aW9uIGlzIHBlcm1hbmVudCBvbmNlIGNvbXBsZXRlZCFcIixcbiAgICAgICAgICBjdXN0b21DbGFzczogXCJhbGVydCBhbGVydC13YXJuaW5nXCJcbiAgICAgICAgfSkub3BlbigpO1xuICAgICAgfTtcblxuICAgICAgZnVuY3Rpb24gZGVsZXRlRW50aXR5KHNlbGVjdGlvbiwgbmV4dENhbGxiYWNrKSB7XG4gICAgICAgIHZhciBuYW1lID0gKHNlbGVjdGlvbiB8fCB7fSkuJG5hbWU7XG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJBYm91dCB0byBkZWxldGUgaW1hZ2UgcmVwb3NpdG9yeTogXCIgKyBuYW1lKTtcbiAgICAgICAgICB2YXIgdXJsID0gaW1hZ2VSZXBvc2l0b3J5UmVzdFVybChuYW1lKTtcbiAgICAgICAgICAkaHR0cC5kZWxldGUodXJsKS5cbiAgICAgICAgICAgIHN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICAgIG5leHRDYWxsYmFjaygpO1xuICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICBlcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgICAgbG9nLndhcm4oXCJGYWlsZWQgdG8gZGVsZXRlIGltYWdlIHJlcG9zaXRvcnkgb24gXCIgKyB1cmwgKyBcIiBcIiArIGRhdGEgKyBcIiBcIiArIHN0YXR1cyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIndhcm5pbmc6IG5vIG5hbWUgZm9yIHNlbGVjdGlvbjogXCIgKyBhbmd1bGFyLnRvSnNvbihzZWxlY3Rpb24pKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB1cGRhdGVEYXRhKCkge1xuICAgICAgICB2YXIgdXJsID0gaW1hZ2VSZXBvc2l0b3JpZXNSZXN0VVJMO1xuICAgICAgICAkaHR0cC5nZXQodXJsKS5cbiAgICAgICAgICBzdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcImdvdCBkYXRhIFwiICsgYW5ndWxhci50b0pzb24oZGF0YSwgdHJ1ZSkpO1xuICAgICAgICAgICAgICAkc2NvcGUuaW1hZ2VSZXBvc2l0b3JpZXMgPSBlbnJpY2hJbWFnZVJlcG9zaXRvcmllcyhkYXRhLml0ZW1zKTtcbiAgICAgICAgICAgICAgJHNjb3BlLmZldGNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgICBDb3JlLiRhcHBseSgkc2NvcGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLlxuICAgICAgICAgIGVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgbG9nLndhcm4oXCJGYWlsZWQgdG8gbG9hZCBcIiArIHVybCArIFwiIFwiICsgZGF0YSArIFwiIFwiICsgc3RhdHVzKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlRGF0YSgpO1xuICAgIH1dKTtcbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9pbmNsdWRlcy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzSGVscGVycy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzUGx1Z2luLnRzXCIvPlxuXG5tb2R1bGUgS3ViZXJuZXRlcyB7XG5cbiAgZXhwb3J0IHZhciBLdWJlcm5ldGVzSnNvbkRpcmVjdGl2ZSA9IF9tb2R1bGUuZGlyZWN0aXZlKFwia3ViZXJuZXRlc0pzb25cIiwgWygpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICB0ZW1wbGF0ZVVybDogS3ViZXJuZXRlcy50ZW1wbGF0ZVBhdGggKyAna3ViZXJuZXRlc0pzb25EaXJlY3RpdmUuaHRtbCcsXG4gICAgICBzY29wZToge1xuICAgICAgICBjb25maWc6ICc9a3ViZXJuZXRlc0pzb24nXG4gICAgICB9LFxuICAgICAgY29udHJvbGxlcjogW1wiJHNjb3BlXCIsIFwiJGxvY2F0aW9uXCIsIFwiJGh0dHBcIiwgXCJLdWJlcm5ldGVzQXBpVVJMXCIsIFwibWFya2VkXCIsICgkc2NvcGUsICRsb2NhdGlvbiwgJGh0dHAsIEt1YmVybmV0ZXNBcGlVUkwsIG1hcmtlZCkgPT4ge1xuXG4gICAgICAgICRzY29wZS4kd2F0Y2goJ2NvbmZpZycsIChjb25maWcpID0+IHtcbiAgICAgICAgICBpZiAoY29uZmlnKSB7XG4gICAgICAgICAgICBpZiAoY29uZmlnLmVycm9yKSB7XG4gICAgICAgICAgICAgIGxvZy5kZWJ1ZyhcIkVycm9yIHBhcnNpbmcga3ViZXJuZXRlcyBjb25maWc6IFwiLCBjb25maWcuZXJyb3IpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbG9nLmRlYnVnKFwiR290IGt1YmVybmV0ZXMgY29uZmlndXJhdGlvbjogXCIsIGNvbmZpZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyhcIkt1YmVybmV0ZXMgY29uZmlnIHVuc2V0XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHNjb3BlLiRvbignV2lraS5WaWV3UGFnZS5DaGlsZHJlbicsICgkZXZlbnQsIHBhZ2VJZCwgY2hpbGRyZW4pID0+IHtcbiAgICAgICAgICAvLyBsb2cuZGVidWcoXCJHb3QgYnJvYWRjYXN0LCBwYWdlSWQ6IFwiLCBwYWdlSWQsIFwiIGNoaWxkcmVuOiBcIiwgY2hpbGRyZW4pO1xuICAgICAgICAgICRzY29wZS5hcHBUaXRsZSA9IHBhZ2VJZDtcbiAgICAgICAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIHZhciBzdW1tYXJ5RmlsZSA9IGNoaWxkcmVuLmZpbmQoKGNoaWxkKSA9PiB7IHJldHVybiBjaGlsZC5uYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwic3VtbWFyeS5tZFwiO30pO1xuICAgICAgICAgICAgdmFyIHN1bW1hcnlVUkw6c3RyaW5nID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChzdW1tYXJ5RmlsZSkge1xuICAgICAgICAgICAgICBzdW1tYXJ5VVJMID0gV2lraS5naXRSZXN0VVJMKHN1bW1hcnlGaWxlLmJyYW5jaCwgc3VtbWFyeUZpbGUucGF0aCk7XG4gICAgICAgICAgICAgICRodHRwLmdldChzdW1tYXJ5VVJMKS5cbiAgICAgICAgICAgICAgICBzdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgICAgICAgdmFyIHN1bW1hcnlNYXJrZG93biA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICBpZiAoc3VtbWFyeU1hcmtkb3duKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zdW1tYXJ5SHRtbCA9IG1hcmtlZChzdW1tYXJ5TWFya2Rvd24pO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN1bW1hcnlIdG1sID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KS5cbiAgICAgICAgICAgICAgICBlcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgICAgICAgICRzY29wZS5zdW1tYXJ5SHRtbCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICBsb2cud2FybihcIkZhaWxlZCB0byBsb2FkIFwiICsgc3VtbWFyeVVSTCArIFwiIFwiICsgZGF0YSArIFwiIFwiICsgc3RhdHVzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpY29uRmlsZSA9IGNoaWxkcmVuLmZpbmQoKGNoaWxkKSA9PiB7IHJldHVybiBjaGlsZC5uYW1lLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChcImljb25cIik7IH0pO1xuICAgICAgICAgICAgaWYgKGljb25GaWxlKSB7XG4gICAgICAgICAgICAgICRzY29wZS5pY29uVVJMID0gV2lraS5naXRSZXN0VVJMKGljb25GaWxlLmJyYW5jaCwgaWNvbkZpbGUucGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZmFicmljOFByb3BlcnRpZXNGaWxlID0gY2hpbGRyZW4uZmluZCgoY2hpbGQpID0+IHsgcmV0dXJuIGNoaWxkLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmYWJyaWM4LnByb3BlcnRpZXNcIjt9KTtcbiAgICAgICAgICAgIHZhciBmYWJyaWM4UHJvcGVydGllc1VSTDpzdHJpbmcgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGZhYnJpYzhQcm9wZXJ0aWVzRmlsZSkge1xuICAgICAgICAgICAgICBmYWJyaWM4UHJvcGVydGllc1VSTCA9IFdpa2kuZ2l0UmVzdFVSTChmYWJyaWM4UHJvcGVydGllc0ZpbGUuYnJhbmNoLCBmYWJyaWM4UHJvcGVydGllc0ZpbGUucGF0aCk7XG4gICAgICAgICAgICAgICRodHRwLmdldChmYWJyaWM4UHJvcGVydGllc1VSTCkuXG4gICAgICAgICAgICAgICAgc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBmYWJyaWM4UHJvcGVydGllcyA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICBpZiAoZmFicmljOFByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWVSRSA9IC8oPzpuYW1lKVxccyo9XFxzKiguKylbXFxufCRdLztcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSBmYWJyaWM4UHJvcGVydGllcy5tYXRjaChuYW1lUkUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hlc1sxXSkge1xuICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5TmFtZSA9IG1hdGNoZXNbMV0ucmVwbGFjZSgvXFxcXC9nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KS5cbiAgICAgICAgICAgICAgICBlcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgICAgICAgIGxvZy53YXJuKFwiRmFpbGVkIHRvIGxvYWQgXCIgKyBmYWJyaWM4UHJvcGVydGllc1VSTCArIFwiIFwiICsgZGF0YSArIFwiIFwiICsgc3RhdHVzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRzY29wZS5hcHBseSA9ICgpID0+IHtcbiAgICAgICAgICB2YXIganNvbiA9IGFuZ3VsYXIudG9Kc29uKCRzY29wZS5jb25maWcpO1xuICAgICAgICAgIHZhciBuYW1lID0gJHNjb3BlLmFwcFRpdGxlIHx8IFwiQXBwXCI7XG4gICAgICAgICAgcnVuQXBwKCRsb2NhdGlvbiwgJHNjb3BlLCAkaHR0cCwgS3ViZXJuZXRlc0FwaVVSTCwganNvbiwgbmFtZSwgKCkgPT4ge1xuICAgICAgICAgICAgLy8gbm93IGxldHMgbmF2aWdhdGUgdG8gdGhlIGFwcHMgcGFnZSBzbyBmb2xrcyBzZWUgdGhpbmdzIGhhcHBlblxuICAgICAgICAgICAgJGxvY2F0aW9uLnVybChcIi9rdWJlcm5ldGVzL2FwcHNcIik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICB9XVxuICAgIH07XG4gIH1dKTtcbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9pbmNsdWRlcy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzSGVscGVycy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzUGx1Z2luLnRzXCIvPlxuXG5tb2R1bGUgS3ViZXJuZXRlcyB7XG5cbiAgZXhwb3J0IHZhciBGaWxlRHJvcENvbnRyb2xsZXIgPSBjb250cm9sbGVyKFwiRmlsZURyb3BDb250cm9sbGVyXCIsIFtcIiRzY29wZVwiLCBcImpvbG9raWFVcmxcIiwgXCJqb2xva2lhXCIsIFwiRmlsZVVwbG9hZGVyXCIsICgkc2NvcGUsIGpvbG9raWFVcmwsIGpvbG9raWE6Sm9sb2tpYS5JSm9sb2tpYSwgRmlsZVVwbG9hZGVyKSA9PiB7XG5cbiAgICAgICRzY29wZS51cGxvYWRlciA9IDxGaWxlVXBsb2FkLkZpbGVVcGxvYWRlcj4gbmV3IEZpbGVVcGxvYWRlcig8RmlsZVVwbG9hZC5JT3B0aW9ucz57XG4gICAgICAgIGF1dG9VcGxvYWQ6IHRydWUsXG4gICAgICAgIHJlbW92ZUFmdGVyVXBsb2FkOiB0cnVlLFxuICAgICAgICB1cmw6IGpvbG9raWFVcmxcbiAgICAgIH0pO1xuXG4gICAgICBGaWxlVXBsb2FkLnVzZUpvbG9raWFUcmFuc3BvcnQoJHNjb3BlLCAkc2NvcGUudXBsb2FkZXIsIGpvbG9raWEsIChqc29uKSA9PiB7XG4gICAgICAgIGxvZy5kZWJ1ZyhcIkpzb246IFwiLCBqc29uKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAndHlwZSc6ICdleGVjJyxcbiAgICAgICAgICBtYmVhbjogS3ViZXJuZXRlcy5tYW5hZ2VyTUJlYW4sXG4gICAgICAgICAgb3BlcmF0aW9uOiAnYXBwbHknLFxuICAgICAgICAgIGFyZ3VtZW50czogW2pzb25dXG4gICAgICAgIH07XG4gICAgICB9KTtcblxuICAgICAgJHNjb3BlLnVwbG9hZGVyLm9uQmVmb3JlSXRlbSA9IChpdGVtKSA9PiB7XG4gICAgICAgIENvcmUubm90aWZpY2F0aW9uKCdpbmZvJywgJ1VwbG9hZGluZyAnICsgaXRlbSk7XG4gICAgICB9O1xuXG4gICAgICAkc2NvcGUudXBsb2FkZXIub25TdWNjZXNzSXRlbSA9IChpdGVtOkZpbGVVcGxvYWQuSUZpbGVJdGVtKSA9PiB7XG4gICAgICAgIGxvZy5kZWJ1ZyhcIm9uU3VjY2Vzc0l0ZW06IFwiLCBpdGVtKTtcbiAgICAgIH07XG5cbiAgICAgICRzY29wZS51cGxvYWRlci5vbkVycm9ySXRlbSA9IChpdGVtLCByZXNwb25zZSwgc3RhdHVzKSA9PiB7XG4gICAgICAgIGxvZy5kZWJ1ZyhcIkZhaWxlZCB0byBhcHBseSwgcmVzcG9uc2U6IFwiLCByZXNwb25zZSwgXCIgc3RhdHVzOiBcIiwgc3RhdHVzKTtcbiAgICAgIH1cblxuICB9XSk7XG5cbiAgZXhwb3J0IHZhciBUb3BMZXZlbCA9IGNvbnRyb2xsZXIoXCJUb3BMZXZlbFwiLCBbXCIkc2NvcGVcIiwgXCJ3b3Jrc3BhY2VcIiwgXCJLdWJlcm5ldGVzVmVyc2lvblwiLCBcIkt1YmVybmV0ZXNTdGF0ZVwiLCAoJHNjb3BlLCB3b3Jrc3BhY2U6Q29yZS5Xb3Jrc3BhY2UsIEt1YmVybmV0ZXNWZXJzaW9uOm5nLklQcm9taXNlPG5nLnJlc291cmNlLklSZXNvdXJjZUNsYXNzPiwgS3ViZXJuZXRlc1N0YXRlKSA9PiB7XG5cbiAgICAkc2NvcGUudmVyc2lvbiA9IHVuZGVmaW5lZDtcblxuICAgICRzY29wZS5zaG93QXBwVmlldyA9IGlzQXBwVmlldyh3b3Jrc3BhY2UpO1xuXG4gICAgJHNjb3BlLmlzQWN0aXZlID0gKGhyZWYpID0+IHtcbiAgICAgIHJldHVybiB3b3Jrc3BhY2UuaXNMaW5rQWN0aXZlKGhyZWYpO1xuICAgIH07XG5cbiAgICAkc2NvcGUua3ViZXJuZXRlcyA9IEt1YmVybmV0ZXNTdGF0ZTtcblxuICAgIEt1YmVybmV0ZXNWZXJzaW9uLnRoZW4oKEt1YmVybmV0ZXNWZXJzaW9uOm5nLnJlc291cmNlLklSZXNvdXJjZUNsYXNzKSA9PiB7XG4gICAgICBLdWJlcm5ldGVzVmVyc2lvbi5xdWVyeSgocmVzcG9uc2UpID0+IHtcbiAgICAgICAgJHNjb3BlLnZlcnNpb24gPSByZXNwb25zZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gIH1dKTtcblxufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNIZWxwZXJzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNQbHVnaW4udHNcIi8+XG5cbm1vZHVsZSBLdWJlcm5ldGVzIHtcblxuICB2YXIgT3ZlcnZpZXdEaXJlY3RpdmUgPSBfbW9kdWxlLmRpcmVjdGl2ZShcImt1YmVybmV0ZXNPdmVydmlld1wiLCBbXCIkdGVtcGxhdGVDYWNoZVwiLCBcIiRjb21waWxlXCIsIFwiJGludGVycG9sYXRlXCIsIFwiJHRpbWVvdXRcIiwgXCIkd2luZG93XCIsIFwiS3ViZXJuZXRlc1N0YXRlXCIsICdLdWJlcm5ldGVzTW9kZWwnLCAoJHRlbXBsYXRlQ2FjaGU6bmcuSVRlbXBsYXRlQ2FjaGVTZXJ2aWNlLCAkY29tcGlsZTpuZy5JQ29tcGlsZVNlcnZpY2UsICRpbnRlcnBvbGF0ZTpuZy5JSW50ZXJwb2xhdGVTZXJ2aWNlLCAkdGltZW91dDpuZy5JVGltZW91dFNlcnZpY2UsICR3aW5kb3c6bmcuSVdpbmRvd1NlcnZpY2UsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc01vZGVsKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgbGluazogKHNjb3BlLCBlbGVtZW50LCBhdHRyKSA9PiB7XG4gICAgICAgIHNjb3BlLm1vZGVsID0gS3ViZXJuZXRlc01vZGVsO1xuICAgICAgICBlbGVtZW50LmNzcyh7dmlzaWJpbGl0eTogJ2hpZGRlbid9KTtcbiAgICAgICAgc2NvcGUuZ2V0RW50aXR5ID0gKHR5cGU6c3RyaW5nLCBrZXk6c3RyaW5nKSA9PiB7XG4gICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdob3N0JzpcbiAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlLm1vZGVsLnBvZHNCeUhvc3Rba2V5XTtcbiAgICAgICAgICAgIGNhc2UgJ3BvZCc6XG4gICAgICAgICAgICAgIHJldHVybiBzY29wZS5tb2RlbC5wb2RzQnlLZXlba2V5XTtcbiAgICAgICAgICAgIGNhc2UgJ3JlcGxpY2F0aW9uQ29udHJvbGxlcic6XG4gICAgICAgICAgICAgIHJldHVybiBzY29wZS5tb2RlbC5yZXBsaWNhdGlvbkNvbnRyb2xsZXJzQnlLZXlba2V5XTtcbiAgICAgICAgICAgIGNhc2UgJ3NlcnZpY2UnOlxuICAgICAgICAgICAgICByZXR1cm4gc2NvcGUubW9kZWwuc2VydmljZXNCeUtleVtrZXldO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBzY29wZS5rdWJlcm5ldGVzID0gS3ViZXJuZXRlc1N0YXRlO1xuXG4gICAgICAgIHNjb3BlLmN1c3RvbWl6ZURlZmF1bHRPcHRpb25zID0gKG9wdGlvbnMpID0+IHtcbiAgICAgICAgICBvcHRpb25zLkVuZHBvaW50ID0gWydCbGFuaycsIHt9XTtcbiAgICAgICAgfTtcbiAgICAgICAgc2NvcGUubW91c2VFbnRlciA9ICgkZXZlbnQpID0+IHtcbiAgICAgICAgICBpZiAoc2NvcGUuanNQbHVtYikge1xuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCRldmVudC5jdXJyZW50VGFyZ2V0KS5hZGRDbGFzcyhcImhvdmVyZWRcIik7XG4gICAgICAgICAgICBzY29wZS5qc1BsdW1iLmdldEVuZHBvaW50cygkZXZlbnQuY3VycmVudFRhcmdldCkuZm9yRWFjaCgoZW5kcG9pbnQpID0+IHtcbiAgICAgICAgICAgICAgZW5kcG9pbnQuY29ubmVjdGlvbnMuZm9yRWFjaCgoY29ubmVjdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghY29ubmVjdGlvbi5pc0hvdmVyKCkpIHtcbiAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uc2V0SG92ZXIodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmVuZHBvaW50cy5mb3JFYWNoKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLm1vdXNlRW50ZXIoe1xuICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUYXJnZXQ6IGUuZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2NvcGUubW91c2VMZWF2ZSA9ICgkZXZlbnQpID0+IHtcbiAgICAgICAgICBpZiAoc2NvcGUuanNQbHVtYikge1xuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCRldmVudC5jdXJyZW50VGFyZ2V0KS5yZW1vdmVDbGFzcyhcImhvdmVyZWRcIik7XG4gICAgICAgICAgICBzY29wZS5qc1BsdW1iLmdldEVuZHBvaW50cygkZXZlbnQuY3VycmVudFRhcmdldCkuZm9yRWFjaCgoZW5kcG9pbnQpID0+IHtcbiAgICAgICAgICAgICAgZW5kcG9pbnQuY29ubmVjdGlvbnMuZm9yRWFjaCgoY29ubmVjdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjb25uZWN0aW9uLmlzSG92ZXIoKSkge1xuICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5zZXRIb3ZlcihmYWxzZSk7XG4gICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmVuZHBvaW50cy5mb3JFYWNoKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLm1vdXNlTGVhdmUoe1xuICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUYXJnZXQ6IGUuZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLypcbiAgICAgICAgc2NvcGUuY3VzdG9taXplRW5kcG9pbnRPcHRpb25zID0gKGpzUGx1bWIsIG5vZGUsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgICB2YXIgdHlwZSA9IG5vZGUuZWwuYXR0cignZGF0YS10eXBlJyk7XG4gICAgICAgICAgLy8gbG9nLmRlYnVnKFwiZW5kcG9pbnQgdHlwZTogXCIsIHR5cGUpO1xuICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSAncG9kJzpcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzZXJ2aWNlJzpcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdyZXBsaWNhdGlvbkNvbnRyb2xsZXInOlxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgICovXG4gICAgICAgIHNjb3BlLmN1c3RvbWl6ZUNvbm5lY3Rpb25PcHRpb25zID0gKGpzUGx1bWIsIGVkZ2UsIHBhcmFtcywgb3B0aW9ucykgPT4ge1xuICAgICAgICAgIHZhciB0eXBlID0gZWRnZS5zb3VyY2UuZWwuYXR0cignZGF0YS10eXBlJyk7XG4gICAgICAgICAgb3B0aW9ucy5jb25uZWN0b3IgPSBbIFwiQmV6aWVyXCIsIHsgY3VydmluZXNzOiA1MCwgc3R1YjogMjUsIGFsd2F5c1Jlc3BlY3RTdHViczogdHJ1ZSB9IF07XG4gICAgICAgICAgcGFyYW1zLnBhaW50U3R5bGUgPSB7XG4gICAgICAgICAgICBsaW5lV2lkdGg6IDIsXG4gICAgICAgICAgICBzdHJva2VTdHlsZTogJyM1NTU1Y2MnXG4gICAgICAgICAgfTtcbiAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3BvZCc6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2VydmljZSc6XG4gICAgICAgICAgICAgIHBhcmFtcy5hbmNob3JzID0gW1xuICAgICAgICAgICAgICAgIFsgXCJDb250aW51b3VzUmlnaHRcIiwgeyB9IF0sXG4gICAgICAgICAgICAgICAgWyBcIkNvbnRpbnVvdXNMZWZ0XCIsIHsgfSBdIFxuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgWzEsIDAuNSwgMCwgMCwgLTEwLCAtOTBdLFxuICAgICAgICAgICAgICAgIFswLCAwLjUsIDAsIDAsIC0xMCwgLTkwXVxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncmVwbGljYXRpb25Db250cm9sbGVyJzpcbiAgICAgICAgICAgICAgcGFyYW1zLmFuY2hvcnMgPSBbXG4gICAgICAgICAgICAgICAgWyBcIlBlcmltZXRlclwiLCB7IHNoYXBlOiBcIkNpcmNsZVwiIH0gXSxcbiAgICAgICAgICAgICAgICBbIFwiQ29udGludW91c1JpZ2h0XCIsIHsgfSBdXG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICBbMCwgMC41LCAwLCAwLCAtMTAsIC05MF0sXG4gICAgICAgICAgICAgICAgWzEsIDAuNSwgMCwgMCwgLTEwLCAtOTBdXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vbG9nLmRlYnVnKFwiY29ubmVjdGlvbiBzb3VyY2UgdHlwZTogXCIsIHR5cGUpO1xuICAgICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgICAgICB9O1xuICAgICAgICBmdW5jdGlvbiBpbnRlcnBvbGF0ZSh0ZW1wbGF0ZSwgY29uZmlnKSB7XG4gICAgICAgICAgcmV0dXJuICRpbnRlcnBvbGF0ZSh0ZW1wbGF0ZSkoY29uZmlnKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVFbGVtZW50KHRlbXBsYXRlLCB0aGluZ05hbWUsIHRoaW5nKSB7XG4gICAgICAgICAgdmFyIGNvbmZpZyA9IHt9O1xuICAgICAgICAgIGNvbmZpZ1t0aGluZ05hbWVdID0gdGhpbmc7XG4gICAgICAgICAgcmV0dXJuIGludGVycG9sYXRlKHRlbXBsYXRlLCBjb25maWcpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRzKHRlbXBsYXRlLCB0aGluZ05hbWUsIHRoaW5ncykge1xuICAgICAgICAgIHJldHVybiB0aGluZ3MubWFwKCh0aGluZykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodGVtcGxhdGUsIHRoaW5nTmFtZSwgdGhpbmcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGFwcGVuZE5ld0VsZW1lbnRzKHBhcmVudEVsLCB0ZW1wbGF0ZSwgdGhpbmdOYW1lLCB0aGluZ3MpIHtcbiAgICAgICAgICB0aGluZ3MuZm9yRWFjaCgodGhpbmcpID0+IHtcbiAgICAgICAgICAgIHZhciBrZXkgPSB0aGluZ1snX2tleSddIHx8IHRoaW5nWydpZCddXG4gICAgICAgICAgICB2YXIgZXhpc3RpbmcgPSBwYXJlbnRFbC5maW5kKFwiI1wiICsga2V5ICk7XG4gICAgICAgICAgICBpZiAoIWV4aXN0aW5nLmxlbmd0aCkge1xuICAgICAgICAgICAgICBwYXJlbnRFbC5hcHBlbmQoJGNvbXBpbGUoY3JlYXRlRWxlbWVudCh0ZW1wbGF0ZSwgdGhpbmdOYW1lLCB0aGluZykpKHNjb3BlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbmFtZXNwYWNlRmlsdGVyKGl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtLm5hbWVzcGFjZSA9PT0gc2NvcGUua3ViZXJuZXRlcy5zZWxlY3RlZE5hbWVzcGFjZTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBmaXJzdERyYXcoKSB7XG4gICAgICAgICAgbG9nLmRlYnVnKFwiRmlyc3QgZHJhd1wiKTtcbiAgICAgICAgICB2YXIgc2VydmljZXMgPSBzY29wZS5tb2RlbC5zZXJ2aWNlcztcbiAgICAgICAgICB2YXIgcmVwbGljYXRpb25Db250cm9sbGVycyA9IHNjb3BlLm1vZGVsLnJlcGxpY2F0aW9uQ29udHJvbGxlcnM7XG4gICAgICAgICAgdmFyIHBvZHMgPSBzY29wZS5tb2RlbC5wb2RzO1xuICAgICAgICAgIHZhciBob3N0cyA9IHNjb3BlLm1vZGVsLmhvc3RzO1xuICAgICAgICAgIC8vIGxvZy5kZWJ1ZyhcImhvc3RzOiBcIiwgc2NvcGUubW9kZWwuaG9zdHMpO1xuICAgICAgICAgIHZhciBwYXJlbnRFbCA9IGFuZ3VsYXIuZWxlbWVudCgkdGVtcGxhdGVDYWNoZS5nZXQoXCJvdmVydmlld1RlbXBsYXRlLmh0bWxcIikpO1xuICAgICAgICAgIHZhciBzZXJ2aWNlc0VsID0gcGFyZW50RWwuZmluZChcIi5zZXJ2aWNlc1wiKTtcbiAgICAgICAgICB2YXIgaG9zdHNFbCA9IHBhcmVudEVsLmZpbmQoXCIuaG9zdHNcIik7XG4gICAgICAgICAgdmFyIHJlcGxpY2F0aW9uQ29udHJvbGxlcnNFbCA9IHBhcmVudEVsLmZpbmQoXCIucmVwbGljYXRpb25Db250cm9sbGVyc1wiKTtcblxuICAgICAgICAgIHNlcnZpY2VzRWwuYXBwZW5kKGNyZWF0ZUVsZW1lbnRzKCR0ZW1wbGF0ZUNhY2hlLmdldChcInNlcnZpY2VUZW1wbGF0ZS5odG1sXCIpLCAnc2VydmljZScsIHNlcnZpY2VzLmZpbHRlcihuYW1lc3BhY2VGaWx0ZXIpKSk7XG4gICAgICAgICAgcmVwbGljYXRpb25Db250cm9sbGVyc0VsLmFwcGVuZChjcmVhdGVFbGVtZW50cygkdGVtcGxhdGVDYWNoZS5nZXQoXCJyZXBsaWNhdGlvbkNvbnRyb2xsZXJUZW1wbGF0ZS5odG1sXCIpLCAncmVwbGljYXRpb25Db250cm9sbGVyJywgcmVwbGljYXRpb25Db250cm9sbGVycy5maWx0ZXIobmFtZXNwYWNlRmlsdGVyKSkpO1xuXG4gICAgICAgICAgaG9zdHMuZm9yRWFjaCgoaG9zdCkgPT4ge1xuICAgICAgICAgICAgdmFyIGhvc3RFbCA9IGFuZ3VsYXIuZWxlbWVudChjcmVhdGVFbGVtZW50KCR0ZW1wbGF0ZUNhY2hlLmdldChcImhvc3RUZW1wbGF0ZS5odG1sXCIpLCAnaG9zdCcsIGhvc3QpKTtcbiAgICAgICAgICAgIHZhciBwb2RDb250YWluZXIgPSBhbmd1bGFyLmVsZW1lbnQoaG9zdEVsLmZpbmQoJy5wb2QtY29udGFpbmVyJykpO1xuICAgICAgICAgICAgcG9kQ29udGFpbmVyLmFwcGVuZChjcmVhdGVFbGVtZW50cygkdGVtcGxhdGVDYWNoZS5nZXQoXCJwb2RUZW1wbGF0ZS5odG1sXCIpLCBcInBvZFwiLCBob3N0LnBvZHMuZmlsdGVyKG5hbWVzcGFjZUZpbHRlcikpKTtcbiAgICAgICAgICAgIGhvc3RzRWwuYXBwZW5kKGhvc3RFbCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgLy9wYXJlbnRFbC5hcHBlbmQoY3JlYXRlRWxlbWVudHMoJHRlbXBsYXRlQ2FjaGUuZ2V0KFwicG9kVGVtcGxhdGUuaHRtbFwiKSwgJ3BvZCcsIHBvZHMpKTtcbiAgICAgICAgICBlbGVtZW50LmFwcGVuZCgkY29tcGlsZShwYXJlbnRFbCkoc2NvcGUpKTtcbiAgICAgICAgICAkdGltZW91dCgoKSA9PiB7IGVsZW1lbnQuY3NzKHt2aXNpYmlsaXR5OiAndmlzaWJsZSd9KTsgfSwgMjUwKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICAgICAgc2NvcGUuJGVtaXQoJ2pzcGx1bWJEb1doaWxlU3VzcGVuZGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgbG9nLmRlYnVnKFwiVXBkYXRlXCIpO1xuICAgICAgICAgICAgdmFyIHNlcnZpY2VzID0gc2NvcGUubW9kZWwuc2VydmljZXMuZmlsdGVyKG5hbWVzcGFjZUZpbHRlcik7XG4gICAgICAgICAgICB2YXIgcmVwbGljYXRpb25Db250cm9sbGVycyA9IHNjb3BlLm1vZGVsLnJlcGxpY2F0aW9uQ29udHJvbGxlcnMuZmlsdGVyKG5hbWVzcGFjZUZpbHRlcik7XG4gICAgICAgICAgICB2YXIgcG9kcyA9IHNjb3BlLm1vZGVsLnBvZHMuZmlsdGVyKG5hbWVzcGFjZUZpbHRlcik7XG4gICAgICAgICAgICB2YXIgaG9zdHMgPSBzY29wZS5tb2RlbC5ob3N0cztcbiAgICAgICAgICAgIHZhciBwYXJlbnRFbCA9IGVsZW1lbnQuZmluZCgnW2hhd3Rpby1qc3BsdW1iXScpO1xuICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gcGFyZW50RWwuZmluZCgnLmpzcGx1bWItbm9kZScpO1xuICAgICAgICAgICAgY2hpbGRyZW4uZWFjaCgoaW5kZXgsIGMpID0+IHtcbiAgICAgICAgICAgICAgdmFyIGNoaWxkID0gYW5ndWxhci5lbGVtZW50KGMpO1xuICAgICAgICAgICAgICB2YXIga2V5ID0gY2hpbGQuYXR0cignaWQnKTtcbiAgICAgICAgICAgICAgaWYgKENvcmUuaXNCbGFuayhrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciB0eXBlID0gY2hpbGQuYXR0cignZGF0YS10eXBlJyk7XG4gICAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2hvc3QnOlxuICAgICAgICAgICAgICAgICAgbG9nLmRlYnVnKCdrZXk6ICcsIGtleSk7XG4gICAgICAgICAgICAgICAgICBpZiAoa2V5IGluIHNjb3BlLm1vZGVsLnBvZHNCeUhvc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnc2VydmljZSc6XG4gICAgICAgICAgICAgICAgICBpZiAoa2V5IGluIHNjb3BlLm1vZGVsLnNlcnZpY2VzQnlLZXkgJiYgc2NvcGUubW9kZWwuc2VydmljZXNCeUtleVtrZXldLm5hbWVzcGFjZSA9PSBzY29wZS5rdWJlcm5ldGVzLnNlbGVjdGVkTmFtZXNwYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZXJ2aWNlID0gc2NvcGUubW9kZWwuc2VydmljZXNCeUtleVtrZXldO1xuICAgICAgICAgICAgICAgICAgICBjaGlsZC5hdHRyKCdjb25uZWN0LXRvJywgc2VydmljZS5jb25uZWN0VG8pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdwb2QnOlxuICAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgIGlmIChoYXNJZChwb2RzLCBpZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgIGlmIChrZXkgaW4gc2NvcGUubW9kZWwucG9kc0J5S2V5ICYmIHNjb3BlLm1vZGVsLnBvZHNCeUtleVtrZXldLm5hbWVzcGFjZSA9PSBzY29wZS5rdWJlcm5ldGVzLnNlbGVjdGVkTmFtZXNwYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3JlcGxpY2F0aW9uQ29udHJvbGxlcic6XG4gICAgICAgICAgICAgICAgICBpZiAoa2V5IGluIHNjb3BlLm1vZGVsLnJlcGxpY2F0aW9uQ29udHJvbGxlcnNCeUtleSAmJiBzY29wZS5tb2RlbC5yZXBsaWNhdGlvbkNvbnRyb2xsZXJzQnlLZXlba2V5XS5uYW1lc3BhY2UgPT0gc2NvcGUua3ViZXJuZXRlcy5zZWxlY3RlZE5hbWVzcGFjZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVwbGljYXRpb25Db250cm9sbGVyID0gc2NvcGUubW9kZWwucmVwbGljYXRpb25Db250cm9sbGVyc0J5S2V5W2tleV07XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLmF0dHIoJ2Nvbm5lY3QtdG8nLCByZXBsaWNhdGlvbkNvbnRyb2xsZXIuY29ubmVjdFRvKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyhcIklnbm9yaW5nIGVsZW1lbnQgd2l0aCB1bmtub3duIHR5cGVcIik7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbG9nLmRlYnVnKFwiUmVtb3Zpbmc6IFwiLCBrZXkpO1xuICAgICAgICAgICAgICBjaGlsZC5yZW1vdmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIHNlcnZpY2VzRWwgPSBwYXJlbnRFbC5maW5kKFwiLnNlcnZpY2VzXCIpO1xuICAgICAgICAgICAgdmFyIGhvc3RzRWwgPSBwYXJlbnRFbC5maW5kKFwiLmhvc3RzXCIpO1xuICAgICAgICAgICAgdmFyIHJlcGxpY2F0aW9uQ29udHJvbGxlcnNFbCA9IHBhcmVudEVsLmZpbmQoXCIucmVwbGljYXRpb25Db250cm9sbGVyc1wiKTtcbiAgICAgICAgICAgIGFwcGVuZE5ld0VsZW1lbnRzKHNlcnZpY2VzRWwsICR0ZW1wbGF0ZUNhY2hlLmdldChcInNlcnZpY2VUZW1wbGF0ZS5odG1sXCIpLCBcInNlcnZpY2VcIiwgc2VydmljZXMuZmlsdGVyKG5hbWVzcGFjZUZpbHRlcikpO1xuICAgICAgICAgICAgYXBwZW5kTmV3RWxlbWVudHMocmVwbGljYXRpb25Db250cm9sbGVyc0VsLCAkdGVtcGxhdGVDYWNoZS5nZXQoXCJyZXBsaWNhdGlvbkNvbnRyb2xsZXJUZW1wbGF0ZS5odG1sXCIpLCBcInJlcGxpY2F0aW9uQ29udHJvbGxlclwiLCByZXBsaWNhdGlvbkNvbnRyb2xsZXJzLmZpbHRlcihuYW1lc3BhY2VGaWx0ZXIpKTtcbiAgICAgICAgICAgIGFwcGVuZE5ld0VsZW1lbnRzKGhvc3RzRWwsICR0ZW1wbGF0ZUNhY2hlLmdldChcImhvc3RUZW1wbGF0ZS5odG1sXCIpLCBcImhvc3RcIiwgaG9zdHMpO1xuICAgICAgICAgICAgaG9zdHMuZm9yRWFjaCgoaG9zdCkgPT4ge1xuICAgICAgICAgICAgICB2YXIgaG9zdEVsID0gcGFyZW50RWwuZmluZChcIiNcIiArIGhvc3QuX2tleSk7XG4gICAgICAgICAgICAgIGFwcGVuZE5ld0VsZW1lbnRzKGhvc3RFbCwgJHRlbXBsYXRlQ2FjaGUuZ2V0KFwicG9kVGVtcGxhdGUuaHRtbFwiKSwgXCJwb2RcIiwgaG9zdC5wb2RzLmZpbHRlcihuYW1lc3BhY2VGaWx0ZXIpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVmcmVzaERyYXdpbmcoKSB7XG4gICAgICAgICAgaWYgKGVsZW1lbnQuY2hpbGRyZW4oKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGZpcnN0RHJhdygpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1cGRhdGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgQ29yZS4kYXBwbHkoc2NvcGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2NvcGUuJG9uKCdrdWJlcm5ldGVzTW9kZWxVcGRhdGVkJywgcmVmcmVzaERyYXdpbmcpO1xuXG4gICAgICAgIC8vIGRldGVjdCB0aGUgdmlldyBjaGFuZ2luZyBhZnRlciB0aGUgbGFzdCB0aW1lIHRoZSBtb2RlbCBjaGFuZ2VkXG4gICAgICAgIHNjb3BlLiRvbihcIiRyb3V0ZUNoYW5nZVN1Y2Nlc3NcIiwgKCkgPT4ge1xuICAgICAgICAgIHNldFRpbWVvdXQocmVmcmVzaERyYXdpbmcsIDEwMCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH1dKTtcblxuICB2YXIgT3ZlcnZpZXdCb3hDb250cm9sbGVyID0gY29udHJvbGxlcihcIk92ZXJ2aWV3Qm94Q29udHJvbGxlclwiLCBbXCIkc2NvcGVcIiwgXCIkbG9jYXRpb25cIiwgKCRzY29wZSwgJGxvY2F0aW9uOm5nLklMb2NhdGlvblNlcnZpY2UpID0+IHtcbiAgICAkc2NvcGUudmlld0RldGFpbHMgPSAoZW50aXR5LCBwYXRoOnN0cmluZykgPT4ge1xuICAgICAgaWYgKGVudGl0eSkge1xuICAgICAgICB2YXIgbmFtZXNwYWNlID0gZW50aXR5Lm5hbWVzcGFjZTtcbiAgICAgICAgdmFyIGlkID0gZW50aXR5LmlkO1xuICAgICAgICAkbG9jYXRpb24ucGF0aChVcmxIZWxwZXJzLmpvaW4oJy9rdWJlcm5ldGVzL25hbWVzcGFjZScsIG5hbWVzcGFjZSwgcGF0aCwgaWQpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZy53YXJuKFwiTm8gZW50aXR5IGZvciB2aWV3RGV0YWlscyFcIik7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgdmFyIHNjb3BlTmFtZSA9IFwiT3ZlcnZpZXdDb250cm9sbGVyXCI7XG5cbiAgdmFyIE92ZXJ2aWV3Q29udHJvbGxlciA9IGNvbnRyb2xsZXIoc2NvcGVOYW1lLCBbXCIkc2NvcGVcIiwgXCIkbG9jYXRpb25cIiwgXCIkaHR0cFwiLCBcIiR0aW1lb3V0XCIsIFwiJHJvdXRlUGFyYW1zXCIsIFwiS3ViZXJuZXRlc01vZGVsXCIsXCJLdWJlcm5ldGVzU3RhdGVcIiwgXCJLdWJlcm5ldGVzQXBpVVJMXCIsICgkc2NvcGUsICRsb2NhdGlvbiwgJGh0dHAsICR0aW1lb3V0LCAkcm91dGVQYXJhbXMsIEt1YmVybmV0ZXNNb2RlbCwgS3ViZXJuZXRlc1N0YXRlLCBLdWJlcm5ldGVzQXBpVVJMKSA9PiB7XG4gICAgJHNjb3BlLm5hbWUgPSBzY29wZU5hbWU7XG4gICAgJHNjb3BlLmt1YmVybmV0ZXMgPSBLdWJlcm5ldGVzU3RhdGU7XG4gICAgJHNjb3BlLm1vZGVsID0gS3ViZXJuZXRlc01vZGVsO1xuXG4gICAgQ29udHJvbGxlckhlbHBlcnMuYmluZE1vZGVsVG9TZWFyY2hQYXJhbSgkc2NvcGUsICRsb2NhdGlvbiwgJ2t1YmVybmV0ZXMuc2VsZWN0ZWROYW1lc3BhY2UnLCAnbmFtZXNwYWNlJywgdW5kZWZpbmVkKTtcbiAgICBLdWJlcm5ldGVzLmluaXRTaGFyZWQoJHNjb3BlLCAkbG9jYXRpb24sICRodHRwLCAkdGltZW91dCwgJHJvdXRlUGFyYW1zLCBLdWJlcm5ldGVzTW9kZWwsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc0FwaVVSTCk7XG4gIH1dKTtcblxufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNQbHVnaW4udHNcIi8+XG5cbm1vZHVsZSBLdWJlcm5ldGVzIHtcblxuICBleHBvcnQgdmFyIFBpcGVsaW5lc0NvbnRyb2xsZXIgPSBjb250cm9sbGVyKFwiUGlwZWxpbmVzQ29udHJvbGxlclwiLCBbXCIkc2NvcGVcIiwgXCJLdWJlcm5ldGVzTW9kZWxcIiwgXCJLdWJlcm5ldGVzQnVpbGRzXCIsIFwiS3ViZXJuZXRlc1N0YXRlXCIsIFwiJGRpYWxvZ1wiLCBcIiR3aW5kb3dcIiwgXCIkdGVtcGxhdGVDYWNoZVwiLCBcIiRyb3V0ZVBhcmFtc1wiLCBcIiRsb2NhdGlvblwiLCBcImxvY2FsU3RvcmFnZVwiLCBcIiRodHRwXCIsIFwiJHRpbWVvdXRcIiwgXCJLdWJlcm5ldGVzQXBpVVJMXCIsXG4gICAgKCRzY29wZSwgS3ViZXJuZXRlc01vZGVsOkt1YmVybmV0ZXMuS3ViZXJuZXRlc01vZGVsU2VydmljZSwgS3ViZXJuZXRlc0J1aWxkcywgS3ViZXJuZXRlc1N0YXRlLCAkZGlhbG9nLCAkd2luZG93LCAkdGVtcGxhdGVDYWNoZSwgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb246bmcuSUxvY2F0aW9uU2VydmljZSwgbG9jYWxTdG9yYWdlLCAkaHR0cCwgJHRpbWVvdXQsIEt1YmVybmV0ZXNBcGlVUkwpID0+IHtcblxuICAgICAgJHNjb3BlLmt1YmVybmV0ZXMgPSBLdWJlcm5ldGVzU3RhdGU7XG4gICAgICAkc2NvcGUubW9kZWwgPSBLdWJlcm5ldGVzTW9kZWw7XG4gICAgICAkc2NvcGUuS3ViZXJuZXRlc0J1aWxkcyA9IEt1YmVybmV0ZXNCdWlsZHM7XG5cbiAgICAgIEt1YmVybmV0ZXMuaW5pdFNoYXJlZCgkc2NvcGUsICRsb2NhdGlvbiwgJGh0dHAsICR0aW1lb3V0LCAkcm91dGVQYXJhbXMsIEt1YmVybmV0ZXNNb2RlbCwgS3ViZXJuZXRlc1N0YXRlLCBLdWJlcm5ldGVzQXBpVVJMKTtcblxuICAgICAgLyoqXG4gICAgICAgKiBMZXRzIHVwZGF0ZSB0aGUgdmFyaW91cyBkYXRhIHRvIGpvaW4gdGhlbSB0b2dldGhlciB0byBhIHBpcGVsaW5lIG1vZGVsXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZURhdGEoKSB7XG4gICAgICAgIHZhciBwaXBlbGluZVN0ZXBzID0ge307XG4gICAgICAgIGlmICgkc2NvcGUuYnVpbGRDb25maWdzICYmICRzY29wZS5idWlsZHMgJiYgJHNjb3BlLmRlcGxveW1lbnRDb25maWdzKSB7XG4gICAgICAgICAgZW5yaWNoQnVpbGRDb25maWdzKCRzY29wZS5idWlsZENvbmZpZ3MsICRzY29wZS5idWlsZHMpO1xuICAgICAgICAgICRzY29wZS5mZXRjaGVkID0gdHJ1ZTtcblxuICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuYnVpbGRDb25maWdzLCAoYnVpbGRDb25maWcpID0+IHtcbiAgICAgICAgICAgIHZhciBwaXBlbGluZUtleSA9IGNyZWF0ZVBpcGVsaW5lS2V5KGJ1aWxkQ29uZmlnKTtcbiAgICAgICAgICAgIGlmIChwaXBlbGluZUtleSkge1xuICAgICAgICAgICAgICBwaXBlbGluZVN0ZXBzW3BpcGVsaW5lS2V5XSA9IHtcbiAgICAgICAgICAgICAgICBidWlsZENvbmZpZzogYnVpbGRDb25maWcsXG4gICAgICAgICAgICAgICAgYnVpbGRzOiBbXSxcbiAgICAgICAgICAgICAgICB0cmlnZ2VyZWRCeTogbnVsbCxcbiAgICAgICAgICAgICAgICB0cmlnZ2Vyc1N0ZXBzOiBbXSxcbiAgICAgICAgICAgICAgICAkY2xhc3M6ICdwaXBlbGluZS1idWlsZCdcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuYnVpbGRzLCAoYnVpbGQpID0+IHtcbiAgICAgICAgICAgIHZhciBwaXBlbGluZUtleSA9IGNyZWF0ZVBpcGVsaW5lS2V5KGJ1aWxkKTtcbiAgICAgICAgICAgIGlmIChwaXBlbGluZUtleSkge1xuICAgICAgICAgICAgICB2YXIgcGlwZWxpbmUgPSBwaXBlbGluZVN0ZXBzW3BpcGVsaW5lS2V5XTtcbiAgICAgICAgICAgICAgaWYgKCFwaXBlbGluZSkge1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJ3YXJuaW5nIG5vIHBpcGVsaW5lIGdlbmVyYXRlZCBmb3IgYnVpbGRDb25maWcgZm9yIGtleSBcIiArIHBpcGVsaW5lS2V5ICsgXCIgZm9yIGJ1aWxkIFwiICsgYW5ndWxhci50b0pzb24oYnVpbGQsIHRydWUpKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIndhcm5pbmcgbm8gcGlwZWxpbmUgZ2VuZXJhdGVkIGZvciBidWlsZENvbmZpZyBmb3Iga2V5IFwiICsgcGlwZWxpbmVLZXkgKyBcIiBmb3IgYnVpbGQgXCIgKyBidWlsZC4kbmFtZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGlwZWxpbmUuYnVpbGRzLnB1c2goYnVpbGQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyBUT0RPIG5vdyB3ZSBuZWVkIHRvIGxvb2sgYXQgdGhlIHRyaWdnZXJzIHRvIGZpZ3VyZSBvdXQgd2hpY2ggcGlwZWxpbmVTdGVwcyB0cmlnZ2VycyBlYWNoIHBpcGVsaW5lU3RlcFxuXG5cbiAgICAgICAgICAvLyBub3cgbGV0cyBjcmVhdGUgYW4gYXJyYXkgb2YgYWxsIHBpcGVsaW5lcywgc3RhcnRpbmcgZnJvbSB0aGUgZmlyc3Qga25vd24gc3RlcCB3aXRoIGEgbGlzdCBvZiB0aGUgc3RlcHNcblxuICAgICAgICAgIHZhciBwaXBlbGluZXMgPSBbXTtcbiAgICAgICAgICBhbmd1bGFyLmZvckVhY2gocGlwZWxpbmVTdGVwcywgKHBpcGVsaW5lU3RlcCwga2V5KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXBpcGVsaW5lU3RlcC50cmlnZ2VyZWRCeSkge1xuICAgICAgICAgICAgICAvLyB3ZSBhcmUgYSByb290IHN0ZXAuLi4uXG4gICAgICAgICAgICAgIHBpcGVsaW5lcy5wdXNoKHBpcGVsaW5lU3RlcCk7XG4gICAgICAgICAgICAgIC8vIG5vdyBsZXRzIGFkZCBhbGwgdGhlIHN0ZXBzIGZvciB0aGlzIGtleS4uLlxuICAgICAgICAgICAgICBwaXBlbGluZVN0ZXAudHJpZ2dlcnNTdGVwcy5wdXNoKHBpcGVsaW5lU3RlcCk7XG4gICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChwaXBlbGluZVN0ZXBzLCAoc3RlcCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChzdGVwLnRyaWdnZXJlZEJ5ID09PSBrZXkpIHtcbiAgICAgICAgICAgICAgICAgIHBpcGVsaW5lU3RlcC50cmlnZ2Vyc1N0ZXBzLnB1c2goc3RlcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuZGVwbG95bWVudENvbmZpZ3MsIChkZXBsb3ltZW50Q29uZmlnKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWRlcGxveW1lbnRDb25maWcua2luZCkge1xuICAgICAgICAgICAgICBkZXBsb3ltZW50Q29uZmlnLmtpbmQgPSBcIkRlcGxveW1lbnRDb25maWdcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChkZXBsb3ltZW50Q29uZmlnLnRyaWdnZXJzLCAodHJpZ2dlcikgPT4ge1xuICAgICAgICAgICAgICB2YXIgdHlwZSA9IHRyaWdnZXIudHlwZTtcbiAgICAgICAgICAgICAgdmFyIGltYWdlQ2hhbmdlUGFyYW1zID0gdHJpZ2dlci5pbWFnZUNoYW5nZVBhcmFtcztcbiAgICAgICAgICAgICAgaWYgKGltYWdlQ2hhbmdlUGFyYW1zICYmIHR5cGUgPT09IFwiSW1hZ2VDaGFuZ2VcIikge1xuICAgICAgICAgICAgICAgIHZhciBmcm9tID0gaW1hZ2VDaGFuZ2VQYXJhbXMuZnJvbTtcbiAgICAgICAgICAgICAgICBpZiAoZnJvbSkge1xuICAgICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBmcm9tLm5hbWU7XG4gICAgICAgICAgICAgICAgICBpZiAoZnJvbS5raW5kID09PSBcIkltYWdlUmVwb3NpdG9yeVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YWcgPSBpbWFnZUNoYW5nZVBhcmFtcy50YWcgfHwgXCJsYXRlc3RcIjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBub3cgbGV0cyBmaW5kIGEgcGlwZWxpbmUgc3RlcCB3aGljaCBmaXJlcyBmcm9tIHRoaXNcbiAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gocGlwZWxpbmVTdGVwcywgKHBpcGVsaW5lU3RlcCwga2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG8gPSBDb3JlLnBhdGhHZXQocGlwZWxpbmVTdGVwLCBbXCJidWlsZENvbmZpZ1wiLCBcInBhcmFtZXRlcnNcIiwgXCJvdXRwdXRcIiwgXCJ0b1wiXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodG8gJiYgdG8ua2luZCA9PT0gXCJJbWFnZVJlcG9zaXRvcnlcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9OYW1lID0gdG8ubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRvTmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RvciA9IENvcmUucGF0aEdldChkZXBsb3ltZW50Q29uZmlnLCBbXCJ0ZW1wbGF0ZVwiLCBcImNvbnRyb2xsZXJUZW1wbGF0ZVwiLCBcInJlcGxpY2FTZWxlY3RvclwiXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvZHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJHBvZENvdW50ZXJzID0gc2VsZWN0b3IgPyBjcmVhdGVQb2RDb3VudGVycyhzZWxlY3RvciwgS3ViZXJuZXRlc01vZGVsLnBvZHNGb3JOYW1lc3BhY2UoKSwgcG9kcykgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZXBsb3lQaXBlbGluZVN0ZXAgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZENvbmZpZzogZGVwbG95bWVudENvbmZpZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjbGFzczogJ3BpcGVsaW5lLWRlcGxveScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcG9kQ291bnRlcnM6ICRwb2RDb3VudGVycyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwb2RzOiBwb2RzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaXBlbGluZVN0ZXAudHJpZ2dlcnNTdGVwcy5wdXNoKGRlcGxveVBpcGVsaW5lU3RlcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgJHNjb3BlLnBpcGVsaW5lcyA9IHBpcGVsaW5lcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIExldHMgY3JlYXRlIGEgdW5pcXVlIGtleSBmb3IgYnVpbGQgLyBjb25maWcgd2UgY2FuIHVzZSB0byBkbyBsaW5raW5nIG9mIGJ1aWxkcyAvIGNvbmZpZ3MgLyB0cmlnZ2Vyc1xuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBjcmVhdGVQaXBlbGluZUtleShidWlsZENvbmZpZykge1xuICAgICAgICByZXR1cm4gQ29yZS5wYXRoR2V0KGJ1aWxkQ29uZmlnLCBbXCJwYXJhbWV0ZXJzXCIsIFwic291cmNlXCIsIFwiZ2l0XCIsIFwidXJpXCJdKTtcbiAgICAgIH1cblxuICAgICAgJHNjb3BlLiRrZWVwUG9sbGluZyA9ICgpID0+IGtlZXBQb2xsaW5nTW9kZWw7XG4gICAgICAkc2NvcGUuZmV0Y2ggPSBQb2xsSGVscGVycy5zZXR1cFBvbGxpbmcoJHNjb3BlLCAobmV4dDooKSA9PiB2b2lkKSA9PiB7XG4gICAgICAgIHZhciByZWFkeSA9IDA7XG4gICAgICAgIHZhciBudW1TZXJ2aWNlcyA9IDM7XG5cbiAgICAgICAgZnVuY3Rpb24gbWF5YmVOZXh0KCkge1xuICAgICAgICAgIGlmICgrK3JlYWR5ID49IG51bVNlcnZpY2VzKSB7XG4gICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHVybCA9IGJ1aWxkc1Jlc3RVUkw7XG4gICAgICAgICRodHRwLmdldCh1cmwpLlxuICAgICAgICAgIHN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAkc2NvcGUuYnVpbGRzID0gZW5yaWNoQnVpbGRzKGRhdGEuaXRlbXMpO1xuICAgICAgICAgICAgICB1cGRhdGVEYXRhKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtYXliZU5leHQoKTtcbiAgICAgICAgICB9KS5cbiAgICAgICAgICBlcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgIGxvZy53YXJuKFwiRmFpbGVkIHRvIGxvYWQgXCIgKyB1cmwgKyBcIiBcIiArIGRhdGEgKyBcIiBcIiArIHN0YXR1cyk7XG4gICAgICAgICAgICBtYXliZU5leHQoKTtcblxuICAgICAgICAgIH0pO1xuICAgICAgICB1cmwgPSBidWlsZENvbmZpZ3NSZXN0VVJMO1xuICAgICAgICAkaHR0cC5nZXQodXJsKS5cbiAgICAgICAgICBzdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgJHNjb3BlLmJ1aWxkQ29uZmlncyA9IGRhdGEuaXRlbXM7XG4gICAgICAgICAgICAgIHVwZGF0ZURhdGEoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1heWJlTmV4dCgpO1xuICAgICAgICAgIH0pLlxuICAgICAgICAgIGVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgbG9nLndhcm4oXCJGYWlsZWQgdG8gbG9hZCBcIiArIHVybCArIFwiIFwiICsgZGF0YSArIFwiIFwiICsgc3RhdHVzKTtcbiAgICAgICAgICAgIG1heWJlTmV4dCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB1cmwgPSBkZXBsb3ltZW50Q29uZmlnc1Jlc3RVUkw7XG4gICAgICAgICRodHRwLmdldCh1cmwpLlxuICAgICAgICAgIHN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAkc2NvcGUuZGVwbG95bWVudENvbmZpZ3MgPSBkYXRhLml0ZW1zO1xuICAgICAgICAgICAgICB1cGRhdGVEYXRhKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtYXliZU5leHQoKTtcbiAgICAgICAgICB9KS5cbiAgICAgICAgICBlcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgIGxvZy53YXJuKFwiRmFpbGVkIHRvIGxvYWQgXCIgKyB1cmwgKyBcIiBcIiArIGRhdGEgKyBcIiBcIiArIHN0YXR1cyk7XG4gICAgICAgICAgICBtYXliZU5leHQoKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICAkc2NvcGUuZmV0Y2goKTtcbiAgICB9XSk7XG5cbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9pbmNsdWRlcy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzSGVscGVycy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzUGx1Z2luLnRzXCIvPlxuXG5tb2R1bGUgS3ViZXJuZXRlcyB7XG5cbiAgZXhwb3J0IHZhciBQb2RDb250cm9sbGVyID0gY29udHJvbGxlcihcIlBvZENvbnRyb2xsZXJcIixcbiAgICBbXCIkc2NvcGVcIiwgXCJLdWJlcm5ldGVzTW9kZWxcIiwgXCJLdWJlcm5ldGVzU3RhdGVcIiwgXCJTZXJ2aWNlUmVnaXN0cnlcIiwgXCIkdGVtcGxhdGVDYWNoZVwiLCBcIiRsb2NhdGlvblwiLCBcIiRyb3V0ZVBhcmFtc1wiLCBcIiRodHRwXCIsIFwiJHRpbWVvdXRcIiwgXCIkd2luZG93XCIsIFwiS3ViZXJuZXRlc0FwaVVSTFwiLFxuICAgICAgKCRzY29wZSwgS3ViZXJuZXRlc01vZGVsOiBLdWJlcm5ldGVzLkt1YmVybmV0ZXNNb2RlbFNlcnZpY2UsIEt1YmVybmV0ZXNTdGF0ZSwgU2VydmljZVJlZ2lzdHJ5LFxuICAgICAgICR0ZW1wbGF0ZUNhY2hlOm5nLklUZW1wbGF0ZUNhY2hlU2VydmljZSwgJGxvY2F0aW9uOm5nLklMb2NhdGlvblNlcnZpY2UsICRyb3V0ZVBhcmFtcywgJGh0dHAsICR0aW1lb3V0LCAkd2luZG93LCBLdWJlcm5ldGVzQXBpVVJMKSA9PiB7XG5cbiAgICAkc2NvcGUua3ViZXJuZXRlcyA9IEt1YmVybmV0ZXNTdGF0ZTtcbiAgICAkc2NvcGUubW9kZWwgPSBLdWJlcm5ldGVzTW9kZWw7XG5cbiAgICAkc2NvcGUuaXRlbUNvbmZpZyA9IHtcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgJ21hbmlmZXN0L2NvbnRhaW5lcnMvaW1hZ2UkJzoge1xuICAgICAgICAgIHRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoJ2ltYWdlVGVtcGxhdGUuaHRtbCcpXG4gICAgICAgIH0sXG4gICAgICAgICdjdXJyZW50U3RhdGUvc3RhdHVzJzoge1xuICAgICAgICAgIHRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoJ3N0YXR1c1RlbXBsYXRlLmh0bWwnKVxuICAgICAgICB9LFxuICAgICAgICAnXFxcXC9FbnZcXFxcLyc6IHtcbiAgICAgICAgICB0ZW1wbGF0ZTogJHRlbXBsYXRlQ2FjaGUuZ2V0KCdlbnZJdGVtVGVtcGxhdGUuaHRtbCcpXG4gICAgICAgIH0sXG4gICAgICAgICdeXFxcXC9sYWJlbHMkJzoge1xuICAgICAgICAgIHRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoJ2xhYmVsVGVtcGxhdGUuaHRtbCcpXG4gICAgICAgIH0sXG4gICAgICAgICdcXFxcL2VudlxcXFwva2V5JCc6IHtcbiAgICAgICAgICBoaWRkZW46IHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBLdWJlcm5ldGVzLmluaXRTaGFyZWQoJHNjb3BlLCAkbG9jYXRpb24sICRodHRwLCAkdGltZW91dCwgJHJvdXRlUGFyYW1zLCBLdWJlcm5ldGVzTW9kZWwsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc0FwaVVSTCk7XG5cbiAgICAkc2NvcGUuJG9uKCdrdWJlcm5ldGVzTW9kZWxVcGRhdGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgdXBkYXRlRGF0YSgpO1xuICAgIH0pO1xuXG4gICAgJHNjb3BlLiRvbignJHJvdXRlVXBkYXRlJywgKCRldmVudCkgPT4ge1xuICAgICAgdXBkYXRlRGF0YSgpO1xuICAgIH0pO1xuXG4gICAgJHNjb3BlLm9wZW5Mb2dzID0gKCkgPT4ge1xuICAgICAgdmFyIHBvZHMgPSBbJHNjb3BlLml0ZW1dO1xuICAgICAgb3BlbkxvZ3NGb3JQb2RzKFNlcnZpY2VSZWdpc3RyeSwgJHdpbmRvdywgS3ViZXJuZXRlc01vZGVsLmN1cnJlbnROYW1lc3BhY2UoKSwgcG9kcyk7XG4gICAgfTtcblxuICAgIHVwZGF0ZURhdGEoKTtcblxuICAgIGZ1bmN0aW9uIHVwZGF0ZURhdGEoKSB7XG4gICAgICAkc2NvcGUuaWQgPSAkcm91dGVQYXJhbXNbXCJpZFwiXTtcbiAgICAgICRzY29wZS5pdGVtID0gJHNjb3BlLm1vZGVsLmdldFBvZChLdWJlcm5ldGVzU3RhdGUuc2VsZWN0ZWROYW1lc3BhY2UsICRzY29wZS5pZCk7XG4gICAgICBDb3JlLiRhcHBseSgkc2NvcGUpO1xuICAgIH1cbiAgfV0pO1xufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNIZWxwZXJzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNQbHVnaW4udHNcIi8+XG5cbm1vZHVsZSBLdWJlcm5ldGVzIHtcblxuICBleHBvcnQgdmFyIFBvZEVkaXRDb250cm9sbGVyID0gY29udHJvbGxlcihcIlBvZEVkaXRDb250cm9sbGVyXCIsXG4gICAgW1wiJHNjb3BlXCIsIFwiS3ViZXJuZXRlc01vZGVsXCIsIFwiS3ViZXJuZXRlc1N0YXRlXCIsIFwiS3ViZXJuZXRlc1NjaGVtYVwiLCBcIiR0ZW1wbGF0ZUNhY2hlXCIsIFwiJGxvY2F0aW9uXCIsIFwiJHJvdXRlUGFyYW1zXCIsIFwiJGh0dHBcIiwgXCIkdGltZW91dFwiLCBcIkt1YmVybmV0ZXNBcGlVUkxcIixcbiAgICAgICgkc2NvcGUsIEt1YmVybmV0ZXNNb2RlbDogS3ViZXJuZXRlcy5LdWJlcm5ldGVzTW9kZWxTZXJ2aWNlLCBLdWJlcm5ldGVzU3RhdGUsIEt1YmVybmV0ZXNTY2hlbWEsXG4gICAgICAgJHRlbXBsYXRlQ2FjaGU6bmcuSVRlbXBsYXRlQ2FjaGVTZXJ2aWNlLCAkbG9jYXRpb246bmcuSUxvY2F0aW9uU2VydmljZSwgJHJvdXRlUGFyYW1zLCAkaHR0cCwgJHRpbWVvdXQsIEt1YmVybmV0ZXNBcGlVUkwpID0+IHtcblxuICAgICRzY29wZS5rdWJlcm5ldGVzID0gS3ViZXJuZXRlc1N0YXRlO1xuICAgICRzY29wZS5tb2RlbCA9IEt1YmVybmV0ZXNNb2RlbDtcbiAgICAkc2NvcGUuaWQgPSAkcm91dGVQYXJhbXNbXCJpZFwiXTtcbiAgICAkc2NvcGUuc2NoZW1hID0gS3ViZXJuZXRlc1NjaGVtYTtcbiAgICAkc2NvcGUuY29uZmlnID0gS3ViZXJuZXRlc1NjaGVtYS5kZWZpbml0aW9ucy5rdWJlcm5ldGVzX3YxYmV0YTJfUG9kO1xuXG4gICAgS3ViZXJuZXRlcy5pbml0U2hhcmVkKCRzY29wZSwgJGxvY2F0aW9uLCAkaHR0cCwgJHRpbWVvdXQsICRyb3V0ZVBhcmFtcywgS3ViZXJuZXRlc01vZGVsLCBLdWJlcm5ldGVzU3RhdGUsIEt1YmVybmV0ZXNBcGlVUkwpO1xuXG4gICAgJHNjb3BlLiRvbignJHJvdXRlVXBkYXRlJywgKCRldmVudCkgPT4ge1xuICAgICAgdXBkYXRlRGF0YSgpO1xuICAgIH0pO1xuXG4gICAgdXBkYXRlRGF0YSgpO1xuXG4gICAgZnVuY3Rpb24gdXBkYXRlRGF0YSgpIHtcbiAgICAgIGlmICgkc2NvcGUuaWQpIHtcbiAgICAgICAgJHNjb3BlLmVudGl0eSA9ICRzY29wZS5tb2RlbC5nZXRQb2QoS3ViZXJuZXRlc1N0YXRlLnNlbGVjdGVkTmFtZXNwYWNlLCAkc2NvcGUuaWQpO1xuICAgICAgICBDb3JlLiRhcHBseSgkc2NvcGUpO1xuICAgICAgICAkc2NvcGUuZmV0Y2hlZCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkc2NvcGUuZmV0Y2hlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vaW5jbHVkZXMudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwia3ViZXJuZXRlc1BsdWdpbi50c1wiLz5cblxubW9kdWxlIEt1YmVybmV0ZXMge1xuXG4gIGV4cG9ydCB2YXIgRW52SXRlbSA9IGNvbnRyb2xsZXIoXCJFbnZJdGVtXCIsIFtcIiRzY29wZVwiLCAoJHNjb3BlKSA9PiB7XG4gICAgdmFyIHBhcnRzID0gJHNjb3BlLmRhdGEuc3BsaXQoJz0nKTtcbiAgICAkc2NvcGUua2V5ID0gcGFydHMuc2hpZnQoKTtcbiAgICAkc2NvcGUudmFsdWUgPSBwYXJ0cy5qb2luKCc9Jyk7XG4gIH1dKTtcblxuICAvLyBtYWluIGNvbnRyb2xsZXIgZm9yIHRoZSBwYWdlXG4gIGV4cG9ydCB2YXIgUG9kcyA9IGNvbnRyb2xsZXIoXCJQb2RzXCIsIFtcIiRzY29wZVwiLCBcIkt1YmVybmV0ZXNNb2RlbFwiLCBcIkt1YmVybmV0ZXNQb2RzXCIsIFwiS3ViZXJuZXRlc1N0YXRlXCIsIFwiU2VydmljZVJlZ2lzdHJ5XCIsIFwiJGRpYWxvZ1wiLCBcIiR3aW5kb3dcIiwgXCIkdGVtcGxhdGVDYWNoZVwiLCBcIiRyb3V0ZVBhcmFtc1wiLCBcIiRsb2NhdGlvblwiLCBcImxvY2FsU3RvcmFnZVwiLCBcIiRodHRwXCIsIFwiJHRpbWVvdXRcIiwgXCJLdWJlcm5ldGVzQXBpVVJMXCIsXG4gICAgKCRzY29wZSwgS3ViZXJuZXRlc01vZGVsOiBLdWJlcm5ldGVzLkt1YmVybmV0ZXNNb2RlbFNlcnZpY2UsIEt1YmVybmV0ZXNQb2RzOm5nLklQcm9taXNlPG5nLnJlc291cmNlLklSZXNvdXJjZUNsYXNzPiwgS3ViZXJuZXRlc1N0YXRlLCBTZXJ2aWNlUmVnaXN0cnksICRkaWFsb2csICR3aW5kb3csICR0ZW1wbGF0ZUNhY2hlLCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbjpuZy5JTG9jYXRpb25TZXJ2aWNlLCBsb2NhbFN0b3JhZ2UsICRodHRwLCAkdGltZW91dCwgS3ViZXJuZXRlc0FwaVVSTCkgPT4ge1xuXG4gICAgJHNjb3BlLmt1YmVybmV0ZXMgPSBLdWJlcm5ldGVzU3RhdGU7XG4gICAgJHNjb3BlLm1vZGVsID0gS3ViZXJuZXRlc01vZGVsO1xuICAgICRzY29wZS4kb24oJ2t1YmVybmV0ZXNNb2RlbFVwZGF0ZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBDb3JlLiRhcHBseSgkc2NvcGUpO1xuICAgIH0pO1xuXG4gICAgJHNjb3BlLml0ZW1TY2hlbWEgPSBGb3Jtcy5jcmVhdGVGb3JtQ29uZmlndXJhdGlvbigpO1xuXG4gICAgJHNjb3BlLnRhYmxlQ29uZmlnID0ge1xuICAgICAgZGF0YTogJ21vZGVsLnBvZHMnLFxuICAgICAgc2hvd1NlbGVjdGlvbkNoZWNrYm94OiB0cnVlLFxuICAgICAgZW5hYmxlUm93Q2xpY2tTZWxlY3Rpb246IGZhbHNlLFxuICAgICAgbXVsdGlTZWxlY3Q6IHRydWUsXG4gICAgICBzZWxlY3RlZEl0ZW1zOiBbXSxcbiAgICAgIGZpbHRlck9wdGlvbnM6IHtcbiAgICAgICAgZmlsdGVyVGV4dDogJGxvY2F0aW9uLnNlYXJjaCgpW1wicVwiXSB8fCAnJ1xuICAgICAgfSxcbiAgICAgIGNvbHVtbkRlZnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGZpZWxkOiAnaWQnLFxuICAgICAgICAgIGRpc3BsYXlOYW1lOiAnSUQnLFxuICAgICAgICAgIGRlZmF1bHRTb3J0OiB0cnVlLFxuICAgICAgICAgIGNlbGxUZW1wbGF0ZTogJHRlbXBsYXRlQ2FjaGUuZ2V0KFwiaWRUZW1wbGF0ZS5odG1sXCIpXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBmaWVsZDogJ2N1cnJlbnRTdGF0ZS5zdGF0dXMnLFxuICAgICAgICAgIGRpc3BsYXlOYW1lOiAnU3RhdHVzJyxcbiAgICAgICAgICBjZWxsVGVtcGxhdGU6ICR0ZW1wbGF0ZUNhY2hlLmdldChcInN0YXR1c1RlbXBsYXRlLmh0bWxcIilcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGZpZWxkOiAnY29udGFpbmVySW1hZ2VzJyxcbiAgICAgICAgICBkaXNwbGF5TmFtZTogJ0ltYWdlcycsXG4gICAgICAgICAgY2VsbFRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoXCJpbWFnZVRlbXBsYXRlLmh0bWxcIilcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGZpZWxkOiAnY3VycmVudFN0YXRlLmhvc3QnLFxuICAgICAgICAgIGRpc3BsYXlOYW1lOiAnSG9zdCcsXG4gICAgICAgICAgY2VsbFRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoXCJob3N0VGVtcGxhdGUuaHRtbFwiKVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZmllbGQ6ICdsYWJlbHMnLFxuICAgICAgICAgIGRpc3BsYXlOYW1lOiAnTGFiZWxzJyxcbiAgICAgICAgICBjZWxsVGVtcGxhdGU6ICR0ZW1wbGF0ZUNhY2hlLmdldChcImxhYmVsVGVtcGxhdGUuaHRtbFwiKVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZmllbGQ6ICdjdXJyZW50U3RhdGUucG9kSVAnLFxuICAgICAgICAgIGRpc3BsYXlOYW1lOiAnUG9kIElQJ1xuICAgICAgICB9XG4gICAgICAgIC8qXG4gICAgICAgIFRPRE8gb25seSBzaG93IG5hbWVzcGFjZSBpZiB3ZSBoYXZlIGEgJ3Nob3cgYWxsIG5hbWVzcGFjZXMnIG9wdGlvblxuICAgICAgICAsXG4gICAgICAgIHtcbiAgICAgICAgICAgICAgZmllbGQ6ICduYW1lc3BhY2UnLFxuICAgICAgICAgICAgICBkaXNwbGF5TmFtZTogJ05hbWVzcGFjZSdcbiAgICAgICAgfVxuICAgICAgICAqL1xuICAgICAgXVxuICAgIH07XG5cbiAgICAkc2NvcGUub3BlbkxvZ3MgPSAoKSA9PiB7XG4gICAgICB2YXIgcG9kcyA9ICRzY29wZS50YWJsZUNvbmZpZy5zZWxlY3RlZEl0ZW1zO1xuICAgICAgaWYgKCFwb2RzIHx8ICFwb2RzLmxlbmd0aCkge1xuICAgICAgICBpZiAoJHNjb3BlLmlkKSB7XG4gICAgICAgICAgdmFyIGl0ZW0gPSAkc2NvcGUuaXRlbTtcbiAgICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgICAgcG9kcyA9IFtpdGVtXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG9wZW5Mb2dzRm9yUG9kcyhTZXJ2aWNlUmVnaXN0cnksICR3aW5kb3csIEt1YmVybmV0ZXNNb2RlbC5jdXJyZW50TmFtZXNwYWNlKCksIHBvZHMpO1xuICAgIH07XG5cbiAgICBLdWJlcm5ldGVzLmluaXRTaGFyZWQoJHNjb3BlLCAkbG9jYXRpb24sICRodHRwLCAkdGltZW91dCwgJHJvdXRlUGFyYW1zLCBLdWJlcm5ldGVzTW9kZWwsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc0FwaVVSTCk7XG5cbiAgICBLdWJlcm5ldGVzUG9kcy50aGVuKChLdWJlcm5ldGVzUG9kczpuZy5yZXNvdXJjZS5JUmVzb3VyY2VDbGFzcykgPT4ge1xuICAgICAgJHNjb3BlLmRlbGV0ZVByb21wdCA9IChzZWxlY3RlZCkgPT4ge1xuICAgICAgICBpZiAoYW5ndWxhci5pc1N0cmluZyhzZWxlY3RlZCkpIHtcbiAgICAgICAgICBzZWxlY3RlZCA9IFt7XG4gICAgICAgICAgICBpZDogc2VsZWN0ZWRcbiAgICAgICAgICB9XTtcbiAgICAgICAgfVxuICAgICAgICBVSS5tdWx0aUl0ZW1Db25maXJtQWN0aW9uRGlhbG9nKDxVSS5NdWx0aUl0ZW1Db25maXJtQWN0aW9uT3B0aW9ucz57XG4gICAgICAgICAgY29sbGVjdGlvbjogc2VsZWN0ZWQsXG4gICAgICAgICAgaW5kZXg6ICdpZCcsXG4gICAgICAgICAgb25DbG9zZTogKHJlc3VsdDpib29sZWFuKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgIGZ1bmN0aW9uIGRlbGV0ZVNlbGVjdGVkKHNlbGVjdGVkOkFycmF5PEt1YmVQb2Q+LCBuZXh0Okt1YmVQb2QpIHtcbiAgICAgICAgICAgICAgICBpZiAobmV4dCkge1xuICAgICAgICAgICAgICAgICAgbG9nLmRlYnVnKFwiZGVsZXRpbmc6IFwiLCBuZXh0LmlkKTtcbiAgICAgICAgICAgICAgICAgIEt1YmVybmV0ZXNQb2RzLmRlbGV0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBuZXh0LmlkXG4gICAgICAgICAgICAgICAgICB9LCB1bmRlZmluZWQsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbG9nLmRlYnVnKFwiZGVsZXRlZDogXCIsIG5leHQuaWQpO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGVTZWxlY3RlZChzZWxlY3RlZCwgc2VsZWN0ZWQuc2hpZnQoKSk7XG4gICAgICAgICAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbG9nLmRlYnVnKFwiRXJyb3IgZGVsZXRpbmc6IFwiLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZVNlbGVjdGVkKHNlbGVjdGVkLCBzZWxlY3RlZC5zaGlmdCgpKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBkZWxldGVTZWxlY3RlZChzZWxlY3RlZCwgc2VsZWN0ZWQuc2hpZnQoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB0aXRsZTogJ0RlbGV0ZSBwb2RzPycsXG4gICAgICAgICAgYWN0aW9uOiAnVGhlIGZvbGxvd2luZyBwb2RzIHdpbGwgYmUgZGVsZXRlZDonLFxuICAgICAgICAgIG9rVGV4dDogJ0RlbGV0ZScsXG4gICAgICAgICAgb2tDbGFzczogJ2J0bi1kYW5nZXInLFxuICAgICAgICAgIGN1c3RvbTogXCJUaGlzIG9wZXJhdGlvbiBpcyBwZXJtYW5lbnQgb25jZSBjb21wbGV0ZWQhXCIsXG4gICAgICAgICAgY3VzdG9tQ2xhc3M6IFwiYWxlcnQgYWxlcnQtd2FybmluZ1wiXG4gICAgICAgIH0pLm9wZW4oKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1dKTtcbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9pbmNsdWRlcy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzSGVscGVycy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzUGx1Z2luLnRzXCIvPlxuXG5tb2R1bGUgS3ViZXJuZXRlcyB7XG5cbiAgZXhwb3J0IHZhciBSZXBsaWNhdGlvbkNvbnRyb2xsZXJDb250cm9sbGVyID0gY29udHJvbGxlcihcIlJlcGxpY2F0aW9uQ29udHJvbGxlckNvbnRyb2xsZXJcIixcbiAgICBbXCIkc2NvcGVcIiwgXCJLdWJlcm5ldGVzTW9kZWxcIiwgXCJLdWJlcm5ldGVzU3RhdGVcIiwgXCIkdGVtcGxhdGVDYWNoZVwiLCBcIiRsb2NhdGlvblwiLCBcIiRyb3V0ZVBhcmFtc1wiLCBcIiRodHRwXCIsIFwiJHRpbWVvdXRcIiwgXCJLdWJlcm5ldGVzQXBpVVJMXCIsXG4gICAgICAoJHNjb3BlLCBLdWJlcm5ldGVzTW9kZWw6IEt1YmVybmV0ZXMuS3ViZXJuZXRlc01vZGVsU2VydmljZSwgS3ViZXJuZXRlc1N0YXRlLFxuICAgICAgICR0ZW1wbGF0ZUNhY2hlOm5nLklUZW1wbGF0ZUNhY2hlU2VydmljZSwgJGxvY2F0aW9uOm5nLklMb2NhdGlvblNlcnZpY2UsICRyb3V0ZVBhcmFtcywgJGh0dHAsICR0aW1lb3V0LCBLdWJlcm5ldGVzQXBpVVJMKSA9PiB7XG5cbiAgICAkc2NvcGUua3ViZXJuZXRlcyA9IEt1YmVybmV0ZXNTdGF0ZTtcbiAgICAkc2NvcGUubW9kZWwgPSBLdWJlcm5ldGVzTW9kZWw7XG5cbiAgICBLdWJlcm5ldGVzLmluaXRTaGFyZWQoJHNjb3BlLCAkbG9jYXRpb24sICRodHRwLCAkdGltZW91dCwgJHJvdXRlUGFyYW1zLCBLdWJlcm5ldGVzTW9kZWwsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc0FwaVVSTCk7XG5cbiAgICAkc2NvcGUuaXRlbUNvbmZpZyA9IHtcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgJ15cXFxcL2xhYmVscyQnOiB7XG4gICAgICAgICAgdGVtcGxhdGU6ICR0ZW1wbGF0ZUNhY2hlLmdldCgnbGFiZWxUZW1wbGF0ZS5odG1sJylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAkc2NvcGUuJG9uKCdrdWJlcm5ldGVzTW9kZWxVcGRhdGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgdXBkYXRlRGF0YSgpO1xuICAgIH0pO1xuXG4gICAgJHNjb3BlLiRvbignJHJvdXRlVXBkYXRlJywgKCRldmVudCkgPT4ge1xuICAgICAgdXBkYXRlRGF0YSgpO1xuICAgIH0pO1xuXG4gICAgdXBkYXRlRGF0YSgpO1xuXG4gICAgZnVuY3Rpb24gdXBkYXRlRGF0YSgpIHtcbiAgICAgICRzY29wZS5pZCA9ICRyb3V0ZVBhcmFtc1tcImlkXCJdO1xuICAgICAgJHNjb3BlLml0ZW0gPSAkc2NvcGUubW9kZWwuZ2V0UmVwbGljYXRpb25Db250cm9sbGVyKEt1YmVybmV0ZXNTdGF0ZS5zZWxlY3RlZE5hbWVzcGFjZSwgJHNjb3BlLmlkKTtcbiAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgfVxuICB9XSk7XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vaW5jbHVkZXMudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwia3ViZXJuZXRlc0hlbHBlcnMudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwia3ViZXJuZXRlc1BsdWdpbi50c1wiLz5cblxubW9kdWxlIEt1YmVybmV0ZXMge1xuXG4gIGV4cG9ydCB2YXIgUmVwbGljYXRpb25Db250cm9sbGVyRWRpdENvbnRyb2xsZXIgPSBjb250cm9sbGVyKFwiUmVwbGljYXRpb25Db250cm9sbGVyRWRpdENvbnRyb2xsZXJcIixcbiAgICBbXCIkc2NvcGVcIiwgXCJLdWJlcm5ldGVzTW9kZWxcIiwgXCJLdWJlcm5ldGVzU3RhdGVcIiwgXCJLdWJlcm5ldGVzU2NoZW1hXCIsIFwiJHRlbXBsYXRlQ2FjaGVcIiwgXCIkbG9jYXRpb25cIiwgXCIkcm91dGVQYXJhbXNcIiwgXCIkaHR0cFwiLCBcIiR0aW1lb3V0XCIsIFwiS3ViZXJuZXRlc0FwaVVSTFwiLFxuICAgICAgKCRzY29wZSwgS3ViZXJuZXRlc01vZGVsOiBLdWJlcm5ldGVzLkt1YmVybmV0ZXNNb2RlbFNlcnZpY2UsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc1NjaGVtYSxcbiAgICAgICAkdGVtcGxhdGVDYWNoZTpuZy5JVGVtcGxhdGVDYWNoZVNlcnZpY2UsICRsb2NhdGlvbjpuZy5JTG9jYXRpb25TZXJ2aWNlLCAkcm91dGVQYXJhbXMsICRodHRwLCAkdGltZW91dCwgS3ViZXJuZXRlc0FwaVVSTCkgPT4ge1xuXG4gICAgJHNjb3BlLmt1YmVybmV0ZXMgPSBLdWJlcm5ldGVzU3RhdGU7XG4gICAgJHNjb3BlLm1vZGVsID0gS3ViZXJuZXRlc01vZGVsO1xuICAgICRzY29wZS5pZCA9ICRyb3V0ZVBhcmFtc1tcImlkXCJdO1xuICAgICRzY29wZS5zY2hlbWEgPSBLdWJlcm5ldGVzU2NoZW1hO1xuICAgICRzY29wZS5jb25maWcgPSBLdWJlcm5ldGVzU2NoZW1hLmRlZmluaXRpb25zLmt1YmVybmV0ZXNfdjFiZXRhMl9SZXBsaWNhdGlvbkNvbnRyb2xsZXI7XG5cbiAgICBLdWJlcm5ldGVzLmluaXRTaGFyZWQoJHNjb3BlLCAkbG9jYXRpb24sICRodHRwLCAkdGltZW91dCwgJHJvdXRlUGFyYW1zLCBLdWJlcm5ldGVzTW9kZWwsIEt1YmVybmV0ZXNTdGF0ZSwgS3ViZXJuZXRlc0FwaVVSTCk7XG5cbiAgICAkc2NvcGUuJG9uKCckcm91dGVVcGRhdGUnLCAoJGV2ZW50KSA9PiB7XG4gICAgICB1cGRhdGVEYXRhKCk7XG4gICAgfSk7XG5cbiAgICB1cGRhdGVEYXRhKCk7XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVEYXRhKCkge1xuICAgICAgaWYgKCRzY29wZS5pZCkge1xuICAgICAgICAkc2NvcGUuZW50aXR5ID0gJHNjb3BlLm1vZGVsLmdldFJlcGxpY2F0aW9uQ29udHJvbGxlcihLdWJlcm5ldGVzU3RhdGUuc2VsZWN0ZWROYW1lc3BhY2UsICRzY29wZS5pZCk7XG4gICAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgICAgICRzY29wZS5mZXRjaGVkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRzY29wZS5mZXRjaGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9pbmNsdWRlcy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzSGVscGVycy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzUGx1Z2luLnRzXCIvPlxuXG5tb2R1bGUgS3ViZXJuZXRlcyB7XG5cbiAgZXhwb3J0IHZhciBSZXBsaWNhdGlvbkNvbnRyb2xsZXJzID0gY29udHJvbGxlcihcIlJlcGxpY2F0aW9uQ29udHJvbGxlcnNcIixcbiAgICBbXCIkc2NvcGVcIiwgXCJLdWJlcm5ldGVzTW9kZWxcIiwgXCJLdWJlcm5ldGVzUmVwbGljYXRpb25Db250cm9sbGVyc1wiLCBcIkt1YmVybmV0ZXNQb2RzXCIsIFwiS3ViZXJuZXRlc1N0YXRlXCIsIFwiJHRlbXBsYXRlQ2FjaGVcIiwgXCIkbG9jYXRpb25cIiwgXCIkcm91dGVQYXJhbXNcIiwgXCJqb2xva2lhXCIsIFwiJGh0dHBcIiwgXCIkdGltZW91dFwiLCBcIkt1YmVybmV0ZXNBcGlVUkxcIixcbiAgICAgICgkc2NvcGUsIEt1YmVybmV0ZXNNb2RlbDogS3ViZXJuZXRlcy5LdWJlcm5ldGVzTW9kZWxTZXJ2aWNlLCBLdWJlcm5ldGVzUmVwbGljYXRpb25Db250cm9sbGVyczpuZy5JUHJvbWlzZTxuZy5yZXNvdXJjZS5JUmVzb3VyY2VDbGFzcz4sIEt1YmVybmV0ZXNQb2RzOm5nLklQcm9taXNlPG5nLnJlc291cmNlLklSZXNvdXJjZUNsYXNzPiwgS3ViZXJuZXRlc1N0YXRlLFxuICAgICAgICR0ZW1wbGF0ZUNhY2hlOm5nLklUZW1wbGF0ZUNhY2hlU2VydmljZSwgJGxvY2F0aW9uOm5nLklMb2NhdGlvblNlcnZpY2UsICRyb3V0ZVBhcmFtcywgam9sb2tpYTpKb2xva2lhLklKb2xva2lhLCAkaHR0cCwgJHRpbWVvdXQsIEt1YmVybmV0ZXNBcGlVUkwpID0+IHtcblxuICAgICRzY29wZS5rdWJlcm5ldGVzID0gS3ViZXJuZXRlc1N0YXRlO1xuICAgICRzY29wZS5tb2RlbCA9IEt1YmVybmV0ZXNNb2RlbDtcbiAgICAkc2NvcGUuJG9uKCdrdWJlcm5ldGVzTW9kZWxVcGRhdGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgQ29yZS4kYXBwbHkoJHNjb3BlKTtcbiAgICB9KTtcblxuICAgICRzY29wZS50YWJsZUNvbmZpZyA9IHtcbiAgICAgIGRhdGE6ICdtb2RlbC5yZXBsaWNhdGlvbkNvbnRyb2xsZXJzJyxcbiAgICAgIHNob3dTZWxlY3Rpb25DaGVja2JveDogdHJ1ZSxcbiAgICAgIGVuYWJsZVJvd0NsaWNrU2VsZWN0aW9uOiBmYWxzZSxcbiAgICAgIG11bHRpU2VsZWN0OiB0cnVlLFxuICAgICAgc2VsZWN0ZWRJdGVtczogW10sXG4gICAgICBmaWx0ZXJPcHRpb25zOiB7XG4gICAgICAgIGZpbHRlclRleHQ6ICRsb2NhdGlvbi5zZWFyY2goKVtcInFcIl0gfHwgJydcbiAgICAgIH0sXG4gICAgICBjb2x1bW5EZWZzOiBbXG4gICAgICAgIHsgZmllbGQ6ICdpZCcsIGRpc3BsYXlOYW1lOiAnSUQnLCBjZWxsVGVtcGxhdGU6ICR0ZW1wbGF0ZUNhY2hlLmdldChcImlkVGVtcGxhdGUuaHRtbFwiKSB9LFxuICAgICAgICB7IGZpZWxkOiAnJHBvZHNMaW5rJywgZGlzcGxheU5hbWU6ICdQb2RzJywgY2VsbFRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoXCJwb2RDb3VudHNBbmRMaW5rVGVtcGxhdGUuaHRtbFwiKSB9LFxuICAgICAgICB7IGZpZWxkOiAnZGVzaXJlZFN0YXRlLnJlcGxpY2FzJywgZGlzcGxheU5hbWU6ICdSZXBsaWNhcycsIGNlbGxUZW1wbGF0ZTokdGVtcGxhdGVDYWNoZS5nZXQoXCJkZXNpcmVkUmVwbGljYXMuaHRtbFwiKSB9LFxuICAgICAgICB7IGZpZWxkOiAnbGFiZWxzVGV4dCcsIGRpc3BsYXlOYW1lOiAnTGFiZWxzJywgY2VsbFRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoXCJsYWJlbFRlbXBsYXRlLmh0bWxcIikgfSxcbiAgICAgICAgeyBmaWVsZDogJ25hbWVzcGFjZScsIGRpc3BsYXlOYW1lOiAnTmFtZXNwYWNlJyB9XG4gICAgICBdXG4gICAgfTtcblxuICAgIEt1YmVybmV0ZXMuaW5pdFNoYXJlZCgkc2NvcGUsICRsb2NhdGlvbiwgJGh0dHAsICR0aW1lb3V0LCAkcm91dGVQYXJhbXMsIEt1YmVybmV0ZXNNb2RlbCwgS3ViZXJuZXRlc1N0YXRlLCBLdWJlcm5ldGVzQXBpVVJMKTtcblxuICAgIEt1YmVybmV0ZXNSZXBsaWNhdGlvbkNvbnRyb2xsZXJzLnRoZW4oKEt1YmVybmV0ZXNSZXBsaWNhdGlvbkNvbnRyb2xsZXJzOm5nLnJlc291cmNlLklSZXNvdXJjZUNsYXNzKSA9PiB7XG4gICAgICBLdWJlcm5ldGVzUG9kcy50aGVuKChLdWJlcm5ldGVzUG9kczpuZy5yZXNvdXJjZS5JUmVzb3VyY2VDbGFzcykgPT4ge1xuICAgICAgICAkc2NvcGUuZGVsZXRlUHJvbXB0ID0gKHNlbGVjdGVkKSA9PiB7XG4gICAgICAgICAgaWYgKGFuZ3VsYXIuaXNTdHJpbmcoc2VsZWN0ZWQpKSB7XG4gICAgICAgICAgICBzZWxlY3RlZCA9IFt7XG4gICAgICAgICAgICAgIGlkOiBzZWxlY3RlZFxuICAgICAgICAgICAgfV07XG4gICAgICAgICAgfVxuICAgICAgICAgIFVJLm11bHRpSXRlbUNvbmZpcm1BY3Rpb25EaWFsb2coPFVJLk11bHRpSXRlbUNvbmZpcm1BY3Rpb25PcHRpb25zPntcbiAgICAgICAgICAgIGNvbGxlY3Rpb246IHNlbGVjdGVkLFxuICAgICAgICAgICAgaW5kZXg6ICdpZCcsXG4gICAgICAgICAgICBvbkNsb3NlOiAocmVzdWx0OmJvb2xlYW4pID0+IHtcbiAgICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRlbGV0ZVNlbGVjdGVkKHNlbGVjdGVkOkFycmF5PEt1YmVQb2Q+LCBuZXh0Okt1YmVQb2QpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyhcImRlbGV0aW5nOiBcIiwgbmV4dC5pZCk7XG4gICAgICAgICAgICAgICAgICAgIEt1YmVybmV0ZXNSZXBsaWNhdGlvbkNvbnRyb2xsZXJzLmRlbGV0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgaWQ6IG5leHQuaWRcbiAgICAgICAgICAgICAgICAgICAgfSwgdW5kZWZpbmVkLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgbG9nLmRlYnVnKFwiZGVsZXRlZDogXCIsIG5leHQuaWQpO1xuICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZVNlbGVjdGVkKHNlbGVjdGVkLCBzZWxlY3RlZC5zaGlmdCgpKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgbG9nLmRlYnVnKFwiRXJyb3IgZGVsZXRpbmc6IFwiLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgZGVsZXRlU2VsZWN0ZWQoc2VsZWN0ZWQsIHNlbGVjdGVkLnNoaWZ0KCkpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVsZXRlU2VsZWN0ZWQoc2VsZWN0ZWQsIHNlbGVjdGVkLnNoaWZ0KCkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGl0bGU6ICdEZWxldGUgcmVwbGljYXRpb24gY29udHJvbGxlcnM/JyxcbiAgICAgICAgICAgIGFjdGlvbjogJ1RoZSBmb2xsb3dpbmcgcmVwbGljYXRpb24gY29udHJvbGxlcnMgd2lsbCBiZSBkZWxldGVkOicsXG4gICAgICAgICAgICBva1RleHQ6ICdEZWxldGUnLFxuICAgICAgICAgICAgb2tDbGFzczogJ2J0bi1kYW5nZXInLFxuICAgICAgICAgICAgY3VzdG9tOiBcIlRoaXMgb3BlcmF0aW9uIGlzIHBlcm1hbmVudCBvbmNlIGNvbXBsZXRlZCFcIixcbiAgICAgICAgICAgIGN1c3RvbUNsYXNzOiBcImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIlxuICAgICAgICAgIH0pLm9wZW4oKTtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gbWF5YmVJbml0KCkge1xuICAgIH1cbiAgfV0pO1xufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNIZWxwZXJzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNQbHVnaW4udHNcIi8+XG5cbm1vZHVsZSBLdWJlcm5ldGVzIHtcblxuICBleHBvcnQgdmFyIHNjaGVtYSA9IHtcbiAgICBcIiRzY2hlbWFcIjogXCJodHRwOi8vanNvbi1zY2hlbWEub3JnL3NjaGVtYSNcIixcbiAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgXCJkZWZpbml0aW9uc1wiOiB7XG4gICAgICBcImRvY2tlcl9Db25maWdcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4LmRvY2tlci5jbGllbnQuZG9ja2VyY2xpZW50LkNvbmZpZ1wiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiQXR0YWNoU3RkZXJyXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJBdHRhY2hTdGRpblwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiQXR0YWNoU3Rkb3V0XCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJDbWRcIjoge1xuICAgICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJDcHVTZXRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiQ3B1U2hhcmVzXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJEbnNcIjoge1xuICAgICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJEb21haW5uYW1lXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkVudHJ5cG9pbnRcIjoge1xuICAgICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJFbnZcIjoge1xuICAgICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJFeHBvc2VkUG9ydHNcIjoge1xuICAgICAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImphdmEudXRpbC5NYXA8U3RyaW5nLE9iamVjdD5cIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkhvc3RuYW1lXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkltYWdlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIk1lbW9yeVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiTWVtb3J5U3dhcFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiTmV0d29ya0Rpc2FibGVkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJPcGVuU3RkaW5cIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIlBvcnRTcGVjc1wiOiB7XG4gICAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIlN0ZGluT25jZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiVHR5XCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJVc2VyXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIlZvbHVtZXNcIjoge1xuICAgICAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImphdmEudXRpbC5NYXA8U3RyaW5nLE9iamVjdD5cIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIlZvbHVtZXNGcm9tXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIldvcmtpbmdEaXJcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJkb2NrZXJfSW1hZ2VcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4LmRvY2tlci5jbGllbnQuZG9ja2VyY2xpZW50LkltYWdlXCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJBcmNoaXRlY3R1cmVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiQXV0aG9yXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkNvbW1lbnRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiQ29uZmlnXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvZG9ja2VyX0NvbmZpZ1wiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzguZG9ja2VyLmNsaWVudC5kb2NrZXJjbGllbnQuQ29uZmlnXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiQ29udGFpbmVyXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkNvbnRhaW5lckNvbmZpZ1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2RvY2tlcl9Db25maWdcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4LmRvY2tlci5jbGllbnQuZG9ja2VyY2xpZW50LkNvbmZpZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkNyZWF0ZWRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiRG9ja2VyVmVyc2lvblwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJJZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJQYXJlbnRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiU2l6ZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX2Jhc2VfQ29udGFpbmVyXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5iYXNlLkNvbnRhaW5lclwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiY29tbWFuZFwiOiB7XG4gICAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImNwdVwiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfcmVzb3VyY2VfUXVhbnRpdHlcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnJlc291cmNlLlF1YW50aXR5XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZW52XCI6IHtcbiAgICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfYmFzZV9FbnZWYXJcIixcbiAgICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuYmFzZS5FbnZWYXJcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaW1hZ2VcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaW1hZ2VQdWxsUG9saWN5XCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImxpZmVjeWNsZVwiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfYmFzZV9MaWZlY3ljbGVcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmJhc2UuTGlmZWN5Y2xlXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibGl2ZW5lc3NQcm9iZVwiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfYmFzZV9MaXZlbmVzc1Byb2JlXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5iYXNlLkxpdmVuZXNzUHJvYmVcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJtZW1vcnlcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX3Jlc291cmNlX1F1YW50aXR5XCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5yZXNvdXJjZS5RdWFudGl0eVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicG9ydHNcIjoge1xuICAgICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19iYXNlX1BvcnRcIixcbiAgICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuYmFzZS5Qb3J0XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInByaXZpbGVnZWRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInRlcm1pbmF0aW9uTWVzc2FnZVBhdGhcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidm9sdW1lTW91bnRzXCI6IHtcbiAgICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfYmFzZV9Wb2x1bWVNb3VudFwiLFxuICAgICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5iYXNlLlZvbHVtZU1vdW50XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIndvcmtpbmdEaXJcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX2Jhc2VfRW1wdHlEaXJcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmJhc2UuRW1wdHlEaXJcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcImt1YmVybmV0ZXNfYmFzZV9FbnZWYXJcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmJhc2UuRW52VmFyXCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJuYW1lXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInZhbHVlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwia3ViZXJuZXRlc19iYXNlX0V4ZWNBY3Rpb25cIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmJhc2UuRXhlY0FjdGlvblwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiY29tbWFuZFwiOiB7XG4gICAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwia3ViZXJuZXRlc19iYXNlX0dDRVBlcnNpc3RlbnREaXNrXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5iYXNlLkdDRVBlcnNpc3RlbnREaXNrXCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJmc1R5cGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFydGl0aW9uXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwZE5hbWVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVhZE9ubHlcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwia3ViZXJuZXRlc19iYXNlX0dpdFJlcG9cIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmJhc2UuR2l0UmVwb1wiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwicmVwb3NpdG9yeVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXZpc2lvblwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcImt1YmVybmV0ZXNfYmFzZV9IVFRQR2V0QWN0aW9uXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5iYXNlLkhUVFBHZXRBY3Rpb25cIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcImhvc3RcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGF0aFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwb3J0XCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc191dGlsX0ludE9yU3RyaW5nXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC51dGlsLkludE9yU3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX2Jhc2VfSGFuZGxlclwiOiB7XG4gICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuYmFzZS5IYW5kbGVyXCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJleGVjXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19iYXNlX0V4ZWNBY3Rpb25cIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmJhc2UuRXhlY0FjdGlvblwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImh0dHBHZXRcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX2Jhc2VfSFRUUEdldEFjdGlvblwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuYmFzZS5IVFRQR2V0QWN0aW9uXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX2Jhc2VfSG9zdERpclwiOiB7XG4gICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuYmFzZS5Ib3N0RGlyXCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJwYXRoXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwia3ViZXJuZXRlc19iYXNlX0xpZmVjeWNsZVwiOiB7XG4gICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuYmFzZS5MaWZlY3ljbGVcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcInBvc3RTdGFydFwiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfYmFzZV9IYW5kbGVyXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5iYXNlLkhhbmRsZXJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwcmVTdG9wXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19iYXNlX0hhbmRsZXJcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmJhc2UuSGFuZGxlclwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwia3ViZXJuZXRlc19iYXNlX0xpc3RNZXRhXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5iYXNlLkxpc3RNZXRhXCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJyZXNvdXJjZVZlcnNpb25cIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2VsZkxpbmtcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX2Jhc2VfTGl2ZW5lc3NQcm9iZVwiOiB7XG4gICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuYmFzZS5MaXZlbmVzc1Byb2JlXCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJleGVjXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19iYXNlX0V4ZWNBY3Rpb25cIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmJhc2UuRXhlY0FjdGlvblwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImh0dHBHZXRcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX2Jhc2VfSFRUUEdldEFjdGlvblwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuYmFzZS5IVFRQR2V0QWN0aW9uXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaW5pdGlhbERlbGF5U2Vjb25kc1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidGNwU29ja2V0XCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19iYXNlX1RDUFNvY2tldEFjdGlvblwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuYmFzZS5UQ1BTb2NrZXRBY3Rpb25cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcImt1YmVybmV0ZXNfYmFzZV9PYmplY3RNZXRhXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5iYXNlLk9iamVjdE1ldGFcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcImFubm90YXRpb25zXCI6IHtcbiAgICAgICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJqYXZhLnV0aWwuTWFwPFN0cmluZyxTdHJpbmc+XCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJjcmVhdGlvblRpbWVzdGFtcFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJsYWJlbHNcIjoge1xuICAgICAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImphdmEudXRpbC5NYXA8U3RyaW5nLFN0cmluZz5cIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibmFtZXNwYWNlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlc291cmNlVmVyc2lvblwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZWxmTGlua1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ1aWRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX2Jhc2VfT2JqZWN0UmVmZXJlbmNlXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5iYXNlLk9iamVjdFJlZmVyZW5jZVwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiYXBpVmVyc2lvblwiOiB7XG4gICAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MWJldGEyXCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJmaWVsZFBhdGhcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwia2luZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJuYW1lXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm5hbWVzcGFjZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXNvdXJjZVZlcnNpb25cIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidWlkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwia3ViZXJuZXRlc19iYXNlX1BvZFNwZWNcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmJhc2UuUG9kU3BlY1wiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiY29udGFpbmVyc1wiOiB7XG4gICAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX2Jhc2VfQ29udGFpbmVyXCIsXG4gICAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmJhc2UuQ29udGFpbmVyXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImRuc1BvbGljeVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJob3N0XCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm5vZGVTZWxlY3RvclwiOiB7XG4gICAgICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiamF2YS51dGlsLk1hcDxTdHJpbmcsU3RyaW5nPlwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVzdGFydFBvbGljeVwiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfYmFzZV9SZXN0YXJ0UG9saWN5XCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5iYXNlLlJlc3RhcnRQb2xpY3lcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ2b2x1bWVzXCI6IHtcbiAgICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfYmFzZV9Wb2x1bWVcIixcbiAgICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuYmFzZS5Wb2x1bWVcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX2Jhc2VfUG9kVGVtcGxhdGVTcGVjXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5iYXNlLlBvZFRlbXBsYXRlU3BlY1wiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiYW5ub3RhdGlvbnNcIjoge1xuICAgICAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImphdmEudXRpbC5NYXA8U3RyaW5nLFN0cmluZz5cIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImNyZWF0aW9uVGltZXN0YW1wXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImxhYmVsc1wiOiB7XG4gICAgICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiamF2YS51dGlsLk1hcDxTdHJpbmcsU3RyaW5nPlwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibmFtZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJuYW1lc3BhY2VcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVzb3VyY2VWZXJzaW9uXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNlbGZMaW5rXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNwZWNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX2Jhc2VfUG9kU3BlY1wiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuYmFzZS5Qb2RTcGVjXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidWlkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwia3ViZXJuZXRlc19iYXNlX1BvcnRcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmJhc2UuUG9ydFwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiY29udGFpbmVyUG9ydFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaG9zdElQXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImhvc3RQb3J0XCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJuYW1lXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInByb3RvY29sXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwia3ViZXJuZXRlc19iYXNlX1JlcGxpY2F0aW9uQ29udHJvbGxlclNwZWNcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmJhc2UuUmVwbGljYXRpb25Db250cm9sbGVyU3BlY1wiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwicmVwbGljYXNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNlbGVjdG9yXCI6IHtcbiAgICAgICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJqYXZhLnV0aWwuTWFwPFN0cmluZyxTdHJpbmc+XCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ0ZW1wbGF0ZVwiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfYmFzZV9Qb2RUZW1wbGF0ZVNwZWNcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmJhc2UuUG9kVGVtcGxhdGVTcGVjXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidGVtcGxhdGVSZWZcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX2Jhc2VfT2JqZWN0UmVmZXJlbmNlXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5iYXNlLk9iamVjdFJlZmVyZW5jZVwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwia3ViZXJuZXRlc19iYXNlX1Jlc3RhcnRQb2xpY3lcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmJhc2UuUmVzdGFydFBvbGljeVwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiYWx3YXlzXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19iYXNlX1Jlc3RhcnRQb2xpY3lBbHdheXNcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmJhc2UuUmVzdGFydFBvbGljeUFsd2F5c1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm5ldmVyXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19iYXNlX1Jlc3RhcnRQb2xpY3lOZXZlclwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuYmFzZS5SZXN0YXJ0UG9saWN5TmV2ZXJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJvbkZhaWx1cmVcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX2Jhc2VfUmVzdGFydFBvbGljeU9uRmFpbHVyZVwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuYmFzZS5SZXN0YXJ0UG9saWN5T25GYWlsdXJlXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX2Jhc2VfUmVzdGFydFBvbGljeUFsd2F5c1wiOiB7XG4gICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuYmFzZS5SZXN0YXJ0UG9saWN5QWx3YXlzXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX2Jhc2VfUmVzdGFydFBvbGljeU5ldmVyXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5iYXNlLlJlc3RhcnRQb2xpY3lOZXZlclwiLFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwia3ViZXJuZXRlc19iYXNlX1Jlc3RhcnRQb2xpY3lPbkZhaWx1cmVcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmJhc2UuUmVzdGFydFBvbGljeU9uRmFpbHVyZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwia3ViZXJuZXRlc19iYXNlX1N0YXR1c1wiOiB7XG4gICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuYmFzZS5TdGF0dXNcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcImFwaVZlcnNpb25cIjoge1xuICAgICAgICAgICAgXCJkZWZhdWx0XCI6IFwidjFiZXRhMlwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiY29kZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZGV0YWlsc1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfYmFzZV9TdGF0dXNEZXRhaWxzXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5iYXNlLlN0YXR1c0RldGFpbHNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJraW5kXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm1lc3NhZ2VcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVhc29uXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlc291cmNlVmVyc2lvblwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZWxmTGlua1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzdGF0dXNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX2Jhc2VfU3RhdHVzQ2F1c2VcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmJhc2UuU3RhdHVzQ2F1c2VcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcImZpZWxkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm1lc3NhZ2VcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVhc29uXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwia3ViZXJuZXRlc19iYXNlX1N0YXR1c0RldGFpbHNcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmJhc2UuU3RhdHVzRGV0YWlsc1wiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiY2F1c2VzXCI6IHtcbiAgICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfYmFzZV9TdGF0dXNDYXVzZVwiLFxuICAgICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5iYXNlLlN0YXR1c0NhdXNlXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImlkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImtpbmRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX2Jhc2VfVENQU29ja2V0QWN0aW9uXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5iYXNlLlRDUFNvY2tldEFjdGlvblwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwicG9ydFwiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfdXRpbF9JbnRPclN0cmluZ1wiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudXRpbC5JbnRPclN0cmluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwia3ViZXJuZXRlc19iYXNlX1R5cGVNZXRhXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5iYXNlLlR5cGVNZXRhXCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJhcGlWZXJzaW9uXCI6IHtcbiAgICAgICAgICAgIFwiZGVmYXVsdFwiOiBcInYxYmV0YTJcIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImtpbmRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX2Jhc2VfVm9sdW1lXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5iYXNlLlZvbHVtZVwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwibmFtZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzb3VyY2VcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX2Jhc2VfVm9sdW1lU291cmNlXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5iYXNlLlZvbHVtZVNvdXJjZVwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwia3ViZXJuZXRlc19iYXNlX1ZvbHVtZU1vdW50XCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5iYXNlLlZvbHVtZU1vdW50XCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJtb3VudFBhdGhcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibmFtZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZWFkT25seVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX2Jhc2VfVm9sdW1lU291cmNlXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5iYXNlLlZvbHVtZVNvdXJjZVwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiZW1wdHlEaXJcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX2Jhc2VfRW1wdHlEaXJcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmJhc2UuRW1wdHlEaXJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnaXRSZXBvXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19iYXNlX0dpdFJlcG9cIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmJhc2UuR2l0UmVwb1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImhvc3REaXJcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX2Jhc2VfSG9zdERpclwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuYmFzZS5Ib3N0RGlyXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGVyc2lzdGVudERpc2tcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX2Jhc2VfR0NFUGVyc2lzdGVudERpc2tcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmJhc2UuR0NFUGVyc2lzdGVudERpc2tcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcImt1YmVybmV0ZXNfZXJyb3JzX1N0YXR1c0Vycm9yXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5lcnJvcnMuU3RhdHVzRXJyb3JcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcIkVyclN0YXR1c1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfYmFzZV9TdGF0dXNcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmJhc2UuU3RhdHVzXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX3Jlc291cmNlX1F1YW50aXR5XCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5yZXNvdXJjZS5RdWFudGl0eVwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiQW1vdW50XCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvc3BldGVyX2luZl9EZWNcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5jbGllbnQudXRpbC5EZWNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJGb3JtYXRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX3J1bnRpbWVfUmF3RXh0ZW5zaW9uXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5ydW50aW1lLlJhd0V4dGVuc2lvblwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiUmF3SlNPTlwiOiB7XG4gICAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcImt1YmVybmV0ZXNfdXRpbF9JbnRPclN0cmluZ1wiOiB7XG4gICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudXRpbC5JbnRPclN0cmluZ1wiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiSW50VmFsXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJLaW5kXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJTdHJWYWxcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX3YxYmV0YTJfQ29udGFpbmVyXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLkNvbnRhaW5lclwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiY29tbWFuZFwiOiB7XG4gICAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImNwdVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZW52XCI6IHtcbiAgICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfdjFiZXRhMl9FbnZWYXJcIixcbiAgICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudjFiZXRhMi5FbnZWYXJcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaW1hZ2VcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaW1hZ2VQdWxsUG9saWN5XCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImxpZmVjeWNsZVwiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfdjFiZXRhMl9MaWZlY3ljbGVcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnYxYmV0YTIuTGlmZWN5Y2xlXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibGl2ZW5lc3NQcm9iZVwiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfdjFiZXRhMl9MaXZlbmVzc1Byb2JlXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLkxpdmVuZXNzUHJvYmVcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJtZW1vcnlcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicG9ydHNcIjoge1xuICAgICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc192MWJldGEyX1BvcnRcIixcbiAgICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudjFiZXRhMi5Qb3J0XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInByaXZpbGVnZWRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInRlcm1pbmF0aW9uTWVzc2FnZVBhdGhcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidm9sdW1lTW91bnRzXCI6IHtcbiAgICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfdjFiZXRhMl9Wb2x1bWVNb3VudFwiLFxuICAgICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLlZvbHVtZU1vdW50XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIndvcmtpbmdEaXJcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX3YxYmV0YTJfQ29udGFpbmVyTWFuaWZlc3RcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnYxYmV0YTIuQ29udGFpbmVyTWFuaWZlc3RcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcImNvbnRhaW5lcnNcIjoge1xuICAgICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc192MWJldGEyX0NvbnRhaW5lclwiLFxuICAgICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLkNvbnRhaW5lclwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJkbnNQb2xpY3lcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaWRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVzdGFydFBvbGljeVwiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfdjFiZXRhMl9SZXN0YXJ0UG9saWN5XCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLlJlc3RhcnRQb2xpY3lcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ1dWlkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInZlcnNpb25cIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidm9sdW1lc1wiOiB7XG4gICAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX3YxYmV0YTJfVm9sdW1lXCIsXG4gICAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnYxYmV0YTIuVm9sdW1lXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwia3ViZXJuZXRlc192MWJldGEyX0NvbnRhaW5lclN0YXRlXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLkNvbnRhaW5lclN0YXRlXCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJydW5uaW5nXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc192MWJldGEyX0NvbnRhaW5lclN0YXRlUnVubmluZ1wiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudjFiZXRhMi5Db250YWluZXJTdGF0ZVJ1bm5pbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ0ZXJtaW5hdGlvblwiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfdjFiZXRhMl9Db250YWluZXJTdGF0ZVRlcm1pbmF0ZWRcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnYxYmV0YTIuQ29udGFpbmVyU3RhdGVUZXJtaW5hdGVkXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwid2FpdGluZ1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfdjFiZXRhMl9Db250YWluZXJTdGF0ZVdhaXRpbmdcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnYxYmV0YTIuQ29udGFpbmVyU3RhdGVXYWl0aW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX3YxYmV0YTJfQ29udGFpbmVyU3RhdGVSdW5uaW5nXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLkNvbnRhaW5lclN0YXRlUnVubmluZ1wiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwic3RhcnRlZEF0XCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwia3ViZXJuZXRlc192MWJldGEyX0NvbnRhaW5lclN0YXRlVGVybWluYXRlZFwiOiB7XG4gICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudjFiZXRhMi5Db250YWluZXJTdGF0ZVRlcm1pbmF0ZWRcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcImV4aXRDb2RlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJmaW5pc2hlZEF0XCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm1lc3NhZ2VcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVhc29uXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNpZ25hbFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic3RhcnRlZEF0XCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwia3ViZXJuZXRlc192MWJldGEyX0NvbnRhaW5lclN0YXRlV2FpdGluZ1wiOiB7XG4gICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudjFiZXRhMi5Db250YWluZXJTdGF0ZVdhaXRpbmdcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcInJlYXNvblwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcImt1YmVybmV0ZXNfdjFiZXRhMl9Db250YWluZXJTdGF0dXNcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnYxYmV0YTIuQ29udGFpbmVyU3RhdHVzXCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJjb250YWluZXJJRFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJpbWFnZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwb2RJUFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXN0YXJ0Q291bnRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInN0YXRlXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc192MWJldGEyX0NvbnRhaW5lclN0YXRlXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLkNvbnRhaW5lclN0YXRlXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX3YxYmV0YTJfRW1wdHlEaXJcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnYxYmV0YTIuRW1wdHlEaXJcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcImt1YmVybmV0ZXNfdjFiZXRhMl9FbmRwb2ludHNcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnYxYmV0YTIuRW5kcG9pbnRzXCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJhbm5vdGF0aW9uc1wiOiB7XG4gICAgICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiamF2YS51dGlsLk1hcDxTdHJpbmcsU3RyaW5nPlwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiYXBpVmVyc2lvblwiOiB7XG4gICAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MWJldGEyXCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJjcmVhdGlvblRpbWVzdGFtcFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJlbmRwb2ludHNcIjoge1xuICAgICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJpZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJraW5kXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm5hbWVzcGFjZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXNvdXJjZVZlcnNpb25cIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNlbGZMaW5rXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInVpZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcImt1YmVybmV0ZXNfdjFiZXRhMl9FbmRwb2ludHNMaXN0XCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLkVuZHBvaW50c0xpc3RcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcImFubm90YXRpb25zXCI6IHtcbiAgICAgICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJqYXZhLnV0aWwuTWFwPFN0cmluZyxTdHJpbmc+XCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJhcGlWZXJzaW9uXCI6IHtcbiAgICAgICAgICAgIFwiZGVmYXVsdFwiOiBcInYxYmV0YTJcIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImNyZWF0aW9uVGltZXN0YW1wXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImlkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfdjFiZXRhMl9FbmRwb2ludHNcIixcbiAgICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudjFiZXRhMi5FbmRwb2ludHNcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwia2luZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJuYW1lc3BhY2VcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVzb3VyY2VWZXJzaW9uXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZWxmTGlua1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ1aWRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX3YxYmV0YTJfRW52VmFyXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLkVudlZhclwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwibmFtZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ2YWx1ZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcImt1YmVybmV0ZXNfdjFiZXRhMl9FeGVjQWN0aW9uXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLkV4ZWNBY3Rpb25cIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcImNvbW1hbmRcIjoge1xuICAgICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcImt1YmVybmV0ZXNfdjFiZXRhMl9HQ0VQZXJzaXN0ZW50RGlza1wiOiB7XG4gICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudjFiZXRhMi5HQ0VQZXJzaXN0ZW50RGlza1wiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiZnNUeXBlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhcnRpdGlvblwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGROYW1lXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlYWRPbmx5XCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcImt1YmVybmV0ZXNfdjFiZXRhMl9HaXRSZXBvXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLkdpdFJlcG9cIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcInJlcG9zaXRvcnlcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmV2aXNpb25cIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX3YxYmV0YTJfSFRUUEdldEFjdGlvblwiOiB7XG4gICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudjFiZXRhMi5IVFRQR2V0QWN0aW9uXCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJob3N0XCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhdGhcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicG9ydFwiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfdXRpbF9JbnRPclN0cmluZ1wiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudXRpbC5JbnRPclN0cmluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwia3ViZXJuZXRlc192MWJldGEyX0hhbmRsZXJcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnYxYmV0YTIuSGFuZGxlclwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiZXhlY1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfdjFiZXRhMl9FeGVjQWN0aW9uXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLkV4ZWNBY3Rpb25cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJodHRwR2V0XCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc192MWJldGEyX0hUVFBHZXRBY3Rpb25cIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnYxYmV0YTIuSFRUUEdldEFjdGlvblwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwia3ViZXJuZXRlc192MWJldGEyX0hvc3REaXJcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnYxYmV0YTIuSG9zdERpclwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwicGF0aFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcImt1YmVybmV0ZXNfdjFiZXRhMl9MaWZlY3ljbGVcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnYxYmV0YTIuTGlmZWN5Y2xlXCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJwb3N0U3RhcnRcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX3YxYmV0YTJfSGFuZGxlclwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudjFiZXRhMi5IYW5kbGVyXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicHJlU3RvcFwiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfdjFiZXRhMl9IYW5kbGVyXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLkhhbmRsZXJcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcImt1YmVybmV0ZXNfdjFiZXRhMl9MaXN0XCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLkt1YmVybmV0ZXNMaXN0XCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJhbm5vdGF0aW9uc1wiOiB7XG4gICAgICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiamF2YS51dGlsLk1hcDxTdHJpbmcsU3RyaW5nPlwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiYXBpVmVyc2lvblwiOiB7XG4gICAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MWJldGEyXCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJjcmVhdGlvblRpbWVzdGFtcFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJpZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX3J1bnRpbWVfUmF3RXh0ZW5zaW9uXCIsXG4gICAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnJ1bnRpbWUuUmF3RXh0ZW5zaW9uXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImtpbmRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibmFtZXNwYWNlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlc291cmNlVmVyc2lvblwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2VsZkxpbmtcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidWlkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwia3ViZXJuZXRlc192MWJldGEyX0xpdmVuZXNzUHJvYmVcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnYxYmV0YTIuTGl2ZW5lc3NQcm9iZVwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiZXhlY1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfdjFiZXRhMl9FeGVjQWN0aW9uXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLkV4ZWNBY3Rpb25cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJodHRwR2V0XCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc192MWJldGEyX0hUVFBHZXRBY3Rpb25cIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnYxYmV0YTIuSFRUUEdldEFjdGlvblwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImluaXRpYWxEZWxheVNlY29uZHNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInRjcFNvY2tldFwiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfdjFiZXRhMl9UQ1BTb2NrZXRBY3Rpb25cIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnYxYmV0YTIuVENQU29ja2V0QWN0aW9uXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX3YxYmV0YTJfTWluaW9uXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLk1pbmlvblwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiYW5ub3RhdGlvbnNcIjoge1xuICAgICAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImphdmEudXRpbC5NYXA8U3RyaW5nLFN0cmluZz5cIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImFwaVZlcnNpb25cIjoge1xuICAgICAgICAgICAgXCJkZWZhdWx0XCI6IFwidjFiZXRhMlwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiY3JlYXRpb25UaW1lc3RhbXBcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaG9zdElQXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImlkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImtpbmRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibGFiZWxzXCI6IHtcbiAgICAgICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJqYXZhLnV0aWwuTWFwPFN0cmluZyxTdHJpbmc+XCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJuYW1lc3BhY2VcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVzb3VyY2VWZXJzaW9uXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXNvdXJjZXNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX3YxYmV0YTJfTm9kZVJlc291cmNlc1wiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudjFiZXRhMi5Ob2RlUmVzb3VyY2VzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2VsZkxpbmtcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic3RhdHVzXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc192MWJldGEyX05vZGVTdGF0dXNcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnYxYmV0YTIuTm9kZVN0YXR1c1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInVpZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcImt1YmVybmV0ZXNfdjFiZXRhMl9NaW5pb25MaXN0XCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLk1pbmlvbkxpc3RcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcImFubm90YXRpb25zXCI6IHtcbiAgICAgICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJqYXZhLnV0aWwuTWFwPFN0cmluZyxTdHJpbmc+XCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJhcGlWZXJzaW9uXCI6IHtcbiAgICAgICAgICAgIFwiZGVmYXVsdFwiOiBcInYxYmV0YTJcIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImNyZWF0aW9uVGltZXN0YW1wXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImlkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfdjFiZXRhMl9NaW5pb25cIixcbiAgICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudjFiZXRhMi5NaW5pb25cIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwia2luZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJuYW1lc3BhY2VcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVzb3VyY2VWZXJzaW9uXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZWxmTGlua1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ1aWRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX3YxYmV0YTJfTm9kZUNvbmRpdGlvblwiOiB7XG4gICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudjFiZXRhMi5Ob2RlQ29uZGl0aW9uXCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJraW5kXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImxhc3RUcmFuc2l0aW9uVGltZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJtZXNzYWdlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlYXNvblwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzdGF0dXNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX3YxYmV0YTJfTm9kZVJlc291cmNlc1wiOiB7XG4gICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudjFiZXRhMi5Ob2RlUmVzb3VyY2VzXCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJjYXBhY2l0eVwiOiB7XG4gICAgICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX3V0aWxfSW50T3JTdHJpbmdcIixcbiAgICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudXRpbC5JbnRPclN0cmluZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImphdmEudXRpbC5NYXA8U3RyaW5nLGlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudXRpbC5JbnRPclN0cmluZz5cIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwia3ViZXJuZXRlc192MWJldGEyX05vZGVTdGF0dXNcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnYxYmV0YTIuTm9kZVN0YXR1c1wiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiY29uZGl0aW9uc1wiOiB7XG4gICAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX3YxYmV0YTJfTm9kZUNvbmRpdGlvblwiLFxuICAgICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLk5vZGVDb25kaXRpb25cIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGhhc2VcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX3YxYmV0YTJfUG9kXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLlBvZFwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiYW5ub3RhdGlvbnNcIjoge1xuICAgICAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImphdmEudXRpbC5NYXA8U3RyaW5nLFN0cmluZz5cIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImFwaVZlcnNpb25cIjoge1xuICAgICAgICAgICAgXCJkZWZhdWx0XCI6IFwidjFiZXRhMlwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiY3JlYXRpb25UaW1lc3RhbXBcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiY3VycmVudFN0YXRlXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc192MWJldGEyX1BvZFN0YXRlXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLlBvZFN0YXRlXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZGVzaXJlZFN0YXRlXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc192MWJldGEyX1BvZFN0YXRlXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLlBvZFN0YXRlXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaWRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwia2luZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJsYWJlbHNcIjoge1xuICAgICAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImphdmEudXRpbC5NYXA8U3RyaW5nLFN0cmluZz5cIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm5hbWVzcGFjZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJub2RlU2VsZWN0b3JcIjoge1xuICAgICAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImphdmEudXRpbC5NYXA8U3RyaW5nLFN0cmluZz5cIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlc291cmNlVmVyc2lvblwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2VsZkxpbmtcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidWlkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwia3ViZXJuZXRlc192MWJldGEyX1BvZExpc3RcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnYxYmV0YTIuUG9kTGlzdFwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiYW5ub3RhdGlvbnNcIjoge1xuICAgICAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImphdmEudXRpbC5NYXA8U3RyaW5nLFN0cmluZz5cIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImFwaVZlcnNpb25cIjoge1xuICAgICAgICAgICAgXCJkZWZhdWx0XCI6IFwidjFiZXRhMlwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiY3JlYXRpb25UaW1lc3RhbXBcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaWRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc192MWJldGEyX1BvZFwiLFxuICAgICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLlBvZFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJraW5kXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm5hbWVzcGFjZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXNvdXJjZVZlcnNpb25cIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNlbGZMaW5rXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInVpZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcImt1YmVybmV0ZXNfdjFiZXRhMl9Qb2RTdGF0ZVwiOiB7XG4gICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudjFiZXRhMi5Qb2RTdGF0ZVwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiaG9zdFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJob3N0SVBcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaW5mb1wiOiB7XG4gICAgICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX3YxYmV0YTJfQ29udGFpbmVyU3RhdHVzXCIsXG4gICAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnYxYmV0YTIuQ29udGFpbmVyU3RhdHVzXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiamF2YS51dGlsLk1hcDxTdHJpbmcsaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLkNvbnRhaW5lclN0YXR1cz5cIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm1hbmlmZXN0XCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc192MWJldGEyX0NvbnRhaW5lck1hbmlmZXN0XCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLkNvbnRhaW5lck1hbmlmZXN0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibWVzc2FnZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwb2RJUFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzdGF0dXNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX3YxYmV0YTJfUG9kVGVtcGxhdGVcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnYxYmV0YTIuUG9kVGVtcGxhdGVcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcImRlc2lyZWRTdGF0ZVwiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfdjFiZXRhMl9Qb2RTdGF0ZVwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudjFiZXRhMi5Qb2RTdGF0ZVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImxhYmVsc1wiOiB7XG4gICAgICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiamF2YS51dGlsLk1hcDxTdHJpbmcsU3RyaW5nPlwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX3YxYmV0YTJfUG9ydFwiOiB7XG4gICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudjFiZXRhMi5Qb3J0XCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJjb250YWluZXJQb3J0XCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJob3N0SVBcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaG9zdFBvcnRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicHJvdG9jb2xcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX3YxYmV0YTJfUmVwbGljYXRpb25Db250cm9sbGVyXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLlJlcGxpY2F0aW9uQ29udHJvbGxlclwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiYW5ub3RhdGlvbnNcIjoge1xuICAgICAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImphdmEudXRpbC5NYXA8U3RyaW5nLFN0cmluZz5cIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImFwaVZlcnNpb25cIjoge1xuICAgICAgICAgICAgXCJkZWZhdWx0XCI6IFwidjFiZXRhMlwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiY3JlYXRpb25UaW1lc3RhbXBcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiY3VycmVudFN0YXRlXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc192MWJldGEyX1JlcGxpY2F0aW9uQ29udHJvbGxlclN0YXRlXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLlJlcGxpY2F0aW9uQ29udHJvbGxlclN0YXRlXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZGVzaXJlZFN0YXRlXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc192MWJldGEyX1JlcGxpY2F0aW9uQ29udHJvbGxlclN0YXRlXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLlJlcGxpY2F0aW9uQ29udHJvbGxlclN0YXRlXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaWRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwia2luZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJsYWJlbHNcIjoge1xuICAgICAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImphdmEudXRpbC5NYXA8U3RyaW5nLFN0cmluZz5cIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm5hbWVzcGFjZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXNvdXJjZVZlcnNpb25cIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNlbGZMaW5rXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInVpZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcImt1YmVybmV0ZXNfdjFiZXRhMl9SZXBsaWNhdGlvbkNvbnRyb2xsZXJMaXN0XCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLlJlcGxpY2F0aW9uQ29udHJvbGxlckxpc3RcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcImFubm90YXRpb25zXCI6IHtcbiAgICAgICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJqYXZhLnV0aWwuTWFwPFN0cmluZyxTdHJpbmc+XCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJhcGlWZXJzaW9uXCI6IHtcbiAgICAgICAgICAgIFwiZGVmYXVsdFwiOiBcInYxYmV0YTJcIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImNyZWF0aW9uVGltZXN0YW1wXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImlkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfdjFiZXRhMl9SZXBsaWNhdGlvbkNvbnRyb2xsZXJcIixcbiAgICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudjFiZXRhMi5SZXBsaWNhdGlvbkNvbnRyb2xsZXJcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwia2luZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJuYW1lc3BhY2VcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVzb3VyY2VWZXJzaW9uXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZWxmTGlua1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ1aWRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX3YxYmV0YTJfUmVwbGljYXRpb25Db250cm9sbGVyU3RhdGVcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnYxYmV0YTIuUmVwbGljYXRpb25Db250cm9sbGVyU3RhdGVcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcInBvZFRlbXBsYXRlXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc192MWJldGEyX1BvZFRlbXBsYXRlXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLlBvZFRlbXBsYXRlXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVwbGljYVNlbGVjdG9yXCI6IHtcbiAgICAgICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJqYXZhLnV0aWwuTWFwPFN0cmluZyxTdHJpbmc+XCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXBsaWNhc1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX3YxYmV0YTJfUmVzdGFydFBvbGljeVwiOiB7XG4gICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudjFiZXRhMi5SZXN0YXJ0UG9saWN5XCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJhbHdheXNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX3YxYmV0YTJfUmVzdGFydFBvbGljeUFsd2F5c1wiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudjFiZXRhMi5SZXN0YXJ0UG9saWN5QWx3YXlzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibmV2ZXJcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX3YxYmV0YTJfUmVzdGFydFBvbGljeU5ldmVyXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLlJlc3RhcnRQb2xpY3lOZXZlclwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm9uRmFpbHVyZVwiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfdjFiZXRhMl9SZXN0YXJ0UG9saWN5T25GYWlsdXJlXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLlJlc3RhcnRQb2xpY3lPbkZhaWx1cmVcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcImt1YmVybmV0ZXNfdjFiZXRhMl9SZXN0YXJ0UG9saWN5QWx3YXlzXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLlJlc3RhcnRQb2xpY3lBbHdheXNcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcImt1YmVybmV0ZXNfdjFiZXRhMl9SZXN0YXJ0UG9saWN5TmV2ZXJcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnYxYmV0YTIuUmVzdGFydFBvbGljeU5ldmVyXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX3YxYmV0YTJfUmVzdGFydFBvbGljeU9uRmFpbHVyZVwiOiB7XG4gICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudjFiZXRhMi5SZXN0YXJ0UG9saWN5T25GYWlsdXJlXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX3YxYmV0YTJfU2VydmljZVwiOiB7XG4gICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudjFiZXRhMi5TZXJ2aWNlXCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJhbm5vdGF0aW9uc1wiOiB7XG4gICAgICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiamF2YS51dGlsLk1hcDxTdHJpbmcsU3RyaW5nPlwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiYXBpVmVyc2lvblwiOiB7XG4gICAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MWJldGEyXCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJjb250YWluZXJQb3J0XCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc191dGlsX0ludE9yU3RyaW5nXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC51dGlsLkludE9yU3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiY3JlYXRlRXh0ZXJuYWxMb2FkQmFsYW5jZXJcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImNyZWF0aW9uVGltZXN0YW1wXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImlkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImtpbmRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibGFiZWxzXCI6IHtcbiAgICAgICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJqYXZhLnV0aWwuTWFwPFN0cmluZyxTdHJpbmc+XCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJuYW1lc3BhY2VcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicG9ydFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicG9ydGFsSVBcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicHJvdG9jb2xcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicHJveHlQb3J0XCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwdWJsaWNJUHNcIjoge1xuICAgICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXNvdXJjZVZlcnNpb25cIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNlbGVjdG9yXCI6IHtcbiAgICAgICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJqYXZhLnV0aWwuTWFwPFN0cmluZyxTdHJpbmc+XCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZWxmTGlua1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXNzaW9uQWZmaW5pdHlcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidWlkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwia3ViZXJuZXRlc192MWJldGEyX1NlcnZpY2VMaXN0XCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLlNlcnZpY2VMaXN0XCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJhbm5vdGF0aW9uc1wiOiB7XG4gICAgICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiamF2YS51dGlsLk1hcDxTdHJpbmcsU3RyaW5nPlwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiYXBpVmVyc2lvblwiOiB7XG4gICAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MWJldGEyXCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJjcmVhdGlvblRpbWVzdGFtcFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJpZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX3YxYmV0YTJfU2VydmljZVwiLFxuICAgICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLlNlcnZpY2VcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwia2luZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJuYW1lc3BhY2VcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVzb3VyY2VWZXJzaW9uXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZWxmTGlua1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ1aWRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX3YxYmV0YTJfVENQU29ja2V0QWN0aW9uXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLlRDUFNvY2tldEFjdGlvblwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwicG9ydFwiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfdXRpbF9JbnRPclN0cmluZ1wiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudXRpbC5JbnRPclN0cmluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwia3ViZXJuZXRlc192MWJldGEyX1R5cGVNZXRhXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLlR5cGVNZXRhXCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJhbm5vdGF0aW9uc1wiOiB7XG4gICAgICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiamF2YS51dGlsLk1hcDxTdHJpbmcsU3RyaW5nPlwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiYXBpVmVyc2lvblwiOiB7XG4gICAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MWJldGEyXCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJjcmVhdGlvblRpbWVzdGFtcFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJpZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJraW5kXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm5hbWVzcGFjZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXNvdXJjZVZlcnNpb25cIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNlbGZMaW5rXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInVpZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcImt1YmVybmV0ZXNfdjFiZXRhMl9Wb2x1bWVcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnYxYmV0YTIuVm9sdW1lXCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJuYW1lXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNvdXJjZVwiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfdjFiZXRhMl9Wb2x1bWVTb3VyY2VcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnYxYmV0YTIuVm9sdW1lU291cmNlXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJrdWJlcm5ldGVzX3YxYmV0YTJfVm9sdW1lTW91bnRcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnYxYmV0YTIuVm9sdW1lTW91bnRcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcIm1vdW50UGF0aFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJuYW1lXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlYWRPbmx5XCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcImt1YmVybmV0ZXNfdjFiZXRhMl9Wb2x1bWVTb3VyY2VcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnYxYmV0YTIuVm9sdW1lU291cmNlXCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJlbXB0eURpclwiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfdjFiZXRhMl9FbXB0eURpclwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudjFiZXRhMi5FbXB0eURpclwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdpdFJlcG9cIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX3YxYmV0YTJfR2l0UmVwb1wiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudjFiZXRhMi5HaXRSZXBvXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaG9zdERpclwiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfdjFiZXRhMl9Ib3N0RGlyXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLkhvc3REaXJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwZXJzaXN0ZW50RGlza1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfdjFiZXRhMl9HQ0VQZXJzaXN0ZW50RGlza1wiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudjFiZXRhMi5HQ0VQZXJzaXN0ZW50RGlza1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwib3NfYnVpbGRfQnVpbGRcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuYnVpbGQuQnVpbGRcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcImFubm90YXRpb25zXCI6IHtcbiAgICAgICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJqYXZhLnV0aWwuTWFwPFN0cmluZyxTdHJpbmc+XCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJhcGlWZXJzaW9uXCI6IHtcbiAgICAgICAgICAgIFwiZGVmYXVsdFwiOiBcInYxYmV0YTJcIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImNhbmNlbGxlZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiY3JlYXRpb25UaW1lc3RhbXBcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwia2luZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJsYWJlbHNcIjoge1xuICAgICAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImphdmEudXRpbC5NYXA8U3RyaW5nLFN0cmluZz5cIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibmFtZXNwYWNlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhcmFtZXRlcnNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19idWlsZF9CdWlsZFBhcmFtZXRlcnNcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuYnVpbGQuQnVpbGRQYXJhbWV0ZXJzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicG9kTmFtZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXNvdXJjZVZlcnNpb25cIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2VsZkxpbmtcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic3RhdHVzXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInVpZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcIm9zX2J1aWxkX0J1aWxkQ29uZmlnXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLmJ1aWxkLkJ1aWxkQ29uZmlnXCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJhbm5vdGF0aW9uc1wiOiB7XG4gICAgICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiamF2YS51dGlsLk1hcDxTdHJpbmcsU3RyaW5nPlwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiYXBpVmVyc2lvblwiOiB7XG4gICAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MWJldGEyXCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJjcmVhdGlvblRpbWVzdGFtcFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJraW5kXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImxhYmVsc1wiOiB7XG4gICAgICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiamF2YS51dGlsLk1hcDxTdHJpbmcsU3RyaW5nPlwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibmFtZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJuYW1lc3BhY2VcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFyYW1ldGVyc1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2J1aWxkX0J1aWxkUGFyYW1ldGVyc1wiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5idWlsZC5CdWlsZFBhcmFtZXRlcnNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXNvdXJjZVZlcnNpb25cIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2VsZkxpbmtcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidHJpZ2dlcnNcIjoge1xuICAgICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3NfYnVpbGRfQnVpbGRUcmlnZ2VyUG9saWN5XCIsXG4gICAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuYnVpbGQuQnVpbGRUcmlnZ2VyUG9saWN5XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInVpZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcIm9zX2J1aWxkX0J1aWxkQ29uZmlnTGlzdFwiOiB7XG4gICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5idWlsZC5CdWlsZENvbmZpZ0xpc3RcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcImFwaVZlcnNpb25cIjoge1xuICAgICAgICAgICAgXCJkZWZhdWx0XCI6IFwidjFiZXRhMlwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3NfYnVpbGRfQnVpbGRDb25maWdcIixcbiAgICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5idWlsZC5CdWlsZENvbmZpZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJraW5kXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlc291cmNlVmVyc2lvblwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZWxmTGlua1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcIm9zX2J1aWxkX0J1aWxkTGlzdFwiOiB7XG4gICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5idWlsZC5CdWlsZExpc3RcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcImFwaVZlcnNpb25cIjoge1xuICAgICAgICAgICAgXCJkZWZhdWx0XCI6IFwidjFiZXRhMlwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3NfYnVpbGRfQnVpbGRcIixcbiAgICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5idWlsZC5CdWlsZFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJraW5kXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlc291cmNlVmVyc2lvblwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZWxmTGlua1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcIm9zX2J1aWxkX0J1aWxkT3V0cHV0XCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLmJ1aWxkLkJ1aWxkT3V0cHV0XCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJpbWFnZVRhZ1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZWdpc3RyeVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcIm9zX2J1aWxkX0J1aWxkUGFyYW1ldGVyc1wiOiB7XG4gICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5idWlsZC5CdWlsZFBhcmFtZXRlcnNcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcIm91dHB1dFwiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2J1aWxkX0J1aWxkT3V0cHV0XCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLmJ1aWxkLkJ1aWxkT3V0cHV0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmV2aXNpb25cIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19idWlsZF9Tb3VyY2VSZXZpc2lvblwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5idWlsZC5Tb3VyY2VSZXZpc2lvblwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNvdXJjZVwiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2J1aWxkX0J1aWxkU291cmNlXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLmJ1aWxkLkJ1aWxkU291cmNlXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic3RyYXRlZ3lcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19idWlsZF9CdWlsZFN0cmF0ZWd5XCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLmJ1aWxkLkJ1aWxkU3RyYXRlZ3lcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcIm9zX2J1aWxkX0J1aWxkU291cmNlXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLmJ1aWxkLkJ1aWxkU291cmNlXCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJnaXRcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19idWlsZF9HaXRCdWlsZFNvdXJjZVwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5idWlsZC5HaXRCdWlsZFNvdXJjZVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInR5cGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJvc19idWlsZF9CdWlsZFN0cmF0ZWd5XCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLmJ1aWxkLkJ1aWxkU3RyYXRlZ3lcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcImN1c3RvbVN0cmF0ZWd5XCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3NfYnVpbGRfQ3VzdG9tQnVpbGRTdHJhdGVneVwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5idWlsZC5DdXN0b21CdWlsZFN0cmF0ZWd5XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZG9ja2VyU3RyYXRlZ3lcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19idWlsZF9Eb2NrZXJCdWlsZFN0cmF0ZWd5XCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLmJ1aWxkLkRvY2tlckJ1aWxkU3RyYXRlZ3lcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzdGlTdHJhdGVneVwiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2J1aWxkX1NUSUJ1aWxkU3RyYXRlZ3lcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuYnVpbGQuU1RJQnVpbGRTdHJhdGVneVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInR5cGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJvc19idWlsZF9CdWlsZFRyaWdnZXJQb2xpY3lcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuYnVpbGQuQnVpbGRUcmlnZ2VyUG9saWN5XCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJnZW5lcmljXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3NfYnVpbGRfV2ViSG9va1RyaWdnZXJcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuYnVpbGQuV2ViSG9va1RyaWdnZXJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnaXRodWJcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19idWlsZF9XZWJIb29rVHJpZ2dlclwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5idWlsZC5XZWJIb29rVHJpZ2dlclwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInR5cGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJvc19idWlsZF9DdXN0b21CdWlsZFN0cmF0ZWd5XCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLmJ1aWxkLkN1c3RvbUJ1aWxkU3RyYXRlZ3lcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcImVudlwiOiB7XG4gICAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX2Jhc2VfRW52VmFyXCIsXG4gICAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmJhc2UuRW52VmFyXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImV4cG9zZURvY2tlclNvY2tldFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaW1hZ2VcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJvc19idWlsZF9Eb2NrZXJCdWlsZFN0cmF0ZWd5XCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLmJ1aWxkLkRvY2tlckJ1aWxkU3RyYXRlZ3lcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcImNvbnRleHREaXJcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibm9DYWNoZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJvc19idWlsZF9HaXRCdWlsZFNvdXJjZVwiOiB7XG4gICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5idWlsZC5HaXRCdWlsZFNvdXJjZVwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwicmVmXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInVyaVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcIm9zX2J1aWxkX0dpdFNvdXJjZVJldmlzaW9uXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLmJ1aWxkLkdpdFNvdXJjZVJldmlzaW9uXCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJhdXRob3JcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19idWlsZF9Tb3VyY2VDb250cm9sVXNlclwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5idWlsZC5Tb3VyY2VDb250cm9sVXNlclwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImNvbW1pdFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJjb21taXR0ZXJcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19idWlsZF9Tb3VyY2VDb250cm9sVXNlclwiLFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5idWlsZC5Tb3VyY2VDb250cm9sVXNlclwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm1lc3NhZ2VcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJvc19idWlsZF9TVElCdWlsZFN0cmF0ZWd5XCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLmJ1aWxkLlNUSUJ1aWxkU3RyYXRlZ3lcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcImNsZWFuXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJpbWFnZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzY3JpcHRzXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwib3NfYnVpbGRfU291cmNlQ29udHJvbFVzZXJcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuYnVpbGQuU291cmNlQ29udHJvbFVzZXJcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcImVtYWlsXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJvc19idWlsZF9Tb3VyY2VSZXZpc2lvblwiOiB7XG4gICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5idWlsZC5Tb3VyY2VSZXZpc2lvblwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiZ2l0XCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3NfYnVpbGRfR2l0U291cmNlUmV2aXNpb25cIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuYnVpbGQuR2l0U291cmNlUmV2aXNpb25cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ0eXBlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwib3NfYnVpbGRfV2ViSG9va1RyaWdnZXJcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuYnVpbGQuV2ViSG9va1RyaWdnZXJcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcInNlY3JldFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcIm9zX2NvbmZpZ19Db25maWdcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuY29uZmlnLkNvbmZpZ1wiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiYXBpVmVyc2lvblwiOiB7XG4gICAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MWJldGEyXCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICBcIml0ZW1zXCI6IHt9LFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJraW5kXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlc291cmNlVmVyc2lvblwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZWxmTGlua1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcIm9zX2RlcGxveV9DdXN0b21EZXBsb3ltZW50U3RyYXRlZ3lQYXJhbXNcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuZGVwbG95LkN1c3RvbURlcGxveW1lbnRTdHJhdGVneVBhcmFtc1wiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiY29tbWFuZFwiOiB7XG4gICAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImVudmlyb25tZW50XCI6IHtcbiAgICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfYmFzZV9FbnZWYXJcIixcbiAgICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwuYmFzZS5FbnZWYXJcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaW1hZ2VcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJvc19kZXBsb3lfRGVwbG95bWVudFwiOiB7XG4gICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5kZXBsb3kuRGVwbG95bWVudFwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiYW5ub3RhdGlvbnNcIjoge1xuICAgICAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImphdmEudXRpbC5NYXA8U3RyaW5nLFN0cmluZz5cIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImFwaVZlcnNpb25cIjoge1xuICAgICAgICAgICAgXCJkZWZhdWx0XCI6IFwidjFiZXRhMlwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiY29udHJvbGxlclRlbXBsYXRlXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc19iYXNlX1JlcGxpY2F0aW9uQ29udHJvbGxlclNwZWNcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmJhc2UuUmVwbGljYXRpb25Db250cm9sbGVyU3BlY1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImNyZWF0aW9uVGltZXN0YW1wXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImRldGFpbHNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19kZXBsb3lfRGVwbG95bWVudERldGFpbHNcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuZGVwbG95LkRlcGxveW1lbnREZXRhaWxzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwia2luZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJsYWJlbHNcIjoge1xuICAgICAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImphdmEudXRpbC5NYXA8U3RyaW5nLFN0cmluZz5cIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibmFtZXNwYWNlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlc291cmNlVmVyc2lvblwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZWxmTGlua1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzdGF0dXNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic3RyYXRlZ3lcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19kZXBsb3lfRGVwbG95bWVudFN0cmF0ZWd5XCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLmRlcGxveS5EZXBsb3ltZW50U3RyYXRlZ3lcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ1aWRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJvc19kZXBsb3lfRGVwbG95bWVudENhdXNlXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLmRlcGxveS5EZXBsb3ltZW50Q2F1c2VcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcImltYWdlVHJpZ2dlclwiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2RlcGxveV9EZXBsb3ltZW50Q2F1c2VJbWFnZVRyaWdnZXJcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuZGVwbG95LkRlcGxveW1lbnRDYXVzZUltYWdlVHJpZ2dlclwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInR5cGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJvc19kZXBsb3lfRGVwbG95bWVudENhdXNlSW1hZ2VUcmlnZ2VyXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLmRlcGxveS5EZXBsb3ltZW50Q2F1c2VJbWFnZVRyaWdnZXJcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcInJlcG9zaXRvcnlOYW1lXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInRhZ1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcIm9zX2RlcGxveV9EZXBsb3ltZW50Q29uZmlnXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLmRlcGxveS5EZXBsb3ltZW50Q29uZmlnXCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJhbm5vdGF0aW9uc1wiOiB7XG4gICAgICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiamF2YS51dGlsLk1hcDxTdHJpbmcsU3RyaW5nPlwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiYXBpVmVyc2lvblwiOiB7XG4gICAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MWJldGEyXCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJjcmVhdGlvblRpbWVzdGFtcFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJkZXRhaWxzXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3NfZGVwbG95X0RlcGxveW1lbnREZXRhaWxzXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLmRlcGxveS5EZXBsb3ltZW50RGV0YWlsc1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImtpbmRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibGFiZWxzXCI6IHtcbiAgICAgICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJqYXZhLnV0aWwuTWFwPFN0cmluZyxTdHJpbmc+XCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJsYXRlc3RWZXJzaW9uXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJuYW1lXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm5hbWVzcGFjZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXNvdXJjZVZlcnNpb25cIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2VsZkxpbmtcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidGVtcGxhdGVcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19kZXBsb3lfRGVwbG95bWVudFRlbXBsYXRlXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLmRlcGxveS5EZXBsb3ltZW50VGVtcGxhdGVcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ0cmlnZ2Vyc1wiOiB7XG4gICAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19kZXBsb3lfRGVwbG95bWVudFRyaWdnZXJQb2xpY3lcIixcbiAgICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5kZXBsb3kuRGVwbG95bWVudFRyaWdnZXJQb2xpY3lcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidWlkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwib3NfZGVwbG95X0RlcGxveW1lbnRDb25maWdMaXN0XCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLmRlcGxveS5EZXBsb3ltZW50Q29uZmlnTGlzdFwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiYXBpVmVyc2lvblwiOiB7XG4gICAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MWJldGEyXCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19kZXBsb3lfRGVwbG95bWVudENvbmZpZ1wiLFxuICAgICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLmRlcGxveS5EZXBsb3ltZW50Q29uZmlnXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImtpbmRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVzb3VyY2VWZXJzaW9uXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNlbGZMaW5rXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwib3NfZGVwbG95X0RlcGxveW1lbnREZXRhaWxzXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLmRlcGxveS5EZXBsb3ltZW50RGV0YWlsc1wiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiY2F1c2VzXCI6IHtcbiAgICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2RlcGxveV9EZXBsb3ltZW50Q2F1c2VcIixcbiAgICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5kZXBsb3kuRGVwbG95bWVudENhdXNlXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm1lc3NhZ2VcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJvc19kZXBsb3lfRGVwbG95bWVudExpc3RcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuZGVwbG95LkRlcGxveW1lbnRMaXN0XCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJhcGlWZXJzaW9uXCI6IHtcbiAgICAgICAgICAgIFwiZGVmYXVsdFwiOiBcInYxYmV0YTJcIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2RlcGxveV9EZXBsb3ltZW50XCIsXG4gICAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuZGVwbG95LkRlcGxveW1lbnRcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwia2luZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXNvdXJjZVZlcnNpb25cIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2VsZkxpbmtcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJvc19kZXBsb3lfRGVwbG95bWVudFN0cmF0ZWd5XCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLmRlcGxveS5EZXBsb3ltZW50U3RyYXRlZ3lcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcImN1c3RvbVBhcmFtc1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2RlcGxveV9DdXN0b21EZXBsb3ltZW50U3RyYXRlZ3lQYXJhbXNcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuZGVwbG95LkN1c3RvbURlcGxveW1lbnRTdHJhdGVneVBhcmFtc1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInR5cGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJvc19kZXBsb3lfRGVwbG95bWVudFRlbXBsYXRlXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLmRlcGxveS5EZXBsb3ltZW50VGVtcGxhdGVcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcImNvbnRyb2xsZXJUZW1wbGF0ZVwiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfYmFzZV9SZXBsaWNhdGlvbkNvbnRyb2xsZXJTcGVjXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC5iYXNlLlJlcGxpY2F0aW9uQ29udHJvbGxlclNwZWNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzdHJhdGVneVwiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2RlcGxveV9EZXBsb3ltZW50U3RyYXRlZ3lcIixcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuZGVwbG95LkRlcGxveW1lbnRTdHJhdGVneVwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwib3NfZGVwbG95X0RlcGxveW1lbnRUcmlnZ2VySW1hZ2VDaGFuZ2VQYXJhbXNcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuZGVwbG95LkRlcGxveW1lbnRUcmlnZ2VySW1hZ2VDaGFuZ2VQYXJhbXNcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcImF1dG9tYXRpY1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiY29udGFpbmVyTmFtZXNcIjoge1xuICAgICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXBvc2l0b3J5TmFtZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ0YWdcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJvc19kZXBsb3lfRGVwbG95bWVudFRyaWdnZXJQb2xpY3lcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuZGVwbG95LkRlcGxveW1lbnRUcmlnZ2VyUG9saWN5XCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJpbWFnZUNoYW5nZVBhcmFtc1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2RlcGxveV9EZXBsb3ltZW50VHJpZ2dlckltYWdlQ2hhbmdlUGFyYW1zXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLmRlcGxveS5EZXBsb3ltZW50VHJpZ2dlckltYWdlQ2hhbmdlUGFyYW1zXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidHlwZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcIm9zX2ltYWdlX0ltYWdlXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLmltYWdlLkltYWdlXCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJhbm5vdGF0aW9uc1wiOiB7XG4gICAgICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiamF2YS51dGlsLk1hcDxTdHJpbmcsU3RyaW5nPlwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiYXBpVmVyc2lvblwiOiB7XG4gICAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MWJldGEyXCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJjcmVhdGlvblRpbWVzdGFtcFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJkb2NrZXJJbWFnZU1ldGFkYXRhXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvZG9ja2VyX0ltYWdlXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5kb2NrZXIuY2xpZW50LmRvY2tlcmNsaWVudC5JbWFnZVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImRvY2tlckltYWdlUmVmZXJlbmNlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImtpbmRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibGFiZWxzXCI6IHtcbiAgICAgICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJqYXZhLnV0aWwuTWFwPFN0cmluZyxTdHJpbmc+XCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJuYW1lXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm5hbWVzcGFjZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXNvdXJjZVZlcnNpb25cIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2VsZkxpbmtcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidWlkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwib3NfaW1hZ2VfSW1hZ2VMaXN0XCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLmltYWdlLkltYWdlTGlzdFwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiYXBpVmVyc2lvblwiOiB7XG4gICAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MWJldGEyXCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19pbWFnZV9JbWFnZVwiLFxuICAgICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLmltYWdlLkltYWdlXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImtpbmRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVzb3VyY2VWZXJzaW9uXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNlbGZMaW5rXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwib3NfaW1hZ2VfSW1hZ2VSZXBvc2l0b3J5XCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLmltYWdlLkltYWdlUmVwb3NpdG9yeVwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiYW5ub3RhdGlvbnNcIjoge1xuICAgICAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImphdmEudXRpbC5NYXA8U3RyaW5nLFN0cmluZz5cIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImFwaVZlcnNpb25cIjoge1xuICAgICAgICAgICAgXCJkZWZhdWx0XCI6IFwidjFiZXRhMlwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiY3JlYXRpb25UaW1lc3RhbXBcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZG9ja2VySW1hZ2VSZXBvc2l0b3J5XCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImtpbmRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibGFiZWxzXCI6IHtcbiAgICAgICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiamF2YVR5cGVcIjogXCJqYXZhLnV0aWwuTWFwPFN0cmluZyxTdHJpbmc+XCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJuYW1lXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm5hbWVzcGFjZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXNvdXJjZVZlcnNpb25cIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2VsZkxpbmtcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic3RhdHVzXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3NfaW1hZ2VfSW1hZ2VSZXBvc2l0b3J5U3RhdHVzXCIsXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLmltYWdlLkltYWdlUmVwb3NpdG9yeVN0YXR1c1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInRhZ3NcIjoge1xuICAgICAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImphdmEudXRpbC5NYXA8U3RyaW5nLFN0cmluZz5cIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInVpZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcIm9zX2ltYWdlX0ltYWdlUmVwb3NpdG9yeUxpc3RcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuaW1hZ2UuSW1hZ2VSZXBvc2l0b3J5TGlzdFwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiYXBpVmVyc2lvblwiOiB7XG4gICAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MWJldGEyXCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19pbWFnZV9JbWFnZVJlcG9zaXRvcnlcIixcbiAgICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5pbWFnZS5JbWFnZVJlcG9zaXRvcnlcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwia2luZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXNvdXJjZVZlcnNpb25cIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2VsZkxpbmtcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJvc19pbWFnZV9JbWFnZVJlcG9zaXRvcnlTdGF0dXNcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuaW1hZ2UuSW1hZ2VSZXBvc2l0b3J5U3RhdHVzXCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJkb2NrZXJJbWFnZVJlcG9zaXRvcnlcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9LFxuICAgICAgXCJvc19yb3V0ZV9Sb3V0ZVwiOiB7XG4gICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5yb3V0ZS5Sb3V0ZVwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiYW5ub3RhdGlvbnNcIjoge1xuICAgICAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJqYXZhVHlwZVwiOiBcImphdmEudXRpbC5NYXA8U3RyaW5nLFN0cmluZz5cIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImFwaVZlcnNpb25cIjoge1xuICAgICAgICAgICAgXCJkZWZhdWx0XCI6IFwidjFiZXRhMlwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiY3JlYXRpb25UaW1lc3RhbXBcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaG9zdFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJraW5kXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImxhYmVsc1wiOiB7XG4gICAgICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiamF2YS51dGlsLk1hcDxTdHJpbmcsU3RyaW5nPlwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibmFtZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJuYW1lc3BhY2VcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGF0aFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXNvdXJjZVZlcnNpb25cIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2VsZkxpbmtcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2VydmljZU5hbWVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidWlkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwib3Nfcm91dGVfUm91dGVMaXN0XCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLnJvdXRlLlJvdXRlTGlzdFwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiYXBpVmVyc2lvblwiOiB7XG4gICAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MWJldGEyXCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19yb3V0ZV9Sb3V0ZVwiLFxuICAgICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLnJvdXRlLlJvdXRlXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImtpbmRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVzb3VyY2VWZXJzaW9uXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNlbGZMaW5rXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwib3NfdGVtcGxhdGVfUGFyYW1ldGVyXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLnRlbXBsYXRlLlBhcmFtZXRlclwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiRGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiRnJvbVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJHZW5lcmF0ZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJOYW1lXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIlZhbHVlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgfSxcbiAgICAgIFwib3NfdGVtcGxhdGVfVGVtcGxhdGVcIjoge1xuICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwudGVtcGxhdGUuVGVtcGxhdGVcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcIk9iamVjdExhYmVsc1wiOiB7XG4gICAgICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiamF2YS51dGlsLk1hcDxTdHJpbmcsU3RyaW5nPlwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiT2JqZWN0c1wiOiB7XG4gICAgICAgICAgICBcIml0ZW1zXCI6IHt9LFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJQYXJhbWV0ZXJzXCI6IHtcbiAgICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX3RlbXBsYXRlX1BhcmFtZXRlclwiLFxuICAgICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLnRlbXBsYXRlLlBhcmFtZXRlclwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJhbm5vdGF0aW9uc1wiOiB7XG4gICAgICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiamF2YS51dGlsLk1hcDxTdHJpbmcsU3RyaW5nPlwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiYXBpVmVyc2lvblwiOiB7XG4gICAgICAgICAgICBcImRlZmF1bHRcIjogXCJ2MWJldGEyXCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJjcmVhdGlvblRpbWVzdGFtcFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJraW5kXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImxhYmVsc1wiOiB7XG4gICAgICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImphdmFUeXBlXCI6IFwiamF2YS51dGlsLk1hcDxTdHJpbmcsU3RyaW5nPlwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibmFtZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJuYW1lc3BhY2VcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVzb3VyY2VWZXJzaW9uXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNlbGZMaW5rXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInVpZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgIH0sXG4gICAgICBcInNwZXRlcl9pbmZfRGVjXCI6IHtcbiAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuY2xpZW50LnV0aWwuRGVjXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICB9XG4gICAgfSxcbiAgICBcImlkXCI6IFwiaHR0cDovL2ZhYnJpYzguaW8vZmFicmljOC92Mi9TY2hlbWEjXCIsXG4gICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgIFwiQnVpbGRDb25maWdMaXN0XCI6IHtcbiAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19idWlsZF9CdWlsZENvbmZpZ0xpc3RcIixcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5idWlsZC5CdWlsZENvbmZpZ0xpc3RcIlxuICAgICAgfSxcbiAgICAgIFwiQnVpbGRMaXN0XCI6IHtcbiAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19idWlsZF9CdWlsZExpc3RcIixcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5idWlsZC5CdWlsZExpc3RcIlxuICAgICAgfSxcbiAgICAgIFwiQ29uZmlnXCI6IHtcbiAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vc19jb25maWdfQ29uZmlnXCIsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuY29uZmlnLkNvbmZpZ1wiXG4gICAgICB9LFxuICAgICAgXCJDb250YWluZXJTdGF0dXNcIjoge1xuICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfdjFiZXRhMl9Db250YWluZXJTdGF0dXNcIixcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudjFiZXRhMi5Db250YWluZXJTdGF0dXNcIlxuICAgICAgfSxcbiAgICAgIFwiRGVwbG95bWVudENvbmZpZ0xpc3RcIjoge1xuICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2RlcGxveV9EZXBsb3ltZW50Q29uZmlnTGlzdFwiLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLmRlcGxveS5EZXBsb3ltZW50Q29uZmlnTGlzdFwiXG4gICAgICB9LFxuICAgICAgXCJEZXBsb3ltZW50TGlzdFwiOiB7XG4gICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3NfZGVwbG95X0RlcGxveW1lbnRMaXN0XCIsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuZGVwbG95LkRlcGxveW1lbnRMaXN0XCJcbiAgICAgIH0sXG4gICAgICBcIkVuZHBvaW50c1wiOiB7XG4gICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc192MWJldGEyX0VuZHBvaW50c1wiLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLkVuZHBvaW50c1wiXG4gICAgICB9LFxuICAgICAgXCJFbmRwb2ludHNMaXN0XCI6IHtcbiAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX3YxYmV0YTJfRW5kcG9pbnRzTGlzdFwiLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLkVuZHBvaW50c0xpc3RcIlxuICAgICAgfSxcbiAgICAgIFwiRW52VmFyXCI6IHtcbiAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX3YxYmV0YTJfRW52VmFyXCIsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnYxYmV0YTIuRW52VmFyXCJcbiAgICAgIH0sXG4gICAgICBcIkltYWdlTGlzdFwiOiB7XG4gICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3NfaW1hZ2VfSW1hZ2VMaXN0XCIsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lm9wZW5zaGlmdC5hcGkubW9kZWwuaW1hZ2UuSW1hZ2VMaXN0XCJcbiAgICAgIH0sXG4gICAgICBcIkltYWdlUmVwb3NpdG9yeUxpc3RcIjoge1xuICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX2ltYWdlX0ltYWdlUmVwb3NpdG9yeUxpc3RcIixcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC5pbWFnZS5JbWFnZVJlcG9zaXRvcnlMaXN0XCJcbiAgICAgIH0sXG4gICAgICBcIkt1YmVybmV0ZXNMaXN0XCI6IHtcbiAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX3YxYmV0YTJfTGlzdFwiLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLkt1YmVybmV0ZXNMaXN0XCJcbiAgICAgIH0sXG4gICAgICBcIk1pbmlvblwiOiB7XG4gICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc192MWJldGEyX01pbmlvblwiLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLk1pbmlvblwiXG4gICAgICB9LFxuICAgICAgXCJNaW5pb25MaXN0XCI6IHtcbiAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9rdWJlcm5ldGVzX3YxYmV0YTJfTWluaW9uTGlzdFwiLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5rdWJlcm5ldGVzLmFwaS5tb2RlbC52MWJldGEyLk1pbmlvbkxpc3RcIlxuICAgICAgfSxcbiAgICAgIFwiUG9kTGlzdFwiOiB7XG4gICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc192MWJldGEyX1BvZExpc3RcIixcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgua3ViZXJuZXRlcy5hcGkubW9kZWwudjFiZXRhMi5Qb2RMaXN0XCJcbiAgICAgIH0sXG4gICAgICBcIlJlcGxpY2F0aW9uQ29udHJvbGxlckxpc3RcIjoge1xuICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfdjFiZXRhMl9SZXBsaWNhdGlvbkNvbnRyb2xsZXJMaXN0XCIsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnYxYmV0YTIuUmVwbGljYXRpb25Db250cm9sbGVyTGlzdFwiXG4gICAgICB9LFxuICAgICAgXCJSb3V0ZUxpc3RcIjoge1xuICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29zX3JvdXRlX1JvdXRlTGlzdFwiLFxuICAgICAgICBcImphdmFUeXBlXCI6IFwiaW8uZmFicmljOC5vcGVuc2hpZnQuYXBpLm1vZGVsLnJvdXRlLlJvdXRlTGlzdFwiXG4gICAgICB9LFxuICAgICAgXCJTZXJ2aWNlTGlzdFwiOiB7XG4gICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMva3ViZXJuZXRlc192MWJldGEyX1NlcnZpY2VMaXN0XCIsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLnYxYmV0YTIuU2VydmljZUxpc3RcIlxuICAgICAgfSxcbiAgICAgIFwiU3RhdHVzRXJyb3JcIjoge1xuICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2t1YmVybmV0ZXNfZXJyb3JzX1N0YXR1c0Vycm9yXCIsXG4gICAgICAgIFwiamF2YVR5cGVcIjogXCJpby5mYWJyaWM4Lmt1YmVybmV0ZXMuYXBpLm1vZGVsLmVycm9ycy5TdGF0dXNFcnJvclwiXG4gICAgICB9LFxuICAgICAgXCJUZW1wbGF0ZVwiOiB7XG4gICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3NfdGVtcGxhdGVfVGVtcGxhdGVcIixcbiAgICAgICAgXCJqYXZhVHlwZVwiOiBcImlvLmZhYnJpYzgub3BlbnNoaWZ0LmFwaS5tb2RlbC50ZW1wbGF0ZS5UZW1wbGF0ZVwiXG4gICAgICB9XG4gICAgfSxcbiAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICB9XG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNIZWxwZXJzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNQbHVnaW4udHNcIi8+XG5cbm1vZHVsZSBLdWJlcm5ldGVzIHtcblxuICBleHBvcnQgdmFyIFNlcnZpY2VDb250cm9sbGVyID0gY29udHJvbGxlcihcIlNlcnZpY2VDb250cm9sbGVyXCIsXG4gICAgW1wiJHNjb3BlXCIsIFwiS3ViZXJuZXRlc01vZGVsXCIsIFwiS3ViZXJuZXRlc1N0YXRlXCIsIFwiJHRlbXBsYXRlQ2FjaGVcIiwgXCIkbG9jYXRpb25cIiwgXCIkcm91dGVQYXJhbXNcIiwgXCIkaHR0cFwiLCBcIiR0aW1lb3V0XCIsIFwiS3ViZXJuZXRlc0FwaVVSTFwiLFxuICAgICAgKCRzY29wZSwgS3ViZXJuZXRlc01vZGVsOiBLdWJlcm5ldGVzLkt1YmVybmV0ZXNNb2RlbFNlcnZpY2UsIEt1YmVybmV0ZXNTdGF0ZSxcbiAgICAgICAkdGVtcGxhdGVDYWNoZTpuZy5JVGVtcGxhdGVDYWNoZVNlcnZpY2UsICRsb2NhdGlvbjpuZy5JTG9jYXRpb25TZXJ2aWNlLCAkcm91dGVQYXJhbXMsICRodHRwLCAkdGltZW91dCwgS3ViZXJuZXRlc0FwaVVSTCkgPT4ge1xuXG4gICAgJHNjb3BlLmt1YmVybmV0ZXMgPSBLdWJlcm5ldGVzU3RhdGU7XG4gICAgJHNjb3BlLm1vZGVsID0gS3ViZXJuZXRlc01vZGVsO1xuXG4gICAgS3ViZXJuZXRlcy5pbml0U2hhcmVkKCRzY29wZSwgJGxvY2F0aW9uLCAkaHR0cCwgJHRpbWVvdXQsICRyb3V0ZVBhcmFtcywgS3ViZXJuZXRlc01vZGVsLCBLdWJlcm5ldGVzU3RhdGUsIEt1YmVybmV0ZXNBcGlVUkwpO1xuXG4gICAgJHNjb3BlLml0ZW1Db25maWcgPSB7XG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICdeXFxcXC9sYWJlbHMkJzoge1xuICAgICAgICAgIHRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoJ2xhYmVsVGVtcGxhdGUuaHRtbCcpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgJHNjb3BlLiRvbigna3ViZXJuZXRlc01vZGVsVXBkYXRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHVwZGF0ZURhdGEoKTtcbiAgICB9KTtcblxuICAgICRzY29wZS4kb24oJyRyb3V0ZVVwZGF0ZScsICgkZXZlbnQpID0+IHtcbiAgICAgIHVwZGF0ZURhdGEoKTtcbiAgICB9KTtcblxuICAgIHVwZGF0ZURhdGEoKTtcblxuICAgIGZ1bmN0aW9uIHVwZGF0ZURhdGEoKSB7XG4gICAgICAkc2NvcGUuaWQgPSAkcm91dGVQYXJhbXNbXCJpZFwiXTtcbiAgICAgICRzY29wZS5pdGVtID0gJHNjb3BlLm1vZGVsLmdldFNlcnZpY2UoS3ViZXJuZXRlc1N0YXRlLnNlbGVjdGVkTmFtZXNwYWNlLCAkc2NvcGUuaWQpO1xuICAgICAgQ29yZS4kYXBwbHkoJHNjb3BlKTtcbiAgICB9XG4gIH1dKTtcbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9pbmNsdWRlcy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzSGVscGVycy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzUGx1Z2luLnRzXCIvPlxuXG5tb2R1bGUgS3ViZXJuZXRlcyB7XG5cbiAgZXhwb3J0IHZhciBTZXJ2aWNlRWRpdENvbnRyb2xsZXIgPSBjb250cm9sbGVyKFwiU2VydmljZUVkaXRDb250cm9sbGVyXCIsXG4gICAgW1wiJHNjb3BlXCIsIFwiS3ViZXJuZXRlc01vZGVsXCIsIFwiS3ViZXJuZXRlc1N0YXRlXCIsIFwiS3ViZXJuZXRlc1NjaGVtYVwiLCBcIiR0ZW1wbGF0ZUNhY2hlXCIsIFwiJGxvY2F0aW9uXCIsIFwiJHJvdXRlUGFyYW1zXCIsIFwiJGh0dHBcIiwgXCIkdGltZW91dFwiLCBcIkt1YmVybmV0ZXNBcGlVUkxcIixcbiAgICAgICgkc2NvcGUsIEt1YmVybmV0ZXNNb2RlbDogS3ViZXJuZXRlcy5LdWJlcm5ldGVzTW9kZWxTZXJ2aWNlLCBLdWJlcm5ldGVzU3RhdGUsIEt1YmVybmV0ZXNTY2hlbWEsXG4gICAgICAgJHRlbXBsYXRlQ2FjaGU6bmcuSVRlbXBsYXRlQ2FjaGVTZXJ2aWNlLCAkbG9jYXRpb246bmcuSUxvY2F0aW9uU2VydmljZSwgJHJvdXRlUGFyYW1zLCAkaHR0cCwgJHRpbWVvdXQsIEt1YmVybmV0ZXNBcGlVUkwpID0+IHtcblxuICAgICRzY29wZS5rdWJlcm5ldGVzID0gS3ViZXJuZXRlc1N0YXRlO1xuICAgICRzY29wZS5tb2RlbCA9IEt1YmVybmV0ZXNNb2RlbDtcbiAgICAkc2NvcGUuaWQgPSAkcm91dGVQYXJhbXNbXCJpZFwiXTtcbiAgICAkc2NvcGUuc2NoZW1hID0gS3ViZXJuZXRlc1NjaGVtYTtcbiAgICAkc2NvcGUuY29uZmlnID0gS3ViZXJuZXRlc1NjaGVtYS5kZWZpbml0aW9ucy5rdWJlcm5ldGVzX3YxYmV0YTJfU2VydmljZTtcblxuICAgIEt1YmVybmV0ZXMuaW5pdFNoYXJlZCgkc2NvcGUsICRsb2NhdGlvbiwgJGh0dHAsICR0aW1lb3V0LCAkcm91dGVQYXJhbXMsIEt1YmVybmV0ZXNNb2RlbCwgS3ViZXJuZXRlc1N0YXRlLCBLdWJlcm5ldGVzQXBpVVJMKTtcblxuICAgICRzY29wZS4kb24oJyRyb3V0ZVVwZGF0ZScsICgkZXZlbnQpID0+IHtcbiAgICAgIHVwZGF0ZURhdGEoKTtcbiAgICB9KTtcblxuICAgIHVwZGF0ZURhdGEoKTtcblxuICAgIGZ1bmN0aW9uIHVwZGF0ZURhdGEoKSB7XG4gICAgICBpZiAoJHNjb3BlLmlkKSB7XG4gICAgICAgICRzY29wZS5lbnRpdHkgPSAkc2NvcGUubW9kZWwuZ2V0U2VydmljZShLdWJlcm5ldGVzU3RhdGUuc2VsZWN0ZWROYW1lc3BhY2UsICRzY29wZS5pZCk7XG4gICAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgICAgICRzY29wZS5mZXRjaGVkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRzY29wZS5mZXRjaGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9pbmNsdWRlcy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzSGVscGVycy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJrdWJlcm5ldGVzUGx1Z2luLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNNb2RlbC50c1wiLz5cblxubW9kdWxlIEt1YmVybmV0ZXMge1xuXG4gIC8qKlxuICAgKiBSZXByZXNlbnRzIGEgc2ltcGxlIGludGVyZmFjZSB0byBzZXJ2aWNlIGRpc2NvdmVyeSB0aGF0IGNhbiBiZSB1c2VkIGVhcmx5IG9uIGluIHRoZSBhcHBsaWNhdGlvbiBsaWZlY3ljbGUgYmVmb3JlIHRoZVxuICAgKiB1bmRlcmx5aW5nIG1vZGVsIGhhcyBiZWVuIGNyZWF0ZWQgdmlhIGRlcGVuZGVuY3kgaW5qZWN0aW9uXG4gICAqL1xuICBleHBvcnQgY2xhc3MgU2VydmljZVJlZ2lzdHJ5U2VydmljZSB7XG4gICAgcHJpdmF0ZSBtb2RlbDpLdWJlcm5ldGVzTW9kZWxTZXJ2aWNlID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGVyZSBpcyBhIHNlcnZpY2UgYXZhaWxhYmxlIGZvciB0aGUgZ2l2ZW4gSUQgb3IgZmFsc2VcbiAgICAgKi9cbiAgICBwdWJsaWMgaGFzU2VydmljZShzZXJ2aWNlTmFtZTogc3RyaW5nKSB7XG4gICAgICByZXR1cm4gdGhpcy5maW5kU2VydmljZShzZXJ2aWNlTmFtZSkgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc2VydmljZSBmb3IgdGhlIGdpdmVuIHNlcnZpY2UgbmFtZSAoSUQpIG9yIG51bGwgaWYgaXQgY2Fubm90IGJlIGZvdW5kXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2VydmljZU5hbWUgdGhlIG5hbWUgb2YgdGhlIHNlcnZpY2UgdG8gbG9vayBmb3JcbiAgICAgKiBAcmV0dXJuIHtudWxsfVxuICAgICAqL1xuICAgIHB1YmxpYyBmaW5kU2VydmljZShzZXJ2aWNlTmFtZTogc3RyaW5nKSB7XG4gICAgICB2YXIgYW5zd2VyID0gbnVsbDtcbiAgICAgIGlmIChzZXJ2aWNlTmFtZSkge1xuICAgICAgICB2YXIgbW9kZWwgPSB0aGlzLmdldE1vZGVsKCk7XG4gICAgICAgIGlmIChtb2RlbCkge1xuICAgICAgICAgIHZhciBuYW1lc3BhY2UgPSBtb2RlbC5jdXJyZW50TmFtZXNwYWNlKCk7XG4gICAgICAgICAgcmV0dXJuIG1vZGVsLmdldFNlcnZpY2UobmFtZXNwYWNlICxzZXJ2aWNlTmFtZSk7XG4vKlxuICAgICAgICBUT0RPIGxldHMgb25seSBsb29rIGluIHRoZSBjdXJyZW50IG5hbWVzcGFjZVxuICAgICAgICBhbmd1bGFyLmZvckVhY2gobW9kZWwuc2VydmljZXMsIChzZXJ2aWNlKSA9PiB7XG4gICAgICAgICAgaWYgKHNlcnZpY2VOYW1lID09PSBzZXJ2aWNlLmlkKSB7XG4gICAgICAgICAgICBhbnN3ZXIgPSBzZXJ2aWNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4qL1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYW5zd2VyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHNlcnZpY2UgbGluayBmb3IgdGhlIGdpdmVuIHNlcnZpY2UgbmFtZVxuICAgICAqXG4gICAgICogQHBhcmFtIHNlcnZpY2VOYW1lIHRoZSBuYW1lIG9mIHRoZSBzZXJ2aWNlXG4gICAgICogQHJldHVybiB7bnVsbH1cbiAgICAgKi9cbiAgICBwdWJsaWMgc2VydmljZUxpbmsoc2VydmljZU5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICB2YXIgc2VydmljZSA9IHRoaXMuZmluZFNlcnZpY2Uoc2VydmljZU5hbWUpO1xuICAgICAgaWYgKHNlcnZpY2UpIHtcbiAgICAgICAgdmFyIHBvcnRhbElQID0gc2VydmljZS4kaG9zdDtcbiAgICAgICAgLy8gbGV0cyBhc3N1bWUgbm8gY3VzdG9tIHBvcnQgZm9yIG5vdyBmb3IgZXh0ZXJuYWwgcm91dGVzXG4gICAgICAgIHZhciBwb3J0ID0gbnVsbDtcbiAgICAgICAgaWYgKCFwb3J0YWxJUCkge1xuICAgICAgICAgIHBvcnRhbElQID0gc2VydmljZS5wb3J0YWxJUDtcbiAgICAgICAgICBwb3J0ID0gc2VydmljZS5wb3J0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVE9ETyB1c2UgYW5ub3RhdGlvbnMgdG8gc3VwcG9ydCBvdGhlciBraW5kcyBvZiBwcm90b2NvbD9cbiAgICAgICAgdmFyIHByb3RvY29sID0gXCJodHRwOi8vXCI7XG5cbiAgICAgICAgaWYgKHBvcnRhbElQKSB7XG4gICAgICAgICAgaWYgKHBvcnQpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm90b2NvbCArIHBvcnRhbElQICsgXCI6XCIgKyBwb3J0ICsgXCIvXCI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBwcm90b2NvbCArIHBvcnRhbElQO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldE1vZGVsKCk6S3ViZXJuZXRlc01vZGVsU2VydmljZSB7XG4gICAgICB2YXIgYW5zd2VyID0gdGhpcy5tb2RlbDtcbiAgICAgIC8vIGxldHMgYWxsb3cgbGF6eSBsb2FkIHNvIHdlIGNhbiBiZSBpbnZva2VkIGJlZm9yZSB0aGUgaW5qZWN0b3IgaGFzIGJlZW4gY3JlYXRlZFxuICAgICAgaWYgKCFhbnN3ZXIpIHtcbiAgICAgICAgdmFyIGluamVjdG9yID0gSGF3dGlvQ29yZS5pbmplY3RvcjtcbiAgICAgICAgaWYgKGluamVjdG9yKSB7XG4gICAgICAgICAgdGhpcy5tb2RlbCA9IGluamVjdG9yLmdldCgnS3ViZXJuZXRlc01vZGVsJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGFuc3dlciA9IHRoaXMubW9kZWw7XG4gICAgICByZXR1cm4gYW5zd2VyO1xuICAgIH1cbiAgfVxufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNIZWxwZXJzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImt1YmVybmV0ZXNQbHVnaW4udHNcIi8+XG5cbm1vZHVsZSBLdWJlcm5ldGVzIHtcblxuICBleHBvcnQgdmFyIFNlcnZpY2VzID0gY29udHJvbGxlcihcIlNlcnZpY2VzXCIsXG4gICAgW1wiJHNjb3BlXCIsIFwiS3ViZXJuZXRlc01vZGVsXCIsIFwiS3ViZXJuZXRlc1NlcnZpY2VzXCIsIFwiS3ViZXJuZXRlc1BvZHNcIiwgXCJLdWJlcm5ldGVzU3RhdGVcIiwgXCIkdGVtcGxhdGVDYWNoZVwiLCBcIiRsb2NhdGlvblwiLCBcIiRyb3V0ZVBhcmFtc1wiLCBcImpvbG9raWFcIiwgXCIkaHR0cFwiLCBcIiR0aW1lb3V0XCIsIFwiS3ViZXJuZXRlc0FwaVVSTFwiLFxuICAgICAgKCRzY29wZSwgS3ViZXJuZXRlc01vZGVsOiBLdWJlcm5ldGVzLkt1YmVybmV0ZXNNb2RlbFNlcnZpY2UsIEt1YmVybmV0ZXNTZXJ2aWNlczpuZy5JUHJvbWlzZTxuZy5yZXNvdXJjZS5JUmVzb3VyY2VDbGFzcz4sIEt1YmVybmV0ZXNQb2RzOm5nLklQcm9taXNlPG5nLnJlc291cmNlLklSZXNvdXJjZUNsYXNzPiwgS3ViZXJuZXRlc1N0YXRlLFxuICAgICAgICR0ZW1wbGF0ZUNhY2hlOm5nLklUZW1wbGF0ZUNhY2hlU2VydmljZSwgJGxvY2F0aW9uOm5nLklMb2NhdGlvblNlcnZpY2UsICRyb3V0ZVBhcmFtcywgam9sb2tpYTpKb2xva2lhLklKb2xva2lhLCAkaHR0cCwgJHRpbWVvdXQsIEt1YmVybmV0ZXNBcGlVUkwpID0+IHtcblxuICAgICRzY29wZS5rdWJlcm5ldGVzID0gS3ViZXJuZXRlc1N0YXRlO1xuICAgICRzY29wZS5tb2RlbCA9IEt1YmVybmV0ZXNNb2RlbDtcblxuICAgICRzY29wZS50YWJsZUNvbmZpZyA9IHtcbiAgICAgIGRhdGE6ICdtb2RlbC5zZXJ2aWNlcycsXG4gICAgICBzaG93U2VsZWN0aW9uQ2hlY2tib3g6IHRydWUsXG4gICAgICBlbmFibGVSb3dDbGlja1NlbGVjdGlvbjogZmFsc2UsXG4gICAgICBtdWx0aVNlbGVjdDogdHJ1ZSxcbiAgICAgIHNlbGVjdGVkSXRlbXM6IFtdLFxuICAgICAgZmlsdGVyT3B0aW9uczoge1xuICAgICAgICBmaWx0ZXJUZXh0OiAkbG9jYXRpb24uc2VhcmNoKClbXCJxXCJdIHx8ICcnXG4gICAgICB9LFxuICAgICAgY29sdW1uRGVmczogW1xuICAgICAgICB7IGZpZWxkOiAnaWQnLCBkaXNwbGF5TmFtZTogJ0lEJywgY2VsbFRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoXCJpZFRlbXBsYXRlLmh0bWxcIikgfSxcbiAgICAgICAgeyBmaWVsZDogJyRwb2RzTGluaycsIGRpc3BsYXlOYW1lOiAnUG9kcycsIGNlbGxUZW1wbGF0ZTogJHRlbXBsYXRlQ2FjaGUuZ2V0KFwicG9kQ291bnRzQW5kTGlua1RlbXBsYXRlLmh0bWxcIikgfSxcbiAgICAgICAgeyBmaWVsZDogJ3NlbGVjdG9yJywgZGlzcGxheU5hbWU6ICdTZWxlY3RvcicsIGNlbGxUZW1wbGF0ZTogJHRlbXBsYXRlQ2FjaGUuZ2V0KFwic2VsZWN0b3JUZW1wbGF0ZS5odG1sXCIpIH0sXG4gICAgICAgIHsgZmllbGQ6ICdwb3J0YWxJUCcsIGRpc3BsYXlOYW1lOiAnQWRkcmVzcycsIGNlbGxUZW1wbGF0ZTogJHRlbXBsYXRlQ2FjaGUuZ2V0KFwicG9ydGFsQWRkcmVzcy5odG1sXCIpIH0sXG4gICAgICAgIHsgZmllbGQ6ICdsYWJlbHNUZXh0JywgZGlzcGxheU5hbWU6ICdMYWJlbHMnLCBjZWxsVGVtcGxhdGU6ICR0ZW1wbGF0ZUNhY2hlLmdldChcImxhYmVsVGVtcGxhdGUuaHRtbFwiKSB9LFxuICAgICAgICB7IGZpZWxkOiAnbmFtZXNwYWNlJywgZGlzcGxheU5hbWU6ICdOYW1lc3BhY2UnIH1cbiAgICAgIF1cbiAgICB9O1xuXG4gICAgS3ViZXJuZXRlcy5pbml0U2hhcmVkKCRzY29wZSwgJGxvY2F0aW9uLCAkaHR0cCwgJHRpbWVvdXQsICRyb3V0ZVBhcmFtcywgS3ViZXJuZXRlc01vZGVsLCBLdWJlcm5ldGVzU3RhdGUsIEt1YmVybmV0ZXNBcGlVUkwpO1xuXG4gICAgJHNjb3BlLiRvbigna3ViZXJuZXRlc01vZGVsVXBkYXRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgfSk7XG5cbiAgICBLdWJlcm5ldGVzU2VydmljZXMudGhlbigoS3ViZXJuZXRlc1NlcnZpY2VzOm5nLnJlc291cmNlLklSZXNvdXJjZUNsYXNzKSA9PiB7XG4gICAgICBLdWJlcm5ldGVzUG9kcy50aGVuKChLdWJlcm5ldGVzUG9kczpuZy5yZXNvdXJjZS5JUmVzb3VyY2VDbGFzcykgPT4ge1xuICAgICAgICAkc2NvcGUuZGVsZXRlUHJvbXB0ID0gKHNlbGVjdGVkKSA9PiB7XG4gICAgICAgICAgaWYgKGFuZ3VsYXIuaXNTdHJpbmcoc2VsZWN0ZWQpKSB7XG4gICAgICAgICAgICBzZWxlY3RlZCA9IFt7XG4gICAgICAgICAgICAgIGlkOiBzZWxlY3RlZFxuICAgICAgICAgICAgfV07XG4gICAgICAgICAgfVxuICAgICAgICAgIFVJLm11bHRpSXRlbUNvbmZpcm1BY3Rpb25EaWFsb2coPFVJLk11bHRpSXRlbUNvbmZpcm1BY3Rpb25PcHRpb25zPntcbiAgICAgICAgICAgIGNvbGxlY3Rpb246IHNlbGVjdGVkLFxuICAgICAgICAgICAgaW5kZXg6ICdpZCcsXG4gICAgICAgICAgICBvbkNsb3NlOiAocmVzdWx0OmJvb2xlYW4pID0+IHtcbiAgICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRlbGV0ZVNlbGVjdGVkKHNlbGVjdGVkOkFycmF5PEt1YmVQb2Q+LCBuZXh0Okt1YmVQb2QpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyhcImRlbGV0aW5nOiBcIiwgbmV4dC5pZCk7XG4gICAgICAgICAgICAgICAgICAgIEt1YmVybmV0ZXNTZXJ2aWNlcy5kZWxldGUoe1xuICAgICAgICAgICAgICAgICAgICAgIGlkOiBuZXh0LmlkXG4gICAgICAgICAgICAgICAgICAgIH0sIHVuZGVmaW5lZCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyhcImRlbGV0ZWQ6IFwiLCBuZXh0LmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICBkZWxldGVTZWxlY3RlZChzZWxlY3RlZCwgc2VsZWN0ZWQuc2hpZnQoKSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyhcIkVycm9yIGRlbGV0aW5nOiBcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZVNlbGVjdGVkKHNlbGVjdGVkLCBzZWxlY3RlZC5zaGlmdCgpKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlbGV0ZVNlbGVjdGVkKHNlbGVjdGVkLCBzZWxlY3RlZC5zaGlmdCgpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRpdGxlOiAnRGVsZXRlIHNlcnZpY2VzPycsXG4gICAgICAgICAgICBhY3Rpb246ICdUaGUgZm9sbG93aW5nIHNlcnZpY2VzIHdpbGwgYmUgZGVsZXRlZDonLFxuICAgICAgICAgICAgb2tUZXh0OiAnRGVsZXRlJyxcbiAgICAgICAgICAgIG9rQ2xhc3M6ICdidG4tZGFuZ2VyJyxcbiAgICAgICAgICAgIGN1c3RvbTogXCJUaGlzIG9wZXJhdGlvbiBpcyBwZXJtYW5lbnQgb25jZSBjb21wbGV0ZWQhXCIsXG4gICAgICAgICAgICBjdXN0b21DbGFzczogXCJhbGVydCBhbGVydC13YXJuaW5nXCJcbiAgICAgICAgICB9KS5vcGVuKCk7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9KTtcblxuICB9XSk7XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vaW5jbHVkZXMudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwia3ViZXJuZXRlc0hlbHBlcnMudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwia3ViZXJuZXRlc1BsdWdpbi50c1wiLz5cblxubW9kdWxlIEt1YmVybmV0ZXMge1xuXG4gIC8vIGNvbnRyb2xsZXIgZm9yIHRoZSBzdGF0dXMgaWNvbiBjZWxsXG4gIGV4cG9ydCB2YXIgUG9kU3RhdHVzID0gY29udHJvbGxlcihcIlBvZFN0YXR1c1wiLCBbXCIkc2NvcGVcIiwgKCRzY29wZSkgPT4ge1xuICAgICRzY29wZS5zdGF0dXNNYXBwaW5nID0gKHRleHQpID0+IHtcbiAgICAgIHJldHVybiBzdGF0dXNUZXh0VG9Dc3NDbGFzcyh0ZXh0KTtcbiAgICB9XG4gIH1dKTtcblxuICAvLyBjb250cm9sbGVyIHRoYXQgZGVhbHMgd2l0aCB0aGUgbGFiZWxzIHBlciBwb2RcbiAgZXhwb3J0IHZhciBMYWJlbHMgPSBjb250cm9sbGVyKFwiTGFiZWxzXCIsIFtcIiRzY29wZVwiLCBcIndvcmtzcGFjZVwiLCBcImpvbG9raWFcIiwgXCIkbG9jYXRpb25cIiwgKCRzY29wZSwgd29ya3NwYWNlLCBqb2xva2lhLCAkbG9jYXRpb24pID0+IHtcbiAgICAkc2NvcGUubGFiZWxzID0gW107XG4gICAgdmFyIGxhYmVsS2V5V2VpZ2h0cyA9IHtcbiAgICAgIFwibmFtZVwiOiAxLFxuICAgICAgXCJyZXBsaWNhdGlvbkNvbnRyb2xsZXJcIjogMixcbiAgICAgIFwiZ3JvdXBcIjogM1xuICAgIH07XG4gICAgJHNjb3BlLiR3YXRjaCgnZW50aXR5JywgKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgPT4ge1xuICAgICAgaWYgKG5ld1ZhbHVlKSB7XG4gICAgICAgIC8vIGxvZy5kZWJ1ZyhcImxhYmVsczogXCIsIG5ld1ZhbHVlKTtcbiAgICAgICAgLy8gbWFzc2FnZSB0aGUgbGFiZWxzIGEgYml0XG4gICAgICAgICRzY29wZS5sYWJlbHMgPSBbXTtcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5lbnRpdHkubGFiZWxzLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgIGlmIChrZXkgPT09ICdmYWJyaWM4Jykge1xuICAgICAgICAgICAgLy8gVE9ETyBub3Qgc3VyZSB3aGF0IHRoaXMgaXMgZm9yLCB0aGUgY29udGFpbmVyIHR5cGU/XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgICRzY29wZS5sYWJlbHMucHVzaCh7XG4gICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgIHRpdGxlOiB2YWx1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyAgbGV0cyBzb3J0IGJ5IGtleSBidXQgbGV0cyBtYWtlIHN1cmUgdGhhdCB3ZSB3ZWlnaHQgY2VydGFpbiBsYWJlbHMgc28gdGhleSBhcmUgZmlyc3RcbiAgICAgICAgJHNjb3BlLmxhYmVscyA9ICRzY29wZS5sYWJlbHMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgIGZ1bmN0aW9uIGdldFdlaWdodChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBsYWJlbEtleVdlaWdodHNba2V5XSB8fCAxMDAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgbjEgPSBhW1wia2V5XCJdO1xuICAgICAgICAgIHZhciBuMiA9IGJbXCJrZXlcIl07XG4gICAgICAgICAgdmFyIHcxID0gZ2V0V2VpZ2h0KG4xKTtcbiAgICAgICAgICB2YXIgdzIgPSBnZXRXZWlnaHQobjIpO1xuICAgICAgICAgIHZhciBkaWZmID0gdzEgLSB3MjtcbiAgICAgICAgICBpZiAoZGlmZiA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGRpZmYgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG4xICYmIG4yKSB7XG4gICAgICAgICAgICBpZiAobjEgPiBuMikge1xuICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobjEgPCBuMikge1xuICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKG4xID09PSBuMikge1xuICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobjEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICRzY29wZS5oYW5kbGVDbGljayA9IChlbnRpdHksIGxhYmVsVHlwZTpzdHJpbmcsIHZhbHVlKSA9PiB7XG4gICAgICAvLyBsb2cuZGVidWcoXCJoYW5kbGVDbGljaywgZW50aXR5OiBcIiwgZW50aXR5LCBcIiBrZXk6IFwiLCBsYWJlbFR5cGUsIFwiIHZhbHVlOiBcIiwgdmFsdWUpO1xuICAgICAgdmFyIGZpbHRlclRleHRTZWN0aW9uID0gbGFiZWxUeXBlICsgXCI9XCIgKyB2YWx1ZS50aXRsZTtcbiAgICAgICRzY29wZS4kZW1pdCgnbGFiZWxGaWx0ZXJVcGRhdGUnLCBmaWx0ZXJUZXh0U2VjdGlvbik7XG4gICAgfTtcblxuICAgICRzY29wZS5sYWJlbENsYXNzID0gY29udGFpbmVyTGFiZWxDbGFzcztcbiAgfV0pO1xuXG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vaW5jbHVkZXMudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4va3ViZXJuZXRlcy90cy9rdWJlcm5ldGVzSGVscGVycy50c1wiLz5cblxubW9kdWxlIFByb2plY3Qge1xuXG4gIGV4cG9ydCB2YXIgY29udGV4dCA9ICcvcHJvamVjdCc7XG4gIGV4cG9ydCB2YXIgaGFzaCA9ICcjJyArIGNvbnRleHQ7XG4gIGV4cG9ydCB2YXIgcGx1Z2luTmFtZSA9ICdQcm9qZWN0JztcbiAgZXhwb3J0IHZhciBsb2c6TG9nZ2luZy5Mb2dnZXIgPSBMb2dnZXIuZ2V0KHBsdWdpbk5hbWUpO1xuXG4gIGV4cG9ydCB2YXIgcGx1Z2luUGF0aCA9ICdwbHVnaW5zL3Byb2plY3QvJztcbiAgZXhwb3J0IHZhciB0ZW1wbGF0ZVBhdGggPSBwbHVnaW5QYXRoICsgJ2h0bWwvJztcblxuXG4gIGV4cG9ydCB2YXIgZ29nc1Jlc3RVUkwgPSBcIi9rdWJlcm5ldGVzL2FwaS9cIiArIEt1YmVybmV0ZXMuZGVmYXVsdEFwaVZlcnNpb24gKyBcIi9wcm94eS9zZXJ2aWNlcy9nb2dzLWh0dHAtc2VydmljZS9hcGkvdjFcIjtcblxuICBleHBvcnQgdmFyIGdvZ3NVc2VyUmVwb1Jlc3RVUkwgPSBnb2dzUmVzdFVSTCArIFwiL3VzZXIvcmVwb3NcIjtcblxufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2t1YmVybmV0ZXMvdHMva3ViZXJuZXRlc0hlbHBlcnMudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwicHJvamVjdEhlbHBlcnMudHNcIi8+XG5cbm1vZHVsZSBQcm9qZWN0IHtcblxuICBleHBvcnQgdmFyIF9tb2R1bGUgPSBhbmd1bGFyLm1vZHVsZShwbHVnaW5OYW1lLCBbS3ViZXJuZXRlcy5wbHVnaW5OYW1lXSk7XG4gIGV4cG9ydCB2YXIgY29udHJvbGxlciA9IFBsdWdpbkhlbHBlcnMuY3JlYXRlQ29udHJvbGxlckZ1bmN0aW9uKF9tb2R1bGUsIHBsdWdpbk5hbWUpO1xuICBleHBvcnQgdmFyIHJvdXRlID0gUGx1Z2luSGVscGVycy5jcmVhdGVSb3V0aW5nRnVuY3Rpb24odGVtcGxhdGVQYXRoKTtcblxuICBfbW9kdWxlLmNvbmZpZyhbJyRyb3V0ZVByb3ZpZGVyJywgKCRyb3V0ZVByb3ZpZGVyOm5nLnJvdXRlLklSb3V0ZVByb3ZpZGVyKSA9PiB7XG4gICAgJHJvdXRlUHJvdmlkZXIud2hlbihVcmxIZWxwZXJzLmpvaW4oY29udGV4dCwgJy9jcmVhdGUnKSwgcm91dGUoJ3Byb2plY3RDcmVhdGUuaHRtbCcsIGZhbHNlKSk7XG4gIH1dKTtcblxuICBfbW9kdWxlLmZhY3RvcnkoJ0ZvcmdlQXBpVVJMJywgWydqb2xva2lhVXJsJywgJ2pvbG9raWEnLCAnJHEnLCAnJHJvb3RTY29wZScsIChqb2xva2lhVXJsOnN0cmluZywgam9sb2tpYTpKb2xva2lhLklKb2xva2lhLCAkcTpuZy5JUVNlcnZpY2UsICRyb290U2NvcGU6bmcuSVJvb3RTY29wZVNlcnZpY2UpID0+IHtcbiAgICByZXR1cm4gXCJrdWJlcm5ldGVzL2FwaS9cIiArIEt1YmVybmV0ZXMuZGVmYXVsdEFwaVZlcnNpb24gKyBcIi9wcm94eS9zZXJ2aWNlcy9mYWJyaWM4LWZvcmdlL2FwaS9mb3JnZVwiO1xuICB9XSk7XG5cblxuICBoYXd0aW9QbHVnaW5Mb2FkZXIuYWRkTW9kdWxlKHBsdWdpbk5hbWUpO1xufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cInByb2plY3RIZWxwZXJzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cInByb2plY3RQbHVnaW4udHNcIi8+XG5cbm1vZHVsZSBQcm9qZWN0IHtcblxuICBleHBvcnQgdmFyIFByb2plY3RDb250cm9sbGVyID0gY29udHJvbGxlcihcIlByb2plY3RDb250cm9sbGVyXCIsXG4gICAgW1wiJHNjb3BlXCIsIFwiS3ViZXJuZXRlc01vZGVsXCIsIFwiJHRlbXBsYXRlQ2FjaGVcIiwgXCIkbG9jYXRpb25cIiwgXCIkcm91dGVQYXJhbXNcIiwgXCIkaHR0cFwiLCBcIiR0aW1lb3V0XCIsIFwiS3ViZXJuZXRlc0FwaVVSTFwiLFxuICAgICAgKCRzY29wZSwgS3ViZXJuZXRlc01vZGVsOkt1YmVybmV0ZXMuS3ViZXJuZXRlc01vZGVsU2VydmljZSxcbiAgICAgICAkdGVtcGxhdGVDYWNoZTpuZy5JVGVtcGxhdGVDYWNoZVNlcnZpY2UsICRsb2NhdGlvbjpuZy5JTG9jYXRpb25TZXJ2aWNlLCAkcm91dGVQYXJhbXMsICRodHRwLCAkdGltZW91dCwgS3ViZXJuZXRlc0FwaVVSTCkgPT4ge1xuXG4gICAgICAgICRzY29wZS5tb2RlbCA9IEt1YmVybmV0ZXNNb2RlbDtcblxuICAgICAgICAkc2NvcGUuZW50aXR5ID0ge1xuICAgICAgICAgIG5hbWU6IFwiXCJcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuJG9uKCckcm91dGVVcGRhdGUnLCAoJGV2ZW50KSA9PiB7XG4gICAgICAgICAgdXBkYXRlRGF0YSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBUT0RPIGFkZCBhY3R1YWwgbG9naW4vcHdkIG9yIE9BdXRoXG4gICAgICAgIHZhciBhdXRob3JpemF0aW9uSGVhZGVyID0gXCJCYXNpYyBUT0RPXCI7XG5cbiAgICAgICAgLy8gVE9ETyB0YWtlIHRoaXMgZnJvbSB0aGUgc2VydmljZSBob3N0IVxuICAgICAgICAkc2NvcGUuY3JlYXRlID0gKCkgPT4ge1xuICAgICAgICAgIHZhciB1cmwgPSBnb2dzVXNlclJlcG9SZXN0VVJMO1xuXG4gICAgICAgICAgY29uc29sZS5sb2coXCJDcmVhdGluZyBwcm9qZWN0IFwiICsgYW5ndWxhci50b0pzb24oJHNjb3BlLmVudGl0eSwgdHJ1ZSkpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiUG9zdGluZyB0byB1cmw6IFwiICsgdXJsKTtcblxuICAgICAgICAgIHZhciBkYXRhID0gJHNjb3BlLmVudGl0eTtcbiAgICAgICAgICB2YXIgY29uZmlnID0ge1xuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAnd2l0aENyZWRlbnRpYWxzJzogdHJ1ZSxcbiAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBhdXRob3JpemF0aW9uSGVhZGVyLFxuICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgICRodHRwLnBvc3QodXJsLCBkYXRhLCBjb25maWcpLlxuICAgICAgICAgICAgc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJwcm9qZWN0IGNyZWF0ZWQhIGdvdCBkYXRhIFwiICsgYW5ndWxhci50b0pzb24oZGF0YSwgdHJ1ZSkpO1xuXG4gICAgICAgICAgICAgIGNyZWF0ZVByb2plY3QoZGF0YSk7XG4gICAgICAgICAgICB9KS5cbiAgICAgICAgICAgIGVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgICBsb2cud2FybihcIkZhaWxlZCB0byBsb2FkIFwiICsgdXJsICsgXCIgXCIgKyBkYXRhICsgXCIgXCIgKyBzdGF0dXMpO1xuICAgICAgICAgICAgICBDb3JlLm5vdGlmaWNhdGlvbignZXJyb3InLCBcIkZhaWxlZCB0byBjcmVhdGUgZ2l0IHJlcG9zaXRvcnkgXCIgKyBuYW1lICsgXCIuIFJldHVybmVkIGNvZGU6IFwiICsgc3RhdHVzICsgXCIgXCIgKyBkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHVwZGF0ZURhdGEoKTtcblxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVQcm9qZWN0KGRhdGEpIHtcbiAgICAgICAgICB2YXIgZnVsbF9uYW1lID0gZGF0YS5mdWxsX25hbWU7XG4gICAgICAgICAgaWYgKGZ1bGxfbmFtZSkge1xuICAgICAgICAgICAgdmFyIGdpdFVybCA9IENvcmUudXJsKGdvZ3NSZXN0VVJMICsgXCIvXCIgKyBmdWxsX25hbWUgKyBcIi5naXRcIik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNyZWF0aW5nIGEgZ2l0IHJlcG8gZm9yIFwiICsgZnVsbF9uYW1lICsgXCIgYXQgOiBcIiArIGdpdFVybCk7XG5cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gVE9ETyBsZXRzIGZvcndhcmQgdG8gdGhlIGNyZWF0ZSBwcm9qZWN0IHdpemFyZC4uLlxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlRGF0YSgpIHtcbiAgICAgICAgICAkc2NvcGUuYnVpbGRzID0gW107XG4gICAgICAgICAgdmFyIHVybCA9IGdvZ3NVc2VyUmVwb1Jlc3RVUkw7XG4gICAgICAgICAgdmFyIGNvbmZpZyA9IHtcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgJ3dpdGhDcmVkZW50aWFscyc6IHRydWUsXG4gICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYXV0aG9yaXphdGlvbkhlYWRlclxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgZGVsZXRlICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uW1wiQWNjZXB0XCJdO1xuICAgICAgICAgICRodHRwLmdldCh1cmwsIGNvbmZpZykuXG4gICAgICAgICAgICBzdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZ290IHJlcG9zOiBcIiArIGFuZ3VsYXIudG9Kc29uKGRhdGEsIHRydWUpKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuYnVpbGRzID0gZGF0YTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAkc2NvcGUuZmV0Y2hlZCA9IHRydWU7XG4gICAgICAgICAgICAgIENvcmUuJGFwcGx5KCRzY29wZSk7XG4gICAgICAgICAgICB9KS5cbiAgICAgICAgICAgIGVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgICAkc2NvcGUuZmV0Y2hlZCA9IHRydWU7XG4gICAgICAgICAgICAgIGxvZy53YXJuKFwiRmFpbGVkIHRvIGxvYWQgXCIgKyB1cmwgKyBcIiBcIiArIGRhdGEgKyBcIiBcIiArIHN0YXR1cyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfV0pO1xufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
angular.module("hawtio-kubernetes-templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("plugins/project/html/projectCreate.html","<div ng-controller=\"Project.ProjectController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <form>\n          <div class=\"form-group\">\n            <label for=\"projectName\">Project name</label>\n            <input type=\"text\" class=\"form-control\" id=\"projectName\" placeholder=\"Enter project name\" ng-model=\"entity.name\">\n          </div>\n          <button type=\"submit\" ng-disabled=\"!entity.name\" ng-click=\"create()\"\n                  class=\"btn btn-primary\">Create Project</button>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/apps.html","<div ng-controller=\"Kubernetes.Apps\">\n  <script type=\"text/ng-template\" id=\"appIconTemplate.html\">\n    <div class=\"ngCellText\" title=\"{{row.entity.$info.description}}\">\n      <a ng-href=\"row.entity.$appUrl\">\n        <img ng-show=\"row.entity.$iconUrl\" class=\"app-icon-small\" ng-src=\"{{row.entity.$iconUrl}}\">\n      </a>\n      <span class=\"app-name\">\n        <a ng-click=\"row.entity.$select()\">\n          {{row.entity.$info.name}}\n        </a>\n      </span>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"appServicesTemplate.html\">\n    <div class=\"ngCellText\">\n      <span ng-repeat=\"service in row.entity.services\">\n          <a ng-href=\"{{service | kubernetesPageLink}}\">\n          <span>{{service.name || service.id}}</span>\n        </a>\n      </span>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"appDeployedTemplate.html\">\n    <div class=\"ngCellText\" title=\"deployed at: {{row.entity.$creationDate | date:\'yyyy-MMM-dd HH:mm:ss Z\'}}\">\n      {{row.entity.$creationDate.relative()}}\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"appReplicationControllerTemplate.html\">\n    <div class=\"ngCellText\">\n      <span ng-repeat=\"controller in row.entity.replicationControllers\">\n        <a ng-href=\"{{controller | kubernetesPageLink}}\">\n          <span>{{controller.id}}</span>\n        </a>\n        &nbsp;\n        <span class=\"btn btn-sm\" ng-click=\"resizeDialog.open(controller)\" title=\"Resize the number of replicas of this controller\">{{controller.replicas}}</span>\n      </span>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"appPodCountsAndLinkTemplate.html\">\n    <div class=\"ngCellText\" title=\"Number of running pods for this controller\">\n      <div ng-repeat=\"podCounters in row.entity.$podCounters track by $index\">\n        <a ng-show=\"podCounters.podsLink\" href=\"{{podCounters.podsLink}}\" title=\"{{podCounters.labelText}}\">\n          <span ng-show=\"podCounters.valid\" class=\"badge badge-success\">{{podCounters.valid}}</span>\n          <span ng-show=\"podCounters.waiting\" class=\"badge\">{{podCounters.waiting}}</span>\n          <span ng-show=\"podCounters.error\" class=\"badge badge-warning\">{{podCounters.error}}</span>\n        </a>\n      </div>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"appDetailTemplate.html\">\n    <div class=\"service-view-rectangle\" ng-repeat=\"view in item.$serviceViews\">\n      <div class=\"service-view-header\">\n        <span class=\"service-view-icon\">\n          <img ng-show=\"item.$iconUrl\" ng-src=\"{{item.$iconUrl}}\">\n        </span>\n        <span class=\"service-view-name\" title=\"{{view.name}}\">{{view.appName}}</span>\n        <span class=\"service-view-address\" title=\"Go to the service detail page\"><a ng-href=\"{{view.service | kubernetesPageLink}}\">{{view.address}}</a></span>\n      </div>\n\n      <div class=\"service-view-detail-rectangle\">\n        <div class=\"service-view-detail-header\">\n          <div class=\"col-md-4\">\n            <div class=\"service-view-detail-deployed\" ng-show=\"view.createdDate\"\n                 title=\"deployed at: {{view.createdDate | date:\'yyyy-MMM-dd HH:mm:ss Z\'}}\">\n              deployed:\n              <span class=\"value\">{{view.createdDate.relative()}}</span>\n            </div>\n          </div>\n          <div class=\"col-md-4\">\n            <div class=\"service-view-detail-pod-template\" ng-show=\"view.controllerId\">\n              pod template:\n              <span class=\"value\" title=\"Go to the replication controller detail page\"><a ng-href=\"{{view.replicationController | kubernetesPageLink}}\">{{view.controllerId}}</a></span>\n            </div>\n          </div>\n          <div class=\"col-md-4 service-view-detail-pod-counts\">\n            <a ng-show=\"view.replicationController\" class=\"value pull-right\"\n               ng-click=\"resizeDialog.open(view.replicationController)\"\n               title=\"Resize the number of pods\">\n              {{view.podCountText}}\n            </a>\n            <span ng-hide=\"view.replicationController\" class=\"value pull-right\">\n              {{view.podCountText}}\n            </span>\n          </div>\n        </div>\n\n        <div class=\"service-view-detail-pod-box\" ng-repeat=\"pod in item.pods track by $index\">\n          <div ng-show=\"podExpanded(pod)\" class=\"service-view-detail-pod-summary-expand\">\n            <table>\n              <tr>\n                <td class=\"service-view-detail-pod-status\">\n                  <i ng-class=\"pod.statusClass\"></i>\n                </td>\n                <td class=\"service-view-detail-pod-connect\" ng-show=\"pod.$jolokiaUrl\" ng-controller=\"Kubernetes.ConnectController\">\n                  <a class=\"clickable\"\n                     ng-click=\"doConnect(pod)\"\n                     title=\"Open a new window and connect to this container\">\n                    <i class=\"fa fa-sign-in\"></i>\n                  </a>\n                </td>\n                <td>\n                  <div class=\"service-view-detail-pod-id\" title=\"{{pod.id}}\">\n                    <span class=\"value\">Pod <a title=\"Go to the pod detail page\" ng-href=\"{{pod | kubernetesPageLink}}\">{{pod.idAbbrev}}</a></span>\n                  </div>\n                  <div class=\"service-view-detail-pod-ip\">\n                    IP:\n                    <span class=\"value\">{{pod.currentState.podIP}}</span>\n                  </div>\n                </td>\n                <td>\n                  <div class=\"service-view-detail-pod-ports\">\n                    ports: <span class=\"value\">{{pod.$containerPorts.join(\", \")}}</span>\n                  </div>\n                  <div class=\"service-view-detail-pod-minion\">\n                    minion:\n                    <span class=\"value\">\n                      <a ng-show=\"pod.currentState.host\" ng-href=\"/kubernetes/hosts/{{pod.currentState.host}}\">{{pod.currentState.host}}</a>\n                    </span>\n                  </div>\n                </td>\n                <td class=\"service-view-detail-pod-expand\" ng-click=\"collapsePod(pod)\">\n                  <i class=\"fa fa-chevron-left\"></i>\n                </td>\n              </tr>\n            </table>\n            <!--\n                                      <div class=\"service-view-detail-pod-status\">\n                                        status:\n                                        <span class=\"value\">{{pod.status}}</span>\n                                      </div>\n            -->\n          </div>\n\n          <div ng-hide=\"podExpanded(pod)\" class=\"service-view-detail-pod-summary\">\n            <table>\n              <tr>\n                <td class=\"service-view-detail-pod-status\">\n                  <i ng-class=\"pod.statusClass\"></i>\n                </td>\n                <td class=\"service-view-detail-pod-connect\" ng-show=\"pod.$jolokiaUrl\" ng-controller=\"Kubernetes.ConnectController\">\n                  <a class=\"clickable\"\n                     ng-click=\"doConnect(pod)\"\n                     title=\"Open a new window and connect to this container\">\n                    <i class=\"fa fa-sign-in\"></i>\n                  </a>\n                </td>\n                <td>\n                  <div class=\"service-view-detail-pod-id\" title=\"{{pod.id}}\">\n                    <span class=\"value\">Pod <a title=\"Go to the pod detail page\" ng-href=\"{{pod | kubernetesPageLink}}\">{{pod.idAbbrev}}</a></span>\n                  </div>\n                  <div class=\"service-view-detail-pod-ip\">\n                    IP:\n                    <span class=\"value\">{{pod.currentState.podIP}}</span>\n                  </div>\n                </td>\n                <td class=\"service-view-detail-pod-expand\" ng-click=\"expandPod(pod)\">\n                  <i class=\"fa fa-chevron-right\"></i>\n                </td>\n              </tr>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  </script>\n\n\n  <div ng-hide=\"appSelectorShow\">\n    <div class=\"row filter-header\">\n      <div class=\"col-md-12\">\n        <span ng-include=\"\'namespaceSelector.html\'\"></span>\n        <span ng-show=\"model.apps.length && !id\">\n          <hawtio-filter ng-model=\"tableConfig.filterOptions.filterText\"\n                         css-class=\"input-xxlarge\"\n                         placeholder=\"Filter apps...\"></hawtio-filter>\n        </span>\n        <button ng-show=\"model.apps.length\"\n                class=\"btn btn-danger pull-right\"\n                ng-disabled=\"!id && tableConfig.selectedItems.length == 0\"\n                ng-click=\"deletePrompt(id || tableConfig.selectedItems)\">\n          <i class=\"fa fa-remove\"></i> Delete\n        </button>\n        <span class=\"pull-right\">&nbsp;</span>\n        <button ng-show=\"model.appFolders.length\"\n                class=\"btn btn-success pull-right\"\n                ng-click=\"appSelectorShow = true\"\n                title=\"Run an application\">\n          <i class=\"fa fa-play-circle\"></i> Run ...\n        </button>\n        <span class=\"pull-right\">&nbsp;</span>\n        <button ng-show=\"id\"\n                class=\"btn btn-primary pull-right\"\n                ng-click=\"id = undefined\"><i class=\"fa fa-list\"></i></button>\n\n        <span class=\"pull-right\">&nbsp;</span>\n        <span ng-hide=\"id\" class=\"pull-right\">\n          <div class=\"btn-group\">\n            <a class=\"btn btn-sm\" ng-disabled=\"mode == \'list\'\" href=\"\" ng-click=\"mode = \'list\'\">\n              <i class=\"fa fa-list\"></i></a>\n            <a class=\"btn btn-sm\" ng-disabled=\"mode == \'detail\'\" href=\"\" ng-click=\"mode = \'detail\'\">\n              <i class=\"fa fa-table\"></i></a>\n          </div>\n        </span>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div ng-hide=\"model.fetched\">\n          <div class=\"align-center\">\n            <i class=\"fa fa-spinner fa-spin\"></i>\n          </div>\n        </div>\n        <div ng-show=\"model.fetched && !id\">\n          <div ng-hide=\"model.apps.length\" class=\"align-center\">\n            <p class=\"alert alert-info\">There are no apps currently available.</p>\n          </div>\n          <div ng-show=\"model.apps.length\">\n            <div ng-show=\"mode == \'list\'\">\n              <table class=\"table table-condensed table-striped\" hawtio-simple-table=\"tableConfig\"></table>\n            </div>\n            <div ng-show=\"mode == \'detail\'\">\n              <div class=\"app-detail\" ng-repeat=\"item in model.apps | filter:tableConfig.filterOptions.filterText\">\n                <ng-include src=\"\'appDetailTemplate.html\'\"/>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div ng-show=\"model.fetched && id\">\n          <div class=\"app-detail\">\n            <ng-include src=\"\'appDetailTemplate.html\'\"/>\n          </div>\n        </div>\n      </div>\n    </div>\n\n  </div>\n  <div ng-show=\"appSelectorShow\">\n    <div class=\"col-md-7\">\n      <div class=\"row\">\n        <hawtio-filter ng-model=\"appSelector.filterText\"\n                       css-class=\"input-xxlarge\"\n                       placeholder=\"Filter apps...\"></hawtio-filter>\n      </div>\n      <div class=\"row\">\n        <ul>\n          <li class=\"no-list profile-selector-folder\" ng-repeat=\"folder in model.appFolders\"\n              ng-show=\"appSelector.showFolder(folder)\">\n            <div class=\"expandable\" ng-class=\"appSelector.isOpen(folder)\">\n              <div title=\"{{folder.path}}\" class=\"title\">\n                <i class=\"expandable-indicator folder\"></i> <span class=\"folder-title\" ng-show=\"folder.path\">{{folder.path.capitalize(true)}}</span><span\n                      class=\"folder-title\" ng-hide=\"folder.path\">Uncategorized</span>\n              </div>\n              <div class=\"expandable-body\">\n                <ul>\n                  <li class=\"no-list profile\" ng-repeat=\"profile in folder.apps\" ng-show=\"appSelector.showApp(profile)\">\n                    <div class=\"profile-selector-item\">\n                      <div class=\"inline-block profile-selector-checkbox\">\n                        <input type=\"checkbox\" ng-model=\"profile.selected\"\n                               ng-change=\"appSelector.updateSelected()\">\n                      </div>\n                      <div class=\"inline-block profile-selector-name\" ng-class=\"appSelector.getSelectedClass(profile)\">\n                        <span class=\"contained c-max\">\n                          <a href=\"\" ng-click=\"appSelector.select(profile, !profile.selected)\"\n                             title=\"Details for {{profile.id}}\">\n                              <img ng-show=\"profile.$iconUrl\" class=\"icon-small-app\" ng-src=\"{{profile.$iconUrl}}\">\n                              <span class=\"app-name\">{{profile.name}}</span>\n                          </a>\n                        </span>\n                      </div>\n                    </div>\n\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </li>\n        </ul>\n      </div>\n    </div>\n    <div class=\"col-md-5\">\n      <div class=\"row\">\n        <button class=\"btn btn-primary pull-right\"\n                ng-click=\"appSelectorShow = undefined\"><i class=\"fa fa-circle-arrow-left\"></i> Back\n        </button>\n        <span class=\"pull-right\">&nbsp;</span>\n        <button class=\"btn pull-right\"\n                ng-disabled=\"!appSelector.selectedApps.length\"\n                title=\"Clears the selected Apps\"\n                ng-click=\"appSelector.clearSelected()\"><i class=\"fa fa-check-empty\"></i> Clear\n        </button>\n        <span class=\"pull-right\">&nbsp;</span>\n        <button class=\"btn btn-success pull-right\"\n                ng-disabled=\"!appSelector.selectedApps.length\"\n                ng-click=\"appSelector.runSelectedApps()\"\n                title=\"Run the selected apps\">\n          <i class=\"fa fa-play-circle\"></i>\n          <ng-pluralize count=\"appSelector.selectedApps.length\"\n                        when=\"{\'0\': \'No App Selected\',\n                                       \'1\': \'Run App\',\n                                       \'other\': \'Run {} Apps\'}\"></ng-pluralize>\n\n        </button>\n      </div>\n      <div class=\"row\">\n<!--\n        <div ng-hide=\"appSelector.selectedApps.length\">\n          <p class=\"alert pull-right\">\n            Please select an App\n          </p>\n        </div>\n-->\n\n        <div ng-show=\"appSelector.selectedApps.length\">\n\n          <ul class=\"zebra-list pull-right\">\n            <li ng-repeat=\"app in appSelector.selectedApps\">\n              <img ng-show=\"app.$iconUrl\" class=\"icon-selected-app\" ng-src=\"{{app.$iconUrl}}\">\n              <strong class=\"green selected-app-name\">{{app.name}}</strong>\n              &nbsp;\n              <i class=\"red clickable fa fa-remove\"\n                 title=\"Remove appp\"\n                 ng-click=\"appSelector.select(app, false)\"></i>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n  <ng-include src=\"\'resizeDialog.html\'\"/>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/build.html","<div ng-controller=\"Kubernetes.BuildController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <a class=\"btn btn-default pull-right\"\n              href=\"/kubernetes/builds\"><i class=\"fa fa-list\"></i></a>\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\" ng-show=\"entity.$configLink\"\n              title=\"View the build configuration\"\n              href=\"{{entity.$configLink}}\">\n        Configuration\n      </a>\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-primary pull-right\" ng-show=\"entity.$logsLink\"\n              title=\"View the build logs\"\n              href=\"{{entity.$logsLink}}\">\n        View Log\n      </a>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div hawtio-object=\"entity\" config=\"config\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/buildConfig.html","<div ng-controller=\"Kubernetes.BuildConfigController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n              href=\"/kubernetes/buildConfigs\"><i class=\"fa fa-list\"></i></a>\n      <span class=\"pull-right\">&nbsp;</span>\n      <button class=\"btn btn-primary pull-right\"\n         title=\"Trigger this build\"\n         ng-disabled=\"!entity.$triggerUrl\"\n         ng-click=\"triggerBuild(entity)\"><i class=\"fa fa-play-circle-o\"></i> Trigger</button>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div hawtio-object=\"entity\" config=\"config\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/buildConfigCreate.html","<div ng-controller=\"Kubernetes.BuildConfigController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n              href=\"/kubernetes/buildConfigs\"><i class=\"fa fa-list\"></i></a>\n      <button class=\"btn btn-primary pull-right\"\n              title=\"Saves changes to this build configuration\"\n              ng-click=\"save()\">\n        Create Build Configuration\n      </button>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div hawtio-form-2=\"config\" entity=\"entity\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/buildConfigEdit.html","<div ng-controller=\"Kubernetes.BuildConfigController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n              href=\"/kubernetes/buildConfigs\"><i class=\"fa fa-list\"></i></a>\n      <button class=\"btn btn-primary pull-right\"\n              title=\"Saves changes to this build configuration\"\n              ng-click=\"save()\">\n        Save\n      </button>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div hawtio-form-2=\"config\" entity=\"entity\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/buildConfigs.html","<div class=\"row\" ng-controller=\"Kubernetes.BuildConfigsController\">\n  <script type=\"text/ng-template\" id=\"buildConfigLinkTemplate.html\">\n    <div class=\"ngCellText\">\n      <a title=\"View details for this build configuration\"\n         href=\"/kubernetes/buildConfigs/{{row.entity.metadata.name}}\">\n<!--\n        <img class=\"app-icon-small\" ng-src=\"{{row.entity.$iconUrl}}\">\n-->\n        {{row.entity.metadata.name}}</a>\n    </div>\n  </script>\n  <div class=\"row\">\n    <div class=\"col-md-12\" ng-show=\"buildConfigs.length\">\n      <span>\n        <hawtio-filter ng-model=\"tableConfig.filterOptions.filterText\"\n                       css-class=\"input-xxlarge\"\n                       placeholder=\"Filter build configurations...\"></hawtio-filter>\n      </span>\n      <button ng-show=\"fetched\"\n              title=\"Delete the selected build configuration\"\n              class=\"btn btn-danger pull-right\"\n              ng-disabled=\"tableConfig.selectedItems.length == 0\"\n              ng-click=\"deletePrompt(tableConfig.selectedItems)\">\n        <i class=\"fa fa-remove\"></i> Delete\n      </button>\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n         title=\"Create a new build configuration\"\n         href=\"/kubernetes/buildConfigCreate\"><i class=\"fa fa-plus\"></i> Create</a>\n      <span class=\"pull-right\">&nbsp;</span>\n      <button class=\"btn btn-primary pull-right\"\n         title=\"Trigger the given build\"\n         ng-disabled=\"tableConfig.selectedItems.length != 1 || !tableConfig.selectedItems[0].$triggerUrl\"\n         ng-click=\"triggerBuild(tableConfig.selectedItems[0])\"><i class=\"fa fa-play-circle-o\"></i> Trigger</button>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div ng-hide=\"buildConfigs.length\" class=\"align-center\">\n          <p class=\"alert alert-info\">There are no build configurations available.</p>\n          <a class=\"btn btn-primary\" href=\"/kubernetes/buildConfigCreate\"><i class=\"fa fa-plus\"></i> Create Build Configuration</a>\n        </div>\n        <div ng-show=\"buildConfigs.length\">\n          <table class=\"table table-condensed table-striped\" ui-if=\"kubernetes.selectedNamespace\"\n                 hawtio-simple-table=\"tableConfig\"></table>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/buildLogs.html","<div ng-controller=\"Kubernetes.BuildLogsController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\" ng-show=\"entity.$viewLink\"\n         title=\"View the build detail\"\n         href=\"{{entity.$viewLink}}\">\n        Build\n      </a>\n      <a class=\"btn btn-primary pull-right\" ng-show=\"entity.$configLink\"\n         title=\"View the build configuration\"\n         href=\"{{entity.$configLink}}\">\n        Configuration\n      </a>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <h3>logs for {{entity.$configId}}</h3>\n\n        <p>\n          <pre>\n            <code>\n              {{logsText}}\n            </code>\n          </pre>\n        </p>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/builds.html","<div class=\"row\" ng-controller=\"Kubernetes.BuildsController\">\n  <script type=\"text/ng-template\" id=\"buildLinkTemplate.html\">\n    <div class=\"ngCellText\">\n      <a title=\"View details for this build: {{row.entity.$name}}\"\n         href=\"/kubernetes/builds/{{row.entity.metadata.name}}\">\n        <!--\n                <img class=\"app-icon-small\" ng-src=\"{{row.entity.$iconUrl}}\">\n        -->\n        {{row.entity.$shortName}}\n      </a>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"buildPodTemplate.html\">\n    <div class=\"ngCellText\">\n      <a title=\"View the pod for this build: {{row.entity.podName}}\" ng-show=\"row.entity.$podLink\"\n         href=\"{{row.entity.$podLink}}\">\n        {{row.entity.$podShortName}}</a>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"buildLogsTemplate.html\">\n    <div class=\"ngCellText\">\n      <a title=\"View the log for this build\" ng-show=\"row.entity.$logsLink\"\n         href=\"{{row.entity.$logsLink}}\">\n        <i class=\"fa fa-file-text-o\"></i>  Logs\n      </a>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"buildRepositoryTemplate.html\">\n    <div class=\"ngCellText\">\n      <a ng-show=\"row.entity.parameters.source.git.uri\" target=\"gitRepository\"\n         title=\"View the git based source repository\"\n         href=\"{{row.entity.parameters.source.git.uri}}\">\n        {{row.entity.parameters.source.git.uri}}\n      </a>\n      <span ng-hide=\"row.entity.parameters.source.git.uri\">\n        {{row.entity.parameters.source.git.uri}}\n      </span>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"buildStatusTemplate.html\">\n    <div class=\"ngCellText\" ng-switch=\"row.entity.status\">\n      <span ng-switch-when=\"New\" class=\"text-primary\">\n        <i class=\"fa fa-spin fa-spinner\"></i> New\n      </span>\n      <span ng-switch-when=\"Pending\" class=\"text-primary\">\n        <i class=\"fa fa-spin fa-spinner\"></i> Pending\n      </span>\n      <span ng-switch-when=\"Running\" class=\"text-primary\">\n        <i class=\"fa fa-spin fa-spinner\"></i> Running\n      </span>\n      <span ng-switch-when=\"Complete\" class=\"text-success\">\n        <i class=\"fa fa-check-circle\"></i> Complete\n      </span>\n      <span ng-switch-when=\"Failed\" class=\"text-danger\">\n        <i class=\"fa fa-exclamation-circle\"></i> Failed\n      </span>\n      <span ng-switch-default class=\"text-warning\">\n        <i class=\"fa fa-exclamation-triangle\"></i> {{row.entity.status}}\n      </span>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"buildTimeTemplate.html\">\n    <div class=\"ngCellText\" title=\"built at: {{row.entity.$creationDate | date : \'h:mm:ss a, EEE MMM yyyy\'}}\">\n      {{row.entity.$creationDate.relative()}}\n    </div>\n  </script>\n  <div class=\"row\">\n    <div class=\"col-md-12\" ng-show=\"builds.length\">\n      <span ng-show=\"!id\">\n        <hawtio-filter ng-model=\"tableConfig.filterOptions.filterText\"\n                       css-class=\"input-xxlarge\"\n                       placeholder=\"Filter builds...\"></hawtio-filter>\n      </span>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div ng-hide=\"builds.length\" class=\"align-center\">\n          <p class=\"alert alert-info\">There are no builds currently running.</p>\n        </div>\n        <div ng-show=\"builds.length\">\n          <table class=\"table table-condensed table-striped\" ui-if=\"kubernetes.selectedNamespace\"\n                 hawtio-simple-table=\"tableConfig\"></table>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/deploymentConfig.html","<div ng-controller=\"Kubernetes.DeploymentConfigController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n              href=\"/kubernetes/deploymentConfigs\"><i class=\"fa fa-list\"></i></a>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div hawtio-object=\"entity\" config=\"config\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/deploymentConfigs.html","<div class=\"row\" ng-controller=\"Kubernetes.DeploymentConfigsController\">\n  <script type=\"text/ng-template\" id=\"deploymentConfigLinkTemplate.html\">\n    <div class=\"ngCellText\">\n      <a title=\"View details for this build configuration\"\n         href=\"/kubernetes/deploymentConfigs/{{row.entity.metadata.name}}\">\n<!--\n        <img class=\"app-icon-small\" ng-src=\"{{row.entity.$iconUrl}}\">\n-->\n        {{row.entity.metadata.name}}</a>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"deploymentConfigLabelTemplate.html\">\n    <div class=\"ngCellText\">\n      <span ng-repeat=\"(key, label) in row.entity.template.controllerTemplate.podTemplate.labels track by $index\"\n            class=\"pod-label badge\"\n            ng-class=\"labelClass(key)\"\n            ng-click=\"clickTag(entity, key, label)\"\n            title=\"{{key}}\">{{label}}</span>\n    </div>\n  </script>\n  <div class=\"row\">\n    <div class=\"col-md-12\" ng-show=\"deploymentConfigs.length\">\n      <span>\n        <hawtio-filter ng-model=\"tableConfig.filterOptions.filterText\"\n                       css-class=\"input-xxlarge\"\n                       placeholder=\"Filter deployment configurations...\"></hawtio-filter>\n      </span>\n      <button ng-show=\"fetched\"\n              title=\"Delete the selected build configuration\"\n              class=\"btn btn-danger pull-right\"\n              ng-disabled=\"tableConfig.selectedItems.length == 0\"\n              ng-click=\"deletePrompt(tableConfig.selectedItems)\">\n        <i class=\"fa fa-remove\"></i> Delete\n      </button>\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n         title=\"Create a new build configuration\"\n         href=\"/kubernetes/buildConfigCreate\"><i class=\"fa fa-plus\"></i> Create</a>\n      <span class=\"pull-right\">&nbsp;</span>\n      <button class=\"btn btn-primary pull-right\"\n         title=\"Trigger the given build\"\n         ng-disabled=\"tableConfig.selectedItems.length != 1 || !tableConfig.selectedItems[0].$triggerUrl\"\n         ng-click=\"triggerBuild(tableConfig.selectedItems[0])\"><i class=\"fa fa-play-circle-o\"></i> Trigger</button>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div ng-hide=\"deploymentConfigs.length\" class=\"align-center\">\n          <p class=\"alert alert-info\">There are no deployment configurations available.</p>\n          <a class=\"btn btn-primary\" href=\"/kubernetes/deploymentConfigCreate\"><i class=\"fa fa-plus\"></i> Create Deployment Configuration</a>\n        </div>\n        <div ng-show=\"deploymentConfigs.length\">\n          <table class=\"table table-condensed table-striped\" ui-if=\"kubernetes.selectedNamespace\"\n                 hawtio-simple-table=\"tableConfig\"></table>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/host.html","<div ng-controller=\"Kubernetes.HostController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n              href=\"/kubernetes/hosts\"><i class=\"fa fa-list\"></i></a>\n      <a class=\"btn btn-primary pull-right\"\n              title=\"View all the pods on this host\"\n              href=\"/kubernetes/pods/?q=host={{item.id}}\">\n        Pods\n      </a>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"model.fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"model.fetched\">\n        <div hawtio-object=\"item\" config=\"itemConfig\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/hosts.html","<div class=\"row\" ng-controller=\"Kubernetes.HostsController\">\n  <script type=\"text/ng-template\" id=\"hostLinkTemplate.html\">\n    <div class=\"ngCellText\">\n      </div>\n  </script>\n  <div class=\"row\">\n    <div class=\"col-md-12\" ng-show=\"model.hosts.length\">\n      <span ng-show=\"!id\">\n        <hawtio-filter ng-model=\"tableConfig.filterOptions.filterText\"\n                       css-class=\"input-xxlarge\"\n                       placeholder=\"Filter hosts...\"></hawtio-filter>\n      </span>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"model.fetched\">\n        <div class=\"align\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"model.fetched\">\n        <div ng-hide=\"model.hosts.length\" class=\"align-center\">\n          <p class=\"alert alert-info\">There are no hosts currently running.</p>\n        </div>\n        <div ng-show=\"model.hosts.length\">\n          <table class=\"table table-condensed table-striped\" ui-if=\"kubernetes.selectedNamespace\"\n                 hawtio-simple-table=\"tableConfig\"></table>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/imageRepositories.html","<div class=\"row\" ng-controller=\"Kubernetes.ImageRepositoriesController\">\n  <script type=\"text/ng-template\" id=\"imageRegistryLabelTemplate.html\">\n    <div class=\"ngCellText\">\n      <span ng-repeat=\"(key, label) in row.entity.tags track by $index\"\n            class=\"pod-label badge\"\n            ng-class=\"labelClass(key)\"\n            ng-click=\"clickTag(entity, key, label)\"\n            title=\"{{key}}\">{{label}}</span>\n    </div>\n  </script>\n  <div class=\"row\">\n    <div class=\"col-md-12\" ng-show=\"imageRepositories.length\">\n      <span>\n        <hawtio-filter ng-model=\"tableConfig.filterOptions.filterText\"\n                       css-class=\"input-xxlarge\"\n                       placeholder=\"Filter image repositories...\"></hawtio-filter>\n      </span>\n      <button ng-show=\"fetched\"\n              title=\"Delete the selected build configuration\"\n              class=\"btn btn-danger pull-right\"\n              ng-disabled=\"tableConfig.selectedItems.length == 0\"\n              ng-click=\"deletePrompt(tableConfig.selectedItems)\">\n        <i class=\"fa fa-remove\"></i> Delete\n      </button>\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n         title=\"Create a new image repository\"\n         href=\"/kubernetes/imageRepositoryCreate\"><i class=\"fa fa-plus\"></i> Create</a>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div ng-hide=\"imageRepositories.length\" class=\"align-center\">\n          <p class=\"alert alert-info\">There are no image repositories available.</p>\n          <a class=\"btn btn-primary\" href=\"/kubernetes/imageRepositoryCreate\"><i class=\"fa fa-plus\"></i> Create Image Repository</a>\n        </div>\n        <div ng-show=\"imageRepositories.length\">\n          <table class=\"table table-condensed table-striped\" ui-if=\"kubernetes.selectedNamespace\"\n                 hawtio-simple-table=\"tableConfig\"></table>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/kubernetesJsonDirective.html","<div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div class=\"fabric-page-header row\">\n\n        <div class=\"pull-left\" ng-show=\"iconURL\">\n          <div class=\"app-logo\">\n            <img ng-src=\"{{iconURL}}\">&nbsp;\n          </div>\n        </div>\n        <div class=\"pull-left\">\n            <h2 class=\"list-inline\"><span class=\"contained c-wide3\">&nbsp;{{displayName || appTitle}}</span></h2>\n        </div>\n        <div class=\"pull-right\">\n          <button class=\"btn btn-success pull-right\"\n                  title=\"Run this application\"\n                  ng-disabled=\"!config || config.error\"\n                  ng-click=\"apply()\">\n            <i class=\"fa fa-play-circle\"></i> Run\n          </button>\n        </div>\n        <div class=\"pull-left col-md-10 profile-summary-wide\">\n          <div\n               ng-show=\"summaryHtml\"\n               ng-bind-html-unsafe=\"summaryHtml\"></div>\n        </div>\n      </div>\n\n    </div>\n  </div>\n\n</div>\n");
$templateCache.put("plugins/kubernetes/html/layoutKubernetes.html","<script type=\"text/ng-template\" id=\"idTemplate.html\">\n  <div class=\"ngCellText\">\n    <a href=\"\" \n       title=\"View details for {{row.entity.id}}\"\n       ng-href=\"{{row.entity | kubernetesPageLink}}\">\n      <img class=\"app-icon-small\" ng-src=\"{{row.entity.$iconUrl}}\">\n      {{row.entity.id}}</a>\n  </div>\n</script>\n<script type=\"text/ng-template\" id=\"selectorTemplate.html\">\n  <div class=\"ngCellText\">\n    <span ng-repeat=\"(name, value) in row.entity.selector track by $index\">\n      <strong>{{name}}</strong>: {{value}}\n    </span>\n  </div>\n</script>\n<script type=\"text/ng-template\" id=\"podCountsAndLinkTemplate.html\">\n  <div class=\"ngCellText\" title=\"Number of running pods for this controller\">\n    <a ng-show=\"row.entity.$podCounters.podsLink\" href=\"{{row.entity.$podCounters.podsLink}}\" title=\"View pods\">\n      <span ng-show=\"row.entity.$podCounters.valid\" class=\"badge badge-success\">{{row.entity.$podCounters.valid}}</span>\n      <span ng-show=\"row.entity.$podCounters.waiting\" class=\"badge\">{{row.entity.$podCounters.waiting}}</span>\n      <span ng-show=\"row.entity.$podCounters.error\" class=\"badge badge-warning\">{{row.entity.$podCounters.error}}</span>\n    </a>\n  </div>\n</script>\n<script type=\"text/ng-template\" id=\"labelTemplate.html\">\n  <div class=\"ngCellText\" ng-init=\"entity=row.entity\" ng-controller=\"Kubernetes.Labels\">\n    <p ng-show=\"data\"><strong>Labels</strong></p>\n    <span ng-repeat=\"label in labels track by $index\"\n          class=\"pod-label badge\"\n          ng-class=\"labelClass(label.key)\"\n          ng-click=\"handleClick(entity, label.key, label)\"\n          title=\"{{label.key}}\">{{label.title}}</span>\n  </div>\n</script>\n<script type=\"text/ng-template\" id=\"hostTemplate.html\">\n  <div class=\"ngCellText\" ng-init=\"host=row.entity.currentState.host\">\n    <span class=\"pod-label badge\"\n          class=\"background-light-grey mouse-pointer\"\n          ng-click=\"$emit(\'labelFilterUpdate\', \'host=\' + host)\">{{host}}</span>\n  </div>\n</script>\n<script type=\"text/ng-template\" id=\"portalAddress.html\">\n  <div class=\"ngCellText\">\n    <a target=\"openService\" href=\"{{row.entity.proxyUrl}}\"\n       ng-show=\"row.entity.portalIP && row.entity.$podCounters.valid\" title=\"Protocol {{row.entity.protocol}}\">\n      {{row.entity.portalIP}}:{{row.entity.port}}\n    </a>\n    <span ng-hide=\"row.entity.portalIP && row.entity.$podCounters.valid\">{{row.entity.portalIP}}:{{row.entity.port}}</span>\n  </div>\n</script>\n<script type=\"text/ng-template\" id=\"iconCellTemplate.html\">\n  <div class=\"ngCellText\">\n    <img class=\"app-icon-small\" ng-src=\"{{row.entity.$iconUrl}}\">\n  </div>\n</script>\n<script type=\"text/ng-template\" id=\"statusTemplate.html\">\n  <div class=\"ngCellText\" ng-init=\"entity=row.entity\" ng-controller=\"Kubernetes.PodStatus\" title=\"Pod {{entity.id}} is {{entity.currentState.status}}\">\n    <!-- in detail view -->\n    <p ng-show=\"data\"><strong>Status: </strong></p>\n    <i class=\"fa\" ng-class=\"statusMapping(entity.currentState.status)\"></i>\n    <span ng-show=\"data\">{{data}}</span>\n    <!-- in table -->\n    <span ng-show=\"entity.$jolokiaUrl\" ng-controller=\"Kubernetes.ConnectController\">\n      <a class=\"clickable\"\n         ng-click=\"doConnect(row.entity)\"\n         title=\"Open a new window and connect to this container\">\n        <i class=\"fa fa-sign-in\"></i>\n      </a>\n    </span>\n  </div>\n</script>\n<script type=\"text/ng-template\" id=\"resizeDialog.html\">\n  <div modal=\"resizeDialog.dialog.show\">\n      <form class=\"form-horizontal\" ng-submit=\"resizeDialog.onOk()\">\n          <div class=\"modal-header\"><h4>Resize {{resizeDialog.controller.id}}</h4></div>\n          <div class=\"modal-body\">\n            <div class=\"control-group\">\n              <label class=\"control-label\" for=\"replicas\">Replica count</label>\n\n              <div class=\"controls\">\n                <input type=\"number\" min=\"0\" id=\"replicas\" ng-model=\"resizeDialog.newReplicas\">\n              </div>\n            </div>\n\n          </div>\n          <div class=\"modal-footer\">\n            <input class=\"btn btn-primary\" type=\"submit\"\n                   ng-disabled=\"resizeDialog.newReplicas === resizeDialog.controller.currentState.replicas\"\n                   value=\"Resize\">\n            <button class=\"btn btn-warning cancel\" type=\"button\" ng-click=\"resizeDialog.close()\">Cancel</button>\n          </div>\n        </form>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"namespaceSelector.html\">\n    namespace: <select ng-model=\"kubernetes.selectedNamespace\" ng-options=\"namespace for namespace in kubernetes.namespaces\" title=\"choose the namespace - which is a selection of resources in kubernetes\">\n    </select>\n  </script>\n<div class=\"row\" ng-controller=\"Kubernetes.TopLevel\">\n  <div class=\"wiki-icon-view\" ng-controller=\"Kubernetes.FileDropController\" nv-file-drop nv-file-over uploader=\"uploader\" over-class=\"ready-drop\">\n    <div class=\"row kubernetes-view\" ng-view></div>\n  </div>\n</div>\n<div ng-controller=\"Kubernetes.ConnectController\">\n  <div hawtio-confirm-dialog=\"connect.dialog.show\" title=\"Connect to {{connect.containerName}}?\"\n       ok-button-text=\"Connect\" on-ok=\"onOK()\">\n    <div class=\"dialog-body\">\n      <p>Please enter the user name and password for {{connect.containerName}}:</p>\n\n      <div class=\"control-group\">\n        <label class=\"control-label\">User name: </label>\n\n        <div class=\"controls\">\n          <input name=\"userName\" ng-model=\"connect.userName\" type=\"text\" autofill>\n        </div>\n      </div>\n      <div class=\"control-group\">\n        <label class=\"control-label\">Password: </label>\n\n        <div class=\"controls\">\n          <input name=\"password\" ng-model=\"connect.password\" type=\"password\" autofill>\n        </div>\n      </div>\n      <div class=\"control-group\">\n        <div class=\"controls\">\n          <label class=\"checkbox\">\n            <input type=\"checkbox\" ng-model=\"connect.saveCredentials\"> Save these credentials as the default\n          </label>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>");
$templateCache.put("plugins/kubernetes/html/overview.html","<div ng-controller=\"Kubernetes.OverviewController\">\n  <script type=\"text/ng-template\" id=\"serviceBoxTemplate.html\">\n    <div class=\"row\">\n      <div class=\"col-md-3 align-left node-body\">{{entity.port}}</div>\n      <div class=\"col-md-9 align-right node-header\" title=\"{{entity.id}}\">{{entity.id}}</div>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"serviceTemplate.html\">\n    <div class=\"kubernetes-overview-row\">\n      <div class=\"kubernetes-overview-cell\">\n        <div id=\"{{service._key}}\"\n             namespace=\"{{service.namespace}}\"\n             connect-to=\"{{service.connectTo}}\"\n             data-type=\"service\"\n             class=\"jsplumb-node kubernetes-node kubernetes-service-node\"\n             ng-controller=\"Kubernetes.OverviewBoxController\"\n             ng-init=\"entity=getEntity(\'service\', \'{{service._key}}\')\"\n             ng-mouseenter=\"mouseEnter($event)\"\n             ng-mouseleave=\"mouseLeave($event)\"\n             ng-click=\"viewDetails(entity, \'services\')\">\n          <div ng-init=\"entity=entity\" ng-include=\"\'serviceBoxTemplate.html\'\"></div>\n        </div>\n      </div>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"hostTemplate.html\">\n    <div class=\"kubernetes-overview-row\">\n      <div class=\"kubernetes-overview-cell\">\n        <div id=\"{{host.id}}\"\n             data-type=\"host\"\n             class=\"kubernetes-host-container\">\n          <h5><a ng-href=\"/kubernetes/hosts/{{host.id}}\">{{host.id}}</a></h5>\n          <div class=\"pod-container\"></div>\n        </div>\n      </div>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"podTemplate.html\">\n    <div id=\"{{pod._key}}\"\n         data-type=\"pod\"\n         title=\"Pod ID: {{pod.id}}\"\n         class=\"jsplumb-node kubernetes-node kubernetes-pod-node\"\n         ng-mouseenter=\"mouseEnter($event)\"\n         ng-mouseleave=\"mouseLeave($event)\"\n         ng-controller=\"Kubernetes.OverviewBoxController\"\n         ng-init=\"entity=getEntity(\'pod\', \'{{pod._key}}\')\"\n         ng-click=\"viewDetails(entity, \'pods\')\">\n      <div class=\"css-table\">\n        <div class=\"css-table-row\">\n          <div class=\"pod-status-cell css-table-cell\">\n            <span ng-init=\"row={ entity: entity }\" ng-include=\"\'statusTemplate.html\'\"></span>\n          </div>\n          <div class=\"pod-label-cell css-table-cell\">\n            <span ng-init=\"row={ entity: entity }\" ng-include=\"\'labelTemplate.html\'\"></span>\n          </div>\n        </div>\n      </div>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"replicationControllerTemplate.html\">\n    <div class=\"kubernetes-overview-row\">\n      <div class=\"kubernetes-overview-cell\">\n        <div\n            id=\"{{replicationController._key}}\"\n            title=\"{{replicationController.id}}\"\n            data-type=\"replicationController\"\n            data-placement=\"top\"\n            connect-to=\"{{replicationController.connectTo}}\"\n            ng-mouseenter=\"mouseEnter($event)\"\n            ng-mouseleave=\"mouseLeave($event)\"\n            class=\"jsplumb-node kubernetes-replicationController-node kubernetes-node\"\n            ng-controller=\"Kubernetes.OverviewBoxController\"\n            ng-init=\"entity=getEntity(\'replicationController\', \'{{replicationController._key}}\')\"\n            ng-click=\"viewDetails(entity, \'replicationControllers\')\">\n            <img class=\"app-icon-medium\" ng-src=\"{{replicationController.$iconUrl}}\">\n        </div>\n      </div>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"overviewTemplate.html\">\n    <div class=\"kubernetes-overview\"\n         hawtio-jsplumb\n         draggable=\"false\"\n         layout=\"false\"\n         node-sep=\"50\"\n         rank-sep=\"300\">\n      <div class=\"kubernetes-overview-row\">\n        <div class=\"kubernetes-overview-cell\">\n          <div class=\"kubernetes-overview services\">\n            <h6>Services</h6>\n          </div>\n        </div>\n        <div class=\"kubernetes-overview-cell\">\n          <div class=\"kubernetes-overview hosts\">\n            <h6>Hosts and Pods</h6>\n          </div>\n        </div>\n        <div class=\"kubernetes-overview-cell\">\n          <div class=\"kubernetes-overview replicationControllers\">\n            <h6>Replication controllers</h6>\n          </div>\n        </div>\n      </div>\n   </div>\n  </script>\n  <div class=\"align-center\" ng-include=\"\'namespaceSelector.html\'\"></div>\n  <kubernetes-overview ui-if=\"kubernetes.selectedNamespace\"></kubernetes-overview>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/pipelines.html","<div class=\"row\" ng-controller=\"Kubernetes.PipelinesController\">\n  <script type=\"text/ng-template\" id=\"hostLinkTemplate.html\">\n    <div class=\"ngCellText\">\n    </div>\n  </script>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <span ng-show=\"pipelines.length\">\n        <hawtio-filter ng-model=\"filterText\"\n                       css-class=\"input-xxlarge\"\n                       placeholder=\"Filter builds...\"></hawtio-filter>\n      </span>\n      <a class=\"btn btn-default pull-right\"\n         title=\"Create a new project\"\n         ng-show=\"forgeEnabled\"\n         href=\"/forge/command/project-new\"><i class=\"fa fa-plus\"></i> Create Project</a>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div ng-hide=\"pipelines.length\" class=\"align-center\">\n          <p class=\"alert alert-info\">There are no build pipelines available.</p>\n          <a class=\"btn btn-primary\" href=\"/kubernetes/buildConfig\">Create Build Configuration</a>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div ng-show=\"fetched && pipelines.length\">\n    <div ng-repeat=\"pipeline in pipelines | filter:filterText\">\n      <div class=\"row\">\n\n        <div class=\"pipeline-row\">\n          <div ng-repeat=\"step in pipeline.triggersSteps\">\n            <div ng-switch=\"step.buildConfig.kind\">\n              <div ng-switch-default=\"\">\n                <div class=\"col-md-1\" ng-hide=\"$first\">\n                  <div class=\"pipeline-arrow\">\n                    <i class=\"fa fa-long-arrow-right\"></i>\n                  </div>\n                </div>\n\n                <div class=\"col-md-2 pipeline-build\" title=\"Build configuration\">\n                  <span class=\"pipeline-build-details\">\n                    <a title=\"View details for this build configuration\"\n                       href=\"/kubernetes/buildConfigs/{{step.buildConfig.metadata.name}}\">\n                      <i class=\"fa fa-cog\"></i>\n                      {{step.buildConfig.metadata.name}}\n                    </a>\n                  </span>\n                  &nbsp;&nbsp;&nbsp;\n                  <span class=\"pipeline-last-build\" ng-show=\"step.buildConfig.$lastBuild\">\n                    <a href=\"{{step.buildConfig.$lastBuild.$viewLink}}\" title=\"view this build\">\n                      <i class=\"fa fa-info\"></i>\n                      build\n                    </a>\n                  </span>\n\n                  <div class=\"ngCellText\" class=\"pipeline-last-build-time\"\n                       title=\"last build was at: {{step.buildConfig.$lastBuild.$creationDate | date : \'h:mm:ss a, EEE MMM yyyy\'}}\">\n                    <div ng-switch=\"step.buildConfig.$lastBuild.status\">\n                        <span ng-switch-when=\"New\" class=\"text-primary\">\n                          <i class=\"fa fa-spin fa-spinner\"></i> new: {{step.buildConfig.$lastBuild.$creationDate.relative()}}\n                        </span>\n                        <span ng-switch-when=\"Pending\" class=\"text-primary\">\n                          <i class=\"fa fa-spin fa-spinner\"></i> pending: {{step.buildConfig.$lastBuild.$creationDate.relative()}}\n                        </span>\n                        <span ng-switch-when=\"Running\" class=\"text-primary\">\n                          <i class=\"fa fa-spin fa-spinner\"></i> running {{step.buildConfig.$lastBuild.$creationDate.relative()}}\n                        </span>\n                        <span ng-switch-when=\"Complete\" class=\"text-success\">\n                          <i class=\"fa fa-check-circle\"></i> completed {{step.buildConfig.$lastBuild.$creationDate.relative()}}\n                        </span>\n                        <span ng-switch-when=\"Failed\" class=\"text-danger\">\n                          <i class=\"fa fa-exclamation-circle\"></i> failed {{step.buildConfig.$lastBuild.$creationDate.relative()}}\n                        </span>\n                        <span ng-switch-default class=\"text-warning\">\n                          <i class=\"fa fa-exclamation-triangle\"></i> {{step.buildConfig.$lastBuild.status}}: {{step.buildConfig.$lastBuild.$creationDate.relative()}}\n                        </span>\n                    </div>\n                  </div>\n                  <div class=\"pipeline-last-build-logs\">\n                    <a href=\"{{step.buildConfig.$lastBuild.$logsLink}}\" title=\"view the logs of this build\">\n                      <i class=\"fa fa-file-text-o\"></i>\n                      logs\n                    </a>\n                  </div>\n                </div>\n              </div>\n              <div ng-switch-when=\"DeploymentConfig\">\n                <div class=\"col-md-1\">\n                  <div class=\"pipeline-arrow\">\n                    <i class=\"fa fa-long-arrow-right\"></i>\n                  </div>\n                </div>\n\n                <div class=\"col-md-2 pipeline-deploy\" title=\"Deployment Configuration\">\n                  <div class=\"pipeline-build-details\">\n                    <a title=\"View details for this deployment configuration\"\n                       href=\"/kubernetes/deploymentConfigs/{{step.buildConfig.metadata.name}}\">\n                      <i class=\"fa fa-cogs\"></i>\n                      {{step.buildConfig.metadata.name}}\n                    </a>\n                  </div>\n                  <div class=\"pipeline-deploy-pods\">\n                    <div class=\"pipeline-pod-counts\" ng-show=\"step.$podCounters\">pods:\n                      <a ng-show=\"step.$podCounters.podsLink\" target=\"pods\" href=\"{{step.$podCounters.podsLink}}\"\n                         title=\"View pods for this deployment\">\n                        <span class=\"badge badge-success\">{{step.$podCounters.valid}}</span>\n                        <span ng-show=\"step.$podCounters.waiting\" class=\"badge\">{{step.$podCounters.waiting}}</span>\n                        <span ng-show=\"step.$podCounters.error\"\n                              class=\"badge badge-warning\">{{step.$podCounters.error}}</span>\n                      </a>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/pod.html","<div ng-controller=\"Kubernetes.PodController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <button class=\"btn btn-danger pull-right\"\n              title=\"Delete this Pod\"\n              ng-click=\"deleteEntity()\">\n        <i class=\"fa fa-remove\"></i> Delete\n      </button>\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n              href=\"/kubernetes/pods?namespace={{item.namespace}}\"><i class=\"fa fa-list\"></i></a>\n      <div ng-show=\"item.$jolokiaUrl\" ng-controller=\"Kubernetes.ConnectController\">\n        <span class=\"pull-right\">&nbsp;</span>\n        <a class=\"btn btn-primary pull-right\"\n           ng-click=\"doConnect(item)\"\n           title=\"Open a new window and connect to this container\">\n          <i class=\"fa fa-sign-in\"></i> Connect\n        </a>\n      </div>\n      <button ng-show=\"hasService(\'kibana-service\')\"\n              class=\"btn btn-primary pull-right\"\n              title=\"View the logs for this pod\"\n              ng-click=\"openLogs()\">\n        <i class=\"fa fa-file-text-o\"></i> Logs\n      </button>\n      <span ng-show=\"hasService(\'kibana-service\')\" class=\"pull-right\">&nbsp;</span>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"model.fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"model.fetched\">\n        <div hawtio-object=\"item\" config=\"itemConfig\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/podCreate.html","<div ng-controller=\"Kubernetes.PodEditController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n         title=\"Go back to viewing all the pods\"\n              href=\"/kubernetes/pods\"><i class=\"fa fa-list\"></i></a>\n      <button class=\"btn btn-primary pull-right\"\n              title=\"Create a new pod\"\n              ng-click=\"save()\">\n        Create Pod\n      </button>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div hawtio-form-2=\"config\" entity=\"entity\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/podEdit.html","<div ng-controller=\"Kubernetes.PodEditController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n         title=\"Go back to viewing all the pods\"\n              href=\"/kubernetes/pods\"><i class=\"fa fa-list\"></i></a>\n      <button class=\"btn btn-primary pull-right\"\n              title=\"Saves changes to this pod\"\n              ng-click=\"save()\">\n        Save\n      </button>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div hawtio-form-2=\"config\" entity=\"entity\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/pods.html","<div class=\"row\" ng-controller=\"Kubernetes.Pods\">\n  <script type=\"text/ng-template\" id=\"imageTemplate.html\">\n    <div class=\"ngCellText\">\n      <!-- in table -->\n      <span ng-hide=\"data\">\n        <span ng-repeat=\"container in row.entity.desiredState.manifest.containers\">\n          <a target=\"dockerRegistry\" href=\"https://registry.hub.docker.com/u/{{container.image}}\" title=\"{{container.name}}\">{{container.image}}</a>\n        </span>\n      </span>\n      <!-- in detail view -->\n      <span ng-show=\"data\">\n        <a target=\"dockerRegistry\" ng-href=\"https://registry.hub.docker.com/u/{{data}}\" title=\"{{data}}\">{{data}}</a>\n      </span>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"configDetail.html\">\n    <pre>{{data}}</pre>\n  </script>\n  <script type=\"text/ng-template\" id=\"envItemTemplate.html\">\n    <span ng-controller=\"Kubernetes.EnvItem\">\n      <span class=\"blue\">{{key}}</span>=<span class=\"green\">{{value}}</span>\n    </span>\n  </script>\n  <div class=\"row filter-header\">\n    <div class=\"col-md-12\" ng-hide=\"model.pods.length\">\n      <span ng-include=\"\'namespaceSelector.html\'\"></span>\n      <p></p>\n    </div>\n    <div class=\"col-md-12\" ng-show=\"model.pods.length\">\n      <span ng-include=\"\'namespaceSelector.html\'\"></span>\n      <span ng-show=\"!id\">\n        <hawtio-filter ng-model=\"tableConfig.filterOptions.filterText\"\n                       css-class=\"input-xxlarge\"\n                       placeholder=\"Filter pods...\"></hawtio-filter>\n      </span>\n      <button ng-show=\"model.fetched\"\n              class=\"btn btn-danger pull-right\"\n              ng-disabled=\"!id && tableConfig.selectedItems.length == 0\"\n              ng-click=\"deletePrompt(id || tableConfig.selectedItems)\">\n        <i class=\"fa fa-remove\"></i> Delete\n      </button>\n      <span class=\"pull-right\">&nbsp;</span>\n      <button ng-show=\"id\"\n              class=\"btn btn-primary pull-right\"\n              ng-click=\"id = undefined\"><i class=\"fa fa-list\"></i></button>\n      <span class=\"pull-right\">&nbsp;</span>\n      <button ng-show=\"hasService(\'kibana-service\')\"\n              class=\"btn btn-primary pull-right\"\n              title=\"View the logs for the selected pods\"\n              ng-disabled=\"!id && tableConfig.selectedItems.length == 0\"\n              ng-click=\"openLogs()\">\n        <i class=\"fa fa-file-text-o\"></i> Logs\n      </button>\n      <span ng-show=\"hasService(\'kibana-service\')\" class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n         title=\"Create a new pod\"\n              href=\"/kubernetes/namespace/{{namespace}}/podCreate\"><i class=\"fa fa-plus\"></i> Create</a>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"model.fetched\">\n        <div class=\"align\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"model.fetched\">\n        <div ng-hide=\"model.pods.length\" class=\"align-center\">\n          <p class=\"alert alert-info\">There are no pods currently running.</p>\n        </div>\n        <div ng-show=\"model.pods.length\">\n          <table class=\"table table-condensed table-striped\" ui-if=\"kubernetes.selectedNamespace\"\n                 hawtio-simple-table=\"tableConfig\"></table>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/replicationController.html","<div ng-controller=\"Kubernetes.ReplicationControllerController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <button class=\"btn btn-danger pull-right\"\n              title=\"Delete this ReplicationController\"\n              ng-click=\"deleteEntity()\">\n        <i class=\"fa fa-remove\"></i> Delete\n      </button>\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n         title=\"Return to table of controllers\"\n              href=\"/kubernetes/replicationControllers?namespace={{item.namespace}}\"><i class=\"fa fa-list\"></i></a>\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-primary pull-right\"\n              ng-click=\"resizeDialog.open(item)\"\n              title=\"Resize the number of replicas of this controller\">Resize</a>\n      <span class=\"pull-right\">&nbsp;</span>\n      <span class=\"pull-right controller-pod-counts\" ng-show=\"item.$podCounters\">Pods:\n        <a ng-show=\"item.$podCounters.podsLink\" href=\"{{item.$podCounters.podsLink}}\" title=\"View pods\">\n          <span ng-show=\"item.$podCounters.valid\" class=\"badge badge-success\">{{item.$podCounters.valid}}</span>\n          <span ng-show=\"item.$podCounters.waiting\" class=\"badge\">{{item.$podCounters.waiting}}</span>\n          <span ng-show=\"item.$podCounters.error\" class=\"badge badge-warning\">{{item.$podCounters.error}}</span>\n        </a>\n      </span>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"model.fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"model.fetched\">\n        <div hawtio-object=\"item\" config=\"itemConfig\"></div>\n      </div>\n    </div>\n  </div>\n  <ng-include src=\"\'resizeDialog.html\'\"/>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/replicationControllerCreate.html","<div ng-controller=\"Kubernetes.ReplicationControllerEditController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n         title=\"Go back to viewing all the replication controllers\"\n              href=\"/kubernetes/replicationControllers\"><i class=\"fa fa-list\"></i></a>\n      <button class=\"btn btn-primary pull-right\"\n              title=\"Create a new controller\"\n              ng-click=\"save()\">\n        Create Controller\n      </button>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div hawtio-form-2=\"config\" entity=\"entity\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/replicationControllerEdit.html","<div ng-controller=\"Kubernetes.ReplicationControllerEditController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n         title=\"Go back to viewing all the replication controllers\"\n              href=\"/kubernetes/replicationControllers\"><i class=\"fa fa-list\"></i></a>\n      <button class=\"btn btn-primary pull-right\"\n              title=\"Saves changes to the controller\"\n              ng-click=\"save()\">\n        Save\n      </button>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div hawtio-form-2=\"config\" entity=\"entity\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/replicationControllers.html","<div ng-controller=\"Kubernetes.ReplicationControllers\">\n  <script type=\"text/ng-template\" id=\"currentReplicasTemplate.html\">\n    <div class=\"ngCellText\" title=\"Number of running pods for this controller\">\n      <a ng-show=\"row.entity.podsLink\" href=\"{{row.entity.podsLink}}\">\n        <span class=\"badge {{row.entity.currentState.replicas > 0 ? \'badge-success\' : \'badge-warning\'}}\">{{row.entity.currentState.replicas}}</span>\n      </a>\n      <span ng-hide=\"row.entity.podsLink\" class=\"badge\">{{row.entity.currentState.replicas}}</span>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"desiredReplicas.html\">\n    <div class=\"ngCellText\">\n      <span class=\"btn btn-sm\" ng-click=\"$parent.$parent.resizeDialog.open(row.entity)\" title=\"Edit the number of replicas of this controller\">{{row.entity.desiredState.replicas}}</span>\n    </div>\n  </script>\n  <div class=\"row filter-header\">\n    <div class=\"col-md-12\" ng-hide=\"model.replicationControllers.length\">\n      <span ng-include=\"\'namespaceSelector.html\'\"></span>\n    </div>\n    <div class=\"col-md-12\" ng-show=\"model.replicationControllers.length\">\n      <span ng-include=\"\'namespaceSelector.html\'\"></span>\n      <span ng-show=\"!id\">\n        <hawtio-filter ng-model=\"tableConfig.filterOptions.filterText\"\n                       css-class=\"input-xxlarge\"\n                       placeholder=\"Filter replication controllers...\"\n                       save-as=\"kubernetes-replication-controllers-text-filter\"></hawtio-filter>\n      </span>\n      <button ng-show=\"model.fetched\"\n              class=\"btn btn-danger pull-right\"\n              ng-disabled=\"!id && tableConfig.selectedItems.length == 0\"\n              ng-click=\"deletePrompt(id || tableConfig.selectedItems)\">\n        <i class=\"fa fa-remove\"></i> Delete\n      </button>\n      <span class=\"pull-right\">&nbsp;</span>\n      <button ng-show=\"id\"\n              class=\"btn btn-primary pull-right\"\n              ng-click=\"id = undefined\"><i class=\"fa fa-list\"></i></button>\n      <span ng-show=\"id\" class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n         title=\"Create a new replication controller\"\n              href=\"/kubernetes/namespace/{{namespace}}/replicationControllerCreate\"><i class=\"fa fa-plus\"></i> Create</a>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"model.fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"model.fetched\">\n        <div ng-hide=\"model.replicationControllers.length\" class=\"align-center\">\n          <p class=\"alert alert-info\">There are no replication controllers currently available.</p>\n        </div>\n        <div ng-show=\"model.replicationControllers.length\">\n          <table class=\"table table-condensed table-striped\"\n                 hawtio-simple-table=\"tableConfig\"></table>\n        </div>\n      </div>\n    </div>\n  </div>\n  <ng-include src=\"\'resizeDialog.html\'\"/>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/service.html","<div ng-controller=\"Kubernetes.ServiceController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <button class=\"btn btn-danger pull-right\"\n              title=\"Delete this Service\"\n              ng-click=\"deleteEntity()\">\n        <i class=\"fa fa-remove\"></i> Delete\n      </button>\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n              href=\"/kubernetes/services?namespace={{item.namespace}}\"><i class=\"fa fa-list\"></i></a>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"model.fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"model.fetched\">\n        <div hawtio-object=\"item\" config=\"itemConfig\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/serviceCreate.html","<div ng-controller=\"Kubernetes.ServiceEditController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n         title=\"Go back to viewing all the services\"\n              href=\"/kubernetes/services\"><i class=\"fa fa-list\"></i></a>\n      <button class=\"btn btn-primary pull-right\"\n              title=\"Create a new service\"\n              ng-click=\"save()\">\n        Create Service\n      </button>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div hawtio-form-2=\"config\" entity=\"entity\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/serviceEdit.html","<div ng-controller=\"Kubernetes.ServiceEditController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n         title=\"Go back to viewing all the services\"\n              href=\"/kubernetes/services\"><i class=\"fa fa-list\"></i></a>\n      <button class=\"btn btn-primary pull-right\"\n              title=\"Save changes to this service\"\n              ng-click=\"save()\">\n        Save\n      </button>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"fetched\">\n        <div hawtio-form-2=\"config\" entity=\"entity\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/kubernetes/html/services.html","<div ng-controller=\"Kubernetes.Services\">\n  <div class=\"row filter-header\">\n    <div class=\"col-md-12\" ng-hide=\"model.services.length\">\n      <span ng-include=\"\'namespaceSelector.html\'\"></span>\n    </div>\n    <div class=\"col-md-12\" ng-show=\"model.services.length\">\n      <span ng-include=\"\'namespaceSelector.html\'\"></span>\n      <span ng-show=\"!id\">\n        <hawtio-filter ng-model=\"tableConfig.filterOptions.filterText\"\n                       css-class=\"input-xxlarge\"\n                       placeholder=\"Filter services...\"\n                       save-as=\"kubernetes-services-text-filter\"></hawtio-filter>\n      </span>\n      <button ng-show=\"model.fetched\"\n              class=\"btn btn-danger pull-right\"\n              ng-disabled=\"!id && tableConfig.selectedItems.length == 0\"\n              ng-click=\"deletePrompt(id || tableConfig.selectedItems)\">\n        <i class=\"fa fa-remove\"></i> Delete\n      </button>\n      <span class=\"pull-right\">&nbsp;</span>\n      <button ng-show=\"id\"\n              class=\"btn btn-primary pull-right\"\n              ng-click=\"id = undefined\"><i class=\"fa fa-list\"></i></button>\n      <span ng-show=\"id\" class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n         title=\"Create a new service\"\n              href=\"/kubernetes/namespace/{{namespace}}/serviceCreate\"><i class=\"fa fa-plus\"></i> Create</a>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"model.fetched\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      <div ng-show=\"model.fetched\">\n        <div ng-hide=\"model.services.length\" class=\"align-center\">\n          <p class=\"alert alert-info\">There are no services currently available.</p>\n        </div>\n        <div ng-show=\"model.services.length\">\n          <table class=\"table table-condensed table-striped\" ui-if=\"kubernetes.selectedNamespace\"\n                 hawtio-simple-table=\"tableConfig\"></table>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");}]); hawtioPluginLoader.addModule("hawtio-kubernetes-templates");